/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/font.ts":
/*!*********************!*\
  !*** ./src/font.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TexturePage": () => (/* binding */ TexturePage),
/* harmony export */   "Font": () => (/* binding */ Font)
/* harmony export */ });
/* harmony import */ var _imgui_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imgui_impl */ "./src/imgui_impl.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/index.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var FONT_SPACE = 3;
var TexturePage = /** @class */ (function () {
    function TexturePage(tex_size, font) {
        this.Dirty = false;
        var font_size = font.FontSize;
        this.FontName = font_size + "px " + font.FontName;
        this.Scale = _index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.GetCanvasScale();
        this.TextureSize = tex_size;
        this.FontSize = font_size;
        this.SpaceX = font.SpaceX;
        this.FontImageSize = Math.ceil((font_size + FONT_SPACE) * this.Scale);
        this.PixelData = new Uint16Array(tex_size * tex_size);
        this.CharsPerRow = Math.floor(tex_size / this.FontImageSize);
        this.MaxCharCount = this.CharsPerRow * this.CharsPerRow;
        this.Current = 0;
        var gl = _index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.gl;
        this.Texure = new _imgui_impl__WEBPACK_IMPORTED_MODULE_0__.Texture();
        this.Texure._srcType = gl.UNSIGNED_SHORT_4_4_4_4;
        if (this.Scale == window.devicePixelRatio) {
            this.Texure._minFilter = gl.NEAREST;
            this.Texure._magFilter = gl.NEAREST;
        }
        this.Texure.Update(this.PixelData, { width: tex_size, height: tex_size });
    }
    TexturePage.prototype.Destroy = function () {
        this.Texure.Destroy();
    };
    TexturePage.prototype.Create = function (glyph, ctx) {
        var image_size = this.FontImageSize;
        var cur = this.Current;
        this.Current++;
        var ix = cur % this.CharsPerRow;
        var iy = Math.floor(cur / this.CharsPerRow);
        var px = ix * (image_size);
        var py = iy * (image_size);
        var text = String.fromCharCode(glyph.Char);
        glyph.TextureID = this.Texure._texture;
        ctx.save();
        ctx.canvas.width = image_size;
        ctx.canvas.height = image_size;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';
        ctx.font = this.FontName;
        ctx.clearRect(0, 0, image_size, image_size);
        ctx.scale(this.Scale, this.Scale);
        ctx.fillText(text, 1, 1);
        //ctx.strokeRect(0,0,image_size-FONT_SPACE, image_size-FONT_SPACE);
        var m = ctx.measureText(text);
        ctx.restore();
        var img_data = ctx.getImageData(0, 0, image_size, image_size);
        var img_data_u32 = new Uint32Array(img_data.data.buffer);
        for (var y = 0; y < image_size; y++) {
            for (var x = 0; x < image_size; x++) {
                this.PixelData[(py + y) * this.TextureSize + px + x] = 0xFFF0 |
                    (((img_data_u32[y * image_size + x] >> 24) & 0xFF) >> 4);
            }
        }
        glyph.X0 = 0;
        glyph.Y0 = 0;
        glyph.X1 = m.width + 2;
        glyph.Y1 = this.FontSize;
        glyph.AdvanceX = (m.width) + (glyph.Char < 256 ? this.SpaceX[0] : this.SpaceX[1]);
        var uv_scale = 1.0 / (this.TextureSize);
        glyph.U0 = (px) * uv_scale;
        glyph.V0 = (py) * uv_scale;
        glyph.U1 = (px + (m.width + 2) * this.Scale) * uv_scale;
        glyph.V1 = (py + this.FontSize * this.Scale) * uv_scale;
        this.Dirty = true;
        return glyph;
    };
    TexturePage.prototype.UpdateTexture = function () {
        this.Dirty = false;
        console.log(this.FontName + " UpdateTexture");
        this.Texure.Update(this.PixelData);
    };
    Object.defineProperty(TexturePage.prototype, "IsAvailable", {
        get: function () { return this.Current < this.MaxCharCount; },
        enumerable: false,
        configurable: true
    });
    return TexturePage;
}());

var Font = /** @class */ (function () {
    function Font() {
        this.texturePage = [];
        var canvas = document.createElement("canvas");
        canvas.style.backgroundColor = "transparent";
        canvas.style.position = 'absolute';
        canvas.style.top = '0px';
        canvas.style.left = '0px';
        canvas.style.borderWidth = '0';
        canvas.style.borderStyle = 'none';
        canvas.style.pointerEvents = 'none';
        this.canvas = canvas;
        this.ctx = canvas.getContext("2d");
    }
    Font.prototype.Destroy = function () {
        this.texturePage.forEach(function (page) {
            page.Destroy();
        });
        this.texturePage = [];
    };
    Font.prototype.Create = function (glyph, font) {
        var page = null;
        for (var _i = 0, _a = this.texturePage; _i < _a.length; _i++) {
            page = _a[_i];
            if (page.FontSize == font.FontSize && page.IsAvailable) {
                break;
            }
        }
        if (page == null) {
            page = new TexturePage(512, font);
            this.texturePage.push(page);
        }
        this.canvas.width = font.FontSize;
        this.canvas.height = font.FontSize;
        return page.Create(glyph, this.ctx);
    };
    Font.prototype.UpdateTexture = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.texturePage.forEach(function (page) {
                    if (page.Dirty) {
                        page.UpdateTexture();
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    return Font;
}());



/***/ }),

/***/ "./src/imgui.ts":
/*!**********************!*\
  !*** ./src/imgui.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bind": () => (/* reexport module object */ _bind_imgui__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "bind": () => (/* binding */ bind),
/* harmony export */   "isMobile": () => (/* binding */ isMobile),
/* harmony export */   "VERSION": () => (/* binding */ IMGUI_VERSION),
/* harmony export */   "IMGUI_VERSION": () => (/* binding */ IMGUI_VERSION),
/* harmony export */   "VERSION_NUM": () => (/* binding */ IMGUI_VERSION_NUM),
/* harmony export */   "IMGUI_VERSION_NUM": () => (/* binding */ IMGUI_VERSION_NUM),
/* harmony export */   "CHECKVERSION": () => (/* binding */ IMGUI_CHECKVERSION),
/* harmony export */   "IMGUI_CHECKVERSION": () => (/* binding */ IMGUI_CHECKVERSION),
/* harmony export */   "IMGUI_HAS_TABLE": () => (/* binding */ IMGUI_HAS_TABLE),
/* harmony export */   "ASSERT": () => (/* binding */ ASSERT),
/* harmony export */   "IM_ASSERT": () => (/* binding */ IM_ASSERT),
/* harmony export */   "ARRAYSIZE": () => (/* binding */ IM_ARRAYSIZE),
/* harmony export */   "IM_ARRAYSIZE": () => (/* binding */ IM_ARRAYSIZE),
/* harmony export */   "StringBuffer": () => (/* binding */ ImStringBuffer),
/* harmony export */   "ImStringBuffer": () => (/* binding */ ImStringBuffer),
/* harmony export */   "WindowFlags": () => (/* binding */ ImGuiWindowFlags),
/* harmony export */   "ImGuiWindowFlags": () => (/* binding */ ImGuiWindowFlags),
/* harmony export */   "InputTextFlags": () => (/* binding */ ImGuiInputTextFlags),
/* harmony export */   "ImGuiInputTextFlags": () => (/* binding */ ImGuiInputTextFlags),
/* harmony export */   "TreeNodeFlags": () => (/* binding */ ImGuiTreeNodeFlags),
/* harmony export */   "ImGuiTreeNodeFlags": () => (/* binding */ ImGuiTreeNodeFlags),
/* harmony export */   "PopupFlags": () => (/* binding */ ImGuiPopupFlags),
/* harmony export */   "ImGuiPopupFlags": () => (/* binding */ ImGuiPopupFlags),
/* harmony export */   "SelectableFlags": () => (/* binding */ ImGuiSelectableFlags),
/* harmony export */   "ImGuiSelectableFlags": () => (/* binding */ ImGuiSelectableFlags),
/* harmony export */   "ComboFlags": () => (/* binding */ ImGuiComboFlags),
/* harmony export */   "ImGuiComboFlags": () => (/* binding */ ImGuiComboFlags),
/* harmony export */   "TabBarFlags": () => (/* binding */ ImGuiTabBarFlags),
/* harmony export */   "ImGuiTabBarFlags": () => (/* binding */ ImGuiTabBarFlags),
/* harmony export */   "TabItemFlags": () => (/* binding */ ImGuiTabItemFlags),
/* harmony export */   "ImGuiTabItemFlags": () => (/* binding */ ImGuiTabItemFlags),
/* harmony export */   "TableFlags": () => (/* binding */ ImGuiTableFlags),
/* harmony export */   "ImGuiTableFlags": () => (/* binding */ ImGuiTableFlags),
/* harmony export */   "TableColumnFlags": () => (/* binding */ ImGuiTableColumnFlags),
/* harmony export */   "ImGuiTableColumnFlags": () => (/* binding */ ImGuiTableColumnFlags),
/* harmony export */   "TableRowFlags": () => (/* binding */ ImGuiTableRowFlags),
/* harmony export */   "ImGuiTableRowFlags": () => (/* binding */ ImGuiTableRowFlags),
/* harmony export */   "TableBgTarget": () => (/* binding */ ImGuiTableBgTarget),
/* harmony export */   "ImGuiTableBgTarget": () => (/* binding */ ImGuiTableBgTarget),
/* harmony export */   "FocusedFlags": () => (/* binding */ ImGuiFocusedFlags),
/* harmony export */   "ImGuiFocusedFlags": () => (/* binding */ ImGuiFocusedFlags),
/* harmony export */   "HoveredFlags": () => (/* binding */ ImGuiHoveredFlags),
/* harmony export */   "ImGuiHoveredFlags": () => (/* binding */ ImGuiHoveredFlags),
/* harmony export */   "DragDropFlags": () => (/* binding */ ImGuiDragDropFlags),
/* harmony export */   "ImGuiDragDropFlags": () => (/* binding */ ImGuiDragDropFlags),
/* harmony export */   "IMGUI_PAYLOAD_TYPE_COLOR_3F": () => (/* binding */ IMGUI_PAYLOAD_TYPE_COLOR_3F),
/* harmony export */   "IMGUI_PAYLOAD_TYPE_COLOR_4F": () => (/* binding */ IMGUI_PAYLOAD_TYPE_COLOR_4F),
/* harmony export */   "DataType": () => (/* binding */ ImGuiDataType),
/* harmony export */   "ImGuiDataType": () => (/* binding */ ImGuiDataType),
/* harmony export */   "Dir": () => (/* binding */ ImGuiDir),
/* harmony export */   "ImGuiDir": () => (/* binding */ ImGuiDir),
/* harmony export */   "SortDirection": () => (/* binding */ ImGuiSortDirection),
/* harmony export */   "ImGuiSortDirection": () => (/* binding */ ImGuiSortDirection),
/* harmony export */   "Key": () => (/* binding */ ImGuiKey),
/* harmony export */   "ImGuiKey": () => (/* binding */ ImGuiKey),
/* harmony export */   "KeyModFlags": () => (/* binding */ ImGuiKeyModFlags),
/* harmony export */   "ImGuiKeyModFlags": () => (/* binding */ ImGuiKeyModFlags),
/* harmony export */   "NavInput": () => (/* binding */ ImGuiNavInput),
/* harmony export */   "ImGuiNavInput": () => (/* binding */ ImGuiNavInput),
/* harmony export */   "ConfigFlags": () => (/* binding */ ImGuiConfigFlags),
/* harmony export */   "ImGuiConfigFlags": () => (/* binding */ ImGuiConfigFlags),
/* harmony export */   "Col": () => (/* binding */ ImGuiCol),
/* harmony export */   "ImGuiCol": () => (/* binding */ ImGuiCol),
/* harmony export */   "StyleVar": () => (/* binding */ ImGuiStyleVar),
/* harmony export */   "ImGuiStyleVar": () => (/* binding */ ImGuiStyleVar),
/* harmony export */   "BackendFlags": () => (/* binding */ ImGuiBackendFlags),
/* harmony export */   "ImGuiBackendFlags": () => (/* binding */ ImGuiBackendFlags),
/* harmony export */   "ButtonFlags": () => (/* binding */ ImGuiButtonFlags),
/* harmony export */   "ImGuiButtonFlags": () => (/* binding */ ImGuiButtonFlags),
/* harmony export */   "ColorEditFlags": () => (/* binding */ ImGuiColorEditFlags),
/* harmony export */   "ImGuiColorEditFlags": () => (/* binding */ ImGuiColorEditFlags),
/* harmony export */   "SliderFlags": () => (/* binding */ ImGuiSliderFlags),
/* harmony export */   "ImGuiSliderFlags": () => (/* binding */ ImGuiSliderFlags),
/* harmony export */   "MouseButton": () => (/* binding */ ImGuiMouseButton),
/* harmony export */   "ImGuiMouseButton": () => (/* binding */ ImGuiMouseButton),
/* harmony export */   "MouseCursor": () => (/* binding */ ImGuiMouseCursor),
/* harmony export */   "ImGuiMouseCursor": () => (/* binding */ ImGuiMouseCursor),
/* harmony export */   "Cond": () => (/* binding */ ImGuiCond),
/* harmony export */   "ImGuiCond": () => (/* binding */ ImGuiCond),
/* harmony export */   "DrawCornerFlags": () => (/* binding */ ImDrawCornerFlags),
/* harmony export */   "ImDrawCornerFlags": () => (/* binding */ ImDrawCornerFlags),
/* harmony export */   "wListFlags": () => (/* binding */ ImDrawListFlags),
/* harmony export */   "ImDrawListFlags": () => (/* binding */ ImDrawListFlags),
/* harmony export */   "Vec2": () => (/* binding */ ImVec2),
/* harmony export */   "ImVec2": () => (/* binding */ ImVec2),
/* harmony export */   "Vec4": () => (/* binding */ ImVec4),
/* harmony export */   "ImVec4": () => (/* binding */ ImVec4),
/* harmony export */   "Vector": () => (/* binding */ ImVector),
/* harmony export */   "ImVector": () => (/* binding */ ImVector),
/* harmony export */   "UNICODE_CODEPOINT_MAX": () => (/* binding */ IM_UNICODE_CODEPOINT_MAX),
/* harmony export */   "IM_UNICODE_CODEPOINT_MAX": () => (/* binding */ IM_UNICODE_CODEPOINT_MAX),
/* harmony export */   "TextFilter": () => (/* binding */ ImGuiTextFilter),
/* harmony export */   "ImGuiTextFilter": () => (/* binding */ ImGuiTextFilter),
/* harmony export */   "TextBuffer": () => (/* binding */ ImGuiTextBuffer),
/* harmony export */   "ImGuiTextBuffer": () => (/* binding */ ImGuiTextBuffer),
/* harmony export */   "ImGuiStorage": () => (/* binding */ ImGuiStorage),
/* harmony export */   "IM_COL32_R_SHIFT": () => (/* binding */ IM_COL32_R_SHIFT),
/* harmony export */   "IM_COL32_G_SHIFT": () => (/* binding */ IM_COL32_G_SHIFT),
/* harmony export */   "IM_COL32_B_SHIFT": () => (/* binding */ IM_COL32_B_SHIFT),
/* harmony export */   "IM_COL32_A_SHIFT": () => (/* binding */ IM_COL32_A_SHIFT),
/* harmony export */   "IM_COL32_A_MASK": () => (/* binding */ IM_COL32_A_MASK),
/* harmony export */   "COL32": () => (/* binding */ IM_COL32),
/* harmony export */   "IM_COL32": () => (/* binding */ IM_COL32),
/* harmony export */   "IM_COL32_WHITE": () => (/* binding */ IM_COL32_WHITE),
/* harmony export */   "COL32_WHITE": () => (/* binding */ IM_COL32_WHITE),
/* harmony export */   "IM_COL32_BLACK": () => (/* binding */ IM_COL32_BLACK),
/* harmony export */   "COL32_BLACK": () => (/* binding */ IM_COL32_BLACK),
/* harmony export */   "IM_COL32_BLACK_TRANS": () => (/* binding */ IM_COL32_BLACK_TRANS),
/* harmony export */   "COL32_BLACK_TRANS": () => (/* binding */ IM_COL32_BLACK_TRANS),
/* harmony export */   "Color": () => (/* binding */ ImColor),
/* harmony export */   "ImColor": () => (/* binding */ ImColor),
/* harmony export */   "InputTextDefaultSize": () => (/* binding */ ImGuiInputTextDefaultSize),
/* harmony export */   "ImGuiInputTextDefaultSize": () => (/* binding */ ImGuiInputTextDefaultSize),
/* harmony export */   "InputTextCallbackData": () => (/* binding */ ImGuiInputTextCallbackData),
/* harmony export */   "ImGuiInputTextCallbackData": () => (/* binding */ ImGuiInputTextCallbackData),
/* harmony export */   "SizeCallbackData": () => (/* binding */ ImGuiSizeCallbackData),
/* harmony export */   "ImGuiSizeCallbackData": () => (/* binding */ ImGuiSizeCallbackData),
/* harmony export */   "TableColumnSortSpecs": () => (/* binding */ ImGuiTableColumnSortSpecs),
/* harmony export */   "ImGuiTableColumnSortSpecs": () => (/* binding */ ImGuiTableColumnSortSpecs),
/* harmony export */   "TableSortSpecs": () => (/* binding */ ImGuiTableSortSpecs),
/* harmony export */   "ImGuiTableSortSpecs": () => (/* binding */ ImGuiTableSortSpecs),
/* harmony export */   "ListClipper": () => (/* binding */ ImGuiListClipper),
/* harmony export */   "ImGuiListClipper": () => (/* binding */ ImGuiListClipper),
/* harmony export */   "IM_DRAWLIST_TEX_LINES_WIDTH_MAX": () => (/* binding */ IM_DRAWLIST_TEX_LINES_WIDTH_MAX),
/* harmony export */   "ImDrawCallback_ResetRenderState": () => (/* binding */ ImDrawCallback_ResetRenderState),
/* harmony export */   "DrawCmd": () => (/* binding */ ImDrawCmd),
/* harmony export */   "ImDrawCmd": () => (/* binding */ ImDrawCmd),
/* harmony export */   "DrawIdxSize": () => (/* binding */ ImDrawIdxSize),
/* harmony export */   "ImDrawIdxSize": () => (/* binding */ ImDrawIdxSize),
/* harmony export */   "DrawVertSize": () => (/* binding */ ImDrawVertSize),
/* harmony export */   "ImDrawVertSize": () => (/* binding */ ImDrawVertSize),
/* harmony export */   "DrawVertPosOffset": () => (/* binding */ ImDrawVertPosOffset),
/* harmony export */   "ImDrawVertPosOffset": () => (/* binding */ ImDrawVertPosOffset),
/* harmony export */   "DrawVertUVOffset": () => (/* binding */ ImDrawVertUVOffset),
/* harmony export */   "ImDrawVertUVOffset": () => (/* binding */ ImDrawVertUVOffset),
/* harmony export */   "DrawVertColOffset": () => (/* binding */ ImDrawVertColOffset),
/* harmony export */   "ImDrawVertColOffset": () => (/* binding */ ImDrawVertColOffset),
/* harmony export */   "DrawVert": () => (/* binding */ ImDrawVert),
/* harmony export */   "ImDrawVert": () => (/* binding */ ImDrawVert),
/* harmony export */   "ImDrawCmdHeader": () => (/* binding */ ImDrawCmdHeader),
/* harmony export */   "ImDrawChannel": () => (/* binding */ ImDrawChannel),
/* harmony export */   "ImDrawListSharedData": () => (/* binding */ ImDrawListSharedData),
/* harmony export */   "DrawList": () => (/* binding */ ImDrawList),
/* harmony export */   "ImDrawList": () => (/* binding */ ImDrawList),
/* harmony export */   "DrawData": () => (/* binding */ ImDrawData),
/* harmony export */   "ImDrawData": () => (/* binding */ ImDrawData),
/* harmony export */   "script_ImFontConfig": () => (/* binding */ script_ImFontConfig),
/* harmony export */   "FontConfig": () => (/* binding */ ImFontConfig),
/* harmony export */   "ImFontConfig": () => (/* binding */ ImFontConfig),
/* harmony export */   "script_ImFontGlyph": () => (/* binding */ script_ImFontGlyph),
/* harmony export */   "FontGlyph": () => (/* binding */ ImFontGlyph),
/* harmony export */   "ImFontGlyph": () => (/* binding */ ImFontGlyph),
/* harmony export */   "ImFontAtlasCustomRect": () => (/* binding */ ImFontAtlasCustomRect),
/* harmony export */   "FontAtlasFlags": () => (/* binding */ ImFontAtlasFlags),
/* harmony export */   "ImFontAtlasFlags": () => (/* binding */ ImFontAtlasFlags),
/* harmony export */   "FontAtlas": () => (/* binding */ ImFontAtlas),
/* harmony export */   "ImFontAtlas": () => (/* binding */ ImFontAtlas),
/* harmony export */   "Font": () => (/* binding */ ImFont),
/* harmony export */   "ImFont": () => (/* binding */ ImFont),
/* harmony export */   "Style": () => (/* binding */ ImGuiStyle),
/* harmony export */   "ImGuiStyle": () => (/* binding */ ImGuiStyle),
/* harmony export */   "IO": () => (/* binding */ ImGuiIO),
/* harmony export */   "ImGuiIO": () => (/* binding */ ImGuiIO),
/* harmony export */   "ImGuiContext": () => (/* binding */ ImGuiContext),
/* harmony export */   "CreateContext": () => (/* binding */ CreateContext),
/* harmony export */   "DestroyContext": () => (/* binding */ DestroyContext),
/* harmony export */   "GetCurrentContext": () => (/* binding */ GetCurrentContext),
/* harmony export */   "SetCurrentContext": () => (/* binding */ SetCurrentContext),
/* harmony export */   "GetIO": () => (/* binding */ GetIO),
/* harmony export */   "GetStyle": () => (/* binding */ GetStyle),
/* harmony export */   "NewFrame": () => (/* binding */ NewFrame),
/* harmony export */   "EndFrame": () => (/* binding */ EndFrame),
/* harmony export */   "Render": () => (/* binding */ Render),
/* harmony export */   "GetDrawData": () => (/* binding */ GetDrawData),
/* harmony export */   "GetVersion": () => (/* binding */ GetVersion),
/* harmony export */   "StyleColorsDark": () => (/* binding */ StyleColorsDark),
/* harmony export */   "StyleColorsLight": () => (/* binding */ StyleColorsLight),
/* harmony export */   "StyleColorsClassic": () => (/* binding */ StyleColorsClassic),
/* harmony export */   "Begin": () => (/* binding */ Begin),
/* harmony export */   "End": () => (/* binding */ End),
/* harmony export */   "BeginChild": () => (/* binding */ BeginChild),
/* harmony export */   "EndChild": () => (/* binding */ EndChild),
/* harmony export */   "IsWindowAppearing": () => (/* binding */ IsWindowAppearing),
/* harmony export */   "IsWindowCollapsed": () => (/* binding */ IsWindowCollapsed),
/* harmony export */   "IsWindowFocused": () => (/* binding */ IsWindowFocused),
/* harmony export */   "IsWindowHovered": () => (/* binding */ IsWindowHovered),
/* harmony export */   "GetWindowDrawList": () => (/* binding */ GetWindowDrawList),
/* harmony export */   "GetWindowPos": () => (/* binding */ GetWindowPos),
/* harmony export */   "GetWindowSize": () => (/* binding */ GetWindowSize),
/* harmony export */   "GetWindowWidth": () => (/* binding */ GetWindowWidth),
/* harmony export */   "GetWindowHeight": () => (/* binding */ GetWindowHeight),
/* harmony export */   "SetNextWindowPos": () => (/* binding */ SetNextWindowPos),
/* harmony export */   "SetNextWindowSize": () => (/* binding */ SetNextWindowSize),
/* harmony export */   "SetNextWindowSizeConstraints": () => (/* binding */ SetNextWindowSizeConstraints),
/* harmony export */   "SetNextWindowContentSize": () => (/* binding */ SetNextWindowContentSize),
/* harmony export */   "SetNextWindowCollapsed": () => (/* binding */ SetNextWindowCollapsed),
/* harmony export */   "SetNextWindowFocus": () => (/* binding */ SetNextWindowFocus),
/* harmony export */   "SetNextWindowBgAlpha": () => (/* binding */ SetNextWindowBgAlpha),
/* harmony export */   "SetWindowPos": () => (/* binding */ SetWindowPos),
/* harmony export */   "SetWindowSize": () => (/* binding */ SetWindowSize),
/* harmony export */   "SetWindowCollapsed": () => (/* binding */ SetWindowCollapsed),
/* harmony export */   "SetWindowFocus": () => (/* binding */ SetWindowFocus),
/* harmony export */   "SetWindowFontScale": () => (/* binding */ SetWindowFontScale),
/* harmony export */   "GetContentRegionAvail": () => (/* binding */ GetContentRegionAvail),
/* harmony export */   "GetContentRegionMax": () => (/* binding */ GetContentRegionMax),
/* harmony export */   "GetWindowContentRegionMin": () => (/* binding */ GetWindowContentRegionMin),
/* harmony export */   "GetWindowContentRegionMax": () => (/* binding */ GetWindowContentRegionMax),
/* harmony export */   "GetWindowContentRegionWidth": () => (/* binding */ GetWindowContentRegionWidth),
/* harmony export */   "GetScrollX": () => (/* binding */ GetScrollX),
/* harmony export */   "GetScrollY": () => (/* binding */ GetScrollY),
/* harmony export */   "SetScrollX": () => (/* binding */ SetScrollX),
/* harmony export */   "SetScrollY": () => (/* binding */ SetScrollY),
/* harmony export */   "GetScrollMaxX": () => (/* binding */ GetScrollMaxX),
/* harmony export */   "GetScrollMaxY": () => (/* binding */ GetScrollMaxY),
/* harmony export */   "SetScrollHereX": () => (/* binding */ SetScrollHereX),
/* harmony export */   "SetScrollHereY": () => (/* binding */ SetScrollHereY),
/* harmony export */   "SetScrollFromPosX": () => (/* binding */ SetScrollFromPosX),
/* harmony export */   "SetScrollFromPosY": () => (/* binding */ SetScrollFromPosY),
/* harmony export */   "PushFont": () => (/* binding */ PushFont),
/* harmony export */   "PopFont": () => (/* binding */ PopFont),
/* harmony export */   "PushStyleColor": () => (/* binding */ PushStyleColor),
/* harmony export */   "PopStyleColor": () => (/* binding */ PopStyleColor),
/* harmony export */   "PushStyleVar": () => (/* binding */ PushStyleVar),
/* harmony export */   "PopStyleVar": () => (/* binding */ PopStyleVar),
/* harmony export */   "PushAllowKeyboardFocus": () => (/* binding */ PushAllowKeyboardFocus),
/* harmony export */   "PopAllowKeyboardFocus": () => (/* binding */ PopAllowKeyboardFocus),
/* harmony export */   "PushButtonRepeat": () => (/* binding */ PushButtonRepeat),
/* harmony export */   "PopButtonRepeat": () => (/* binding */ PopButtonRepeat),
/* harmony export */   "PushItemWidth": () => (/* binding */ PushItemWidth),
/* harmony export */   "PopItemWidth": () => (/* binding */ PopItemWidth),
/* harmony export */   "SetNextItemWidth": () => (/* binding */ SetNextItemWidth),
/* harmony export */   "CalcItemWidth": () => (/* binding */ CalcItemWidth),
/* harmony export */   "PushTextWrapPos": () => (/* binding */ PushTextWrapPos),
/* harmony export */   "PopTextWrapPos": () => (/* binding */ PopTextWrapPos),
/* harmony export */   "GetFont": () => (/* binding */ GetFont),
/* harmony export */   "GetFontSize": () => (/* binding */ GetFontSize),
/* harmony export */   "GetFontTexUvWhitePixel": () => (/* binding */ GetFontTexUvWhitePixel),
/* harmony export */   "GetColorU32": () => (/* binding */ GetColorU32),
/* harmony export */   "GetStyleColorVec4": () => (/* binding */ GetStyleColorVec4),
/* harmony export */   "Separator": () => (/* binding */ Separator),
/* harmony export */   "SameLine": () => (/* binding */ SameLine),
/* harmony export */   "NewLine": () => (/* binding */ NewLine),
/* harmony export */   "Spacing": () => (/* binding */ Spacing),
/* harmony export */   "Dummy": () => (/* binding */ Dummy),
/* harmony export */   "Indent": () => (/* binding */ Indent),
/* harmony export */   "Unindent": () => (/* binding */ Unindent),
/* harmony export */   "BeginGroup": () => (/* binding */ BeginGroup),
/* harmony export */   "EndGroup": () => (/* binding */ EndGroup),
/* harmony export */   "GetCursorPos": () => (/* binding */ GetCursorPos),
/* harmony export */   "GetCursorPosX": () => (/* binding */ GetCursorPosX),
/* harmony export */   "GetCursorPosY": () => (/* binding */ GetCursorPosY),
/* harmony export */   "SetCursorPos": () => (/* binding */ SetCursorPos),
/* harmony export */   "SetCursorPosX": () => (/* binding */ SetCursorPosX),
/* harmony export */   "SetCursorPosY": () => (/* binding */ SetCursorPosY),
/* harmony export */   "GetCursorStartPos": () => (/* binding */ GetCursorStartPos),
/* harmony export */   "GetCursorScreenPos": () => (/* binding */ GetCursorScreenPos),
/* harmony export */   "SetCursorScreenPos": () => (/* binding */ SetCursorScreenPos),
/* harmony export */   "AlignTextToFramePadding": () => (/* binding */ AlignTextToFramePadding),
/* harmony export */   "GetTextLineHeight": () => (/* binding */ GetTextLineHeight),
/* harmony export */   "GetTextLineHeightWithSpacing": () => (/* binding */ GetTextLineHeightWithSpacing),
/* harmony export */   "GetFrameHeight": () => (/* binding */ GetFrameHeight),
/* harmony export */   "GetFrameHeightWithSpacing": () => (/* binding */ GetFrameHeightWithSpacing),
/* harmony export */   "PushID": () => (/* binding */ PushID),
/* harmony export */   "PopID": () => (/* binding */ PopID),
/* harmony export */   "GetID": () => (/* binding */ GetID),
/* harmony export */   "TextUnformatted": () => (/* binding */ TextUnformatted),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "TextColored": () => (/* binding */ TextColored),
/* harmony export */   "TextDisabled": () => (/* binding */ TextDisabled),
/* harmony export */   "TextWrapped": () => (/* binding */ TextWrapped),
/* harmony export */   "LabelText": () => (/* binding */ LabelText),
/* harmony export */   "BulletText": () => (/* binding */ BulletText),
/* harmony export */   "Button": () => (/* binding */ Button),
/* harmony export */   "SmallButton": () => (/* binding */ SmallButton),
/* harmony export */   "ArrowButton": () => (/* binding */ ArrowButton),
/* harmony export */   "InvisibleButton": () => (/* binding */ InvisibleButton),
/* harmony export */   "Image": () => (/* binding */ Image),
/* harmony export */   "ImageButton": () => (/* binding */ ImageButton),
/* harmony export */   "Checkbox": () => (/* binding */ Checkbox),
/* harmony export */   "CheckboxFlags": () => (/* binding */ CheckboxFlags),
/* harmony export */   "RadioButton": () => (/* binding */ RadioButton),
/* harmony export */   "ProgressBar": () => (/* binding */ ProgressBar),
/* harmony export */   "Bullet": () => (/* binding */ Bullet),
/* harmony export */   "BeginCombo": () => (/* binding */ BeginCombo),
/* harmony export */   "EndCombo": () => (/* binding */ EndCombo),
/* harmony export */   "Combo": () => (/* binding */ Combo),
/* harmony export */   "DragFloat": () => (/* binding */ DragFloat),
/* harmony export */   "DragFloat2": () => (/* binding */ DragFloat2),
/* harmony export */   "DragFloat3": () => (/* binding */ DragFloat3),
/* harmony export */   "DragFloat4": () => (/* binding */ DragFloat4),
/* harmony export */   "DragFloatRange2": () => (/* binding */ DragFloatRange2),
/* harmony export */   "DragInt": () => (/* binding */ DragInt),
/* harmony export */   "DragInt2": () => (/* binding */ DragInt2),
/* harmony export */   "DragInt3": () => (/* binding */ DragInt3),
/* harmony export */   "DragInt4": () => (/* binding */ DragInt4),
/* harmony export */   "DragIntRange2": () => (/* binding */ DragIntRange2),
/* harmony export */   "DragScalar": () => (/* binding */ DragScalar),
/* harmony export */   "SliderFloat": () => (/* binding */ SliderFloat),
/* harmony export */   "SliderFloat2": () => (/* binding */ SliderFloat2),
/* harmony export */   "SliderFloat3": () => (/* binding */ SliderFloat3),
/* harmony export */   "SliderFloat4": () => (/* binding */ SliderFloat4),
/* harmony export */   "SliderAngle": () => (/* binding */ SliderAngle),
/* harmony export */   "SliderAngle3": () => (/* binding */ SliderAngle3),
/* harmony export */   "SliderInt": () => (/* binding */ SliderInt),
/* harmony export */   "SliderInt2": () => (/* binding */ SliderInt2),
/* harmony export */   "SliderInt3": () => (/* binding */ SliderInt3),
/* harmony export */   "SliderInt4": () => (/* binding */ SliderInt4),
/* harmony export */   "SliderScalar": () => (/* binding */ SliderScalar),
/* harmony export */   "VSliderFloat": () => (/* binding */ VSliderFloat),
/* harmony export */   "VSliderInt": () => (/* binding */ VSliderInt),
/* harmony export */   "VSliderScalar": () => (/* binding */ VSliderScalar),
/* harmony export */   "InputText": () => (/* binding */ InputText),
/* harmony export */   "InputTextMultiline": () => (/* binding */ InputTextMultiline),
/* harmony export */   "InputTextWithHint": () => (/* binding */ InputTextWithHint),
/* harmony export */   "InputFloat": () => (/* binding */ InputFloat),
/* harmony export */   "InputFloat2": () => (/* binding */ InputFloat2),
/* harmony export */   "InputFloat3": () => (/* binding */ InputFloat3),
/* harmony export */   "InputFloat4": () => (/* binding */ InputFloat4),
/* harmony export */   "InputInt": () => (/* binding */ InputInt),
/* harmony export */   "InputInt2": () => (/* binding */ InputInt2),
/* harmony export */   "InputInt3": () => (/* binding */ InputInt3),
/* harmony export */   "InputInt4": () => (/* binding */ InputInt4),
/* harmony export */   "InputDouble": () => (/* binding */ InputDouble),
/* harmony export */   "InputScalar": () => (/* binding */ InputScalar),
/* harmony export */   "ColorEdit3": () => (/* binding */ ColorEdit3),
/* harmony export */   "ColorEdit4": () => (/* binding */ ColorEdit4),
/* harmony export */   "ColorPicker3": () => (/* binding */ ColorPicker3),
/* harmony export */   "ColorPicker4": () => (/* binding */ ColorPicker4),
/* harmony export */   "ColorButton": () => (/* binding */ ColorButton),
/* harmony export */   "SetColorEditOptions": () => (/* binding */ SetColorEditOptions),
/* harmony export */   "TreeNode": () => (/* binding */ TreeNode),
/* harmony export */   "TreeNodeEx": () => (/* binding */ TreeNodeEx),
/* harmony export */   "TreePush": () => (/* binding */ TreePush),
/* harmony export */   "TreePop": () => (/* binding */ TreePop),
/* harmony export */   "GetTreeNodeToLabelSpacing": () => (/* binding */ GetTreeNodeToLabelSpacing),
/* harmony export */   "CollapsingHeader": () => (/* binding */ CollapsingHeader),
/* harmony export */   "SetNextItemOpen": () => (/* binding */ SetNextItemOpen),
/* harmony export */   "Selectable": () => (/* binding */ Selectable),
/* harmony export */   "ListBox": () => (/* binding */ ListBox),
/* harmony export */   "ListBoxHeader": () => (/* binding */ ListBoxHeader),
/* harmony export */   "ListBoxFooter": () => (/* binding */ ListBoxFooter),
/* harmony export */   "PlotLines": () => (/* binding */ PlotLines),
/* harmony export */   "PlotHistogram": () => (/* binding */ PlotHistogram),
/* harmony export */   "Value": () => (/* binding */ Value),
/* harmony export */   "BeginMenuBar": () => (/* binding */ BeginMenuBar),
/* harmony export */   "EndMenuBar": () => (/* binding */ EndMenuBar),
/* harmony export */   "BeginMainMenuBar": () => (/* binding */ BeginMainMenuBar),
/* harmony export */   "EndMainMenuBar": () => (/* binding */ EndMainMenuBar),
/* harmony export */   "BeginMenu": () => (/* binding */ BeginMenu),
/* harmony export */   "EndMenu": () => (/* binding */ EndMenu),
/* harmony export */   "MenuItem": () => (/* binding */ MenuItem),
/* harmony export */   "BeginTooltip": () => (/* binding */ BeginTooltip),
/* harmony export */   "EndTooltip": () => (/* binding */ EndTooltip),
/* harmony export */   "SetTooltip": () => (/* binding */ SetTooltip),
/* harmony export */   "BeginPopup": () => (/* binding */ BeginPopup),
/* harmony export */   "BeginPopupModal": () => (/* binding */ BeginPopupModal),
/* harmony export */   "EndPopup": () => (/* binding */ EndPopup),
/* harmony export */   "OpenPopup": () => (/* binding */ OpenPopup),
/* harmony export */   "OpenPopupOnItemClick": () => (/* binding */ OpenPopupOnItemClick),
/* harmony export */   "CloseCurrentPopup": () => (/* binding */ CloseCurrentPopup),
/* harmony export */   "BeginPopupContextItem": () => (/* binding */ BeginPopupContextItem),
/* harmony export */   "BeginPopupContextWindow": () => (/* binding */ BeginPopupContextWindow),
/* harmony export */   "BeginPopupContextVoid": () => (/* binding */ BeginPopupContextVoid),
/* harmony export */   "IsPopupOpen": () => (/* binding */ IsPopupOpen),
/* harmony export */   "BeginTable": () => (/* binding */ BeginTable),
/* harmony export */   "EndTable": () => (/* binding */ EndTable),
/* harmony export */   "TableNextRow": () => (/* binding */ TableNextRow),
/* harmony export */   "TableNextColumn": () => (/* binding */ TableNextColumn),
/* harmony export */   "TableSetColumnIndex": () => (/* binding */ TableSetColumnIndex),
/* harmony export */   "TableSetupColumn": () => (/* binding */ TableSetupColumn),
/* harmony export */   "TableSetupScrollFreeze": () => (/* binding */ TableSetupScrollFreeze),
/* harmony export */   "TableHeadersRow": () => (/* binding */ TableHeadersRow),
/* harmony export */   "TableHeader": () => (/* binding */ TableHeader),
/* harmony export */   "TableGetSortSpecs": () => (/* binding */ TableGetSortSpecs),
/* harmony export */   "TableGetColumnCount": () => (/* binding */ TableGetColumnCount),
/* harmony export */   "TableGetColumnIndex": () => (/* binding */ TableGetColumnIndex),
/* harmony export */   "TableGetRowIndex": () => (/* binding */ TableGetRowIndex),
/* harmony export */   "TableGetColumnName": () => (/* binding */ TableGetColumnName),
/* harmony export */   "TableGetColumnFlags": () => (/* binding */ TableGetColumnFlags),
/* harmony export */   "TableSetBgColor": () => (/* binding */ TableSetBgColor),
/* harmony export */   "Columns": () => (/* binding */ Columns),
/* harmony export */   "NextColumn": () => (/* binding */ NextColumn),
/* harmony export */   "GetColumnIndex": () => (/* binding */ GetColumnIndex),
/* harmony export */   "GetColumnWidth": () => (/* binding */ GetColumnWidth),
/* harmony export */   "SetColumnWidth": () => (/* binding */ SetColumnWidth),
/* harmony export */   "GetColumnOffset": () => (/* binding */ GetColumnOffset),
/* harmony export */   "SetColumnOffset": () => (/* binding */ SetColumnOffset),
/* harmony export */   "GetColumnsCount": () => (/* binding */ GetColumnsCount),
/* harmony export */   "BeginTabBar": () => (/* binding */ BeginTabBar),
/* harmony export */   "EndTabBar": () => (/* binding */ EndTabBar),
/* harmony export */   "BeginTabItem": () => (/* binding */ BeginTabItem),
/* harmony export */   "EndTabItem": () => (/* binding */ EndTabItem),
/* harmony export */   "TabItemButton": () => (/* binding */ TabItemButton),
/* harmony export */   "SetTabItemClosed": () => (/* binding */ SetTabItemClosed),
/* harmony export */   "LogToTTY": () => (/* binding */ LogToTTY),
/* harmony export */   "LogToFile": () => (/* binding */ LogToFile),
/* harmony export */   "LogToClipboard": () => (/* binding */ LogToClipboard),
/* harmony export */   "LogFinish": () => (/* binding */ LogFinish),
/* harmony export */   "LogButtons": () => (/* binding */ LogButtons),
/* harmony export */   "LogText": () => (/* binding */ LogText),
/* harmony export */   "BeginDragDropSource": () => (/* binding */ BeginDragDropSource),
/* harmony export */   "SetDragDropPayload": () => (/* binding */ SetDragDropPayload),
/* harmony export */   "EndDragDropSource": () => (/* binding */ EndDragDropSource),
/* harmony export */   "BeginDragDropTarget": () => (/* binding */ BeginDragDropTarget),
/* harmony export */   "AcceptDragDropPayload": () => (/* binding */ AcceptDragDropPayload),
/* harmony export */   "EndDragDropTarget": () => (/* binding */ EndDragDropTarget),
/* harmony export */   "GetDragDropPayload": () => (/* binding */ GetDragDropPayload),
/* harmony export */   "PushClipRect": () => (/* binding */ PushClipRect),
/* harmony export */   "PopClipRect": () => (/* binding */ PopClipRect),
/* harmony export */   "SetItemDefaultFocus": () => (/* binding */ SetItemDefaultFocus),
/* harmony export */   "SetKeyboardFocusHere": () => (/* binding */ SetKeyboardFocusHere),
/* harmony export */   "IsItemHovered": () => (/* binding */ IsItemHovered),
/* harmony export */   "IsItemActive": () => (/* binding */ IsItemActive),
/* harmony export */   "IsItemFocused": () => (/* binding */ IsItemFocused),
/* harmony export */   "IsItemClicked": () => (/* binding */ IsItemClicked),
/* harmony export */   "IsItemVisible": () => (/* binding */ IsItemVisible),
/* harmony export */   "IsItemEdited": () => (/* binding */ IsItemEdited),
/* harmony export */   "IsItemActivated": () => (/* binding */ IsItemActivated),
/* harmony export */   "IsItemDeactivated": () => (/* binding */ IsItemDeactivated),
/* harmony export */   "IsItemDeactivatedAfterEdit": () => (/* binding */ IsItemDeactivatedAfterEdit),
/* harmony export */   "IsItemToggledOpen": () => (/* binding */ IsItemToggledOpen),
/* harmony export */   "IsAnyItemHovered": () => (/* binding */ IsAnyItemHovered),
/* harmony export */   "IsAnyItemActive": () => (/* binding */ IsAnyItemActive),
/* harmony export */   "IsAnyItemFocused": () => (/* binding */ IsAnyItemFocused),
/* harmony export */   "GetItemRectMin": () => (/* binding */ GetItemRectMin),
/* harmony export */   "GetItemRectMax": () => (/* binding */ GetItemRectMax),
/* harmony export */   "GetItemRectSize": () => (/* binding */ GetItemRectSize),
/* harmony export */   "SetItemAllowOverlap": () => (/* binding */ SetItemAllowOverlap),
/* harmony export */   "IsRectVisible": () => (/* binding */ IsRectVisible),
/* harmony export */   "GetTime": () => (/* binding */ GetTime),
/* harmony export */   "GetFrameCount": () => (/* binding */ GetFrameCount),
/* harmony export */   "GetBackgroundDrawList": () => (/* binding */ GetBackgroundDrawList),
/* harmony export */   "GetForegroundDrawList": () => (/* binding */ GetForegroundDrawList),
/* harmony export */   "GetDrawListSharedData": () => (/* binding */ GetDrawListSharedData),
/* harmony export */   "GetStyleColorName": () => (/* binding */ GetStyleColorName),
/* harmony export */   "CalcListClipping": () => (/* binding */ CalcListClipping),
/* harmony export */   "BeginChildFrame": () => (/* binding */ BeginChildFrame),
/* harmony export */   "EndChildFrame": () => (/* binding */ EndChildFrame),
/* harmony export */   "CalcTextSize": () => (/* binding */ CalcTextSize),
/* harmony export */   "ColorConvertU32ToFloat4": () => (/* binding */ ColorConvertU32ToFloat4),
/* harmony export */   "ColorConvertFloat4ToU32": () => (/* binding */ ColorConvertFloat4ToU32),
/* harmony export */   "ColorConvertRGBtoHSV": () => (/* binding */ ColorConvertRGBtoHSV),
/* harmony export */   "ColorConvertHSVtoRGB": () => (/* binding */ ColorConvertHSVtoRGB),
/* harmony export */   "GetKeyIndex": () => (/* binding */ GetKeyIndex),
/* harmony export */   "IsKeyDown": () => (/* binding */ IsKeyDown),
/* harmony export */   "IsKeyPressed": () => (/* binding */ IsKeyPressed),
/* harmony export */   "IsKeyReleased": () => (/* binding */ IsKeyReleased),
/* harmony export */   "GetKeyPressedAmount": () => (/* binding */ GetKeyPressedAmount),
/* harmony export */   "CaptureKeyboardFromApp": () => (/* binding */ CaptureKeyboardFromApp),
/* harmony export */   "IsMouseDown": () => (/* binding */ IsMouseDown),
/* harmony export */   "IsMouseClicked": () => (/* binding */ IsMouseClicked),
/* harmony export */   "IsMouseDoubleClicked": () => (/* binding */ IsMouseDoubleClicked),
/* harmony export */   "IsMouseReleased": () => (/* binding */ IsMouseReleased),
/* harmony export */   "IsMouseHoveringRect": () => (/* binding */ IsMouseHoveringRect),
/* harmony export */   "IsMousePosValid": () => (/* binding */ IsMousePosValid),
/* harmony export */   "IsAnyMouseDown": () => (/* binding */ IsAnyMouseDown),
/* harmony export */   "GetMousePos": () => (/* binding */ GetMousePos),
/* harmony export */   "GetMousePosOnOpeningCurrentPopup": () => (/* binding */ GetMousePosOnOpeningCurrentPopup),
/* harmony export */   "IsMouseDragging": () => (/* binding */ IsMouseDragging),
/* harmony export */   "GetMouseDragDelta": () => (/* binding */ GetMouseDragDelta),
/* harmony export */   "ResetMouseDragDelta": () => (/* binding */ ResetMouseDragDelta),
/* harmony export */   "GetMouseCursor": () => (/* binding */ GetMouseCursor),
/* harmony export */   "SetMouseCursor": () => (/* binding */ SetMouseCursor),
/* harmony export */   "CaptureMouseFromApp": () => (/* binding */ CaptureMouseFromApp),
/* harmony export */   "GetClipboardText": () => (/* binding */ GetClipboardText),
/* harmony export */   "SetClipboardText": () => (/* binding */ SetClipboardText),
/* harmony export */   "LoadIniSettingsFromDisk": () => (/* binding */ LoadIniSettingsFromDisk),
/* harmony export */   "LoadIniSettingsFromMemory": () => (/* binding */ LoadIniSettingsFromMemory),
/* harmony export */   "SaveIniSettingsToDisk": () => (/* binding */ SaveIniSettingsToDisk),
/* harmony export */   "SaveIniSettingsToMemory": () => (/* binding */ SaveIniSettingsToMemory),
/* harmony export */   "DebugCheckVersionAndDataLayout": () => (/* binding */ DebugCheckVersionAndDataLayout),
/* harmony export */   "SetAllocatorFunctions": () => (/* binding */ SetAllocatorFunctions),
/* harmony export */   "MemAlloc": () => (/* binding */ MemAlloc),
/* harmony export */   "MemFree": () => (/* binding */ MemFree)
/* harmony export */ });
/* harmony import */ var _bind_imgui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bind-imgui */ "./src/bind-imgui.js");
/* harmony import */ var _bind_imgui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bind_imgui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input */ "./src/input.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var bind;
var dom_input;
var dom_inputMultiline;
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve) {
                    _bind_imgui__WEBPACK_IMPORTED_MODULE_0___default()(value).then(function (value) {
                        bind = value;
                        resolve();
                    });
                })];
        });
    });
}

function import_Scalar(sca) {
    if (Array.isArray(sca)) {
        return [sca[0]];
    }
    if (typeof sca === "function") {
        return [sca()];
    }
    return [sca.x];
}
function export_Scalar(tuple, sca) {
    if (Array.isArray(sca)) {
        sca[0] = tuple[0];
        return;
    }
    if (typeof sca === "function") {
        sca(tuple[0]);
        return;
    }
    sca.x = tuple[0];
}
function import_Vector2(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1]];
    }
    return [vec.x, vec.y];
}
function export_Vector2(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
}
function import_Vector3(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1], vec[2]];
    }
    return [vec.x, vec.y, vec.z];
}
function export_Vector3(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        vec[2] = tuple[2];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
    vec.z = tuple[2];
}
function import_Vector4(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1], vec[2], vec[3] || 0];
    }
    return [vec.x, vec.y, vec.z, vec.w];
}
function export_Vector4(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        vec[2] = tuple[2];
        vec[3] = tuple[3];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
    vec.z = tuple[2];
    vec.w = tuple[3];
}
function import_Color3(col) {
    if (Array.isArray(col)) {
        return [col[0], col[1], col[2]];
    }
    if ("r" in col) {
        return [col.r, col.g, col.b];
    }
    return [col.x, col.y, col.z];
}
function export_Color3(tuple, col) {
    if (Array.isArray(col)) {
        col[0] = tuple[0];
        col[1] = tuple[1];
        col[2] = tuple[2];
        return;
    }
    if ("r" in col) {
        col.r = tuple[0];
        col.g = tuple[1];
        col.b = tuple[2];
        return;
    }
    col.x = tuple[0];
    col.y = tuple[1];
    col.z = tuple[2];
}
function import_Color4(col) {
    if (Array.isArray(col)) {
        return [col[0], col[1], col[2], col[3]];
    }
    if ("r" in col) {
        return [col.r, col.g, col.b, col.a];
    }
    return [col.x, col.y, col.z, col.w];
}
function export_Color4(tuple, col) {
    if (Array.isArray(col)) {
        col[0] = tuple[0];
        col[1] = tuple[1];
        col[2] = tuple[2];
        col[3] = tuple[3];
        return;
    }
    if ("r" in col) {
        col.r = tuple[0];
        col.g = tuple[1];
        col.b = tuple[2];
        col.a = tuple[3];
        return;
    }
    col.x = tuple[0];
    col.y = tuple[1];
    col.z = tuple[2];
    col.w = tuple[3];
}
var isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function () {
        return navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function () {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function () {
        return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
    },
    any: function () {
        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
    },
    isPortrait: function () {
        return window.innerHeight > window.innerWidth;
    },
};
//import * as config from "./imconfig";

var IMGUI_VERSION = "1.80"; // bind.IMGUI_VERSION;

var IMGUI_VERSION_NUM = 18000; // bind.IMGUI_VERSION_NUM;
// #define IMGUI_CHECKVERSION()        ImGui::DebugCheckVersionAndDataLayout(IMGUI_VERSION, sizeof(ImGuiIO), sizeof(ImGuiStyle), sizeof(ImVec2), sizeof(ImVec4), sizeof(ImDrawVert))

function IMGUI_CHECKVERSION() { return DebugCheckVersionAndDataLayout(IMGUI_VERSION, bind.ImGuiIOSize, bind.ImGuiStyleSize, bind.ImVec2Size, bind.ImVec4Size, bind.ImDrawVertSize, bind.ImDrawIdxSize); }
var IMGUI_HAS_TABLE = true;
function ASSERT(c) { if (!c) {
    throw new Error();
} }
function IM_ASSERT(c) { if (!c) {
    throw new Error();
} }

function IM_ARRAYSIZE(_ARR) {
    if (_ARR instanceof ImStringBuffer) {
        return _ARR.size;
    }
    else {
        return _ARR.length;
    }
}

var ImStringBuffer = /** @class */ (function () {
    function ImStringBuffer(size, buffer) {
        if (buffer === void 0) { buffer = ""; }
        this.size = size;
        this.buffer = buffer;
    }
    return ImStringBuffer;
}());

// Flags for ImGui::Begin()

var ImGuiWindowFlags;
(function (ImGuiWindowFlags) {
    ImGuiWindowFlags[ImGuiWindowFlags["None"] = 0] = "None";
    ImGuiWindowFlags[ImGuiWindowFlags["NoTitleBar"] = 1] = "NoTitleBar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoResize"] = 2] = "NoResize";
    ImGuiWindowFlags[ImGuiWindowFlags["NoMove"] = 4] = "NoMove";
    ImGuiWindowFlags[ImGuiWindowFlags["NoScrollbar"] = 8] = "NoScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoScrollWithMouse"] = 16] = "NoScrollWithMouse";
    ImGuiWindowFlags[ImGuiWindowFlags["NoCollapse"] = 32] = "NoCollapse";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysAutoResize"] = 64] = "AlwaysAutoResize";
    ImGuiWindowFlags[ImGuiWindowFlags["NoBackground"] = 128] = "NoBackground";
    ImGuiWindowFlags[ImGuiWindowFlags["NoSavedSettings"] = 256] = "NoSavedSettings";
    ImGuiWindowFlags[ImGuiWindowFlags["NoMouseInputs"] = 512] = "NoMouseInputs";
    ImGuiWindowFlags[ImGuiWindowFlags["MenuBar"] = 1024] = "MenuBar";
    ImGuiWindowFlags[ImGuiWindowFlags["HorizontalScrollbar"] = 2048] = "HorizontalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoFocusOnAppearing"] = 4096] = "NoFocusOnAppearing";
    ImGuiWindowFlags[ImGuiWindowFlags["NoBringToFrontOnFocus"] = 8192] = "NoBringToFrontOnFocus";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysVerticalScrollbar"] = 16384] = "AlwaysVerticalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysHorizontalScrollbar"] = 32768] = "AlwaysHorizontalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysUseWindowPadding"] = 65536] = "AlwaysUseWindowPadding";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNavInputs"] = 262144] = "NoNavInputs";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNavFocus"] = 524288] = "NoNavFocus";
    ImGuiWindowFlags[ImGuiWindowFlags["UnsavedDocument"] = 1048576] = "UnsavedDocument";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNav"] = 786432] = "NoNav";
    ImGuiWindowFlags[ImGuiWindowFlags["NoDecoration"] = 43] = "NoDecoration";
    ImGuiWindowFlags[ImGuiWindowFlags["NoInputs"] = 786944] = "NoInputs";
    // [Internal]
    ImGuiWindowFlags[ImGuiWindowFlags["NavFlattened"] = 8388608] = "NavFlattened";
    ImGuiWindowFlags[ImGuiWindowFlags["ChildWindow"] = 16777216] = "ChildWindow";
    ImGuiWindowFlags[ImGuiWindowFlags["Tooltip"] = 33554432] = "Tooltip";
    ImGuiWindowFlags[ImGuiWindowFlags["Popup"] = 67108864] = "Popup";
    ImGuiWindowFlags[ImGuiWindowFlags["Modal"] = 134217728] = "Modal";
    ImGuiWindowFlags[ImGuiWindowFlags["ChildMenu"] = 268435456] = "ChildMenu";
})(ImGuiWindowFlags || (ImGuiWindowFlags = {}));
// Flags for ImGui::InputText()

var ImGuiInputTextFlags;
(function (ImGuiInputTextFlags) {
    ImGuiInputTextFlags[ImGuiInputTextFlags["None"] = 0] = "None";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsDecimal"] = 1] = "CharsDecimal";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsHexadecimal"] = 2] = "CharsHexadecimal";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsUppercase"] = 4] = "CharsUppercase";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsNoBlank"] = 8] = "CharsNoBlank";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AutoSelectAll"] = 16] = "AutoSelectAll";
    ImGuiInputTextFlags[ImGuiInputTextFlags["EnterReturnsTrue"] = 32] = "EnterReturnsTrue";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackCompletion"] = 64] = "CallbackCompletion";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackHistory"] = 128] = "CallbackHistory";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackAlways"] = 256] = "CallbackAlways";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackCharFilter"] = 512] = "CallbackCharFilter";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AllowTabInput"] = 1024] = "AllowTabInput";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CtrlEnterForNewLine"] = 2048] = "CtrlEnterForNewLine";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoHorizontalScroll"] = 4096] = "NoHorizontalScroll";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AlwaysInsertMode"] = 8192] = "AlwaysInsertMode";
    ImGuiInputTextFlags[ImGuiInputTextFlags["ReadOnly"] = 16384] = "ReadOnly";
    ImGuiInputTextFlags[ImGuiInputTextFlags["Password"] = 32768] = "Password";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoUndoRedo"] = 65536] = "NoUndoRedo";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsScientific"] = 131072] = "CharsScientific";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackResize"] = 262144] = "CallbackResize";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackEdit"] = 524288] = "CallbackEdit";
    // [Internal]
    ImGuiInputTextFlags[ImGuiInputTextFlags["Multiline"] = 1048576] = "Multiline";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoMarkEdited"] = 2097152] = "NoMarkEdited";
})(ImGuiInputTextFlags || (ImGuiInputTextFlags = {}));
// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()

var ImGuiTreeNodeFlags;
(function (ImGuiTreeNodeFlags) {
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["None"] = 0] = "None";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Selected"] = 1] = "Selected";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Framed"] = 2] = "Framed";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["AllowItemOverlap"] = 4] = "AllowItemOverlap";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NoTreePushOnOpen"] = 8] = "NoTreePushOnOpen";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NoAutoOpenOnLog"] = 16] = "NoAutoOpenOnLog";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["DefaultOpen"] = 32] = "DefaultOpen";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["OpenOnDoubleClick"] = 64] = "OpenOnDoubleClick";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["OpenOnArrow"] = 128] = "OpenOnArrow";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Leaf"] = 256] = "Leaf";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Bullet"] = 512] = "Bullet";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["FramePadding"] = 1024] = "FramePadding";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["SpanAvailWidth"] = 2048] = "SpanAvailWidth";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["SpanFullWidth"] = 4096] = "SpanFullWidth";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NavLeftJumpsBackHere"] = 8192] = "NavLeftJumpsBackHere";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["CollapsingHeader"] = 26] = "CollapsingHeader";
})(ImGuiTreeNodeFlags || (ImGuiTreeNodeFlags = {}));

var ImGuiPopupFlags;
(function (ImGuiPopupFlags) {
    ImGuiPopupFlags[ImGuiPopupFlags["None"] = 0] = "None";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonLeft"] = 0] = "MouseButtonLeft";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonRight"] = 1] = "MouseButtonRight";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonMiddle"] = 2] = "MouseButtonMiddle";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonMask_"] = 31] = "MouseButtonMask_";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonDefault_"] = 1] = "MouseButtonDefault_";
    ImGuiPopupFlags[ImGuiPopupFlags["NoOpenOverExistingPopup"] = 32] = "NoOpenOverExistingPopup";
    ImGuiPopupFlags[ImGuiPopupFlags["NoOpenOverItems"] = 64] = "NoOpenOverItems";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopupId"] = 128] = "AnyPopupId";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopupLevel"] = 256] = "AnyPopupLevel";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopup"] = 384] = "AnyPopup";
})(ImGuiPopupFlags || (ImGuiPopupFlags = {}));
// Flags for ImGui::Selectable()

var ImGuiSelectableFlags;
(function (ImGuiSelectableFlags) {
    ImGuiSelectableFlags[ImGuiSelectableFlags["None"] = 0] = "None";
    ImGuiSelectableFlags[ImGuiSelectableFlags["DontClosePopups"] = 1] = "DontClosePopups";
    ImGuiSelectableFlags[ImGuiSelectableFlags["SpanAllColumns"] = 2] = "SpanAllColumns";
    ImGuiSelectableFlags[ImGuiSelectableFlags["AllowDoubleClick"] = 4] = "AllowDoubleClick";
    ImGuiSelectableFlags[ImGuiSelectableFlags["Disabled"] = 8] = "Disabled";
    ImGuiSelectableFlags[ImGuiSelectableFlags["AllowItemOverlap"] = 16] = "AllowItemOverlap"; // (WIP) Hit testing to allow subsequent widgets to overlap this one
})(ImGuiSelectableFlags || (ImGuiSelectableFlags = {}));
// Flags for ImGui::BeginCombo()

var ImGuiComboFlags;
(function (ImGuiComboFlags) {
    ImGuiComboFlags[ImGuiComboFlags["None"] = 0] = "None";
    ImGuiComboFlags[ImGuiComboFlags["PopupAlignLeft"] = 1] = "PopupAlignLeft";
    ImGuiComboFlags[ImGuiComboFlags["HeightSmall"] = 2] = "HeightSmall";
    ImGuiComboFlags[ImGuiComboFlags["HeightRegular"] = 4] = "HeightRegular";
    ImGuiComboFlags[ImGuiComboFlags["HeightLarge"] = 8] = "HeightLarge";
    ImGuiComboFlags[ImGuiComboFlags["HeightLargest"] = 16] = "HeightLargest";
    ImGuiComboFlags[ImGuiComboFlags["NoArrowButton"] = 32] = "NoArrowButton";
    ImGuiComboFlags[ImGuiComboFlags["NoPreview"] = 64] = "NoPreview";
    ImGuiComboFlags[ImGuiComboFlags["HeightMask_"] = 30] = "HeightMask_";
})(ImGuiComboFlags || (ImGuiComboFlags = {}));
// Flags for ImGui::BeginTabBar()

var ImGuiTabBarFlags;
(function (ImGuiTabBarFlags) {
    ImGuiTabBarFlags[ImGuiTabBarFlags["None"] = 0] = "None";
    ImGuiTabBarFlags[ImGuiTabBarFlags["Reorderable"] = 1] = "Reorderable";
    ImGuiTabBarFlags[ImGuiTabBarFlags["AutoSelectNewTabs"] = 2] = "AutoSelectNewTabs";
    ImGuiTabBarFlags[ImGuiTabBarFlags["TabListPopupButton"] = 4] = "TabListPopupButton";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoCloseWithMiddleMouseButton"] = 8] = "NoCloseWithMiddleMouseButton";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoTabListScrollingButtons"] = 16] = "NoTabListScrollingButtons";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoTooltip"] = 32] = "NoTooltip";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyResizeDown"] = 64] = "FittingPolicyResizeDown";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyScroll"] = 128] = "FittingPolicyScroll";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyMask_"] = 192] = "FittingPolicyMask_";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyDefault_"] = 64] = "FittingPolicyDefault_";
})(ImGuiTabBarFlags || (ImGuiTabBarFlags = {}));
;
// Flags for ImGui::BeginTabItem()

var ImGuiTabItemFlags;
(function (ImGuiTabItemFlags) {
    ImGuiTabItemFlags[ImGuiTabItemFlags["None"] = 0] = "None";
    ImGuiTabItemFlags[ImGuiTabItemFlags["UnsavedDocument"] = 1] = "UnsavedDocument";
    ImGuiTabItemFlags[ImGuiTabItemFlags["SetSelected"] = 2] = "SetSelected";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoCloseWithMiddleMouseButton"] = 4] = "NoCloseWithMiddleMouseButton";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoPushId"] = 8] = "NoPushId";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoTooltip"] = 16] = "NoTooltip";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoReorder"] = 32] = "NoReorder";
    ImGuiTabItemFlags[ImGuiTabItemFlags["Leading"] = 64] = "Leading";
    ImGuiTabItemFlags[ImGuiTabItemFlags["Trailing"] = 128] = "Trailing"; // Enforce the tab position to the right of the tab bar (before the scrolling buttons)
})(ImGuiTabItemFlags || (ImGuiTabItemFlags = {}));

var ImGuiTableFlags;
(function (ImGuiTableFlags) {
    // Features
    ImGuiTableFlags[ImGuiTableFlags["None"] = 0] = "None";
    ImGuiTableFlags[ImGuiTableFlags["Resizable"] = 1] = "Resizable";
    ImGuiTableFlags[ImGuiTableFlags["Reorderable"] = 2] = "Reorderable";
    ImGuiTableFlags[ImGuiTableFlags["Hideable"] = 4] = "Hideable";
    ImGuiTableFlags[ImGuiTableFlags["Sortable"] = 8] = "Sortable";
    ImGuiTableFlags[ImGuiTableFlags["NoSavedSettings"] = 16] = "NoSavedSettings";
    ImGuiTableFlags[ImGuiTableFlags["ContextMenuInBody"] = 32] = "ContextMenuInBody";
    // Decorations
    ImGuiTableFlags[ImGuiTableFlags["RowBg"] = 64] = "RowBg";
    ImGuiTableFlags[ImGuiTableFlags["BordersInnerH"] = 128] = "BordersInnerH";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuterH"] = 256] = "BordersOuterH";
    ImGuiTableFlags[ImGuiTableFlags["BordersInnerV"] = 512] = "BordersInnerV";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuterV"] = 1024] = "BordersOuterV";
    ImGuiTableFlags[ImGuiTableFlags["BordersH"] = 384] = "BordersH";
    ImGuiTableFlags[ImGuiTableFlags["BordersV"] = 1536] = "BordersV";
    ImGuiTableFlags[ImGuiTableFlags["BordersInner"] = 640] = "BordersInner";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuter"] = 1280] = "BordersOuter";
    ImGuiTableFlags[ImGuiTableFlags["Borders"] = 1920] = "Borders";
    ImGuiTableFlags[ImGuiTableFlags["NoBordersInBody"] = 2048] = "NoBordersInBody";
    ImGuiTableFlags[ImGuiTableFlags["NoBordersInBodyUntilResize"] = 4096] = "NoBordersInBodyUntilResize";
    // Sizing Policy (read above for defaults)
    ImGuiTableFlags[ImGuiTableFlags["SizingFixedFit"] = 8192] = "SizingFixedFit";
    ImGuiTableFlags[ImGuiTableFlags["SizingFixedSame"] = 16384] = "SizingFixedSame";
    ImGuiTableFlags[ImGuiTableFlags["SizingStretchProp"] = 24576] = "SizingStretchProp";
    ImGuiTableFlags[ImGuiTableFlags["SizingStretchSame"] = 32768] = "SizingStretchSame";
    // Sizing Extra Options
    ImGuiTableFlags[ImGuiTableFlags["NoHostExtendX"] = 65536] = "NoHostExtendX";
    ImGuiTableFlags[ImGuiTableFlags["NoHostExtendY"] = 131072] = "NoHostExtendY";
    ImGuiTableFlags[ImGuiTableFlags["NoKeepColumnsVisible"] = 262144] = "NoKeepColumnsVisible";
    ImGuiTableFlags[ImGuiTableFlags["PreciseWidths"] = 524288] = "PreciseWidths";
    // Clipping
    ImGuiTableFlags[ImGuiTableFlags["NoClip"] = 1048576] = "NoClip";
    // Padding
    ImGuiTableFlags[ImGuiTableFlags["PadOuterX"] = 2097152] = "PadOuterX";
    ImGuiTableFlags[ImGuiTableFlags["NoPadOuterX"] = 4194304] = "NoPadOuterX";
    ImGuiTableFlags[ImGuiTableFlags["NoPadInnerX"] = 8388608] = "NoPadInnerX";
    // Scrolling
    ImGuiTableFlags[ImGuiTableFlags["ScrollX"] = 16777216] = "ScrollX";
    ImGuiTableFlags[ImGuiTableFlags["ScrollY"] = 33554432] = "ScrollY";
    // Sorting
    ImGuiTableFlags[ImGuiTableFlags["SortMulti"] = 67108864] = "SortMulti";
    ImGuiTableFlags[ImGuiTableFlags["SortTristate"] = 134217728] = "SortTristate";
    // [Internal] Combinations and masks
    ImGuiTableFlags[ImGuiTableFlags["SizingMask_"] = 57344] = "SizingMask_";
})(ImGuiTableFlags || (ImGuiTableFlags = {}));
// Flags for ImGui::TableSetupColumn()

var ImGuiTableColumnFlags;
(function (ImGuiTableColumnFlags) {
    // Input configuration flags
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["None"] = 0] = "None";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["DefaultHide"] = 1] = "DefaultHide";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["DefaultSort"] = 2] = "DefaultSort";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthStretch"] = 4] = "WidthStretch";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthFixed"] = 8] = "WidthFixed";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoResize"] = 16] = "NoResize";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoReorder"] = 32] = "NoReorder";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoHide"] = 64] = "NoHide";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoClip"] = 128] = "NoClip";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSort"] = 256] = "NoSort";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSortAscending"] = 512] = "NoSortAscending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSortDescending"] = 1024] = "NoSortDescending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoHeaderWidth"] = 2048] = "NoHeaderWidth";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["PreferSortAscending"] = 4096] = "PreferSortAscending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["PreferSortDescending"] = 8192] = "PreferSortDescending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentEnable"] = 16384] = "IndentEnable";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentDisable"] = 32768] = "IndentDisable";
    // Output status flags, read-only via TableGetColumnFlags()
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsEnabled"] = 1048576] = "IsEnabled";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsVisible"] = 2097152] = "IsVisible";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsSorted"] = 4194304] = "IsSorted";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsHovered"] = 8388608] = "IsHovered";
    // [Internal] Combinations and masks
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthMask_"] = 12] = "WidthMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentMask_"] = 49152] = "IndentMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["StatusMask_"] = 15728640] = "StatusMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoDirectResize_"] = 1073741824] = "NoDirectResize_"; // [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
})(ImGuiTableColumnFlags || (ImGuiTableColumnFlags = {}));
// Flags for ImGui::TableNextRow()

var ImGuiTableRowFlags;
(function (ImGuiTableRowFlags) {
    ImGuiTableRowFlags[ImGuiTableRowFlags["None"] = 0] = "None";
    ImGuiTableRowFlags[ImGuiTableRowFlags["Headers"] = 1] = "Headers"; // Identify header row (set default background color + width of its contents accounted different for auto column width)
})(ImGuiTableRowFlags || (ImGuiTableRowFlags = {}));
// Enum for ImGui::TableSetBgColor()
// Background colors are rendering in 3 layers:
//  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.
//  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.
//  - Layer 2: draw with CellBg color if set.
// The purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color.
// When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.
// If you set the color of RowBg0 target, your color will override the existing RowBg0 color.
// If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.

var ImGuiTableBgTarget;
(function (ImGuiTableBgTarget) {
    ImGuiTableBgTarget[ImGuiTableBgTarget["None"] = 0] = "None";
    ImGuiTableBgTarget[ImGuiTableBgTarget["RowBg0"] = 1] = "RowBg0";
    ImGuiTableBgTarget[ImGuiTableBgTarget["RowBg1"] = 2] = "RowBg1";
    ImGuiTableBgTarget[ImGuiTableBgTarget["CellBg"] = 3] = "CellBg"; // Set cell background color (top-most color)
})(ImGuiTableBgTarget || (ImGuiTableBgTarget = {}));
// Flags for ImGui::IsWindowFocused()

var ImGuiFocusedFlags;
(function (ImGuiFocusedFlags) {
    ImGuiFocusedFlags[ImGuiFocusedFlags["None"] = 0] = "None";
    ImGuiFocusedFlags[ImGuiFocusedFlags["ChildWindows"] = 1] = "ChildWindows";
    ImGuiFocusedFlags[ImGuiFocusedFlags["RootWindow"] = 2] = "RootWindow";
    ImGuiFocusedFlags[ImGuiFocusedFlags["AnyWindow"] = 4] = "AnyWindow";
    ImGuiFocusedFlags[ImGuiFocusedFlags["RootAndChildWindows"] = 3] = "RootAndChildWindows";
})(ImGuiFocusedFlags || (ImGuiFocusedFlags = {}));
// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()

var ImGuiHoveredFlags;
(function (ImGuiHoveredFlags) {
    ImGuiHoveredFlags[ImGuiHoveredFlags["None"] = 0] = "None";
    ImGuiHoveredFlags[ImGuiHoveredFlags["ChildWindows"] = 1] = "ChildWindows";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RootWindow"] = 2] = "RootWindow";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AnyWindow"] = 4] = "AnyWindow";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenBlockedByPopup"] = 8] = "AllowWhenBlockedByPopup";
    //AllowWhenBlockedByModal     = 1 << 4,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenBlockedByActiveItem"] = 32] = "AllowWhenBlockedByActiveItem";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenOverlapped"] = 64] = "AllowWhenOverlapped";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenDisabled"] = 128] = "AllowWhenDisabled";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RectOnly"] = 104] = "RectOnly";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RootAndChildWindows"] = 3] = "RootAndChildWindows";
})(ImGuiHoveredFlags || (ImGuiHoveredFlags = {}));
// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()

var ImGuiDragDropFlags;
(function (ImGuiDragDropFlags) {
    // BeginDragDropSource() flags
    ImGuiDragDropFlags[ImGuiDragDropFlags["None"] = 0] = "None";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoPreviewTooltip"] = 1] = "SourceNoPreviewTooltip";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoDisableHover"] = 2] = "SourceNoDisableHover";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoHoldToOpenOthers"] = 4] = "SourceNoHoldToOpenOthers";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceAllowNullID"] = 8] = "SourceAllowNullID";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceExtern"] = 16] = "SourceExtern";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceAutoExpirePayload"] = 32] = "SourceAutoExpirePayload";
    // AcceptDragDropPayload() flags
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptBeforeDelivery"] = 1024] = "AcceptBeforeDelivery";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptNoDrawDefaultRect"] = 2048] = "AcceptNoDrawDefaultRect";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptNoPreviewTooltip"] = 4096] = "AcceptNoPreviewTooltip";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptPeekOnly"] = 3072] = "AcceptPeekOnly";
})(ImGuiDragDropFlags || (ImGuiDragDropFlags = {}));
// Standard Drag and Drop payload types. You can define you own payload types using 12-characters long strings. Types starting with '_' are defined by Dear ImGui.
var IMGUI_PAYLOAD_TYPE_COLOR_3F = "_COL3F"; // float[3]     // Standard type for colors, without alpha. User code may use this type.
var IMGUI_PAYLOAD_TYPE_COLOR_4F = "_COL4F"; // float[4]     // Standard type for colors. User code may use this type.
// A primary data type

var ImGuiDataType;
(function (ImGuiDataType) {
    ImGuiDataType[ImGuiDataType["S8"] = 0] = "S8";
    ImGuiDataType[ImGuiDataType["U8"] = 1] = "U8";
    ImGuiDataType[ImGuiDataType["S16"] = 2] = "S16";
    ImGuiDataType[ImGuiDataType["U16"] = 3] = "U16";
    ImGuiDataType[ImGuiDataType["S32"] = 4] = "S32";
    ImGuiDataType[ImGuiDataType["U32"] = 5] = "U32";
    ImGuiDataType[ImGuiDataType["S64"] = 6] = "S64";
    ImGuiDataType[ImGuiDataType["U64"] = 7] = "U64";
    ImGuiDataType[ImGuiDataType["Float"] = 8] = "Float";
    ImGuiDataType[ImGuiDataType["Double"] = 9] = "Double";
    ImGuiDataType[ImGuiDataType["COUNT"] = 10] = "COUNT";
})(ImGuiDataType || (ImGuiDataType = {}));
// A cardinal direction

var ImGuiDir;
(function (ImGuiDir) {
    ImGuiDir[ImGuiDir["None"] = -1] = "None";
    ImGuiDir[ImGuiDir["Left"] = 0] = "Left";
    ImGuiDir[ImGuiDir["Right"] = 1] = "Right";
    ImGuiDir[ImGuiDir["Up"] = 2] = "Up";
    ImGuiDir[ImGuiDir["Down"] = 3] = "Down";
    ImGuiDir[ImGuiDir["COUNT"] = 4] = "COUNT";
})(ImGuiDir || (ImGuiDir = {}));
// A sorting direction

var ImGuiSortDirection;
(function (ImGuiSortDirection) {
    ImGuiSortDirection[ImGuiSortDirection["None"] = 0] = "None";
    ImGuiSortDirection[ImGuiSortDirection["Ascending"] = 1] = "Ascending";
    ImGuiSortDirection[ImGuiSortDirection["Descending"] = 2] = "Descending"; // Descending = 9->0, Z->A etc.
})(ImGuiSortDirection || (ImGuiSortDirection = {}));
// User fill ImGuiIO.KeyMap[] array with indices into the ImGuiIO.KeysDown[512] array

var ImGuiKey;
(function (ImGuiKey) {
    ImGuiKey[ImGuiKey["Tab"] = 0] = "Tab";
    ImGuiKey[ImGuiKey["LeftArrow"] = 1] = "LeftArrow";
    ImGuiKey[ImGuiKey["RightArrow"] = 2] = "RightArrow";
    ImGuiKey[ImGuiKey["UpArrow"] = 3] = "UpArrow";
    ImGuiKey[ImGuiKey["DownArrow"] = 4] = "DownArrow";
    ImGuiKey[ImGuiKey["PageUp"] = 5] = "PageUp";
    ImGuiKey[ImGuiKey["PageDown"] = 6] = "PageDown";
    ImGuiKey[ImGuiKey["Home"] = 7] = "Home";
    ImGuiKey[ImGuiKey["End"] = 8] = "End";
    ImGuiKey[ImGuiKey["Insert"] = 9] = "Insert";
    ImGuiKey[ImGuiKey["Delete"] = 10] = "Delete";
    ImGuiKey[ImGuiKey["Backspace"] = 11] = "Backspace";
    ImGuiKey[ImGuiKey["Space"] = 12] = "Space";
    ImGuiKey[ImGuiKey["Enter"] = 13] = "Enter";
    ImGuiKey[ImGuiKey["Escape"] = 14] = "Escape";
    ImGuiKey[ImGuiKey["KeyPadEnter"] = 15] = "KeyPadEnter";
    ImGuiKey[ImGuiKey["A"] = 16] = "A";
    ImGuiKey[ImGuiKey["C"] = 17] = "C";
    ImGuiKey[ImGuiKey["V"] = 18] = "V";
    ImGuiKey[ImGuiKey["X"] = 19] = "X";
    ImGuiKey[ImGuiKey["Y"] = 20] = "Y";
    ImGuiKey[ImGuiKey["Z"] = 21] = "Z";
    ImGuiKey[ImGuiKey["COUNT"] = 22] = "COUNT";
})(ImGuiKey || (ImGuiKey = {}));
// To test io.KeyMods (which is a combination of individual fields io.KeyCtrl, io.KeyShift, io.KeyAlt set by user/backend)

var ImGuiKeyModFlags;
(function (ImGuiKeyModFlags) {
    ImGuiKeyModFlags[ImGuiKeyModFlags["None"] = 0] = "None";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Ctrl"] = 1] = "Ctrl";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Shift"] = 2] = "Shift";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Alt"] = 4] = "Alt";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Super"] = 8] = "Super";
})(ImGuiKeyModFlags || (ImGuiKeyModFlags = {}));
// [BETA] Gamepad/Keyboard directional navigation
// Keyboard: Set io.ConfigFlags |= EnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.KeyDown[] + io.KeyMap[] arrays.
// Gamepad:  Set io.ConfigFlags |= EnableGamepad to enable. Fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().
// Read instructions in imgui.cpp for more details.

var ImGuiNavInput;
(function (ImGuiNavInput) {
    // Gamepad Mapping
    ImGuiNavInput[ImGuiNavInput["Activate"] = 0] = "Activate";
    ImGuiNavInput[ImGuiNavInput["Cancel"] = 1] = "Cancel";
    ImGuiNavInput[ImGuiNavInput["Input"] = 2] = "Input";
    ImGuiNavInput[ImGuiNavInput["Menu"] = 3] = "Menu";
    ImGuiNavInput[ImGuiNavInput["DpadLeft"] = 4] = "DpadLeft";
    ImGuiNavInput[ImGuiNavInput["DpadRight"] = 5] = "DpadRight";
    ImGuiNavInput[ImGuiNavInput["DpadUp"] = 6] = "DpadUp";
    ImGuiNavInput[ImGuiNavInput["DpadDown"] = 7] = "DpadDown";
    ImGuiNavInput[ImGuiNavInput["LStickLeft"] = 8] = "LStickLeft";
    ImGuiNavInput[ImGuiNavInput["LStickRight"] = 9] = "LStickRight";
    ImGuiNavInput[ImGuiNavInput["LStickUp"] = 10] = "LStickUp";
    ImGuiNavInput[ImGuiNavInput["LStickDown"] = 11] = "LStickDown";
    ImGuiNavInput[ImGuiNavInput["FocusPrev"] = 12] = "FocusPrev";
    ImGuiNavInput[ImGuiNavInput["FocusNext"] = 13] = "FocusNext";
    ImGuiNavInput[ImGuiNavInput["TweakSlow"] = 14] = "TweakSlow";
    ImGuiNavInput[ImGuiNavInput["TweakFast"] = 15] = "TweakFast";
    // [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.
    // Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) may be directly reading from io.KeyDown[] instead of io.NavInputs[].
    ImGuiNavInput[ImGuiNavInput["KeyMenu_"] = 16] = "KeyMenu_";
    ImGuiNavInput[ImGuiNavInput["KeyLeft_"] = 17] = "KeyLeft_";
    ImGuiNavInput[ImGuiNavInput["KeyRight_"] = 18] = "KeyRight_";
    ImGuiNavInput[ImGuiNavInput["KeyUp_"] = 19] = "KeyUp_";
    ImGuiNavInput[ImGuiNavInput["KeyDown_"] = 20] = "KeyDown_";
    ImGuiNavInput[ImGuiNavInput["COUNT"] = 21] = "COUNT";
    ImGuiNavInput[ImGuiNavInput["InternalStart_"] = 16] = "InternalStart_";
})(ImGuiNavInput || (ImGuiNavInput = {}));
// [BETA] Gamepad/Keyboard directional navigation flags, stored in io.ConfigFlags

var ImGuiConfigFlags;
(function (ImGuiConfigFlags) {
    ImGuiConfigFlags[ImGuiConfigFlags["None"] = 0] = "None";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableKeyboard"] = 1] = "NavEnableKeyboard";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableGamepad"] = 2] = "NavEnableGamepad";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableSetMousePos"] = 4] = "NavEnableSetMousePos";
    ImGuiConfigFlags[ImGuiConfigFlags["NavNoCaptureKeyboard"] = 8] = "NavNoCaptureKeyboard";
    ImGuiConfigFlags[ImGuiConfigFlags["NoMouse"] = 16] = "NoMouse";
    ImGuiConfigFlags[ImGuiConfigFlags["NoMouseCursorChange"] = 32] = "NoMouseCursorChange";
    ImGuiConfigFlags[ImGuiConfigFlags["IsSRGB"] = 1048576] = "IsSRGB";
    ImGuiConfigFlags[ImGuiConfigFlags["IsTouchScreen"] = 2097152] = "IsTouchScreen"; // Application is using a touch screen instead of a mouse.
})(ImGuiConfigFlags || (ImGuiConfigFlags = {}));
// Enumeration for PushStyleColor() / PopStyleColor()

var ImGuiCol;
(function (ImGuiCol) {
    ImGuiCol[ImGuiCol["Text"] = 0] = "Text";
    ImGuiCol[ImGuiCol["TextDisabled"] = 1] = "TextDisabled";
    ImGuiCol[ImGuiCol["WindowBg"] = 2] = "WindowBg";
    ImGuiCol[ImGuiCol["ChildBg"] = 3] = "ChildBg";
    ImGuiCol[ImGuiCol["PopupBg"] = 4] = "PopupBg";
    ImGuiCol[ImGuiCol["Border"] = 5] = "Border";
    ImGuiCol[ImGuiCol["BorderShadow"] = 6] = "BorderShadow";
    ImGuiCol[ImGuiCol["FrameBg"] = 7] = "FrameBg";
    ImGuiCol[ImGuiCol["FrameBgHovered"] = 8] = "FrameBgHovered";
    ImGuiCol[ImGuiCol["FrameBgActive"] = 9] = "FrameBgActive";
    ImGuiCol[ImGuiCol["TitleBg"] = 10] = "TitleBg";
    ImGuiCol[ImGuiCol["TitleBgActive"] = 11] = "TitleBgActive";
    ImGuiCol[ImGuiCol["TitleBgCollapsed"] = 12] = "TitleBgCollapsed";
    ImGuiCol[ImGuiCol["MenuBarBg"] = 13] = "MenuBarBg";
    ImGuiCol[ImGuiCol["ScrollbarBg"] = 14] = "ScrollbarBg";
    ImGuiCol[ImGuiCol["ScrollbarGrab"] = 15] = "ScrollbarGrab";
    ImGuiCol[ImGuiCol["ScrollbarGrabHovered"] = 16] = "ScrollbarGrabHovered";
    ImGuiCol[ImGuiCol["ScrollbarGrabActive"] = 17] = "ScrollbarGrabActive";
    ImGuiCol[ImGuiCol["CheckMark"] = 18] = "CheckMark";
    ImGuiCol[ImGuiCol["SliderGrab"] = 19] = "SliderGrab";
    ImGuiCol[ImGuiCol["SliderGrabActive"] = 20] = "SliderGrabActive";
    ImGuiCol[ImGuiCol["Button"] = 21] = "Button";
    ImGuiCol[ImGuiCol["ButtonHovered"] = 22] = "ButtonHovered";
    ImGuiCol[ImGuiCol["ButtonActive"] = 23] = "ButtonActive";
    ImGuiCol[ImGuiCol["Header"] = 24] = "Header";
    ImGuiCol[ImGuiCol["HeaderHovered"] = 25] = "HeaderHovered";
    ImGuiCol[ImGuiCol["HeaderActive"] = 26] = "HeaderActive";
    ImGuiCol[ImGuiCol["Separator"] = 27] = "Separator";
    ImGuiCol[ImGuiCol["SeparatorHovered"] = 28] = "SeparatorHovered";
    ImGuiCol[ImGuiCol["SeparatorActive"] = 29] = "SeparatorActive";
    ImGuiCol[ImGuiCol["ResizeGrip"] = 30] = "ResizeGrip";
    ImGuiCol[ImGuiCol["ResizeGripHovered"] = 31] = "ResizeGripHovered";
    ImGuiCol[ImGuiCol["ResizeGripActive"] = 32] = "ResizeGripActive";
    ImGuiCol[ImGuiCol["Tab"] = 33] = "Tab";
    ImGuiCol[ImGuiCol["TabHovered"] = 34] = "TabHovered";
    ImGuiCol[ImGuiCol["TabActive"] = 35] = "TabActive";
    ImGuiCol[ImGuiCol["TabUnfocused"] = 36] = "TabUnfocused";
    ImGuiCol[ImGuiCol["TabUnfocusedActive"] = 37] = "TabUnfocusedActive";
    ImGuiCol[ImGuiCol["PlotLines"] = 38] = "PlotLines";
    ImGuiCol[ImGuiCol["PlotLinesHovered"] = 39] = "PlotLinesHovered";
    ImGuiCol[ImGuiCol["PlotHistogram"] = 40] = "PlotHistogram";
    ImGuiCol[ImGuiCol["PlotHistogramHovered"] = 41] = "PlotHistogramHovered";
    ImGuiCol[ImGuiCol["TableHeaderBg"] = 42] = "TableHeaderBg";
    ImGuiCol[ImGuiCol["TableBorderStrong"] = 43] = "TableBorderStrong";
    ImGuiCol[ImGuiCol["TableBorderLight"] = 44] = "TableBorderLight";
    ImGuiCol[ImGuiCol["TableRowBg"] = 45] = "TableRowBg";
    ImGuiCol[ImGuiCol["TableRowBgAlt"] = 46] = "TableRowBgAlt";
    ImGuiCol[ImGuiCol["TextSelectedBg"] = 47] = "TextSelectedBg";
    ImGuiCol[ImGuiCol["DragDropTarget"] = 48] = "DragDropTarget";
    ImGuiCol[ImGuiCol["NavHighlight"] = 49] = "NavHighlight";
    ImGuiCol[ImGuiCol["NavWindowingHighlight"] = 50] = "NavWindowingHighlight";
    ImGuiCol[ImGuiCol["NavWindowingDimBg"] = 51] = "NavWindowingDimBg";
    ImGuiCol[ImGuiCol["ModalWindowDimBg"] = 52] = "ModalWindowDimBg";
    ImGuiCol[ImGuiCol["COUNT"] = 53] = "COUNT";
})(ImGuiCol || (ImGuiCol = {}));
// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.
// NB: the enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code. During initialization, feel free to just poke into ImGuiStyle directly.
// NB: if changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.

var ImGuiStyleVar;
(function (ImGuiStyleVar) {
    // Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
    ImGuiStyleVar[ImGuiStyleVar["Alpha"] = 0] = "Alpha";
    ImGuiStyleVar[ImGuiStyleVar["WindowPadding"] = 1] = "WindowPadding";
    ImGuiStyleVar[ImGuiStyleVar["WindowRounding"] = 2] = "WindowRounding";
    ImGuiStyleVar[ImGuiStyleVar["WindowBorderSize"] = 3] = "WindowBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["WindowMinSize"] = 4] = "WindowMinSize";
    ImGuiStyleVar[ImGuiStyleVar["WindowTitleAlign"] = 5] = "WindowTitleAlign";
    ImGuiStyleVar[ImGuiStyleVar["ChildRounding"] = 6] = "ChildRounding";
    ImGuiStyleVar[ImGuiStyleVar["ChildBorderSize"] = 7] = "ChildBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["PopupRounding"] = 8] = "PopupRounding";
    ImGuiStyleVar[ImGuiStyleVar["PopupBorderSize"] = 9] = "PopupBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["FramePadding"] = 10] = "FramePadding";
    ImGuiStyleVar[ImGuiStyleVar["FrameRounding"] = 11] = "FrameRounding";
    ImGuiStyleVar[ImGuiStyleVar["FrameBorderSize"] = 12] = "FrameBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["ItemSpacing"] = 13] = "ItemSpacing";
    ImGuiStyleVar[ImGuiStyleVar["ItemInnerSpacing"] = 14] = "ItemInnerSpacing";
    ImGuiStyleVar[ImGuiStyleVar["IndentSpacing"] = 15] = "IndentSpacing";
    ImGuiStyleVar[ImGuiStyleVar["CellPadding"] = 16] = "CellPadding";
    ImGuiStyleVar[ImGuiStyleVar["ScrollbarSize"] = 17] = "ScrollbarSize";
    ImGuiStyleVar[ImGuiStyleVar["ScrollbarRounding"] = 18] = "ScrollbarRounding";
    ImGuiStyleVar[ImGuiStyleVar["GrabMinSize"] = 19] = "GrabMinSize";
    ImGuiStyleVar[ImGuiStyleVar["GrabRounding"] = 20] = "GrabRounding";
    ImGuiStyleVar[ImGuiStyleVar["TabRounding"] = 21] = "TabRounding";
    ImGuiStyleVar[ImGuiStyleVar["ButtonTextAlign"] = 22] = "ButtonTextAlign";
    ImGuiStyleVar[ImGuiStyleVar["SelectableTextAlign"] = 23] = "SelectableTextAlign";
    ImGuiStyleVar[ImGuiStyleVar["COUNT"] = 24] = "COUNT";
})(ImGuiStyleVar || (ImGuiStyleVar = {}));
// Back-end capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom back-end.

var ImGuiBackendFlags;
(function (ImGuiBackendFlags) {
    ImGuiBackendFlags[ImGuiBackendFlags["None"] = 0] = "None";
    ImGuiBackendFlags[ImGuiBackendFlags["HasGamepad"] = 1] = "HasGamepad";
    ImGuiBackendFlags[ImGuiBackendFlags["HasMouseCursors"] = 2] = "HasMouseCursors";
    ImGuiBackendFlags[ImGuiBackendFlags["HasSetMousePos"] = 4] = "HasSetMousePos";
    ImGuiBackendFlags[ImGuiBackendFlags["RendererHasVtxOffset"] = 8] = "RendererHasVtxOffset";
})(ImGuiBackendFlags || (ImGuiBackendFlags = {}));
// Flags for InvisibleButton() [extended in imgui_internal.h]

var ImGuiButtonFlags;
(function (ImGuiButtonFlags) {
    ImGuiButtonFlags[ImGuiButtonFlags["None"] = 0] = "None";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonLeft"] = 1] = "MouseButtonLeft";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonRight"] = 2] = "MouseButtonRight";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonMiddle"] = 4] = "MouseButtonMiddle";
    // [Internal]
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonMask_"] = 7] = "MouseButtonMask_";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonDefault_"] = 1] = "MouseButtonDefault_";
})(ImGuiButtonFlags || (ImGuiButtonFlags = {}));
// Enumeration for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()

var ImGuiColorEditFlags;
(function (ImGuiColorEditFlags) {
    ImGuiColorEditFlags[ImGuiColorEditFlags["None"] = 0] = "None";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoAlpha"] = 2] = "NoAlpha";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoPicker"] = 4] = "NoPicker";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoOptions"] = 8] = "NoOptions";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoSmallPreview"] = 16] = "NoSmallPreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoInputs"] = 32] = "NoInputs";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoTooltip"] = 64] = "NoTooltip";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoLabel"] = 128] = "NoLabel";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoSidePreview"] = 256] = "NoSidePreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoDragDrop"] = 512] = "NoDragDrop";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoBorder"] = 1024] = "NoBorder";
    // User Options (right-click on widget to change some of them). You can set application defaults using SetColorEditOptions(). The idea is that you probably don't want to override them in most of your calls, let the user choose and/or call SetColorEditOptions() during startup.
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaBar"] = 65536] = "AlphaBar";
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaPreview"] = 131072] = "AlphaPreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaPreviewHalf"] = 262144] = "AlphaPreviewHalf";
    ImGuiColorEditFlags[ImGuiColorEditFlags["HDR"] = 524288] = "HDR";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayRGB"] = 1048576] = "DisplayRGB";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayHSV"] = 2097152] = "DisplayHSV";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayHex"] = 4194304] = "DisplayHex";
    ImGuiColorEditFlags[ImGuiColorEditFlags["Uint8"] = 8388608] = "Uint8";
    ImGuiColorEditFlags[ImGuiColorEditFlags["Float"] = 16777216] = "Float";
    ImGuiColorEditFlags[ImGuiColorEditFlags["PickerHueBar"] = 33554432] = "PickerHueBar";
    ImGuiColorEditFlags[ImGuiColorEditFlags["PickerHueWheel"] = 67108864] = "PickerHueWheel";
    ImGuiColorEditFlags[ImGuiColorEditFlags["InputRGB"] = 134217728] = "InputRGB";
    ImGuiColorEditFlags[ImGuiColorEditFlags["InputHSV"] = 268435456] = "InputHSV";
    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
    ImGuiColorEditFlags[ImGuiColorEditFlags["_OptionsDefault"] = 177209344] = "_OptionsDefault";
    // [Internal] Masks
    ImGuiColorEditFlags[ImGuiColorEditFlags["_DisplayMask"] = 7340032] = "_DisplayMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_DataTypeMask"] = 25165824] = "_DataTypeMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_PickerMask"] = 100663296] = "_PickerMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_InputMask"] = 402653184] = "_InputMask";
})(ImGuiColorEditFlags || (ImGuiColorEditFlags = {}));
// Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
// We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.

var ImGuiSliderFlags;
(function (ImGuiSliderFlags) {
    ImGuiSliderFlags[ImGuiSliderFlags["None"] = 0] = "None";
    ImGuiSliderFlags[ImGuiSliderFlags["AlwaysClamp"] = 16] = "AlwaysClamp";
    ImGuiSliderFlags[ImGuiSliderFlags["Logarithmic"] = 32] = "Logarithmic";
    ImGuiSliderFlags[ImGuiSliderFlags["NoRoundToFormat"] = 64] = "NoRoundToFormat";
    ImGuiSliderFlags[ImGuiSliderFlags["NoInput"] = 128] = "NoInput";
    ImGuiSliderFlags[ImGuiSliderFlags["InvalidMask_"] = 1879048207] = "InvalidMask_"; // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
})(ImGuiSliderFlags || (ImGuiSliderFlags = {}));
// Identify a mouse button.
// Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.

var ImGuiMouseButton;
(function (ImGuiMouseButton) {
    ImGuiMouseButton[ImGuiMouseButton["Left"] = 0] = "Left";
    ImGuiMouseButton[ImGuiMouseButton["Right"] = 1] = "Right";
    ImGuiMouseButton[ImGuiMouseButton["Middle"] = 2] = "Middle";
    ImGuiMouseButton[ImGuiMouseButton["COUNT"] = 5] = "COUNT";
})(ImGuiMouseButton || (ImGuiMouseButton = {}));
// Enumeration for GetMouseCursor()

var ImGuiMouseCursor;
(function (ImGuiMouseCursor) {
    ImGuiMouseCursor[ImGuiMouseCursor["None"] = -1] = "None";
    ImGuiMouseCursor[ImGuiMouseCursor["Arrow"] = 0] = "Arrow";
    ImGuiMouseCursor[ImGuiMouseCursor["TextInput"] = 1] = "TextInput";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeAll"] = 2] = "ResizeAll";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNS"] = 3] = "ResizeNS";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeEW"] = 4] = "ResizeEW";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNESW"] = 5] = "ResizeNESW";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNWSE"] = 6] = "ResizeNWSE";
    ImGuiMouseCursor[ImGuiMouseCursor["Hand"] = 7] = "Hand";
    ImGuiMouseCursor[ImGuiMouseCursor["NotAllowed"] = 8] = "NotAllowed";
    ImGuiMouseCursor[ImGuiMouseCursor["COUNT"] = 9] = "COUNT";
})(ImGuiMouseCursor || (ImGuiMouseCursor = {}));
// Condition for ImGui::SetWindow***(), SetNextWindow***(), SetNextTreeNode***() functions
// All those functions treat 0 as a shortcut to Always. From the point of view of the user use this as an enum (don't combine multiple values into flags).

var ImGuiCond;
(function (ImGuiCond) {
    ImGuiCond[ImGuiCond["None"] = 0] = "None";
    ImGuiCond[ImGuiCond["Always"] = 1] = "Always";
    ImGuiCond[ImGuiCond["Once"] = 2] = "Once";
    ImGuiCond[ImGuiCond["FirstUseEver"] = 4] = "FirstUseEver";
    ImGuiCond[ImGuiCond["Appearing"] = 8] = "Appearing";
})(ImGuiCond || (ImGuiCond = {}));

var ImDrawCornerFlags;
(function (ImDrawCornerFlags) {
    ImDrawCornerFlags[ImDrawCornerFlags["None"] = 0] = "None";
    ImDrawCornerFlags[ImDrawCornerFlags["TopLeft"] = 1] = "TopLeft";
    ImDrawCornerFlags[ImDrawCornerFlags["TopRight"] = 2] = "TopRight";
    ImDrawCornerFlags[ImDrawCornerFlags["BotLeft"] = 4] = "BotLeft";
    ImDrawCornerFlags[ImDrawCornerFlags["BotRight"] = 8] = "BotRight";
    ImDrawCornerFlags[ImDrawCornerFlags["Top"] = 3] = "Top";
    ImDrawCornerFlags[ImDrawCornerFlags["Bot"] = 12] = "Bot";
    ImDrawCornerFlags[ImDrawCornerFlags["Left"] = 5] = "Left";
    ImDrawCornerFlags[ImDrawCornerFlags["Right"] = 10] = "Right";
    ImDrawCornerFlags[ImDrawCornerFlags["All"] = 15] = "All";
})(ImDrawCornerFlags || (ImDrawCornerFlags = {}));

var ImDrawListFlags;
(function (ImDrawListFlags) {
    ImDrawListFlags[ImDrawListFlags["None"] = 0] = "None";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedLines"] = 1] = "AntiAliasedLines";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedLinesUseTex"] = 2] = "AntiAliasedLinesUseTex";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedFill"] = 4] = "AntiAliasedFill";
    ImDrawListFlags[ImDrawListFlags["AllowVtxOffset"] = 8] = "AllowVtxOffset"; // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.
})(ImDrawListFlags || (ImDrawListFlags = {}));

var ImVec2 = /** @class */ (function () {
    function ImVec2(x, y) {
        if (x === void 0) { x = 0.0; }
        if (y === void 0) { y = 0.0; }
        this.x = x;
        this.y = y;
    }
    ImVec2.prototype.Set = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    ImVec2.prototype.Copy = function (other) {
        this.x = other.x;
        this.y = other.y;
        return this;
    };
    ImVec2.prototype.Equals = function (other) {
        if (this.x !== other.x) {
            return false;
        }
        if (this.y !== other.y) {
            return false;
        }
        return true;
    };
    ImVec2.ZERO = new ImVec2(0.0, 0.0);
    ImVec2.UNIT = new ImVec2(1.0, 1.0);
    ImVec2.UNIT_X = new ImVec2(1.0, 0.0);
    ImVec2.UNIT_Y = new ImVec2(0.0, 1.0);
    return ImVec2;
}());


var ImVec4 = /** @class */ (function () {
    function ImVec4(x, y, z, w) {
        if (x === void 0) { x = 0.0; }
        if (y === void 0) { y = 0.0; }
        if (z === void 0) { z = 0.0; }
        if (w === void 0) { w = 1.0; }
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    ImVec4.prototype.Set = function (x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    };
    ImVec4.prototype.Copy = function (other) {
        this.x = other.x;
        this.y = other.y;
        this.z = other.z;
        this.w = other.w;
        return this;
    };
    ImVec4.prototype.Equals = function (other) {
        if (this.x !== other.x) {
            return false;
        }
        if (this.y !== other.y) {
            return false;
        }
        if (this.z !== other.z) {
            return false;
        }
        if (this.w !== other.w) {
            return false;
        }
        return true;
    };
    ImVec4.ZERO = new ImVec4(0.0, 0.0, 0.0, 0.0);
    ImVec4.UNIT = new ImVec4(1.0, 1.0, 1.0, 1.0);
    ImVec4.UNIT_X = new ImVec4(1.0, 0.0, 0.0, 0.0);
    ImVec4.UNIT_Y = new ImVec4(0.0, 1.0, 0.0, 0.0);
    ImVec4.UNIT_Z = new ImVec4(0.0, 0.0, 1.0, 0.0);
    ImVec4.UNIT_W = new ImVec4(0.0, 0.0, 0.0, 1.0);
    ImVec4.BLACK = new ImVec4(0.0, 0.0, 0.0, 1.0);
    ImVec4.WHITE = new ImVec4(1.0, 1.0, 1.0, 1.0);
    return ImVec4;
}());

//-----------------------------------------------------------------------------
// Helpers
//-----------------------------------------------------------------------------
// Lightweight std::vector<> like class to avoid dragging dependencies (also: windows implementation of STL with debug enabled is absurdly slow, so let's bypass it so our code runs fast in debug).
// Our implementation does NOT call C++ constructors/destructors. This is intentional and we do not require it. Do not use this class as a straight std::vector replacement in your code!

var ImVector = /** @class */ (function (_super) {
    __extends(ImVector, _super);
    function ImVector() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        _this_1.Data = _this_1;
        return _this_1;
        // public:
        // int                         Size;
        // int                         Capacity;
        // T*                          Data;
        // typedef T                   value_type;
        // typedef value_type*         iterator;
        // typedef const value_type*   const_iterator;
        // inline ImVector()           { Size = Capacity = 0; Data = NULL; }
        // inline ~ImVector()          { if (Data) ImGui::MemFree(Data); }
        // inline bool                 empty() const                   { return Size == 0; }
        // inline int                  size() const                    { return Size; }
        // inline int                  capacity() const                { return Capacity; }
        // inline value_type&          operator[](int i)               { IM_ASSERT(i < Size); return Data[i]; }
        // inline const value_type&    operator[](int i) const         { IM_ASSERT(i < Size); return Data[i]; }
        // inline void                 clear()                         { if (Data) { Size = Capacity = 0; ImGui::MemFree(Data); Data = NULL; } }
        // inline iterator             begin()                         { return Data; }
        // inline const_iterator       begin() const                   { return Data; }
        // inline iterator             end()                           { return Data + Size; }
        // inline const_iterator       end() const                     { return Data + Size; }
        // inline value_type&          front()                         { IM_ASSERT(Size > 0); return Data[0]; }
        // inline const value_type&    front() const                   { IM_ASSERT(Size > 0); return Data[0]; }
        // inline value_type&          back()                          { IM_ASSERT(Size > 0); return Data[Size - 1]; }
        // inline const value_type&    back() const                    { IM_ASSERT(Size > 0); return Data[Size - 1]; }
        // inline void                 swap(ImVector<T>& rhs)          { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; value_type* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }
        // inline int                  _grow_capacity(int size) const  { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > size ? new_capacity : size; }
        // inline void                 resize(int new_size)            { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }
        // inline void                 resize(int new_size, const T& v){ if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) Data[n] = v; Size = new_size; }
        // inline void                 reserve(int new_capacity)
        // {
        //     if (new_capacity <= Capacity)
        //         return;
        //     T* new_data = (value_type*)ImGui::MemAlloc((size_t)new_capacity * sizeof(T));
        //     if (Data)
        //         memcpy(new_data, Data, (size_t)Size * sizeof(T));
        //     ImGui::MemFree(Data);
        //     Data = new_data;
        //     Capacity = new_capacity;
        // }
        // inline void                 push_back(const value_type& v)  { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); Data[Size++] = v; }
        // inline void                 pop_back()                      { IM_ASSERT(Size > 0); Size--; }
        // inline void                 push_front(const value_type& v) { if (Size == 0) push_back(v); else insert(Data, v); }
        // inline iterator             erase(const_iterator it)                        { IM_ASSERT(it >= Data && it < Data+Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(value_type)); Size--; return Data + off; }
        // inline iterator             erase(const_iterator it, const_iterator it_last){ IM_ASSERT(it >= Data && it < Data+Size && it_last > it && it_last <= Data+Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - count) * sizeof(value_type)); Size -= (int)count; return Data + off; }
        // inline iterator             erase_unsorted(const_iterator it)               { IM_ASSERT(it >= Data && it < Data+Size);  const ptrdiff_t off = it - Data; if (it < Data+Size-1) memcpy(Data + off, Data + Size - 1, sizeof(value_type)); Size--; return Data + off; }
        // inline iterator             insert(const_iterator it, const value_type& v)  { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(value_type)); Data[off] = v; Size++; return Data + off; }
        // inline bool                 contains(const value_type& v) const             { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }
    }
    Object.defineProperty(ImVector.prototype, "Size", {
        get: function () { return this.length; },
        enumerable: false,
        configurable: true
    });
    ImVector.prototype.empty = function () { return this.length === 0; };
    ImVector.prototype.clear = function () { this.length = 0; };
    ImVector.prototype.pop_back = function () { return this.pop(); };
    ImVector.prototype.push_back = function (value) { this.push(value); };
    ImVector.prototype.front = function () { IM_ASSERT(this.Size > 0); return this.Data[0]; };
    ImVector.prototype.back = function () { IM_ASSERT(this.Size > 0); return this.Data[this.Size - 1]; };
    ImVector.prototype.size = function () { return this.Size; };
    ImVector.prototype.resize = function (new_size, v) {
        if (v) {
            for (var index = this.length; index < new_size; ++index) {
                this[index] = v(index);
            }
        }
        else {
            this.length = new_size;
        }
    };
    ImVector.prototype.contains = function (value) {
        return this.includes(value);
    };
    ImVector.prototype.find_erase_unsorted = function (value) {
        var index = this.indexOf(value);
        if (index !== -1) {
            this.splice(index, 1);
        }
    };
    return ImVector;
}(Array));

// Helper: Unicode defines
// #define IM_UNICODE_CODEPOINT_INVALID 0xFFFD     // Invalid Unicode code point (standard value).
// #ifdef IMGUI_USE_WCHAR32
// #define IM_UNICODE_CODEPOINT_MAX     0x10FFFF   // Maximum Unicode code point supported by this build.
// #else
// #define IM_UNICODE_CODEPOINT_MAX     0xFFFF     // Maximum Unicode code point supported by this build.
// #endif

var IM_UNICODE_CODEPOINT_MAX = 0xFFFF; // Maximum Unicode code point supported by this build.
// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"

var ImGuiTextFilter = /** @class */ (function () {
    // IMGUI_API           ImGuiTextFilter(const char* default_filter = "");
    function ImGuiTextFilter(default_filter) {
        if (default_filter === void 0) { default_filter = ""; }
        // [Internal]
        // struct TextRange
        // {
        //     const char* b;
        //     const char* e;
        //     TextRange() { b = e = NULL; }
        //     TextRange(const char* _b, const char* _e) { b = _b; e = _e; }
        //     const char* begin() const { return b; }
        //     const char* end() const { return e; }
        //     bool empty() const { return b == e; }
        //     char front() const { return *b; }
        //     static bool is_blank(char c) { return c == ' ' || c == '\t'; }
        //     void trim_blanks() { while (b < e && is_blank(*b)) b++; while (e > b && is_blank(*(e-1))) e--; }
        //     IMGUI_API void split(char separator, ImVector<TextRange>& out);
        // };
        // char                InputBuf[256];
        this.InputBuf = new ImStringBuffer(256);
        // ImVector<TextRange> Filters;
        // int                 CountGrep;
        this.CountGrep = 0;
        if (default_filter) {
            // ImStrncpy(InputBuf, default_filter, IM_ARRAYSIZE(InputBuf));
            this.InputBuf.buffer = default_filter;
            this.Build();
        }
        else {
            // InputBuf[0] = 0;
            this.InputBuf.buffer = "";
            this.CountGrep = 0;
        }
    }
    // IMGUI_API bool      Draw(const char* label = "Filter (inc,-exc)", float width = 0.0f);    // Helper calling InputText+Build
    ImGuiTextFilter.prototype.Draw = function (label, width) {
        if (label === void 0) { label = "Filter (inc,-exc)"; }
        if (width === void 0) { width = 0.0; }
        if (width !== 0.0)
            bind.PushItemWidth(width);
        var value_changed = InputText(label, this.InputBuf, IM_ARRAYSIZE(this.InputBuf));
        if (width !== 0.0)
            bind.PopItemWidth();
        if (value_changed)
            this.Build();
        return value_changed;
    };
    // IMGUI_API bool      PassFilter(const char* text, const char* text_end = NULL) const;
    ImGuiTextFilter.prototype.PassFilter = function (text, text_end) {
        // if (Filters.empty())
        //     return true;
        if (text_end === void 0) { text_end = null; }
        // if (text == NULL)
        //     text = "";
        // for (int i = 0; i != Filters.Size; i++)
        // {
        //     const TextRange& f = Filters[i];
        //     if (f.empty())
        //         continue;
        //     if (f.front() == '-')
        //     {
        //         // Subtract
        //         if (ImStristr(text, text_end, f.begin()+1, f.end()) != NULL)
        //             return false;
        //     }
        //     else
        //     {
        //         // Grep
        //         if (ImStristr(text, text_end, f.begin(), f.end()) != NULL)
        //             return true;
        //     }
        // }
        // Implicit * grep
        if (this.CountGrep === 0)
            return true;
        return false;
    };
    // IMGUI_API void      Build();
    ImGuiTextFilter.prototype.Build = function () {
        // Filters.resize(0);
        // TextRange input_range(InputBuf, InputBuf+strlen(InputBuf));
        // input_range.split(',', Filters);
        this.CountGrep = 0;
        // for (int i = 0; i != Filters.Size; i++)
        // {
        //     Filters[i].trim_blanks();
        //     if (Filters[i].empty())
        //         continue;
        //     if (Filters[i].front() != '-')
        //         CountGrep += 1;
        // }
    };
    // void                Clear() { InputBuf[0] = 0; Build(); }
    ImGuiTextFilter.prototype.Clear = function () { this.InputBuf.buffer = ""; this.Build(); };
    // bool                IsActive() const { return !Filters.empty(); }
    ImGuiTextFilter.prototype.IsActive = function () { return false; };
    return ImGuiTextFilter;
}());

// Helper: Text buffer for logging/accumulating text

var ImGuiTextBuffer = /** @class */ (function () {
    function ImGuiTextBuffer() {
        // ImVector<char>      Buf;
        this.Buf = "";
        // ImGuiTextBuffer()   { Buf.push_back(0); }
        // inline char         operator[](int i) { return Buf.Data[i]; }
        // const char*         begin() const { return &Buf.front(); }
        // const char*         end() const { return &Buf.back(); }      // Buf is zero-terminated, so end() will point on the zero-terminator
        // int                 size() const { return Buf.Size - 1; }
        // bool                empty() { return Buf.Size <= 1; }
        // void                clear() { Buf.clear(); Buf.push_back(0); }
        // void                reserve(int capacity) { Buf.reserve(capacity); }
        // const char*         c_str() const { return Buf.Data; }
        // IMGUI_API void      appendf(const char* fmt, ...) IM_FMTARGS(2);
        // IMGUI_API void      appendfv(const char* fmt, va_list args) IM_FMTLIST(2);
    }
    ImGuiTextBuffer.prototype.begin = function () { return this.Buf; };
    ImGuiTextBuffer.prototype.size = function () { return this.Buf.length; };
    ImGuiTextBuffer.prototype.clear = function () { this.Buf = ""; };
    ImGuiTextBuffer.prototype.append = function (text) { this.Buf += text; };
    return ImGuiTextBuffer;
}());

// Helper: Simple Key->value storage
// Typically you don't have to worry about this since a storage is held within each Window.
// We use it to e.g. store collapse state for a tree (Int 0/1), store color edit options.
// This is optimized for efficient reading (dichotomy into a contiguous buffer), rare writing (typically tied to user interactions)
// You can use it as custom user storage for temporary values. Declare your own storage if, for example:
// - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).
// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)
// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.
var ImGuiStorage = /** @class */ (function () {
    function ImGuiStorage() {
    }
    return ImGuiStorage;
}());

// Helpers macros to generate 32-bits encoded colors
var IM_COL32_R_SHIFT = 0;
var IM_COL32_G_SHIFT = 8;
var IM_COL32_B_SHIFT = 16;
var IM_COL32_A_SHIFT = 24;
var IM_COL32_A_MASK = 0xFF000000;

function IM_COL32(R, G, B, A) {
    if (A === void 0) { A = 255; }
    return ((A << IM_COL32_A_SHIFT) | (B << IM_COL32_B_SHIFT) | (G << IM_COL32_G_SHIFT) | (R << IM_COL32_R_SHIFT)) >>> 0;
}
var IM_COL32_WHITE = IM_COL32(255, 255, 255, 255);
 // Opaque white = 0xFFFFFFFF
var IM_COL32_BLACK = IM_COL32(0, 0, 0, 255);
 // Opaque black
var IM_COL32_BLACK_TRANS = IM_COL32(0, 0, 0, 0);
 // Transparent black = 0x00000000
// ImColor() helper to implicity converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)
// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.
// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.
// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.

var ImColor = /** @class */ (function () {
    function ImColor(r, g, b, a) {
        if (r === void 0) { r = 0.0; }
        if (g === void 0) { g = 0.0; }
        if (b === void 0) { b = 0.0; }
        if (a === void 0) { a = 1.0; }
        // ImVec4              Value;
        this.Value = new ImVec4();
        if (typeof (r) === "number") {
            if (r > 255 && g === 0.0 && b === 0.0 && a === 1.0) {
                this.Value.x = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_R_SHIFT) & 0xFF) / 255));
                this.Value.y = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_G_SHIFT) & 0xFF) / 255));
                this.Value.z = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_B_SHIFT) & 0xFF) / 255));
                this.Value.w = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_A_SHIFT) & 0xFF) / 255));
            }
            else if (r <= 1.0 && g <= 1.0 && b <= 1.0 && a <= 1.0) {
                this.Value.x = Math.max(0.0, r);
                this.Value.y = Math.max(0.0, g);
                this.Value.z = Math.max(0.0, b);
                this.Value.w = Math.max(0.0, a);
            }
            else {
                this.Value.x = Math.max(0.0, Math.min(1.0, r / 255));
                this.Value.y = Math.max(0.0, Math.min(1.0, g / 255));
                this.Value.z = Math.max(0.0, Math.min(1.0, b / 255));
                if (a <= 1.0) {
                    this.Value.w = Math.max(0.0, a);
                }
                else {
                    this.Value.w = Math.max(0.0, Math.min(1.0, a / 255));
                }
            }
        }
        else {
            this.Value.Copy(r);
        }
    }
    // inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }
    ImColor.prototype.toImU32 = function () { return ColorConvertFloat4ToU32(this.Value); };
    // inline operator ImVec4() const                                  { return Value; }
    ImColor.prototype.toImVec4 = function () { return this.Value; };
    // FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.
    // inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }
    ImColor.prototype.SetHSV = function (h, s, v, a) {
        if (a === void 0) { a = 1.0; }
        var ref_r = [this.Value.x];
        var ref_g = [this.Value.y];
        var ref_b = [this.Value.z];
        ColorConvertHSVtoRGB(h, s, v, ref_r, ref_g, ref_b);
        this.Value.x = ref_r[0];
        this.Value.y = ref_g[0];
        this.Value.z = ref_b[0];
        this.Value.w = a;
    };
    // static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }
    ImColor.HSV = function (h, s, v, a) {
        if (a === void 0) { a = 1.0; }
        var color = new ImColor();
        color.SetHSV(h, s, v, a);
        return color;
    };
    return ImColor;
}());


var ImGuiInputTextDefaultSize = 128;
// Shared state of InputText(), passed to callback when a ImGuiInputTextFlags_Callback* flag is used and the corresponding callback is triggered.

var ImGuiInputTextCallbackData = /** @class */ (function () {
    function ImGuiInputTextCallbackData(native, UserData) {
        if (UserData === void 0) { UserData = null; }
        this.native = native;
        this.UserData = UserData;
    }
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "EventFlag", {
        // ImGuiInputTextFlags EventFlag;      // One of ImGuiInputTextFlags_Callback* // Read-only
        get: function () { return this.native.EventFlag; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "Flags", {
        // ImGuiInputTextFlags Flags;          // What user passed to InputText()      // Read-only
        get: function () { return this.native.Flags; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "EventChar", {
        // void*               UserData;       // What user passed to InputText()      // Read-only
        // public get UserData(): any { return this.native.UserData; }
        // CharFilter event:
        // ImWchar             EventChar;      // Character input                      // Read-write (replace character or set to zero)
        get: function () { return this.native.EventChar; },
        set: function (value) { this.native.EventChar = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "EventKey", {
        // Completion,History,Always events:
        // If you modify the buffer contents make sure you update 'BufTextLen' and set 'BufDirty' to true.
        // ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only
        get: function () { return this.native.EventKey; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "Buf", {
        // char*               Buf;            // Current text buffer                  // Read-write (pointed data only, can't replace the actual pointer)
        get: function () { return this.native.Buf; },
        set: function (value) { this.native.Buf = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "BufTextLen", {
        // int                 BufTextLen;     // Current text length in bytes         // Read-write
        get: function () { return this.native.BufTextLen; },
        set: function (value) { this.native.BufTextLen = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "BufSize", {
        // int                 BufSize;        // Maximum text length in bytes         // Read-only
        get: function () { return this.native.BufSize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "BufDirty", {
        // bool                BufDirty;       // Set if you modify Buf/BufTextLen!!   // Write
        set: function (value) { this.native.BufDirty = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "CursorPos", {
        // int                 CursorPos;      //                                      // Read-write
        get: function () { return this.native.CursorPos; },
        set: function (value) { this.native.CursorPos = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "SelectionStart", {
        // int                 SelectionStart; //                                      // Read-write (== to SelectionEnd when no selection)
        get: function () { return this.native.SelectionStart; },
        set: function (value) { this.native.SelectionStart = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "SelectionEnd", {
        // int                 SelectionEnd;   //                                      // Read-write
        get: function () { return this.native.SelectionEnd; },
        set: function (value) { this.native.SelectionEnd = value; },
        enumerable: false,
        configurable: true
    });
    // NB: Helper functions for text manipulation. Calling those function loses selection.
    // IMGUI_API void    DeleteChars(int pos, int bytes_count);
    ImGuiInputTextCallbackData.prototype.DeleteChars = function (pos, bytes_count) { return this.native.DeleteChars(pos, bytes_count); };
    // IMGUI_API void    InsertChars(int pos, const char* text, const char* text_end = NULL);
    ImGuiInputTextCallbackData.prototype.InsertChars = function (pos, text, text_end) {
        if (text_end === void 0) { text_end = null; }
        return this.native.InsertChars(pos, text_end !== null ? text.substring(0, text_end) : text);
    };
    // void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen; }
    ImGuiInputTextCallbackData.prototype.SelectAll = function () { this.native.SelectAll(); };
    // void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }
    ImGuiInputTextCallbackData.prototype.ClearSelection = function () { this.native.ClearSelection(); };
    // bool              HasSelection() const { return SelectionStart != SelectionEnd; }
    ImGuiInputTextCallbackData.prototype.HasSelection = function () { return this.native.HasSelection(); };
    return ImGuiInputTextCallbackData;
}());

// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().
// NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.

var ImGuiSizeCallbackData = /** @class */ (function () {
    function ImGuiSizeCallbackData(native, UserData) {
        this.native = native;
        this.UserData = UserData;
    }
    Object.defineProperty(ImGuiSizeCallbackData.prototype, "Pos", {
        get: function () { return this.native.Pos; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiSizeCallbackData.prototype, "CurrentSize", {
        get: function () { return this.native.CurrentSize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiSizeCallbackData.prototype, "DesiredSize", {
        get: function () { return this.native.DesiredSize; },
        enumerable: false,
        configurable: true
    });
    return ImGuiSizeCallbackData;
}());

// Sorting specification for one column of a table (sizeof == 12 bytes)

var ImGuiTableColumnSortSpecs = /** @class */ (function () {
    function ImGuiTableColumnSortSpecs(native) {
        this.native = native;
    }
    Object.defineProperty(ImGuiTableColumnSortSpecs.prototype, "ColumnUserID", {
        get: function () { return this.native.ColumnUserID; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableColumnSortSpecs.prototype, "ColumnIndex", {
        get: function () { return this.native.ColumnIndex; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableColumnSortSpecs.prototype, "SortOrder", {
        get: function () { return this.native.SortOrder; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableColumnSortSpecs.prototype, "SortDirection", {
        get: function () { return this.native.SortDirection; },
        enumerable: false,
        configurable: true
    });
    return ImGuiTableColumnSortSpecs;
}());

// Sorting specifications for a table (often handling sort specs for a single column, occasionally more)
// Obtained by calling TableGetSortSpecs().
// When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.
// Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!

var ImGuiTableSortSpecs = /** @class */ (function () {
    function ImGuiTableSortSpecs(native) {
        var _this_1 = this;
        this.native = native;
        this._Specs = Array.from({ length: this.SpecsCount }).map(function (_, i) {
            return new ImGuiTableColumnSortSpecs(_this_1.native.GetSpec(i));
        });
    }
    Object.defineProperty(ImGuiTableSortSpecs.prototype, "Specs", {
        get: function () { return this._Specs; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableSortSpecs.prototype, "SpecsCount", {
        get: function () { return this.native.SpecsCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableSortSpecs.prototype, "SpecsDirty", {
        get: function () { return this.native.SpecsDirty; },
        set: function (value) { this.native.SpecsDirty = value; },
        enumerable: false,
        configurable: true
    });
    return ImGuiTableSortSpecs;
}());


var ImGuiListClipper = /** @class */ (function () {
    function ImGuiListClipper() {
        this._native = null;
    }
    Object.defineProperty(ImGuiListClipper.prototype, "native", {
        get: function () {
            return this._native || (this._native = new bind.ImGuiListClipper());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "DisplayStart", {
        get: function () { return this.native.DisplayStart; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "DisplayEnd", {
        get: function () { return this.native.DisplayEnd; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "ItemsCount", {
        get: function () { return this.native.ItemsCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "StepNo", {
        get: function () { return this.native.StepNo; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "ItemsFrozen", {
        get: function () { return this.native.ItemsFrozen; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "ItemsHeight", {
        get: function () { return this.native.ItemsHeight; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "StartPosY", {
        get: function () { return this.native.StartPosY; },
        enumerable: false,
        configurable: true
    });
    // items_count:  Use -1 to ignore (you can call Begin later). Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step).
    // items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().
    // If you don't specify an items_height, you NEED to call Step(). If you specify items_height you may call the old Begin()/End() api directly, but prefer calling Step().
    // ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, items_height); } // NB: Begin() initialize every fields (as we allow user to call Begin/End multiple times on a same instance if they want).
    // ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount == -1); }      // Assert if user forgot to call End() or Step() until false.
    ImGuiListClipper.prototype.delete = function () {
        if (this._native !== null) {
            this._native.delete();
            this._native = null;
        }
    };
    // IMGUI_API void Begin(int items_count, float items_height = -1.0f);  // Automatically called by constructor if you passed 'items_count' or by Step() in Step 1.
    ImGuiListClipper.prototype.Begin = function (items_count, items_height) {
        if (items_height === void 0) { items_height = -1.0; }
        this.native.Begin(items_count, items_height);
    };
    // IMGUI_API void End();                                               // Automatically called on the last call of Step() that returns false.
    ImGuiListClipper.prototype.End = function () {
        this.native.End();
        this.delete();
    };
    // IMGUI_API bool Step();                                              // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.
    ImGuiListClipper.prototype.Step = function () {
        var busy = this.native.Step();
        if (!busy) {
            this.delete();
        }
        return busy;
    };
    return ImGuiListClipper;
}());

//-----------------------------------------------------------------------------
// Draw List
// Hold a series of drawing commands. The user provides a renderer for ImDrawData which essentially contains an array of ImDrawList.
//-----------------------------------------------------------------------------
// The maximum line width to bake anti-aliased textures for. Build atlas with ImFontAtlasFlags_NoBakedLines to disable baking.
var IM_DRAWLIST_TEX_LINES_WIDTH_MAX = 63;
// Special Draw callback value to request renderer back-end to reset the graphics/render state.
// The renderer back-end needs to handle this special value, otherwise it will crash trying to call a function at this address.
// This is useful for example if you submitted callbacks which you know have altered the render state and you want it to be restored.
// It is not done by default because they are many perfectly useful way of altering render state for imgui contents (e.g. changing shader/blending settings before an Image call).
var ImDrawCallback_ResetRenderState = -1;
// Typically, 1 command = 1 GPU draw call (unless command is a callback)
// Pre 1.71 back-ends will typically ignore the VtxOffset/IdxOffset fields. When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset'
// is enabled, those fields allow us to render meshes larger than 64K vertices while keeping 16-bits indices.

var ImDrawCmd = /** @class */ (function () {
    function ImDrawCmd(native) {
        this.native = native;
        // ImDrawCallback  UserCallback;           // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
        this.UserCallback = null; // TODO
        // void*           UserCallbackData;       // The draw callback code can access this.
        this.UserCallbackData = null; // TODO
    }
    Object.defineProperty(ImDrawCmd.prototype, "ElemCount", {
        // unsigned int    ElemCount;              // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
        get: function () { return this.native.ElemCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawCmd.prototype, "ClipRect", {
        // ImVec4          ClipRect;               // Clipping rectangle (x1, y1, x2, y2)
        get: function () { return this.native.ClipRect; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawCmd.prototype, "TextureId", {
        // ImTextureID     TextureId;              // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.
        get: function () {
            return ImGuiContext.getTexture(this.native.TextureId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawCmd.prototype, "VtxOffset", {
        // unsigned int    VtxOffset;              // Start offset in vertex buffer. Pre-1.71 or without ImGuiBackendFlags_RendererHasVtxOffset: always 0. With ImGuiBackendFlags_RendererHasVtxOffset: may be >0 to support meshes larger than 64K vertices with 16-bits indices.
        get: function () { return this.native.VtxOffset; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawCmd.prototype, "IdxOffset", {
        // unsigned int    IdxOffset;              // Start offset in index buffer. Always equal to sum of ElemCount drawn so far.
        get: function () { return this.native.IdxOffset; },
        enumerable: false,
        configurable: true
    });
    return ImDrawCmd;
}());

// Vertex index
// (to allow large meshes with 16-bits indices: set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset in the renderer back-end)
// (to use 32-bits indices: override with '#define ImDrawIdx unsigned int' in imconfig.h)
// #ifndef ImDrawIdx
// typedef unsigned short ImDrawIdx;
// #endif

var ImDrawIdxSize = 2; // bind.ImDrawIdxSize;
// Vertex layout
// #ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT

var ImDrawVertSize = 20; // bind.ImDrawVertSize;

var ImDrawVertPosOffset = 0; // bind.ImDrawVertPosOffset;

var ImDrawVertUVOffset = 8; // bind.ImDrawVertUVOffset;

var ImDrawVertColOffset = 16; // bind.ImDrawVertColOffset;

var ImDrawVert = /** @class */ (function () {
    function ImDrawVert(buffer, byteOffset) {
        if (byteOffset === void 0) { byteOffset = 0; }
        this.pos = new Float32Array(buffer, byteOffset + bind.ImDrawVertPosOffset, 2);
        this.uv = new Float32Array(buffer, byteOffset + bind.ImDrawVertUVOffset, 2);
        this.col = new Uint32Array(buffer, byteOffset + bind.ImDrawVertColOffset, 1);
    }
    return ImDrawVert;
}());

// #else
// You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h
// The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.
// The type has to be described within the macro (you can either declare the struct or use a typedef)
// NOTE: IMGUI DOESN'T CLEAR THE STRUCTURE AND DOESN'T CALL A CONSTRUCTOR SO ANY CUSTOM FIELD WILL BE UNINITIALIZED. IF YOU ADD EXTRA FIELDS (SUCH AS A 'Z' COORDINATES) YOU WILL NEED TO CLEAR THEM DURING RENDER OR TO IGNORE THEM.
// IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT;
// #endif
// [Internal] For use by ImDrawList
var ImDrawCmdHeader = /** @class */ (function () {
    function ImDrawCmdHeader() {
    }
    return ImDrawCmdHeader;
}());

// Draw channels are used by the Columns API to "split" the render list into different channels while building, so items of each column can be batched together.
// You can also use them to simulate drawing layers and submit primitives in a different order than how they will be rendered.
var ImDrawChannel = /** @class */ (function () {
    function ImDrawChannel() {
    }
    return ImDrawChannel;
}());

var ImDrawListSharedData = /** @class */ (function () {
    function ImDrawListSharedData(native) {
        this.native = native;
    }
    return ImDrawListSharedData;
}());

// Draw command list
// This is the low-level list of polygons that ImGui functions are filling. At the end of the frame, all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.
// Each ImGui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to access the current window draw list and draw custom primitives.
// You can interleave normal ImGui:: calls and adding primitives to the current draw list.
// All positions are generally in pixel coordinates (top-left at (0,0), bottom-right at io.DisplaySize), however you are totally free to apply whatever transformation matrix to want to the data (if you apply such transformation you'll want to apply it to ClipRect as well)
// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.

var ImDrawList = /** @class */ (function () {
    function ImDrawList(native) {
        this.native = native;
    }
    ImDrawList.prototype.IterateDrawCmds = function (callback) {
        this.native.IterateDrawCmds(function (draw_cmd, ElemStart) {
            callback(new ImDrawCmd(draw_cmd), ElemStart);
        });
    };
    Object.defineProperty(ImDrawList.prototype, "IdxBuffer", {
        // This is what you have to render
        // ImVector<ImDrawCmd>     CmdBuffer;          // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.
        // ImVector<ImDrawIdx>     IdxBuffer;          // Index buffer. Each command consume ImDrawCmd::ElemCount of those
        get: function () { return this.native.IdxBuffer; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawList.prototype, "VtxBuffer", {
        // ImVector<ImDrawVert>    VtxBuffer;          // Vertex buffer.
        get: function () { return this.native.VtxBuffer; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawList.prototype, "Flags", {
        // ImDrawListFlags         Flags;              // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.
        get: function () { return this.native.Flags; },
        set: function (value) { this.native.Flags = value; },
        enumerable: false,
        configurable: true
    });
    // [Internal, used while building lists]
    // unsigned int            _VtxCurrentIdx;     // [Internal] == VtxBuffer.Size
    // const ImDrawListSharedData* _Data;          // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)
    // const char*             _OwnerName;         // Pointer to owner window's name for debugging
    // ImDrawVert*             _VtxWritePtr;       // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    // ImDrawIdx*              _IdxWritePtr;       // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    // ImVector<ImVec4>        _ClipRectStack;     // [Internal]
    // ImVector<ImTextureID>   _TextureIdStack;    // [Internal]
    // ImVector<ImVec2>        _Path;              // [Internal] current path building
    // int                     _ChannelsCurrent;   // [Internal] current channel number (0)
    // int                     _ChannelsCount;     // [Internal] number of active channels (1+)
    // ImVector<ImDrawChannel> _Channels;          // [Internal] draw channels for columns API (not resized down so _ChannelsCount may be smaller than _Channels.Size)
    // ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL; Clear(); }
    // ~ImDrawList() { ClearFreeMemory(); }
    // IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
    ImDrawList.prototype.PushClipRect = function (clip_rect_min, clip_rect_max, intersect_with_current_clip_rect) {
        if (intersect_with_current_clip_rect === void 0) { intersect_with_current_clip_rect = false; }
        this.native.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
    };
    // IMGUI_API void  PushClipRectFullScreen();
    ImDrawList.prototype.PushClipRectFullScreen = function () { this.native.PushClipRectFullScreen(); };
    // IMGUI_API void  PopClipRect();
    ImDrawList.prototype.PopClipRect = function () { this.native.PopClipRect(); };
    // IMGUI_API void  PushTextureID(ImTextureID texture_id);
    ImDrawList.prototype.PushTextureID = function (texture_id) {
        this.native.PushTextureID(ImGuiContext.setTexture(texture_id));
    };
    // IMGUI_API void  PopTextureID();
    ImDrawList.prototype.PopTextureID = function () { this.native.PopTextureID(); };
    // inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }
    ImDrawList.prototype.GetClipRectMin = function (out) {
        if (out === void 0) { out = new ImVec2(); }
        return this.native.GetClipRectMin(out);
    };
    // inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }
    ImDrawList.prototype.GetClipRectMax = function (out) {
        if (out === void 0) { out = new ImVec2(); }
        return this.native.GetClipRectMax(out);
    };
    // Primitives
    // IMGUI_API void  AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness = 1.0f);
    ImDrawList.prototype.AddLine = function (a, b, col, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddLine(a, b, col, thickness);
    };
    // IMGUI_API void  AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All, float thickness = 1.0f);   // a: upper-left, b: lower-right, rounding_corners_flags: 4-bits corresponding to which corner to round
    ImDrawList.prototype.AddRect = function (a, b, col, rounding, rounding_corners_flags, thickness) {
        if (rounding === void 0) { rounding = 0.0; }
        if (rounding_corners_flags === void 0) { rounding_corners_flags = ImDrawCornerFlags.All; }
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddRect(a, b, col, rounding, rounding_corners_flags, thickness);
    };
    // IMGUI_API void  AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);                     // a: upper-left, b: lower-right
    ImDrawList.prototype.AddRectFilled = function (a, b, col, rounding, rounding_corners_flags) {
        if (rounding === void 0) { rounding = 0.0; }
        if (rounding_corners_flags === void 0) { rounding_corners_flags = ImDrawCornerFlags.All; }
        this.native.AddRectFilled(a, b, col, rounding, rounding_corners_flags);
    };
    // IMGUI_API void  AddRectFilledMultiColor(const ImVec2& a, const ImVec2& b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
    ImDrawList.prototype.AddRectFilledMultiColor = function (a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left) {
        this.native.AddRectFilledMultiColor(a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
    };
    // IMGUI_API void  AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness = 1.0f);
    ImDrawList.prototype.AddQuad = function (a, b, c, d, col, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddQuad(a, b, c, d, col, thickness);
    };
    // IMGUI_API void  AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col);
    ImDrawList.prototype.AddQuadFilled = function (a, b, c, d, col) {
        this.native.AddQuadFilled(a, b, c, d, col);
    };
    // IMGUI_API void  AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness = 1.0f);
    ImDrawList.prototype.AddTriangle = function (a, b, c, col, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddTriangle(a, b, c, col, thickness);
    };
    // IMGUI_API void  AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col);
    ImDrawList.prototype.AddTriangleFilled = function (a, b, c, col) {
        this.native.AddTriangleFilled(a, b, c, col);
    };
    // IMGUI_API void  AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12, float thickness = 1.0f);
    ImDrawList.prototype.AddCircle = function (centre, radius, col, num_segments, thickness) {
        if (num_segments === void 0) { num_segments = 12; }
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddCircle(centre, radius, col, num_segments, thickness);
    };
    // IMGUI_API void  AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12);
    ImDrawList.prototype.AddCircleFilled = function (centre, radius, col, num_segments) {
        if (num_segments === void 0) { num_segments = 12; }
        this.native.AddCircleFilled(centre, radius, col, num_segments);
    };
    // IMGUI_API void  AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness = 1.0f);
    ImDrawList.prototype.AddNgon = function (centre, radius, col, num_segments, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddNgon(centre, radius, col, num_segments, thickness);
    };
    // IMGUI_API void  AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments);
    ImDrawList.prototype.AddNgonFilled = function (centre, radius, col, num_segments) {
        this.native.AddNgonFilled(centre, radius, col, num_segments);
    };
    ImDrawList.prototype.AddText = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] instanceof ImFont) {
            var font = args[0];
            var font_size = args[1];
            var pos = args[2];
            var col = args[3];
            var text_begin = args[4];
            var text_end = args[5] || null;
            var wrap_width = args[6] = 0.0;
            var cpu_fine_clip_rect = args[7] || null;
            this.native.AddText_B(font.native, font_size, pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin, wrap_width, cpu_fine_clip_rect);
        }
        else {
            var pos = args[0];
            var col = args[1];
            var text_begin = args[2];
            var text_end = args[3] || null;
            this.native.AddText_A(pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin);
        }
    };
    // IMGUI_API void  AddPolyline(const ImVec2* points, const int num_points, ImU32 col, bool closed, float thickness);
    ImDrawList.prototype.AddPolyline = function (points, num_points, col, closed, thickness) {
        this.native.AddPolyline(points, num_points, col, closed, thickness);
    };
    // IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, const int num_points, ImU32 col);
    ImDrawList.prototype.AddConvexPolyFilled = function (points, num_points, col) {
        this.native.AddConvexPolyFilled(points, num_points, col);
    };
    // IMGUI_API void  AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0); // Cubic Bezier (4 control points)
    ImDrawList.prototype.AddBezierCubic = function (p1, p2, p3, p4, col, thickness, num_segments) {
        if (thickness === void 0) { thickness = 1.0; }
        if (num_segments === void 0) { num_segments = 0; }
        this.native.AddBezierCubic(p1, p2, p3, p4, col, thickness, num_segments);
    };
    // IMGUI_API void  AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness, int num_segments = 0);               // Quadratic Bezier (3 control points)
    ImDrawList.prototype.AddBezierQuadratic = function (p1, p2, p3, col, thickness, num_segments) {
        if (thickness === void 0) { thickness = 1.0; }
        if (num_segments === void 0) { num_segments = 0; }
        this.native.AddBezierQuadratic(p1, p2, p3, col, thickness, num_segments);
    };
    // IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,1), ImU32 col = 0xFFFFFFFF);
    ImDrawList.prototype.AddImage = function (user_texture_id, a, b, uv_a, uv_b, col) {
        if (uv_a === void 0) { uv_a = ImVec2.ZERO; }
        if (uv_b === void 0) { uv_b = ImVec2.UNIT; }
        if (col === void 0) { col = 0xFFFFFFFF; }
        this.native.AddImage(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col);
    };
    // IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,0), const ImVec2& uv_c = ImVec2(1,1), const ImVec2& uv_d = ImVec2(0,1), ImU32 col = 0xFFFFFFFF);
    ImDrawList.prototype.AddImageQuad = function (user_texture_id, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col) {
        if (uv_a === void 0) { uv_a = ImVec2.ZERO; }
        if (uv_b === void 0) { uv_b = ImVec2.UNIT_X; }
        if (uv_c === void 0) { uv_c = ImVec2.UNIT; }
        if (uv_d === void 0) { uv_d = ImVec2.UNIT_Y; }
        if (col === void 0) { col = 0xFFFFFFFF; }
        this.native.AddImageQuad(ImGuiContext.setTexture(user_texture_id), a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
    };
    // IMGUI_API void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col, float rounding, int rounding_corners = ImDrawCornerFlags_All);
    ImDrawList.prototype.AddImageRounded = function (user_texture_id, a, b, uv_a, uv_b, col, rounding, rounding_corners) {
        if (rounding_corners === void 0) { rounding_corners = ImDrawCornerFlags.All; }
        this.native.AddImageRounded(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col, rounding, rounding_corners);
    };
    // Stateful path API, add points then finish with PathFill() or PathStroke()
    // inline    void  PathClear()                                                 { _Path.resize(0); }
    ImDrawList.prototype.PathClear = function () { this.native.PathClear(); };
    // inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }
    ImDrawList.prototype.PathLineTo = function (pos) { this.native.PathLineTo(pos); };
    // inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path[_Path.Size-1], &pos, 8) != 0) _Path.push_back(pos); }
    ImDrawList.prototype.PathLineToMergeDuplicate = function (pos) { this.native.PathLineToMergeDuplicate(pos); };
    // inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); PathClear(); }
    ImDrawList.prototype.PathFillConvex = function (col) { this.native.PathFillConvex(col); };
    // inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness); PathClear(); }
    ImDrawList.prototype.PathStroke = function (col, closed, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.PathStroke(col, closed, thickness);
    };
    // IMGUI_API void  PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments = 10);
    ImDrawList.prototype.PathArcTo = function (centre, radius, a_min, a_max, num_segments) {
        if (num_segments === void 0) { num_segments = 10; }
        this.native.PathArcTo(centre, radius, a_min, a_max, num_segments);
    };
    // IMGUI_API void  PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12);                                // Use precomputed angles for a 12 steps circle
    ImDrawList.prototype.PathArcToFast = function (centre, radius, a_min_of_12, a_max_of_12) { this.native.PathArcToFast(centre, radius, a_min_of_12, a_max_of_12); };
    // IMGUI_API void  PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0);  // Cubic Bezier (4 control points)
    ImDrawList.prototype.PathBezierCubicCurveTo = function (p2, p3, p4, num_segments) {
        if (num_segments === void 0) { num_segments = 0; }
        this.native.PathBezierCubicCurveTo(p2, p3, p4, num_segments);
    };
    // IMGUI_API void  PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments = 0);                // Quadratic Bezier (3 control points)
    ImDrawList.prototype.PathBezierQuadraticCurveTo = function (p2, p3, num_segments) {
        if (num_segments === void 0) { num_segments = 0; }
        this.native.PathBezierQuadraticCurveTo(p2, p3, num_segments);
    };
    // IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);
    ImDrawList.prototype.PathRect = function (rect_min, rect_max, rounding, rounding_corners_flags) {
        if (rounding === void 0) { rounding = 0.0; }
        if (rounding_corners_flags === void 0) { rounding_corners_flags = ImDrawCornerFlags.All; }
        this.native.PathRect(rect_min, rect_max, rounding, rounding_corners_flags);
    };
    // Channels
    // - Use to simulate layers. By switching channels to can render out-of-order (e.g. submit foreground primitives before background primitives)
    // - Use to minimize draw calls (e.g. if going back-and-forth between multiple non-overlapping clipping rectangles, prefer to append into separate channels then merge at the end)
    // IMGUI_API void  ChannelsSplit(int channels_count);
    ImDrawList.prototype.ChannelsSplit = function (channels_count) { this.native.ChannelsSplit(channels_count); };
    // IMGUI_API void  ChannelsMerge();
    ImDrawList.prototype.ChannelsMerge = function () { this.native.ChannelsMerge(); };
    // IMGUI_API void  ChannelsSetCurrent(int channel_index);
    ImDrawList.prototype.ChannelsSetCurrent = function (channel_index) { this.native.ChannelsSetCurrent(channel_index); };
    // Advanced
    // IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.
    ImDrawList.prototype.AddCallback = function (callback, callback_data) {
        var _callback = function (parent_list, draw_cmd) {
            callback(new ImDrawList(parent_list), new ImDrawCmd(draw_cmd));
        };
        this.native.AddCallback(_callback, callback_data);
    };
    // IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
    ImDrawList.prototype.AddDrawCmd = function () { this.native.AddDrawCmd(); };
    // Internal helpers
    // NB: all primitives needs to be reserved via PrimReserve() beforehand!
    // IMGUI_API void  PrimReserve(int idx_count, int vtx_count);
    ImDrawList.prototype.PrimReserve = function (idx_count, vtx_count) { this.native.PrimReserve(idx_count, vtx_count); };
    // IMGUI_API void  PrimUnreserve(int idx_count, int vtx_count);
    ImDrawList.prototype.PrimUnreserve = function (idx_count, vtx_count) { this.native.PrimUnreserve(idx_count, vtx_count); };
    // IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)
    ImDrawList.prototype.PrimRect = function (a, b, col) { this.native.PrimRect(a, b, col); };
    // IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
    ImDrawList.prototype.PrimRectUV = function (a, b, uv_a, uv_b, col) { this.native.PrimRectUV(a, b, uv_a, uv_b, col); };
    // IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);
    ImDrawList.prototype.PrimQuadUV = function (a, b, c, d, uv_a, uv_b, uv_c, uv_d, col) { this.native.PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col); };
    // inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }
    ImDrawList.prototype.PrimWriteVtx = function (pos, uv, col) { this.native.PrimWriteVtx(pos, uv, col); };
    // inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr = idx; _IdxWritePtr++; }
    ImDrawList.prototype.PrimWriteIdx = function (idx) { this.native.PrimWriteIdx(idx); };
    // inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }
    ImDrawList.prototype.PrimVtx = function (pos, uv, col) { this.native.PrimVtx(pos, uv, col); };
    return ImDrawList;
}());

// All draw data to render an ImGui frame

var ImDrawData = /** @class */ (function () {
    function ImDrawData(native) {
        this.native = native;
    }
    ImDrawData.prototype.IterateDrawLists = function (callback) {
        this.native.IterateDrawLists(function (draw_list) {
            callback(new ImDrawList(draw_list));
        });
    };
    Object.defineProperty(ImDrawData.prototype, "Valid", {
        // bool            Valid;                  // Only valid after Render() is called and before the next NewFrame() is called.
        get: function () { return this.native.Valid; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "CmdListsCount", {
        // ImDrawList**    CmdLists;
        // int             CmdListsCount;
        get: function () { return this.native.CmdListsCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "TotalIdxCount", {
        // int             TotalIdxCount;          // For convenience, sum of all cmd_lists idx_buffer.Size
        get: function () { return this.native.TotalIdxCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "TotalVtxCount", {
        // int             TotalVtxCount;          // For convenience, sum of all cmd_lists vtx_buffer.Size
        get: function () { return this.native.TotalVtxCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "DisplayPos", {
        // ImVec2          DisplayPos;             // Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)
        get: function () { return this.native.DisplayPos; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "DisplaySize", {
        // ImVec2          DisplaySize;            // Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)
        get: function () { return this.native.DisplaySize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "FramebufferScale", {
        // ImVec2          FramebufferScale;       // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.
        get: function () { return this.native.FramebufferScale; },
        enumerable: false,
        configurable: true
    });
    // Functions
    // ImDrawData() { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; }
    // IMGUI_API void DeIndexAllBuffers();               // For backward compatibility or convenience: convert all buffers from indexed to de-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
    ImDrawData.prototype.DeIndexAllBuffers = function () { this.native.DeIndexAllBuffers(); };
    // IMGUI_API void ScaleClipRects(const ImVec2& fb_scale);  // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.
    ImDrawData.prototype.ScaleClipRects = function (fb_scale) {
        this.native.ScaleClipRects(fb_scale);
    };
    return ImDrawData;
}());

var script_ImFontConfig = /** @class */ (function () {
    function script_ImFontConfig() {
        // void*           FontData;                   //          // TTF/OTF data
        // int             FontDataSize;               //          // TTF/OTF data size
        this.FontData = null;
        // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
        this.FontDataOwnedByAtlas = true;
        // int             FontNo;                     // 0        // Index of font within TTF/OTF file
        this.FontNo = 0;
        // float           SizePixels;                 //          // Size in pixels for rasterizer.
        this.SizePixels = 0;
        // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
        this.OversampleH = 3;
        this.OversampleV = 1;
        // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
        this.PixelSnapH = false;
        // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
        this.GlyphExtraSpacing = new ImVec2(0, 0);
        // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.
        this.GlyphOffset = new ImVec2(0, 0);
        // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
        this.GlyphRanges = null;
        // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
        this.GlyphMinAdvanceX = 0;
        // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs
        this.GlyphMaxAdvanceX = Number.MAX_VALUE;
        // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
        this.MergeMode = false;
        // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.
        this.RasterizerFlags = 0;
        // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
        this.RasterizerMultiply = 1.0;
        // ImWchar         EllipsisChar;           // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.
        this.EllipsisChar = -1;
        // [Internal]
        // char            Name[32];                               // Name (strictly to ease debugging)
        this.Name = "";
        // ImFont*         DstFont;
        this.DstFont = null;
        // IMGUI_API ImFontConfig();
    }
    return script_ImFontConfig;
}());


var ImFontConfig = /** @class */ (function () {
    function ImFontConfig(internal) {
        if (internal === void 0) { internal = new script_ImFontConfig(); }
        this.internal = internal;
    }
    Object.defineProperty(ImFontConfig.prototype, "FontData", {
        // void*           FontData;                   //          // TTF/OTF data
        // int             FontDataSize;               //          // TTF/OTF data size
        get: function () { return this.internal.FontData; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "FontDataOwnedByAtlas", {
        // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
        get: function () { return this.internal.FontDataOwnedByAtlas; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "FontNo", {
        // int             FontNo;                     // 0        // Index of font within TTF/OTF file
        get: function () { return this.internal.FontNo; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "SizePixels", {
        // float           SizePixels;                 //          // Size in pixels for rasterizer.
        get: function () { return this.internal.SizePixels; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "OversampleH", {
        // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
        get: function () { return this.internal.OversampleH; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "OversampleV", {
        get: function () { return this.internal.OversampleV; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "PixelSnapH", {
        // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
        get: function () { return this.internal.PixelSnapH; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphExtraSpacing", {
        // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
        get: function () { return this.internal.GlyphExtraSpacing; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphOffset", {
        // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.
        get: function () { return this.internal.GlyphOffset; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphRanges", {
        // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
        get: function () { return this.internal.GlyphRanges; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphMinAdvanceX", {
        // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
        get: function () { return this.internal.GlyphMinAdvanceX; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphMaxAdvanceX", {
        // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs
        get: function () { return this.internal.GlyphMaxAdvanceX; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "MergeMode", {
        // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
        get: function () { return this.internal.MergeMode; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "RasterizerFlags", {
        // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.
        get: function () { return this.internal.RasterizerFlags; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "RasterizerMultiply", {
        // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
        get: function () { return this.internal.RasterizerMultiply; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "Name", {
        // [Internal]
        // char            Name[32];                               // Name (strictly to ease debugging)
        get: function () { return this.internal.Name; },
        set: function (value) { this.internal.Name = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "DstFont", {
        // ImFont*         DstFont;
        get: function () {
            var font = this.internal.DstFont;
            return font && new ImFont(font);
        },
        enumerable: false,
        configurable: true
    });
    return ImFontConfig;
}());

// struct ImFontGlyph
var script_ImFontGlyph = /** @class */ (function () {
    function script_ImFontGlyph() {
        // unsigned int    Codepoint : 31;     // 0x0000..0xFFFF
        this.Codepoint = 0;
        // unsigned int    Visible : 1;        // Flag to allow early out when rendering
        this.Visible = false;
        // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
        this.AdvanceX = 0.0;
        // float           X0, Y0, X1, Y1;     // Glyph corners
        this.X0 = 0.0;
        this.Y0 = 0.0;
        this.X1 = 1.0;
        this.Y1 = 1.0;
        // float           U0, V0, U1, V1;     // Texture coordinates
        this.U0 = 0.0;
        this.V0 = 0.0;
        this.U1 = 1.0;
        this.V1 = 1.0;
        this.TexID = null;
        this.Char = 0;
    }
    return script_ImFontGlyph;
}());


var ImFontGlyph = /** @class */ (function () {
    function ImFontGlyph(internal) {
        if (internal === void 0) { internal = new script_ImFontGlyph(); }
        this.internal = internal;
    }
    Object.defineProperty(ImFontGlyph.prototype, "Codepoint", {
        // unsigned int    Codepoint : 31;     // 0x0000..0xFFFF
        get: function () { return this.internal.Codepoint; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontGlyph.prototype, "Visible", {
        // unsigned int    Visible : 1;        // Flag to allow early out when rendering
        get: function () { return this.internal.Visible; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontGlyph.prototype, "AdvanceX", {
        // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
        get: function () { return this.internal.AdvanceX; },
        set: function (v) { this.internal.AdvanceX = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "X0", {
        // float           X0, Y0, X1, Y1;     // Glyph corners
        get: function () { return this.internal.X0; },
        set: function (v) { this.internal.X0 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "Y0", {
        get: function () { return this.internal.Y0; },
        set: function (v) { this.internal.Y0 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "X1", {
        get: function () { return this.internal.X1; },
        set: function (v) { this.internal.X1 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "Y1", {
        get: function () { return this.internal.Y1; },
        set: function (v) { this.internal.Y1 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "U0", {
        // float           U0, V0, U1, V1;     // Texture coordinates
        get: function () { return this.internal.U0; },
        set: function (v) { this.internal.U0 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "V0", {
        get: function () { return this.internal.V0; },
        set: function (v) { this.internal.V0 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "U1", {
        get: function () { return this.internal.U1; },
        set: function (v) { this.internal.U1 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "V1", {
        get: function () { return this.internal.V1; },
        set: function (v) { this.internal.V1 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "TexID", {
        get: function () { return this.internal.TexID; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontGlyph.prototype, "TextureID", {
        get: function () { return ImGuiContext.getTexture(this.internal.TexID); },
        set: function (v) { this.internal.TexID = ImGuiContext.setTexture(v); },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "Char", {
        get: function () { return this.internal.Char; },
        enumerable: false,
        configurable: true
    });
    ;
    return ImFontGlyph;
}());

// See ImFontAtlas::AddCustomRectXXX functions.
var ImFontAtlasCustomRect = /** @class */ (function () {
    function ImFontAtlasCustomRect() {
    }
    return ImFontAtlasCustomRect;
}());


var ImFontAtlasFlags;
(function (ImFontAtlasFlags) {
    ImFontAtlasFlags[ImFontAtlasFlags["None"] = 0] = "None";
    ImFontAtlasFlags[ImFontAtlasFlags["NoPowerOfTwoHeight"] = 1] = "NoPowerOfTwoHeight";
    ImFontAtlasFlags[ImFontAtlasFlags["NoMouseCursors"] = 2] = "NoMouseCursors";
    ImFontAtlasFlags[ImFontAtlasFlags["NoBakedLines"] = 4] = "NoBakedLines";
})(ImFontAtlasFlags || (ImFontAtlasFlags = {}));
// Load and rasterize multiple TTF/OTF fonts into a same texture.
// Sharing a texture for multiple fonts allows us to reduce the number of draw calls during rendering.
// We also add custom graphic data into the texture that serves for ImGui.
//  1. (Optional) Call AddFont*** functions. If you don't call any, the default font will be loaded for you.
//  2. Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.
//  3. Upload the pixels data into a texture within your graphics system.
//  4. Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture. This value will be passed back to you during rendering to identify the texture.
// IMPORTANT: If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the ImFont is build (when calling GetTextData*** or Build()). We only copy the pointer, not the data.

var ImFontAtlas = /** @class */ (function () {
    function ImFontAtlas(native) {
        this.native = native;
    }
    // IMGUI_API ImFontAtlas();
    // IMGUI_API ~ImFontAtlas();
    // IMGUI_API ImFont*           AddFont(const ImFontConfig* font_cfg);
    // IMGUI_API ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL);
    ImFontAtlas.prototype.AddFontDefault = function (font_cfg) {
        if (font_cfg === void 0) { font_cfg = null; }
        return new ImFont(this.native.AddFontDefault(font_cfg));
    };
    // IMGUI_API ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);
    // IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after Build(). Set font_cfg->FontDataOwnedByAtlas to false to keep ownership.
    ImFontAtlas.prototype.AddFontFromMemoryTTF = function (data, size_pixels, font_cfg, glyph_ranges) {
        if (font_cfg === void 0) { font_cfg = null; }
        if (glyph_ranges === void 0) { glyph_ranges = null; }
        return new ImFont(this.native.AddFontFromMemoryTTF(new Uint8Array(data), size_pixels, font_cfg && font_cfg.internal, glyph_ranges));
    };
    // IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
    // IMGUI_API ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
    // IMGUI_API void              ClearTexData();             // Clear the CPU-side texture data. Saves RAM once the texture has been copied to graphics memory.
    ImFontAtlas.prototype.ClearTexData = function () { this.native.ClearTexData(); };
    // IMGUI_API void              ClearInputData();           // Clear the input TTF data (inc sizes, glyph ranges)
    ImFontAtlas.prototype.ClearInputData = function () { this.native.ClearInputData(); };
    // IMGUI_API void              ClearFonts();               // Clear the ImGui-side font data (glyphs storage, UV coordinates)
    ImFontAtlas.prototype.ClearFonts = function () { this.native.ClearFonts(); };
    // IMGUI_API void              Clear();                    // Clear all
    ImFontAtlas.prototype.Clear = function () { this.native.Clear(); };
    // Build atlas, retrieve pixel data.
    // User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().
    // RGBA32 format is provided for convenience and compatibility, but note that unless you use CustomRect to draw color data, the RGB pixels emitted from Fonts will all be white (~75% of waste).
    // Pitch = Width * BytesPerPixels
    // IMGUI_API bool              Build();                    // Build pixels data. This is called automatically for you by the GetTexData*** functions.
    ImFontAtlas.prototype.Build = function () { return this.native.Build(); };
    // IMGUI_API bool              IsBuilt()                   { return Fonts.Size > 0 && (TexPixelsAlpha8 != NULL || TexPixelsRGBA32 != NULL); }
    ImFontAtlas.prototype.IsBuilt = function () { return this.native.IsBuilt(); };
    // IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel
    ImFontAtlas.prototype.GetTexDataAsAlpha8 = function () {
        return this.native.GetTexDataAsAlpha8();
    };
    // IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel
    ImFontAtlas.prototype.GetTexDataAsRGBA32 = function () {
        return this.native.GetTexDataAsRGBA32();
    };
    // void                        SetTexID(ImTextureID id)    { TexID = id; }
    ImFontAtlas.prototype.SetTexID = function (id) { this.TexID = id; };
    //-------------------------------------------
    // Glyph Ranges
    //-------------------------------------------
    // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)
    // NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8"Hello world" syntax. See FAQ for details.
    // IMGUI_API const ImWchar*    GetGlyphRangesDefault();    // Basic Latin, Extended Latin
    ImFontAtlas.prototype.GetGlyphRangesDefault = function () { return this.native.GetGlyphRangesDefault(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesKorean();     // Default + Korean characters
    ImFontAtlas.prototype.GetGlyphRangesKorean = function () { return this.native.GetGlyphRangesKorean(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesJapanese();   // Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs
    ImFontAtlas.prototype.GetGlyphRangesJapanese = function () { return this.native.GetGlyphRangesJapanese(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
    ImFontAtlas.prototype.GetGlyphRangesChineseFull = function () { return this.native.GetGlyphRangesChineseFull(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
    ImFontAtlas.prototype.GetGlyphRangesChineseSimplifiedCommon = function () { return this.native.GetGlyphRangesChineseSimplifiedCommon(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();   // Default + about 400 Cyrillic characters
    ImFontAtlas.prototype.GetGlyphRangesCyrillic = function () { return this.native.GetGlyphRangesCyrillic(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesThai();       // Default + Thai characters
    ImFontAtlas.prototype.GetGlyphRangesThai = function () { return this.native.GetGlyphRangesThai(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesVietnamese();       // Default + Vietnamese characters
    ImFontAtlas.prototype.GetGlyphRangesVietnamese = function () { return this.native.GetGlyphRangesVietnamese(); };
    Object.defineProperty(ImFontAtlas.prototype, "Locked", {
        // Helpers to build glyph ranges from text data. Feed your application strings/characters to it then call BuildRanges().
        // struct GlyphRangesBuilder
        // {
        //     ImVector<unsigned char> UsedChars;  // Store 1-bit per Unicode code point (0=unused, 1=used)
        //     GlyphRangesBuilder()                { UsedChars.resize(0x10000 / 8); memset(UsedChars.Data, 0, 0x10000 / 8); }
        //     bool           GetBit(int n) const  { return (UsedChars[n >> 3] & (1 << (n & 7))) != 0; }
        //     void           SetBit(int n)        { UsedChars[n >> 3] |= 1 << (n & 7); }  // Set bit 'c' in the array
        //     void           AddChar(ImWchar c)   { SetBit(c); }                          // Add character
        //     IMGUI_API void AddText(const char* text, const char* text_end = NULL);      // Add string (each character of the UTF-8 string are added)
        //     IMGUI_API void AddRanges(const ImWchar* ranges);                            // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault) to force add all of ASCII/Latin+Ext
        //     IMGUI_API void BuildRanges(ImVector<ImWchar>* out_ranges);                  // Output new ranges
        // };
        //-------------------------------------------
        // Custom Rectangles/Glyphs API
        //-------------------------------------------
        // You can request arbitrary rectangles to be packed into the atlas, for your own purposes. After calling Build(), you can query the rectangle position and render your pixels.
        // You can also request your rectangles to be mapped as font glyph (given a font + Unicode point), so you can render e.g. custom colorful icons and use them as regular glyphs.
        // struct CustomRect
        // {
        //     unsigned int    ID;             // Input    // User ID. Use <0x10000 to map into a font glyph, >=0x10000 for other/internal/custom texture data.
        //     unsigned short  Width, Height;  // Input    // Desired rectangle dimension
        //     unsigned short  X, Y;           // Output   // Packed position in Atlas
        //     float           GlyphAdvanceX;  // Input    // For custom font glyphs only (ID<0x10000): glyph xadvance
        //     ImVec2          GlyphOffset;    // Input    // For custom font glyphs only (ID<0x10000): glyph display offset
        //     ImFont*         Font;           // Input    // For custom font glyphs only (ID<0x10000): target font
        //     CustomRect()            { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0,0); Font = NULL; }
        //     bool IsPacked() const   { return X != 0xFFFF; }
        // };
        // IMGUI_API int       AddCustomRectRegular(unsigned int id, int width, int height);                                                                   // Id needs to be >= 0x10000. Id >= 0x80000000 are reserved for ImGui and ImDrawList
        // IMGUI_API int       AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0,0));   // Id needs to be < 0x10000 to register a rectangle to map into a specific font.
        // IMGUI_API void      CalcCustomRectUV(const CustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max);
        // const CustomRect*   GetCustomRectByIndex(int index) const { if (index < 0) return NULL; return &CustomRects[index]; }
        //-------------------------------------------
        // Members
        //-------------------------------------------
        // bool                        Locked;             // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.
        get: function () { return this.native.Locked; },
        set: function (value) { this.native.Locked = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "Flags", {
        // ImFontAtlasFlags            Flags;              // Build flags (see ImFontAtlasFlags_)
        get: function () { return this.native.Flags; },
        set: function (value) { this.native.Flags = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexID", {
        // ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
        get: function () {
            return ImGuiContext.getTexture(this.native.TexID);
        },
        set: function (value) {
            this.native.TexID = ImGuiContext.setTexture(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexDesiredWidth", {
        // int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
        get: function () { return this.native.TexDesiredWidth; },
        set: function (value) { this.native.TexDesiredWidth = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexGlyphPadding", {
        // int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1.
        get: function () { return this.native.TexGlyphPadding; },
        set: function (value) { this.native.TexGlyphPadding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexWidth", {
        // [Internal]
        // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
        // unsigned char*              TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
        // unsigned int*               TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
        // int                         TexWidth;           // Texture width calculated during Build().
        get: function () { return this.native.TexWidth; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexHeight", {
        // int                         TexHeight;          // Texture height calculated during Build().
        get: function () { return this.native.TexHeight; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexUvScale", {
        // ImVec2                      TexUvScale;         // = (1.0f/TexWidth, 1.0f/TexHeight)
        get: function () { return this.native.TexUvScale; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexUvWhitePixel", {
        // ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel
        get: function () { return this.native.TexUvWhitePixel; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "Fonts", {
        // ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
        get: function () {
            var fonts = new ImVector();
            this.native.IterateFonts(function (font) {
                fonts.push(new ImFont(font));
            });
            return fonts;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "CurrentFont", {
        // ImVector<CustomRect>        CustomRects;        // Rectangles for packing custom texture data into the atlas.
        // ImVector<ImFontConfig>      ConfigData;         // Internal data
        // int                         CustomRectIds[1];   // Identifiers of custom texture rectangle used by ImFontAtlas/ImDrawList
        get: function () {
            return new ImFont(this.native.CurrentFont);
        },
        enumerable: false,
        configurable: true
    });
    return ImFontAtlas;
}());

// Font runtime data and rendering
// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().

var ImFont = /** @class */ (function () {
    function ImFont(native) {
        this.native = native;
    }
    Object.defineProperty(ImFont.prototype, "FontName", {
        // Members: Hot ~62/78 bytes
        // float                       FontSize;           // <user set>   // Height of characters, set during loading (don't change after loading)
        get: function () { return this.native.FontName; },
        set: function (v) { this.native.FontName = v; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "FontSize", {
        get: function () { return this.native.FontSize; },
        set: function (v) { this.native.FontSize = v; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "SpaceX", {
        get: function () { return [this.native.SpaceX0, this.native.SpaceX1]; },
        set: function (v) { this.native.SpaceX0 = v[0]; this.native.SpaceX1 = v[1]; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "Scale", {
        // float                       Scale;              // = 1.f        // Base font scale, multiplied by the per-window font scale which you can adjust with SetFontScale()
        get: function () { return this.native.Scale; },
        set: function (value) { this.native.Scale = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "Glyphs", {
        // ImVector<ImFontGlyph>       Glyphs;             //              // All glyphs.
        get: function () {
            var glyphs = new ImVector();
            this.native.IterateGlyphs(function (glyph) {
                glyphs.push(new ImFontGlyph(glyph)); // TODO: wrap native
            });
            return glyphs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "FallbackGlyph", {
        // ImVector<float>             IndexAdvanceX;      //              // Sparse. Glyphs->AdvanceX in a directly indexable way (more cache-friendly, for CalcTextSize functions which are often bottleneck in large UI).
        // get IndexAdvanceX(): any { return this.native.IndexAdvanceX; }
        // ImVector<unsigned short>    IndexLookup;        //              // Sparse. Index glyphs by Unicode code-point.
        // get IndexLookup(): any { return this.native.IndexLookup; }
        // const ImFontGlyph*          FallbackGlyph;      // == FindGlyph(FontFallbackChar)
        get: function () {
            var glyph = this.native.FallbackGlyph;
            return glyph && new ImFontGlyph(glyph);
        },
        set: function (value) {
            this.native.FallbackGlyph = value && value.internal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "FallbackAdvanceX", {
        // float                       FallbackAdvanceX;   // == FallbackGlyph->AdvanceX
        get: function () { return this.native.FallbackAdvanceX; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "FallbackChar", {
        // ImWchar                     FallbackChar;       // = '?'        // Replacement glyph if one isn't found. Only set via SetFallbackChar()
        get: function () { return this.native.FallbackChar; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "EllipsisChar", {
        // ImWchar                     EllipsisChar;       // 2     // out // = -1       // Character used for ellipsis rendering.
        get: function () { return this.native.EllipsisChar; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "ConfigDataCount", {
        // Members: Cold ~18/26 bytes
        // short                       ConfigDataCount;    // ~ 1          // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
        get: function () { return this.native.ConfigDataCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "ConfigData", {
        // ImFontConfig*               ConfigData;         //              // Pointer within ContainerAtlas->ConfigData
        get: function () {
            return new ImFontConfig(this.native.ConfigData);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "ContainerAtlas", {
        // ImFontAtlas*                ContainerAtlas;     //              // What we has been loaded into
        get: function () { return null; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "Ascent", {
        // float                       Ascent, Descent;    //              // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
        get: function () { return this.native.Ascent; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "Descent", {
        get: function () { return this.native.Descent; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "MetricsTotalSurface", {
        // int                         MetricsTotalSurface;//              // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)
        get: function () { return this.native.MetricsTotalSurface; },
        enumerable: false,
        configurable: true
    });
    // Methods
    // IMGUI_API ImFont();
    // IMGUI_API ~ImFont();
    // IMGUI_API void              ClearOutputData();
    ImFont.prototype.ClearOutputData = function () { return this.native.ClearOutputData(); };
    // IMGUI_API void              BuildLookupTable();
    ImFont.prototype.BuildLookupTable = function () { return this.native.BuildLookupTable(); };
    // IMGUI_API const ImFontGlyph*FindGlyph(ImWchar c) const;
    ImFont.prototype.FindGlyph = function (c) {
        var glyph = this.native.FindGlyph(c);
        return glyph && new ImFontGlyph(glyph);
    };
    // IMGUI_API const ImFontGlyph*FindGlyphNoFallback(ImWchar c) const;
    ImFont.prototype.FindGlyphNoFallback = function (c) {
        var glyph = this.native.FindGlyphNoFallback(c);
        return glyph && new ImFontGlyph(glyph);
    };
    // IMGUI_API void              SetFallbackChar(ImWchar c);
    ImFont.prototype.SetFallbackChar = function (c) { return this.native.SetFallbackChar(c); };
    // float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }
    ImFont.prototype.GetCharAdvance = function (c) { return this.native.GetCharAdvance(c); };
    // bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }
    ImFont.prototype.IsLoaded = function () { return this.native.IsLoaded(); };
    // const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }
    ImFont.prototype.GetDebugName = function () { return this.native.GetDebugName(); };
    // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
    // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
    // IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8
    ImFont.prototype.CalcTextSizeA = function (size, max_width, wrap_width, text_begin, text_end, remaining) {
        if (text_end === void 0) { text_end = null; }
        if (remaining === void 0) { remaining = null; }
        return this.native.CalcTextSizeA(size, max_width, wrap_width, text_end !== null ? text_begin.substring(0, text_end) : text_begin, remaining, new ImVec2());
    };
    // IMGUI_API const char*       CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;
    ImFont.prototype.CalcWordWrapPositionA = function (scale, text, text_end, wrap_width) {
        if (text_end === void 0) { text_end = null; }
        return this.native.CalcWordWrapPositionA(scale, text_end !== null ? text.substring(0, text_end) : text, wrap_width);
    };
    // IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, unsigned short c) const;
    ImFont.prototype.RenderChar = function (draw_list, size, pos, col, c) {
        this.native.RenderChar(draw_list.native, size, pos, col, c);
    };
    // IMGUI_API void              RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;
    ImFont.prototype.RenderText = function (draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip) {
        if (text_end === void 0) { text_end = null; }
        if (wrap_width === void 0) { wrap_width = 0.0; }
        if (cpu_fine_clip === void 0) { cpu_fine_clip = false; }
    };
    // [Internal]
    // IMGUI_API void              GrowIndex(int new_size);
    // IMGUI_API void              AddGlyph(ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
    // IMGUI_API void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true); // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.
    // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // typedef ImFontGlyph Glyph; // OBSOLETE 1.52+
    // #endif
    // IMGUI_API bool              IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last);
    ImFont.prototype.IsGlyphRangeUnused = function (c_begin, c_last) { return false; }; // TODO
    Object.defineProperty(ImFont.prototype, "GlyphToCreate", {
        get: function () {
            var glyph = this.native.GlyphToCreate();
            return glyph ? new ImFontGlyph(glyph) : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "IterateGlyphToCreate", {
        get: function () {
            var glyphs = [];
            this.native.IterateGlyphToCreate(function (glyph) {
                glyphs.push(new ImFontGlyph(glyph));
            });
            return glyphs;
        },
        enumerable: false,
        configurable: true
    });
    ImFont.prototype.GlyphCreated = function (glyph) {
        this.native.GlyphCreated(glyph.internal);
    };
    ImFont.prototype.ClearGlyphCreated = function () {
        this.native.ClearGlyphCreated();
    };
    return ImFont;
}());

// a script version of Bind.ImGuiStyle with matching interface
var script_ImGuiStyle = /** @class */ (function () {
    function script_ImGuiStyle() {
        this.Alpha = 1.0;
        this.WindowPadding = new ImVec2(8, 8);
        this.WindowRounding = 7.0;
        this.WindowBorderSize = 0.0;
        this.WindowMinSize = new ImVec2(32, 32);
        this.WindowTitleAlign = new ImVec2(0.0, 0.5);
        this.WindowMenuButtonPosition = ImGuiDir.Left;
        this.ChildRounding = 0.0;
        this.ChildBorderSize = 1.0;
        this.PopupRounding = 0.0;
        this.PopupBorderSize = 1.0;
        this.FramePadding = new ImVec2(4, 3);
        this.FrameRounding = 0.0;
        this.FrameBorderSize = 0.0;
        this.ItemSpacing = new ImVec2(8, 4);
        this.ItemInnerSpacing = new ImVec2(4, 4);
        this.CellPadding = new ImVec2(4, 2);
        this.TouchExtraPadding = new ImVec2(0, 0);
        this.IndentSpacing = 21.0;
        this.ColumnsMinSpacing = 6.0;
        this.ScrollbarSize = 16.0;
        this.ScrollbarRounding = 9.0;
        this.GrabMinSize = 10.0;
        this.GrabRounding = 0.0;
        this.LogSliderDeadzone = 4.0;
        this.TabRounding = 0.0;
        this.TabBorderSize = 0.0;
        this.TabMinWidthForCloseButton = 0.0;
        this.ColorButtonPosition = ImGuiDir.Right;
        this.ButtonTextAlign = new ImVec2(0.5, 0.5);
        this.SelectableTextAlign = new ImVec2(0.0, 0.0);
        this.DisplayWindowPadding = new ImVec2(22, 22);
        this.DisplaySafeAreaPadding = new ImVec2(4, 4);
        this.MouseCursorScale = 1;
        this.AntiAliasedLines = true;
        this.AntiAliasedLinesUseTex = true;
        this.AntiAliasedFill = true;
        this.CurveTessellationTol = 1.25;
        this.CircleSegmentMaxError = 1.60;
        this.Colors = [];
        for (var i = 0; i < ImGuiCol.COUNT; ++i) {
            this.Colors[i] = new ImVec4();
        }
        var _this = new ImGuiStyle(this);
        var native = new bind.ImGuiStyle();
        var _that = new ImGuiStyle(native);
        _that.Copy(_this);
        bind.StyleColorsClassic(native);
        _this.Copy(_that);
        native.delete();
    }
    script_ImGuiStyle.prototype._getAt_Colors = function (index) { return this.Colors[index]; };
    script_ImGuiStyle.prototype._setAt_Colors = function (index, color) { this.Colors[index].Copy(color); return true; };
    script_ImGuiStyle.prototype.ScaleAllSizes = function (scale_factor) {
        var _this = new ImGuiStyle(this);
        var native = new bind.ImGuiStyle();
        var _that = new ImGuiStyle(native);
        _that.Copy(_this);
        native.ScaleAllSizes(scale_factor);
        _this.Copy(_that);
        native.delete();
    };
    return script_ImGuiStyle;
}());

var ImGuiStyle = /** @class */ (function () {
    function ImGuiStyle(internal) {
        var _this_1 = this;
        if (internal === void 0) { internal = new script_ImGuiStyle(); }
        this.internal = internal;
        this.Colors = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return ImGuiCol.COUNT;
                }
                return _this_1.internal._getAt_Colors(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.internal._setAt_Colors(Number(key), value);
            },
        });
    }
    Object.defineProperty(ImGuiStyle.prototype, "Alpha", {
        get: function () { return this.internal.Alpha; },
        set: function (value) { this.internal.Alpha = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowPadding", {
        get: function () { return this.internal.WindowPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowRounding", {
        get: function () { return this.internal.WindowRounding; },
        set: function (value) { this.internal.WindowRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowBorderSize", {
        get: function () { return this.internal.WindowBorderSize; },
        set: function (value) { this.internal.WindowBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowMinSize", {
        get: function () { return this.internal.WindowMinSize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowTitleAlign", {
        get: function () { return this.internal.WindowTitleAlign; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowMenuButtonPosition", {
        get: function () { return this.internal.WindowMenuButtonPosition; },
        set: function (value) { this.internal.WindowMenuButtonPosition = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ChildRounding", {
        get: function () { return this.internal.ChildRounding; },
        set: function (value) { this.internal.ChildRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ChildBorderSize", {
        get: function () { return this.internal.ChildBorderSize; },
        set: function (value) { this.internal.ChildBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "PopupRounding", {
        get: function () { return this.internal.PopupRounding; },
        set: function (value) { this.internal.PopupRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "PopupBorderSize", {
        get: function () { return this.internal.PopupBorderSize; },
        set: function (value) { this.internal.PopupBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "FramePadding", {
        get: function () { return this.internal.FramePadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "FrameRounding", {
        get: function () { return this.internal.FrameRounding; },
        set: function (value) { this.internal.FrameRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "FrameBorderSize", {
        get: function () { return this.internal.FrameBorderSize; },
        set: function (value) { this.internal.FrameBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ItemSpacing", {
        get: function () { return this.internal.ItemSpacing; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ItemInnerSpacing", {
        get: function () { return this.internal.ItemInnerSpacing; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "CellPadding", {
        get: function () { return this.internal.CellPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "TouchExtraPadding", {
        get: function () { return this.internal.TouchExtraPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "IndentSpacing", {
        get: function () { return this.internal.IndentSpacing; },
        set: function (value) { this.internal.IndentSpacing = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ColumnsMinSpacing", {
        get: function () { return this.internal.ColumnsMinSpacing; },
        set: function (value) { this.internal.ColumnsMinSpacing = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ScrollbarSize", {
        get: function () { return this.internal.ScrollbarSize; },
        set: function (value) { this.internal.ScrollbarSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ScrollbarRounding", {
        get: function () { return this.internal.ScrollbarRounding; },
        set: function (value) { this.internal.ScrollbarRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "GrabMinSize", {
        get: function () { return this.internal.GrabMinSize; },
        set: function (value) { this.internal.GrabMinSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "GrabRounding", {
        get: function () { return this.internal.GrabRounding; },
        set: function (value) { this.internal.GrabRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "LogSliderDeadzone", {
        get: function () { return this.internal.LogSliderDeadzone; },
        set: function (value) { this.internal.LogSliderDeadzone = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "TabRounding", {
        get: function () { return this.internal.TabRounding; },
        set: function (value) { this.internal.TabRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "TabBorderSize", {
        get: function () { return this.internal.TabBorderSize; },
        set: function (value) { this.internal.TabBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "TabMinWidthForCloseButton", {
        get: function () { return this.internal.TabMinWidthForCloseButton; },
        set: function (value) { this.internal.TabMinWidthForCloseButton = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ColorButtonPosition", {
        get: function () { return this.internal.ColorButtonPosition; },
        set: function (value) { this.internal.ColorButtonPosition = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ButtonTextAlign", {
        get: function () { return this.internal.ButtonTextAlign; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "SelectableTextAlign", {
        get: function () { return this.internal.SelectableTextAlign; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "DisplayWindowPadding", {
        get: function () { return this.internal.DisplayWindowPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "DisplaySafeAreaPadding", {
        get: function () { return this.internal.DisplaySafeAreaPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "MouseCursorScale", {
        get: function () { return this.internal.MouseCursorScale; },
        set: function (value) { this.internal.MouseCursorScale = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "AntiAliasedLines", {
        get: function () { return this.internal.AntiAliasedLines; },
        set: function (value) { this.internal.AntiAliasedLines = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "AntiAliasedLinesUseTex", {
        get: function () { return this.internal.AntiAliasedLinesUseTex; },
        set: function (value) { this.internal.AntiAliasedLinesUseTex = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "AntiAliasedFill", {
        get: function () { return this.internal.AntiAliasedFill; },
        set: function (value) { this.internal.AntiAliasedFill = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "CurveTessellationTol", {
        get: function () { return this.internal.CurveTessellationTol; },
        set: function (value) { this.internal.CurveTessellationTol = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "CircleSegmentMaxError", {
        get: function () { return this.internal.CircleSegmentMaxError; },
        set: function (value) { this.internal.CircleSegmentMaxError = value; },
        enumerable: false,
        configurable: true
    });
    ImGuiStyle.prototype.Copy = function (other) {
        this.Alpha = other.Alpha;
        this.WindowPadding.Copy(other.WindowPadding);
        this.WindowRounding = other.WindowRounding;
        this.WindowBorderSize = other.WindowBorderSize;
        this.WindowMinSize.Copy(other.WindowMinSize);
        this.WindowTitleAlign.Copy(other.WindowTitleAlign);
        this.WindowMenuButtonPosition = other.WindowMenuButtonPosition;
        this.ChildRounding = other.ChildRounding;
        this.ChildBorderSize = other.ChildBorderSize;
        this.PopupRounding = other.PopupRounding;
        this.PopupBorderSize = other.PopupBorderSize;
        this.FramePadding.Copy(other.FramePadding);
        this.FrameRounding = other.FrameRounding;
        this.FrameBorderSize = other.FrameBorderSize;
        this.ItemSpacing.Copy(other.ItemSpacing);
        this.ItemInnerSpacing.Copy(other.ItemInnerSpacing);
        this.CellPadding.Copy(other.CellPadding);
        this.TouchExtraPadding.Copy(other.TouchExtraPadding);
        this.IndentSpacing = other.IndentSpacing;
        this.ColumnsMinSpacing = other.ColumnsMinSpacing;
        this.ScrollbarSize = other.ScrollbarSize;
        this.ScrollbarRounding = other.ScrollbarRounding;
        this.GrabMinSize = other.GrabMinSize;
        this.GrabRounding = other.GrabRounding;
        this.LogSliderDeadzone = other.LogSliderDeadzone;
        this.TabRounding = other.TabRounding;
        this.TabBorderSize = other.TabBorderSize;
        this.TabMinWidthForCloseButton = other.TabMinWidthForCloseButton;
        this.ColorButtonPosition = other.ColorButtonPosition;
        this.ButtonTextAlign.Copy(other.ButtonTextAlign);
        this.DisplayWindowPadding.Copy(other.DisplayWindowPadding);
        this.DisplaySafeAreaPadding.Copy(other.DisplaySafeAreaPadding);
        this.MouseCursorScale = other.MouseCursorScale;
        this.AntiAliasedLines = other.AntiAliasedLines;
        this.AntiAliasedLinesUseTex = other.AntiAliasedLinesUseTex;
        this.AntiAliasedFill = other.AntiAliasedFill;
        this.CurveTessellationTol = other.CurveTessellationTol;
        this.CircleSegmentMaxError = other.CircleSegmentMaxError;
        for (var i = 0; i < ImGuiCol.COUNT; ++i) {
            this.Colors[i].Copy(other.Colors[i]);
        }
        return this;
    };
    ImGuiStyle.prototype.ScaleAllSizes = function (scale_factor) { this.internal.ScaleAllSizes(scale_factor); };
    return ImGuiStyle;
}());

// This is where your app communicate with Dear ImGui. Access via ImGui::GetIO().
// Read 'Programmer guide' section in .cpp file for general usage.

var ImGuiIO = /** @class */ (function () {
    function ImGuiIO(native) {
        var _this_1 = this;
        this.native = native;
        // int           KeyMap[ImGuiKey_COUNT];   // <unset>              // Map of indices into the KeysDown[512] entries array
        this.KeyMap = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return ImGuiKey.COUNT;
                }
                return _this_1.native._getAt_KeyMap(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.native._setAt_KeyMap(Number(key), value);
            },
        });
        // bool        MouseDown[5];               // Mouse buttons: left, right, middle + extras. ImGui itself mostly only uses left button (BeginPopupContext** are using right button). Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
        this.MouseDown = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 5;
                }
                return _this_1.native._getAt_MouseDown(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.native._setAt_MouseDown(Number(key), value);
            },
        });
        // bool        KeysDown[512];              // Keyboard keys that are pressed (in whatever storage order you naturally have access to keyboard data)
        this.KeysDown = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 512;
                }
                return _this_1.native._getAt_KeysDown(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.native._setAt_KeysDown(Number(key), value);
            },
        });
        // float       NavInputs[ImGuiNavInput_COUNT]; // Gamepad inputs (keyboard keys will be auto-mapped and be written here by ImGui::NewFrame)
        this.NavInputs = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return ImGuiNavInput.COUNT;
                }
                return _this_1.native._getAt_NavInputs(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.native._setAt_NavInputs(Number(key), value);
            },
        });
        //------------------------------------------------------------------
        // [Internal] ImGui will maintain those fields. Forward compatibility not guaranteed!
        //------------------------------------------------------------------
        // ImGuiKeyModFlags KeyMods;                   // Key mods flags (same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags), updated by NewFrame()
        // ImVec2      MousePosPrev;               // Previous mouse position temporary storage (nb: not for public use, set to MousePos in NewFrame())
        // ImVec2      MouseClickedPos[5];         // Position at time of clicking
        this.MouseClickedPos = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 5;
                }
                return _this_1.native._getAt_MouseClickedPos(Number(key));
            },
        });
        // float       MouseClickedTime[5];        // Time of last click (used to figure out double-click)
        // bool        MouseClicked[5];            // Mouse button went from !Down to Down
        // bool        MouseDoubleClicked[5];      // Has mouse button been double-clicked?
        // bool        MouseReleased[5];           // Mouse button went from Down to !Down
        // bool        MouseDownOwned[5];          // Track if button was clicked inside a window. We don't request mouse capture from the application if click started outside ImGui bounds.
        // float       MouseDownDuration[5];       // Duration the mouse button has been down (0.0f == just clicked)
        this.MouseDownDuration = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 5;
                }
                return _this_1.native._getAt_MouseDownDuration(Number(key));
            },
        });
        // float       MouseDownDurationPrev[5];   // Previous time the mouse button has been down
        // ImVec2      MouseDragMaxDistanceAbs[5]; // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point
        // float       MouseDragMaxDistanceSqr[5]; // Squared maximum distance of how much mouse has traveled from the clicking point
        // float       KeysDownDuration[512];      // Duration the keyboard key has been down (0.0f == just pressed)
        this.KeysDownDuration = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 512;
                }
                return _this_1.native._getAt_KeysDownDuration(Number(key));
            },
        });
        // float       KeysDownDurationPrev[512];  // Previous duration the key has been down
        // float       NavInputsDownDuration[ImGuiNavInput_COUNT];
        this.NavInputsDownDuration = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return ImGuiNavInput.COUNT;
                }
                return _this_1.native._getAt_NavInputsDownDuration(Number(key));
            },
        });
    }
    Object.defineProperty(ImGuiIO.prototype, "ConfigFlags", {
        //------------------------------------------------------------------
        // Settings (fill once)                 // Default value:
        //------------------------------------------------------------------
        // ImGuiConfigFlags   ConfigFlags;         // = 0                  // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
        get: function () { return this.native.ConfigFlags; },
        set: function (value) { this.native.ConfigFlags = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendFlags", {
        // ImGuiBackendFlags  BackendFlags;        // = 0                  // Set ImGuiBackendFlags_ enum. Set by imgui_impl_xxx files or custom back-end to communicate features supported by the back-end.
        get: function () { return this.native.BackendFlags; },
        set: function (value) { this.native.BackendFlags = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "DisplaySize", {
        // ImVec2        DisplaySize;              // <unset>              // Display size, in pixels. For clamping windows positions.
        get: function () { return this.native.DisplaySize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "DeltaTime", {
        // float         DeltaTime;                // = 1.0f/60.0f         // Time elapsed since last frame, in seconds.
        get: function () { return this.native.DeltaTime; },
        set: function (value) { this.native.DeltaTime = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "IniSavingRate", {
        // float         IniSavingRate;            // = 5.0f               // Maximum time between saving positions/sizes to .ini file, in seconds.
        get: function () { return this.native.IniSavingRate; },
        set: function (value) { this.native.IniSavingRate = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "IniFilename", {
        // const char*   IniFilename;              // = "imgui.ini"        // Path to .ini file. NULL to disable .ini saving.
        get: function () { return this.native.IniFilename; },
        set: function (value) { this.native.IniFilename = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "LogFilename", {
        // const char*   LogFilename;              // = "imgui_log.txt"    // Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
        get: function () { return this.native.LogFilename; },
        set: function (value) { this.native.LogFilename = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDoubleClickTime", {
        // float         MouseDoubleClickTime;     // = 0.30f              // Time for a double-click, in seconds.
        get: function () { return this.native.MouseDoubleClickTime; },
        set: function (value) { this.native.MouseDoubleClickTime = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDoubleClickMaxDist", {
        // float         MouseDoubleClickMaxDist;  // = 6.0f               // Distance threshold to stay in to validate a double-click, in pixels.
        get: function () { return this.native.MouseDoubleClickMaxDist; },
        set: function (value) { this.native.MouseDoubleClickMaxDist = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDragThreshold", {
        // float         MouseDragThreshold;       // = 6.0f               // Distance threshold before considering we are dragging
        get: function () { return this.native.MouseDragThreshold; },
        set: function (value) { this.native.MouseDragThreshold = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyRepeatDelay", {
        // float         KeyRepeatDelay;           // = 0.250f             // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).
        get: function () { return this.native.KeyRepeatDelay; },
        set: function (value) { this.native.KeyRepeatDelay = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyRepeatRate", {
        // float         KeyRepeatRate;            // = 0.050f             // When holding a key/button, rate at which it repeats, in seconds.
        get: function () { return this.native.KeyRepeatRate; },
        set: function (value) { this.native.KeyRepeatRate = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "UserData", {
        // void*         UserData;                 // = NULL               // Store your own data for retrieval by callbacks.
        get: function () { return this.native.UserData; },
        set: function (value) { this.native.UserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "Fonts", {
        // ImFontAtlas*  Fonts;                    // <auto>               // Load and assemble one or more fonts into a single tightly packed texture. Output to Fonts array.
        get: function () { return new ImFontAtlas(this.native.Fonts); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "FontGlobalScale", {
        // float         FontGlobalScale;          // = 1.0f               // Global scale all fonts
        get: function () { return this.native.FontGlobalScale; },
        set: function (value) { this.native.FontGlobalScale = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "FontAllowUserScaling", {
        // bool          FontAllowUserScaling;     // = false              // Allow user scaling text of individual window with CTRL+Wheel.
        get: function () { return this.native.FontAllowUserScaling; },
        set: function (value) { this.native.FontAllowUserScaling = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "FontDefault", {
        // ImFont*       FontDefault;              // = NULL               // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].
        get: function () {
            var font = this.native.FontDefault;
            return (font === null) ? null : new ImFont(font);
        },
        set: function (value) {
            this.native.FontDefault = value && value.native;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "DisplayFramebufferScale", {
        // ImVec2        DisplayFramebufferScale;  // = (1.0f,1.0f)        // For retina display or other situations where window coordinates are different from framebuffer coordinates. User storage only, presently not used by ImGui.
        get: function () { return this.native.DisplayFramebufferScale; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigMacOSXBehaviors", {
        // Miscellaneous configuration options
        // bool          OptMacOSXBehaviors;       // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl
        get: function () { return this.native.ConfigMacOSXBehaviors; },
        set: function (value) { this.native.ConfigMacOSXBehaviors = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigInputTextCursorBlink", {
        // bool          ConfigInputTextCursorBlink;   // = true               // Enable blinking cursor, for users who consider it annoying.
        get: function () { return this.native.ConfigInputTextCursorBlink; },
        set: function (value) { this.native.ConfigInputTextCursorBlink = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigDragClickToInputText", {
        // bool        ConfigDragClickToInputText;     // = false          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.
        get: function () { return this.native.ConfigDragClickToInputText; },
        set: function (value) { this.native.ConfigDragClickToInputText = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigWindowsResizeFromEdges", {
        // bool          ConfigWindowsResizeFromEdges; // = false          // [BETA] Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be the ImGuiWindowFlags_ResizeFromAnySide flag)
        get: function () { return this.native.ConfigWindowsResizeFromEdges; },
        set: function (value) { this.native.ConfigWindowsResizeFromEdges = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigWindowsMoveFromTitleBarOnly", {
        // bool        ConfigWindowsMoveFromTitleBarOnly;// = false        // [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected.
        get: function () { return this.native.ConfigWindowsMoveFromTitleBarOnly; },
        set: function (value) { this.native.ConfigWindowsMoveFromTitleBarOnly = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigMemoryCompactTimer", {
        // float       ConfigMemoryCompactTimer;       // = 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.
        get: function () { return this.native.ConfigMemoryCompactTimer; },
        set: function (value) { this.native.ConfigMemoryCompactTimer = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendPlatformName", {
        //------------------------------------------------------------------
        // Settings (User Functions)
        //------------------------------------------------------------------
        // Optional: Platform/Renderer back-end name (informational only! will be displayed in About Window) + User data for back-end/wrappers to store their own stuff.
        // const char* BackendPlatformName;            // = NULL
        get: function () { return this.native.BackendPlatformName; },
        set: function (value) { this.native.BackendPlatformName = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendRendererName", {
        // const char* BackendRendererName;            // = NULL
        get: function () { return this.native.BackendRendererName; },
        set: function (value) { this.native.BackendRendererName = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendPlatformUserData", {
        // void*       BackendPlatformUserData;        // = NULL
        get: function () { return this.native.BackendPlatformUserData; },
        set: function (value) { this.native.BackendPlatformUserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendRendererUserData", {
        // void*       BackendRendererUserData;        // = NULL
        get: function () { return this.native.BackendRendererUserData; },
        set: function (value) { this.native.BackendRendererUserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendLanguageUserData", {
        // void*       BackendLanguageUserData;        // = NULL
        get: function () { return this.native.BackendLanguageUserData; },
        set: function (value) { this.native.BackendLanguageUserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "GetClipboardTextFn", {
        // Optional: access OS clipboard
        // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
        // const char* (*GetClipboardTextFn)(void* user_data);
        get: function () { return this.native.GetClipboardTextFn; },
        set: function (value) { this.native.GetClipboardTextFn = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "SetClipboardTextFn", {
        // void        (*SetClipboardTextFn)(void* user_data, const char* text);
        get: function () { return this.native.SetClipboardTextFn; },
        set: function (value) { this.native.SetClipboardTextFn = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ClipboardUserData", {
        // void*       ClipboardUserData;
        get: function () { return this.native.ClipboardUserData; },
        set: function (value) { this.native.ClipboardUserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MousePos", {
        // Optional: override memory allocations. MemFreeFn() may be called with a NULL pointer.
        // (default to posix malloc/free)
        // void*       (*MemAllocFn)(size_t sz);
        // void        (*MemFreeFn)(void* ptr);
        // Optional: notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME in Windows)
        // (default to use native imm32 api on Windows)
        // void        (*ImeSetInputScreenPosFn)(int x, int y);
        // void*       ImeWindowHandle;            // (Windows) Set this to your HWND to get automatic IME cursor positioning.
        //------------------------------------------------------------------
        // Input - Fill before calling NewFrame()
        //------------------------------------------------------------------
        // ImVec2      MousePos;                   // Mouse position, in pixels. Set to ImVec2(-FLT_MAX,-FLT_MAX) if mouse is unavailable (on another screen, etc.)
        get: function () { return this.native.MousePos; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseWheel", {
        // float       MouseWheel;                 // Mouse wheel: 1 unit scrolls about 5 lines text.
        get: function () { return this.native.MouseWheel; },
        set: function (value) { this.native.MouseWheel = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseWheelH", {
        // float       MouseWheelH;                    // Mouse wheel (Horizontal). Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends.
        get: function () { return this.native.MouseWheelH; },
        set: function (value) { this.native.MouseWheelH = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDrawCursor", {
        // bool        MouseDrawCursor;            // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor).
        get: function () { return this.native.MouseDrawCursor; },
        set: function (value) { this.native.MouseDrawCursor = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyCtrl", {
        // bool        KeyCtrl;                    // Keyboard modifier pressed: Control
        get: function () { return this.native.KeyCtrl; },
        set: function (value) { this.native.KeyCtrl = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyShift", {
        // bool        KeyShift;                   // Keyboard modifier pressed: Shift
        get: function () { return this.native.KeyShift; },
        set: function (value) { this.native.KeyShift = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyAlt", {
        // bool        KeyAlt;                     // Keyboard modifier pressed: Alt
        get: function () { return this.native.KeyAlt; },
        set: function (value) { this.native.KeyAlt = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeySuper", {
        // bool        KeySuper;                   // Keyboard modifier pressed: Cmd/Super/Windows
        get: function () { return this.native.KeySuper; },
        set: function (value) { this.native.KeySuper = value; },
        enumerable: false,
        configurable: true
    });
    // Functions
    // IMGUI_API void AddInputCharacter(ImWchar c);                        // Add new character into InputCharacters[]
    ImGuiIO.prototype.AddInputCharacter = function (c) { this.native.AddInputCharacter(c); };
    // IMGUI_API void  AddInputCharacterUTF16(ImWchar16 c);        // Queue new character input from an UTF-16 character, it can be a surrogate
    ImGuiIO.prototype.AddInputCharacterUTF16 = function (c) { this.native.AddInputCharacterUTF16(c); };
    // IMGUI_API void AddInputCharactersUTF8(const char* utf8_chars);      // Add new characters into InputCharacters[] from an UTF-8 string
    ImGuiIO.prototype.AddInputCharactersUTF8 = function (utf8_chars) { this.native.AddInputCharactersUTF8(utf8_chars); };
    // inline void    ClearInputCharacters() { InputCharacters[0] = 0; }   // Clear the text input buffer manually
    ImGuiIO.prototype.ClearInputCharacters = function () { this.native.ClearInputCharacters(); };
    Object.defineProperty(ImGuiIO.prototype, "WantCaptureMouse", {
        //------------------------------------------------------------------
        // Output - Retrieve after calling NewFrame()
        //------------------------------------------------------------------
        // bool        WantCaptureMouse;           // When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application. This is set by ImGui when it wants to use your mouse (e.g. unclicked mouse is hovering a window, or a widget is active).
        get: function () { return this.native.WantCaptureMouse; },
        set: function (value) { this.native.WantCaptureMouse = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "WantCaptureKeyboard", {
        // bool        WantCaptureKeyboard;        // When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application. This is set by ImGui when it wants to use your keyboard inputs.
        get: function () { return this.native.WantCaptureKeyboard; },
        set: function (value) { this.native.WantCaptureKeyboard = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "WantTextInput", {
        // bool        WantTextInput;              // Mobile/console: when io.WantTextInput is true, you may display an on-screen keyboard. This is set by ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).
        get: function () { return this.native.WantTextInput; },
        set: function (value) { this.native.WantTextInput = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "WantSetMousePos", {
        // bool        WantSetMousePos;              // [BETA-NAV] MousePos has been altered, back-end should reposition mouse on next frame. Set only when 'NavMovesMouse=true'.
        get: function () { return this.native.WantSetMousePos; },
        set: function (value) { this.native.WantSetMousePos = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "WantSaveIniSettings", {
        // bool        WantSaveIniSettings;        // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. IMPORTANT: You need to clear io.WantSaveIniSettings yourself.
        get: function () { return this.native.WantSaveIniSettings; },
        set: function (value) { this.native.WantSaveIniSettings = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "NavActive", {
        // bool        NavActive;                  // Directional navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.
        get: function () { return this.native.NavActive; },
        set: function (value) { this.native.NavActive = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "NavVisible", {
        // bool        NavVisible;                 // Directional navigation is visible and allowed (will handle ImGuiKey_NavXXX events).
        get: function () { return this.native.NavVisible; },
        set: function (value) { this.native.NavVisible = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "Framerate", {
        // float       Framerate;                  // Application framerate estimation, in frame per second. Solely for convenience. Rolling average estimation based on IO.DeltaTime over 120 frames
        get: function () { return this.native.Framerate; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsRenderVertices", {
        // int         MetricsRenderVertices;      // Vertices output during last call to Render()
        get: function () { return this.native.MetricsRenderVertices; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsRenderIndices", {
        // int         MetricsRenderIndices;       // Indices output during last call to Render() = number of triangles * 3
        get: function () { return this.native.MetricsRenderIndices; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsRenderWindows", {
        // int         MetricsRenderWindows;       // Number of visible windows
        get: function () { return this.native.MetricsRenderWindows; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsActiveWindows", {
        // int         MetricsActiveWindows;       // Number of visible root windows (exclude child windows)
        get: function () { return this.native.MetricsActiveWindows; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsActiveAllocations", {
        // int         MetricsActiveAllocations;   // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.
        get: function () { return this.native.MetricsActiveAllocations; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDelta", {
        // ImVec2      MouseDelta;                 // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.
        get: function () { return this.native.MouseDelta; },
        enumerable: false,
        configurable: true
    });
    return ImGuiIO;
}());

// Context creation and access
// Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between imgui contexts.
// None of those functions is reliant on the current context.
// IMGUI_API ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);
// IMGUI_API void          DestroyContext(ImGuiContext* ctx = NULL);   // NULL = destroy current context
// IMGUI_API ImGuiContext* GetCurrentContext();
// IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);
var ImGuiContext = /** @class */ (function () {
    function ImGuiContext(native) {
        this.native = native;
    }
    ImGuiContext.getTexture = function (index) {
        if (ImGuiContext.current_ctx === null) {
            throw new Error();
        }
        return ImGuiContext.current_ctx._getTexture(index);
    };
    ImGuiContext.setTexture = function (texture) {
        if (ImGuiContext.current_ctx === null) {
            throw new Error();
        }
        return ImGuiContext.current_ctx._setTexture(texture);
    };
    ImGuiContext.prototype._getTexture = function (index) {
        return ImGuiContext.textures[index] || null;
    };
    ImGuiContext.prototype._setTexture = function (texture) {
        var index = ImGuiContext.textures.indexOf(texture);
        if (index === -1) {
            for (var i = 0; i < ImGuiContext.textures.length; ++i) {
                if (ImGuiContext.textures[i] === null) {
                    ImGuiContext.textures[i] = texture;
                    return i;
                }
            }
            index = ImGuiContext.textures.length;
            ImGuiContext.textures.push(texture);
        }
        return index;
    };
    ImGuiContext.current_ctx = null;
    ImGuiContext.textures = [];
    return ImGuiContext;
}());

function CreateContext(shared_font_atlas) {
    if (shared_font_atlas === void 0) { shared_font_atlas = null; }
    var ctx = new ImGuiContext(bind.CreateContext(shared_font_atlas !== null ? shared_font_atlas.native : null));
    if (ImGuiContext.current_ctx === null) {
        ImGuiContext.current_ctx = ctx;
    }
    return ctx;
}
function DestroyContext(ctx) {
    if (ctx === void 0) { ctx = null; }
    if (ctx === null) {
        ctx = ImGuiContext.current_ctx;
        ImGuiContext.current_ctx = null;
    }
    bind.DestroyContext((ctx === null) ? null : ctx.native);
}
function GetCurrentContext() {
    // const ctx_native: Bind.ImGuiContext | null = bind.GetCurrentContext();
    return ImGuiContext.current_ctx;
}
function SetCurrentContext(ctx) {
    bind.SetCurrentContext((ctx === null) ? null : ctx.native);
    ImGuiContext.current_ctx = ctx;
}
// Main
// IMGUI_API ImGuiIO&      GetIO();                                    // access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)
// IMGUI_API ImGuiStyle&   GetStyle();                                 // access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!
// IMGUI_API void          NewFrame();                                 // start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().
// IMGUI_API void          EndFrame();                                 // ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!
// IMGUI_API void          Render();                                   // ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().
// IMGUI_API ImDrawData*   GetDrawData();                              // valid after Render() and until the next call to NewFrame(). this is what you have to render.
function GetIO() { return new ImGuiIO(bind.GetIO()); }
function GetStyle() { return new ImGuiStyle(bind.GetStyle()); }
function NewFrame() { bind.NewFrame(); }
function EndFrame() { bind.EndFrame(); }
function Render() { bind.Render(); }
function GetDrawData() {
    var draw_data = bind.GetDrawData();
    return (draw_data === null) ? null : new ImDrawData(draw_data);
}
// Demo, Debug, Information
// IMGUI_API void          ShowDemoWindow(bool* p_open = NULL);        // create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
// IMGUI_API void          ShowMetricsWindow(bool* p_open = NULL);     // create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
// IMGUI_API void          ShowAboutWindow(bool* p_open = NULL);       // create About window. display Dear ImGui version, credits and build/system information.
// IMGUI_API void          ShowStyleEditor(ImGuiStyle* ref = NULL);    // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)
// IMGUI_API bool          ShowStyleSelector(const char* label);       // add style selector block (not a window), essentially a combo listing the default styles.
// IMGUI_API void          ShowFontSelector(const char* label);        // add font selector block (not a window), essentially a combo listing the loaded fonts.
// IMGUI_API void          ShowUserGuide();                            // add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).
// IMGUI_API const char*   GetVersion();                               // get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)
/*
export function ShowDemoWindow(p_open: Bind.ImScalar<boolean> | null = null): void { bind.ShowDemoWindow(p_open); }
export function ShowMetricsWindow(p_open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> | null = null): void {
    if (p_open === null) {
        bind.ShowMetricsWindow(null);
    } else if (Array.isArray(p_open)) {
        bind.ShowMetricsWindow(p_open);
    } else {
        const ref_open: Bind.ImScalar<boolean> = [ p_open() ];
        bind.ShowMetricsWindow(ref_open);
        p_open(ref_open[0]);
    }
}
export function ShowAboutWindow(p_open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> | null = null): void {
    if (p_open === null) {
        bind.ShowAboutWindow(null);
    } else if (Array.isArray(p_open)) {
        bind.ShowAboutWindow(p_open);
    } else {
        const ref_open: Bind.ImScalar<boolean> = [ p_open() ];
        bind.ShowAboutWindow(ref_open);
        p_open(ref_open[0]);
    }
}
export function ShowStyleEditor(ref: ImGuiStyle | null = null): void {
    if (ref === null) {
        bind.ShowStyleEditor(null);
    } else if (ref.internal instanceof bind.ImGuiStyle) {
        bind.ShowStyleEditor(ref.internal);
    } else {
        const native = new bind.ImGuiStyle();
        const wrap = new ImGuiStyle(native);
        wrap.Copy(ref);
        bind.ShowStyleEditor(native);
        ref.Copy(wrap);
        native.delete();
    }
}
export function ShowStyleSelector(label: string): boolean { return bind.ShowStyleSelector(label); }
export function ShowFontSelector(label: string): void { bind.ShowFontSelector(label); }
export function ShowUserGuide(): void { bind.ShowUserGuide(); }
*/
function GetVersion() { return bind.GetVersion(); }
// Styles
// IMGUI_API void          StyleColorsDark(ImGuiStyle* dst = NULL);    // new, recommended style (default)
// IMGUI_API void          StyleColorsLight(ImGuiStyle* dst = NULL);   // best used with borders and a custom, thicker font
// IMGUI_API void          StyleColorsClassic(ImGuiStyle* dst = NULL); // classic imgui style
function StyleColorsDark(dst) {
    if (dst === void 0) { dst = null; }
    if (dst === null) {
        bind.StyleColorsDark(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsDark(dst.internal);
    }
    else {
        var native = new bind.ImGuiStyle();
        var wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsDark(native);
        dst.Copy(wrap);
        native.delete();
    }
}
function StyleColorsLight(dst) {
    if (dst === void 0) { dst = null; }
    if (dst === null) {
        bind.StyleColorsLight(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsLight(dst.internal);
    }
    else {
        var native = new bind.ImGuiStyle();
        var wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsLight(native);
        dst.Copy(wrap);
        native.delete();
    }
}
function StyleColorsClassic(dst) {
    if (dst === void 0) { dst = null; }
    if (dst === null) {
        bind.StyleColorsClassic(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsClassic(dst.internal);
    }
    else {
        var native = new bind.ImGuiStyle();
        var wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsClassic(native);
        dst.Copy(wrap);
        native.delete();
    }
}
// Windows
// - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
// - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,
//   which clicking will set the boolean to false when clicked.
// - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.
//   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().
// - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
//   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
//   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
//    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
//    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
// - Note that the bottom of window stack always contains a window called "Debug".
// IMGUI_API bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);
// IMGUI_API void          End();
function Begin(name, open, flags) {
    if (open === void 0) { open = null; }
    if (flags === void 0) { flags = 0; }
    if (open === null) {
        return bind.Begin(name, null, flags);
    }
    else if (Array.isArray(open)) {
        return bind.Begin(name, open, flags);
    }
    else {
        var ref_open = [open()];
        var opened = bind.Begin(name, ref_open, flags);
        open(ref_open[0]);
        return opened;
    }
}
function End() { bind.End(); }
// Child Windows
// - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
// - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).
// - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
//   Always call a matching EndChild() for each BeginChild() call, regardless of its return value.
//   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
//    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
//    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
// IMGUI_API bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);
// IMGUI_API bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);
// IMGUI_API void          EndChild();
function BeginChild(id, size, border, flags) {
    if (size === void 0) { size = ImVec2.ZERO; }
    if (border === void 0) { border = false; }
    if (flags === void 0) { flags = 0; }
    return bind.BeginChild(id, size, border, flags);
}
function EndChild() { bind.EndChild(); }
// Windows Utilities
// - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
// IMGUI_API bool          IsWindowAppearing();
// IMGUI_API bool          IsWindowCollapsed();
// IMGUI_API bool          IsWindowFocused(ImGuiFocusedFlags flags=0); // is current window focused? or its root/child, depending on flags. see flags for options.
// IMGUI_API bool          IsWindowHovered(ImGuiHoveredFlags flags=0); // is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!
// IMGUI_API ImDrawList*   GetWindowDrawList();                        // get draw list associated to the current window, to append your own drawing primitives
// IMGUI_API ImVec2        GetWindowPos();                             // get current window position in screen space (useful if you want to do your own drawing via the DrawList API)
// IMGUI_API ImVec2        GetWindowSize();                            // get current window size
// IMGUI_API float         GetWindowWidth();                           // get current window width (shortcut for GetWindowSize().x)
// IMGUI_API float         GetWindowHeight();                          // get current window height (shortcut for GetWindowSize().y)
function IsWindowAppearing() { return bind.IsWindowAppearing(); }
function IsWindowCollapsed() { return bind.IsWindowCollapsed(); }
function IsWindowFocused(flags) {
    if (flags === void 0) { flags = 0; }
    return bind.IsWindowFocused(flags);
}
function IsWindowHovered(flags) {
    if (flags === void 0) { flags = 0; }
    return bind.IsWindowHovered(flags);
}
function GetWindowDrawList() { return new ImDrawList(bind.GetWindowDrawList()); }
function GetWindowPos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetWindowPos(out);
}
function GetWindowSize(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetWindowSize(out);
}
function GetWindowWidth() { return bind.GetWindowWidth(); }
function GetWindowHeight() { return bind.GetWindowHeight(); }
// Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin).
// IMGUI_API void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0, 0)); // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
// IMGUI_API void          SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0);                  // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
// IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.
// IMGUI_API void          SetNextWindowContentSize(const ImVec2& size);                               // set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()
// IMGUI_API void          SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                 // set next window collapsed state. call before Begin()
// IMGUI_API void          SetNextWindowFocus();                                                       // set next window to be focused / top-most. call before Begin()
// IMGUI_API void          SetNextWindowBgAlpha(float alpha);                                          // set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.
// IMGUI_API void          SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0);                        // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.
// IMGUI_API void          SetWindowSize(const ImVec2& size, ImGuiCond cond = 0);                      // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.
// IMGUI_API void          SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                     // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().
// IMGUI_API void          SetWindowFocus();                                                           // (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().
// IMGUI_API void          SetWindowFontScale(float scale);                                            // set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().
// IMGUI_API void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0);      // set named window position.
// IMGUI_API void          SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0);    // set named window size. set axis to 0.0f to force an auto-fit on this axis.
// IMGUI_API void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0);   // set named window collapsed state
// IMGUI_API void          SetWindowFocus(const char* name);                                           // set named window to be focused / top-most. use NULL to remove focus.
function SetNextWindowPos(pos, cond, pivot) {
    if (cond === void 0) { cond = 0; }
    if (pivot === void 0) { pivot = ImVec2.ZERO; }
    bind.SetNextWindowPos(pos, cond, pivot);
}
function SetNextWindowSize(pos, cond) {
    if (cond === void 0) { cond = 0; }
    bind.SetNextWindowSize(pos, cond);
}
function SetNextWindowSizeConstraints(size_min, size_max, custom_callback, custom_callback_data) {
    if (custom_callback === void 0) { custom_callback = null; }
    if (custom_callback_data === void 0) { custom_callback_data = null; }
    if (custom_callback) {
        bind.SetNextWindowSizeConstraints(size_min, size_max, function (data) {
            custom_callback(new ImGuiSizeCallbackData(data, custom_callback_data));
        }, null);
    }
    else {
        bind.SetNextWindowSizeConstraints(size_min, size_max, null, null);
    }
}
function SetNextWindowContentSize(size) { bind.SetNextWindowContentSize(size); }
function SetNextWindowCollapsed(collapsed, cond) {
    if (cond === void 0) { cond = 0; }
    bind.SetNextWindowCollapsed(collapsed, cond);
}
function SetNextWindowFocus() { bind.SetNextWindowFocus(); }
function SetNextWindowBgAlpha(alpha) { bind.SetNextWindowBgAlpha(alpha); }
function SetWindowPos(name_or_pos, pos_or_cond, cond) {
    if (pos_or_cond === void 0) { pos_or_cond = 0; }
    if (cond === void 0) { cond = 0; }
    if (typeof (name_or_pos) === "string") {
        bind.SetWindowNamePos(name_or_pos, pos_or_cond, cond);
        return;
    }
    else {
        bind.SetWindowPos(name_or_pos, pos_or_cond);
    }
}
function SetWindowSize(name_or_size, size_or_cond, cond) {
    if (size_or_cond === void 0) { size_or_cond = 0; }
    if (cond === void 0) { cond = 0; }
    if (typeof (name_or_size) === "string") {
        bind.SetWindowNamePos(name_or_size, size_or_cond, cond);
    }
    else {
        bind.SetWindowSize(name_or_size, size_or_cond);
    }
}
function SetWindowCollapsed(name_or_collapsed, collapsed_or_cond, cond) {
    if (collapsed_or_cond === void 0) { collapsed_or_cond = 0; }
    if (cond === void 0) { cond = 0; }
    if (typeof (name_or_collapsed) === "string") {
        bind.SetWindowNameCollapsed(name_or_collapsed, collapsed_or_cond, cond);
    }
    else {
        bind.SetWindowCollapsed(name_or_collapsed, collapsed_or_cond);
    }
}
function SetWindowFocus(name) {
    if (typeof (name) === "string") {
        bind.SetWindowNameFocus(name);
    }
    else {
        bind.SetWindowFocus();
    }
}
function SetWindowFontScale(scale) { bind.SetWindowFontScale(scale); }
// Content region
// - Retrieve available space from a given point. GetContentRegionAvail() is frequently useful.
// - Those functions are bound to be redesigned (they are confusing, incomplete and the Min/Max return values are in local window coordinates which increases confusion)
// IMGUI_API ImVec2        GetContentRegionAvail();                                        // == GetContentRegionMax() - GetCursorPos()
// IMGUI_API ImVec2        GetContentRegionMax();                                          // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates
// IMGUI_API ImVec2        GetWindowContentRegionMin();                                    // content boundaries min (roughly (0,0)-Scroll), in window coordinates
// IMGUI_API ImVec2        GetWindowContentRegionMax();                                    // content boundaries max (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates
// IMGUI_API float         GetWindowContentRegionWidth();                                  //
function GetContentRegionAvail(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetContentRegionAvail(out);
}
function GetContentRegionMax(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetContentRegionMax(out);
}
function GetWindowContentRegionMin(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetWindowContentRegionMin(out);
}
function GetWindowContentRegionMax(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetWindowContentRegionMax(out);
}
function GetWindowContentRegionWidth() { return bind.GetWindowContentRegionWidth(); }
// Windows Scrolling
// IMGUI_API float         GetScrollX();                                                   // get scrolling amount [0 .. GetScrollMaxX()]
// IMGUI_API float         GetScrollY();                                                   // get scrolling amount [0 .. GetScrollMaxY()]
// IMGUI_API void          SetScrollX(float scroll_x);                                     // set scrolling amount [0 .. GetScrollMaxX()]
// IMGUI_API void          SetScrollY(float scroll_y);                                     // set scrolling amount [0 .. GetScrollMaxY()]
// IMGUI_API float         GetScrollMaxX();                                                // get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
// IMGUI_API float         GetScrollMaxY();                                                // get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
// IMGUI_API void          SetScrollHereX(float center_x_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
// IMGUI_API void          SetScrollHereY(float center_y_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
// IMGUI_API void          SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
// IMGUI_API void          SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
function GetScrollX() { return bind.GetScrollX(); }
function GetScrollY() { return bind.GetScrollY(); }
function SetScrollX(scroll_x) { bind.SetScrollX(scroll_x); }
function SetScrollY(scroll_y) { bind.SetScrollY(scroll_y); }
function GetScrollMaxX() { return bind.GetScrollMaxX(); }
function GetScrollMaxY() { return bind.GetScrollMaxY(); }
function SetScrollHereX(center_x_ratio) {
    if (center_x_ratio === void 0) { center_x_ratio = 0.5; }
    bind.SetScrollHereX(center_x_ratio);
}
function SetScrollHereY(center_y_ratio) {
    if (center_y_ratio === void 0) { center_y_ratio = 0.5; }
    bind.SetScrollHereY(center_y_ratio);
}
function SetScrollFromPosX(pos_x, center_x_ratio) {
    if (center_x_ratio === void 0) { center_x_ratio = 0.5; }
    bind.SetScrollFromPosX(pos_x, center_x_ratio);
}
function SetScrollFromPosY(pos_y, center_y_ratio) {
    if (center_y_ratio === void 0) { center_y_ratio = 0.5; }
    bind.SetScrollFromPosY(pos_y, center_y_ratio);
}
// Parameters stacks (shared)
// IMGUI_API void          PushFont(ImFont* font);                                         // use NULL as a shortcut to push default font
// IMGUI_API void          PopFont();
// IMGUI_API void          PushStyleColor(ImGuiCol idx, ImU32 col);                        // modify a style color. always use this if you modify the style after NewFrame().
// IMGUI_API void          PushStyleColor(ImGuiCol idx, const ImVec4& col);
// IMGUI_API void          PopStyleColor(int count = 1);
// IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, float val);                     // modify a style float variable. always use this if you modify the style after NewFrame().
// IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val);             // modify a style ImVec2 variable. always use this if you modify the style after NewFrame().
// IMGUI_API void          PopStyleVar(int count = 1);
// IMGUI_API void          PushAllowKeyboardFocus(bool allow_keyboard_focus);              // allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets
// IMGUI_API void          PopAllowKeyboardFocus();
// IMGUI_API void          PushButtonRepeat(bool repeat);                                  // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.
// IMGUI_API void          PopButtonRepeat();
function PushFont(font) { bind.PushFont(font ? font.native : null); }
function PopFont() { bind.PopFont(); }
function PushStyleColor(idx, col) {
    if (col instanceof ImColor) {
        bind.PushStyleColor(idx, col.Value);
    }
    else {
        bind.PushStyleColor(idx, col);
    }
}
function PopStyleColor(count) {
    if (count === void 0) { count = 1; }
    bind.PopStyleColor(count);
}
function PushStyleVar(idx, val) { bind.PushStyleVar(idx, val); }
function PopStyleVar(count) {
    if (count === void 0) { count = 1; }
    bind.PopStyleVar(count);
}
function PushAllowKeyboardFocus(allow_keyboard_focus) { bind.PushAllowKeyboardFocus(allow_keyboard_focus); }
function PopAllowKeyboardFocus() { bind.PopAllowKeyboardFocus(); }
function PushButtonRepeat(repeat) { bind.PushButtonRepeat(repeat); }
function PopButtonRepeat() { bind.PopButtonRepeat(); }
// Parameters stacks (current window)
// IMGUI_API void          PushItemWidth(float item_width);                                // push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side). 0.0f = default to ~2/3 of windows width,
// IMGUI_API void          PopItemWidth();
// IMGUI_API void          SetNextItemWidth(float item_width);                             // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)
// IMGUI_API float         CalcItemWidth();                                                // width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.
// IMGUI_API void          PushTextWrapPos(float wrap_local_pos_x = 0.0f);                 // push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
// IMGUI_API void          PopTextWrapPos();
function PushItemWidth(item_width) { bind.PushItemWidth(item_width); }
function PopItemWidth() { bind.PopItemWidth(); }
function SetNextItemWidth(item_width) { bind.SetNextItemWidth(item_width); } // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side)
function CalcItemWidth() { return bind.CalcItemWidth(); }
function PushTextWrapPos(wrap_pos_x) {
    if (wrap_pos_x === void 0) { wrap_pos_x = 0.0; }
    bind.PushTextWrapPos(wrap_pos_x);
}
function PopTextWrapPos() { bind.PopTextWrapPos(); }
// Style read access
// IMGUI_API ImFont*       GetFont();                                                      // get current font
// IMGUI_API float         GetFontSize();                                                  // get current font size (= height in pixels) of current font with current scale applied
// IMGUI_API ImVec2        GetFontTexUvWhitePixel();                                       // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API
// IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);              // retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API ImU32         GetColorU32(const ImVec4& col);                                 // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API ImU32         GetColorU32(ImU32 col);                                         // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API const ImVec4& GetStyleColorVec4(ImGuiCol idx);                                // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.
function GetFont() { return new ImFont(bind.GetFont()); }
function GetFontSize() { return bind.GetFontSize(); }
function GetFontTexUvWhitePixel(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetFontTexUvWhitePixel(out);
}
function GetColorU32() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args.length === 1) {
        if (typeof (args[0]) === "number") {
            if (0 <= args[0] && args[0] < ImGuiCol.COUNT) {
                var idx = args[0];
                return bind.GetColorU32_A(idx, 1.0);
            }
            else {
                var col = args[0];
                return bind.GetColorU32_C(col);
            }
        }
        else {
            var col = args[0];
            return bind.GetColorU32_B(col);
        }
    }
    else {
        var idx = args[0];
        var alpha_mul = args[1];
        return bind.GetColorU32_A(idx, alpha_mul);
    }
}
function GetStyleColorVec4(idx) { return bind.GetStyleColorVec4(idx); }
// Cursor / Layout
// - By "cursor" we mean the current output position.
// - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.
// - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.
// - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:
//    Window-local coordinates:   SameLine(), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), GetContentRegionMax(), GetWindowContentRegion*(), PushTextWrapPos()
//    Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions.
// IMGUI_API void          Separator();                                                    // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
// IMGUI_API void          SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f);  // call between widgets or groups to layout them horizontally. X position given in window coordinates.
// IMGUI_API void          NewLine();                                                      // undo a SameLine() or force a new line when in an horizontal-layout context.
// IMGUI_API void          Spacing();                                                      // add vertical spacing.
// IMGUI_API void          Dummy(const ImVec2& size);                                      // add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
// IMGUI_API void          Indent(float indent_w = 0.0f);                                  // move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0
// IMGUI_API void          Unindent(float indent_w = 0.0f);                                // move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0
// IMGUI_API void          BeginGroup();                                                   // lock horizontal starting position
// IMGUI_API void          EndGroup();                                                     // unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
// IMGUI_API ImVec2        GetCursorPos();                                                 // cursor position in window coordinates (relative to window position)
// IMGUI_API float         GetCursorPosX();                                                //   (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion* etc.
// IMGUI_API float         GetCursorPosY();                                                //    other functions such as GetCursorScreenPos or everything in ImDrawList::
// IMGUI_API void          SetCursorPos(const ImVec2& local_pos);                          //    are using the main, absolute coordinate system.
// IMGUI_API void          SetCursorPosX(float local_x);                                   //    GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)
// IMGUI_API void          SetCursorPosY(float local_y);                                   //
// IMGUI_API ImVec2        GetCursorStartPos();                                            // initial cursor position in window coordinates
// IMGUI_API ImVec2        GetCursorScreenPos();                                           // cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
// IMGUI_API void          SetCursorScreenPos(const ImVec2& pos);                          // cursor position in absolute screen coordinates [0..io.DisplaySize]
// IMGUI_API void          AlignTextToFramePadding();                                      // vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
// IMGUI_API float         GetTextLineHeight();                                            // ~ FontSize
// IMGUI_API float         GetTextLineHeightWithSpacing();                                 // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
// IMGUI_API float         GetFrameHeight();                                               // ~ FontSize + style.FramePadding.y * 2
// IMGUI_API float         GetFrameHeightWithSpacing();                                    // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
function Separator() { bind.Separator(); }
function SameLine(pos_x, spacing_w) {
    if (pos_x === void 0) { pos_x = 0.0; }
    if (spacing_w === void 0) { spacing_w = -1.0; }
    bind.SameLine(pos_x, spacing_w);
}
function NewLine() { bind.NewLine(); }
function Spacing() { bind.Spacing(); }
function Dummy(size) { bind.Dummy(size); }
function Indent(indent_w) {
    if (indent_w === void 0) { indent_w = 0.0; }
    bind.Indent(indent_w);
}
function Unindent(indent_w) {
    if (indent_w === void 0) { indent_w = 0.0; }
    bind.Unindent(indent_w);
}
function BeginGroup() { bind.BeginGroup(); }
function EndGroup() { bind.EndGroup(); }
function GetCursorPos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetCursorPos(out);
}
function GetCursorPosX() { return bind.GetCursorPosX(); }
function GetCursorPosY() { return bind.GetCursorPosY(); }
function SetCursorPos(local_pos) { bind.SetCursorPos(local_pos); }
function SetCursorPosX(x) { bind.SetCursorPosX(x); }
function SetCursorPosY(y) { bind.SetCursorPosY(y); }
function GetCursorStartPos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetCursorStartPos(out);
}
function GetCursorScreenPos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetCursorScreenPos(out);
}
function SetCursorScreenPos(pos) { bind.SetCursorScreenPos(pos); }
function AlignTextToFramePadding() { bind.AlignTextToFramePadding(); }
function GetTextLineHeight() { return bind.GetTextLineHeight(); }
function GetTextLineHeightWithSpacing() { return bind.GetTextLineHeightWithSpacing(); }
function GetFrameHeight() { return bind.GetFrameHeight(); }
function GetFrameHeightWithSpacing() { return bind.GetFrameHeightWithSpacing(); }
// ID stack/scopes
// - Read the FAQ for more details about how ID are handled in dear imgui. If you are creating widgets in a loop you most
//   likely want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.
// - The resulting ID are hashes of the entire stack.
// - You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.
// - In this header file we use the "label"/"name" terminology to denote a string that will be displayed and used as an ID,
//   whereas "str_id" denote a string that is only used as an ID and not normally displayed.
// IMGUI_API void          PushID(const char* str_id);                                     // push string into the ID stack (will hash string).
// IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);       // push string into the ID stack (will hash string).
// IMGUI_API void          PushID(const void* ptr_id);                                     // push pointer into the ID stack (will hash pointer).
// IMGUI_API void          PushID(int int_id);                                             // push integer into the ID stack (will hash integer).
// IMGUI_API void          PopID();                                                        // pop from the ID stack.
// IMGUI_API ImGuiID       GetID(const char* str_id);                                      // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
// IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);
// IMGUI_API ImGuiID       GetID(const void* ptr_id);
function PushID(id) { bind.PushID(id); }
function PopID() { bind.PopID(); }
function GetID(id) { return bind.GetID(id); }
// Widgets: Text
// IMGUI_API void          TextUnformatted(const char* text, const char* text_end = NULL); // raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.
// IMGUI_API void          Text(const char* fmt, ...)                                      IM_FMTARGS(1); // formatted text
// IMGUI_API void          TextV(const char* fmt, va_list args)                            IM_FMTLIST(1);
// IMGUI_API void          TextColored(const ImVec4& col, const char* fmt, ...)            IM_FMTARGS(2); // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();
// IMGUI_API void          TextColoredV(const ImVec4& col, const char* fmt, va_list args)  IM_FMTLIST(2);
// IMGUI_API void          TextDisabled(const char* fmt, ...)                              IM_FMTARGS(1); // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();
// IMGUI_API void          TextDisabledV(const char* fmt, va_list args)                    IM_FMTLIST(1);
// IMGUI_API void          TextWrapped(const char* fmt, ...)                               IM_FMTARGS(1); // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().
// IMGUI_API void          TextWrappedV(const char* fmt, va_list args)                     IM_FMTLIST(1);
// IMGUI_API void          LabelText(const char* label, const char* fmt, ...)              IM_FMTARGS(2); // display text+label aligned the same way as value+label widgets
// IMGUI_API void          LabelTextV(const char* label, const char* fmt, va_list args)    IM_FMTLIST(2);
// IMGUI_API void          BulletText(const char* fmt, ...)                                IM_FMTARGS(1); // shortcut for Bullet()+Text()
// IMGUI_API void          BulletTextV(const char* fmt, va_list args)                      IM_FMTLIST(1);
function TextUnformatted(text, text_end) {
    if (text_end === void 0) { text_end = null; }
    bind.TextUnformatted(text_end !== null ? text.substring(0, text_end) : text);
}
function Text(text) { bind.Text(text); }
function TextColored(col, text) { bind.TextColored((col instanceof ImColor) ? col.Value : col, text); }
function TextDisabled(text) { bind.TextDisabled(text); }
function TextWrapped(text) { bind.TextWrapped(text); }
function LabelText(label, text) { bind.LabelText(label, text); }
function BulletText(text) { bind.BulletText(text); }
// Widgets: Main
// - Most widgets return true when the value has been changed or when pressed/selected
// - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state.
// IMGUI_API bool          Button(const char* label, const ImVec2& size = ImVec2(0, 0));   // button
// IMGUI_API bool          SmallButton(const char* label);                                 // button with FramePadding=(0,0) to easily embed within text
// IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0); // flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
// IMGUI_API bool          ArrowButton(const char* str_id, ImGuiDir dir);                  // square button with an arrow shape
// IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& tint_col = ImVec4(1,1,1,1), const ImVec4& border_col = ImVec4(0,0,0,0));
// IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0),  const ImVec2& uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1));    // <0 frame_padding uses default frame padding settings. 0 for no padding
// IMGUI_API bool          Checkbox(const char* label, bool* v);
// IMGUI_API bool          CheckboxFlags(const char* label, int* flags, int flags_value);
// IMGUI_API bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value);
// IMGUI_API bool          RadioButton(const char* label, bool active);                    // use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
// IMGUI_API bool          RadioButton(const char* label, int* v, int v_button);           // shortcut to handle the above pattern when value is an integer
// IMGUI_API void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN, 0), const char* overlay = NULL);
// IMGUI_API void          Bullet();                                                       // draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses
function Button(label, size) {
    if (size === void 0) { size = ImVec2.ZERO; }
    return bind.Button(label, size);
}
function SmallButton(label) { return bind.SmallButton(label); }
function ArrowButton(str_id, dir) { return bind.ArrowButton(str_id, dir); }
function InvisibleButton(str_id, size, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.InvisibleButton(str_id, size, flags);
}
function Image(user_texture_id, size, uv0, uv1, tint_col, border_col) {
    if (uv0 === void 0) { uv0 = ImVec2.ZERO; }
    if (uv1 === void 0) { uv1 = ImVec2.UNIT; }
    if (tint_col === void 0) { tint_col = ImVec4.WHITE; }
    if (border_col === void 0) { border_col = ImVec4.ZERO; }
    bind.Image(ImGuiContext.setTexture(user_texture_id), size, uv0, uv1, tint_col, border_col);
}
function ImageButton(user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col) {
    if (size === void 0) { size = new ImVec2(Number.MIN_SAFE_INTEGER, 0); }
    if (uv0 === void 0) { uv0 = ImVec2.ZERO; }
    if (uv1 === void 0) { uv1 = ImVec2.UNIT; }
    if (frame_padding === void 0) { frame_padding = -1; }
    if (bg_col === void 0) { bg_col = ImVec4.ZERO; }
    if (tint_col === void 0) { tint_col = ImVec4.WHITE; }
    return bind.ImageButton(ImGuiContext.setTexture(user_texture_id), size, uv0, uv1, frame_padding, bg_col, tint_col);
}
function Checkbox(label, v) {
    if (Array.isArray(v)) {
        return bind.Checkbox(label, v);
    }
    else {
        var ref_v = [v()];
        var ret = bind.Checkbox(label, ref_v);
        v(ref_v[0]);
        return ret;
    }
}
function CheckboxFlags(label, flags, flags_value) {
    if (Array.isArray(flags)) {
        return bind.CheckboxFlags(label, flags, flags_value);
    }
    else {
        var ref_flags = [flags()];
        var ret = bind.CheckboxFlags(label, ref_flags, flags_value);
        flags(ref_flags[0]);
        return ret;
    }
}
function RadioButton(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof (args[0]) === "boolean") {
        var active = args[0];
        return bind.RadioButton_A(label, active);
    }
    else {
        var v = args[0];
        var v_button = args[1];
        var _v = Array.isArray(v) ? v : [v()];
        var ret = bind.RadioButton_B(label, _v, v_button);
        if (!Array.isArray(v)) {
            v(_v[0]);
        }
        return ret;
    }
}
function ProgressBar(fraction, size_arg, overlay) {
    if (size_arg === void 0) { size_arg = new ImVec2(-1, 0); }
    if (overlay === void 0) { overlay = null; }
    bind.ProgressBar(fraction, size_arg, overlay);
}
function Bullet() { bind.Bullet(); }
// Widgets: Combo Box
// - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
// - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose.
// IMGUI_API bool          BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0);
// IMGUI_API void          EndCombo(); // only call EndCombo() if BeginCombo() returns true!
// IMGUI_API bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);
// IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1);      // Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"
// IMGUI_API bool          Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items = -1);
function BeginCombo(label, preview_value, flags) {
    if (preview_value === void 0) { preview_value = null; }
    if (flags === void 0) { flags = 0; }
    return bind.BeginCombo(label, preview_value, flags);
}
function EndCombo() { bind.EndCombo(); }
function Combo(label, current_item) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var ret = false;
    var _current_item = Array.isArray(current_item) ? current_item : [current_item()];
    if (Array.isArray(args[0])) {
        var items_1 = args[0];
        var items_count = typeof (args[1]) === "number" ? args[1] : items_1.length;
        var popup_max_height_in_items = typeof (args[2]) === "number" ? args[2] : -1;
        var items_getter = function (data, idx, out_text) { out_text[0] = items_1[idx]; return true; };
        ret = bind.Combo(label, _current_item, items_getter, null, items_count, popup_max_height_in_items);
    }
    else if (typeof (args[0]) === "string") {
        var items_separated_by_zeros = args[0];
        var popup_max_height_in_items = typeof (args[1]) === "number" ? args[1] : -1;
        var items_2 = items_separated_by_zeros.replace(/^\0+|\0+$/g, "").split("\0");
        var items_count = items_2.length;
        var items_getter = function (data, idx, out_text) { out_text[0] = items_2[idx]; return true; };
        ret = bind.Combo(label, _current_item, items_getter, null, items_count, popup_max_height_in_items);
    }
    else {
        var items_getter = args[0];
        var data = args[1];
        var items_count = args[2];
        var popup_max_height_in_items = typeof (args[3]) === "number" ? args[3] : -1;
        ret = bind.Combo(label, _current_item, items_getter, data, items_count, popup_max_height_in_items);
    }
    if (!Array.isArray(current_item)) {
        current_item(_current_item[0]);
    }
    return ret;
}
// Widgets: Drag Sliders
// - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).
// - Use v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits.
// - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.
// - We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
// - Legacy: Pre-1.78 there are DragXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
// IMGUI_API bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);     // If v_min >= v_max we have no bound
// IMGUI_API bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);  // If v_min >= v_max we have no bound
// IMGUI_API bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0);
function DragFloat(label, v, v_speed, v_min, v_max, display_format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.DragFloat(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Scalar(_v, v);
    return ret;
}
function DragFloat2(label, v, v_speed, v_min, v_max, display_format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.DragFloat2(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector2(_v, v);
    return ret;
}
function DragFloat3(label, v, v_speed, v_min, v_max, display_format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.DragFloat3(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector3(_v, v);
    return ret;
}
function DragFloat4(label, v, v_speed, v_min, v_max, display_format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.DragFloat4(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector4(_v, v);
    return ret;
}
function DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, display_format, display_format_max, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (display_format_max === void 0) { display_format_max = null; }
    if (flags === void 0) { flags = 0; }
    var _v_current_min = import_Scalar(v_current_min);
    var _v_current_max = import_Scalar(v_current_max);
    var ret = bind.DragFloatRange2(label, _v_current_min, _v_current_max, v_speed, v_min, v_max, display_format, display_format_max, flags);
    export_Scalar(_v_current_min, v_current_min);
    export_Scalar(_v_current_max, v_current_max);
    return ret;
}
function DragInt(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.DragInt(label, _v, v_speed, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function DragInt2(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.DragInt2(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function DragInt3(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.DragInt3(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function DragInt4(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.DragInt4(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function DragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (format_max === void 0) { format_max = null; }
    if (flags === void 0) { flags = 0; }
    var _v_current_min = import_Scalar(v_current_min);
    var _v_current_max = import_Scalar(v_current_max);
    var ret = bind.DragIntRange2(label, _v_current_min, _v_current_max, v_speed, v_min, v_max, format, format_max, flags);
    export_Scalar(_v_current_min, v_current_min);
    export_Scalar(_v_current_max, v_current_max);
    return ret;
}
function DragScalar(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_min === void 0) { v_min = null; }
    if (v_max === void 0) { v_max = null; }
    if (format === void 0) { format = null; }
    if (flags === void 0) { flags = 0; }
    if (v instanceof Int8Array) {
        return bind.DragScalar(label, ImGuiDataType.S8, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.DragScalar(label, ImGuiDataType.U8, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.DragScalar(label, ImGuiDataType.S16, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.DragScalar(label, ImGuiDataType.U16, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.DragScalar(label, ImGuiDataType.S32, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.DragScalar(label, ImGuiDataType.U32, v, v_speed, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.DragScalar(label, ImGuiDataType.S64, v, v_speed, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.DragScalar(label, ImGuiDataType.U64, v, v_speed, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.DragScalar(label, ImGuiDataType.Float, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.DragScalar(label, ImGuiDataType.Double, v, v_speed, v_min, v_max, format, flags);
    }
    throw new Error();
}
// Widgets: Regular Sliders
// - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Legacy: Pre-1.78 there are SliderXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
// IMGUI_API bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);     // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.
// IMGUI_API bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = "%.0f deg", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
function SliderFloat(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.SliderFloat(label, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function SliderFloat2(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.SliderFloat2(label, _v, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function SliderFloat3(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.SliderFloat3(label, _v, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function SliderFloat4(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.SliderFloat4(label, _v, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function SliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format, flags) {
    if (v_degrees_min === void 0) { v_degrees_min = -360.0; }
    if (v_degrees_max === void 0) { v_degrees_max = +360.0; }
    if (format === void 0) { format = "%.0f deg"; }
    if (flags === void 0) { flags = 0; }
    var _v_rad = import_Scalar(v_rad);
    var ret = bind.SliderAngle(label, _v_rad, v_degrees_min, v_degrees_max, format, flags);
    export_Scalar(_v_rad, v_rad);
    return ret;
}
function SliderAngle3(label, v_rad, v_degrees_min, v_degrees_max, format, flags) {
    if (v_degrees_min === void 0) { v_degrees_min = -360.0; }
    if (v_degrees_max === void 0) { v_degrees_max = +360.0; }
    if (format === void 0) { format = "%.0f deg"; }
    if (flags === void 0) { flags = 0; }
    var _v_rad = import_Vector3(v_rad);
    _v_rad[0] = Math.floor(_v_rad[0] * 180 / Math.PI);
    _v_rad[1] = Math.floor(_v_rad[1] * 180 / Math.PI);
    _v_rad[2] = Math.floor(_v_rad[2] * 180 / Math.PI);
    var ret = bind.SliderInt3(label, _v_rad, v_degrees_min, v_degrees_max, format, flags);
    _v_rad[0] = _v_rad[0] * Math.PI / 180;
    _v_rad[1] = _v_rad[1] * Math.PI / 180;
    _v_rad[2] = _v_rad[2] * Math.PI / 180;
    export_Vector3(_v_rad, v_rad);
    return ret;
}
function SliderInt(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.SliderInt(label, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function SliderInt2(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.SliderInt2(label, _v, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function SliderInt3(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.SliderInt3(label, _v, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function SliderInt4(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.SliderInt4(label, _v, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function SliderScalar(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = null; }
    if (flags === void 0) { flags = 0; }
    if (v instanceof Int8Array) {
        return bind.SliderScalar(label, ImGuiDataType.S8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.SliderScalar(label, ImGuiDataType.U8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.SliderScalar(label, ImGuiDataType.S16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.SliderScalar(label, ImGuiDataType.U16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.SliderScalar(label, ImGuiDataType.S32, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.SliderScalar(label, ImGuiDataType.U32, v, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.SliderScalar(label, ImGuiDataType.S64, v, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.SliderScalar(label, ImGuiDataType.U64, v, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.SliderScalar(label, ImGuiDataType.Float, v, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.SliderScalar(label, ImGuiDataType.Double, v, v_min, v_max, format, flags);
    }
    throw new Error();
}
function VSliderFloat(label, size, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.VSliderFloat(label, size, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function VSliderInt(label, size, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.VSliderInt(label, size, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function VSliderScalar(label, size, data_type, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = null; }
    if (flags === void 0) { flags = 0; }
    if (v instanceof Int8Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S32, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U32, v, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.S64, v, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.U64, v, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.Float, v, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.Double, v, v_min, v_max, format, flags);
    }
    throw new Error();
}
// Widgets: Input with Keyboard
// - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.
// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
// IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat2(const char* label, float v[2], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat3(const char* label, float v[3], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat4(const char* label, float v[4], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
function InputText(label, buf, buf_size, flags, callback, user_data) {
    if (buf_size === void 0) { buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize; }
    if (flags === void 0) { flags = 0; }
    if (callback === void 0) { callback = null; }
    if (user_data === void 0) { user_data = null; }
    var ret = false;
    var screenPos = GetCursorScreenPos();
    var text;
    var _callback = callback && (function (data) { return callback(new ImGuiInputTextCallbackData(data, user_data)); }) || null;
    if (Array.isArray(buf)) {
        return bind.InputText(label, buf, buf_size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        var ref_buf = [buf.buffer];
        var _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputText(label, ref_buf, _buf_size, flags, _callback, null);
        //buf.buffer = ref_buf[0];
    }
    else {
        var ref_buf = [buf()];
        text = buf();
        ret = bind.InputText(label, ref_buf, buf_size + 1, flags, _callback, null);
        //buf(ref_buf[0]);
    }
    if (isMobile.any() || true) {
        if (IsItemClicked()) {
            if (!dom_input) {
                dom_input = new _input__WEBPACK_IMPORTED_MODULE_1__.Input(false);
            }
            dom_input.setText(text, GetID(label), GetIO().Fonts.CurrentFont);
        }
        if (dom_input && dom_input.isMe(GetID(label))) {
            var size = GetItemRectSize();
            size.x = CalcItemWidth();
            dom_input.setRect(screenPos.x, screenPos.y, size.x, size.y);
            if (Array.isArray(buf)) {
            }
            else if (buf instanceof ImStringBuffer) {
                buf.buffer = dom_input.Text;
            }
            else {
                buf(dom_input.Text);
            }
        }
    }
    return ret;
}
function InputTextMultiline(label, buf, buf_size, size, flags, callback, user_data) {
    if (buf_size === void 0) { buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize; }
    if (size === void 0) { size = ImVec2.ZERO; }
    if (flags === void 0) { flags = 0; }
    if (callback === void 0) { callback = null; }
    if (user_data === void 0) { user_data = null; }
    var ret = false;
    var screenPos = GetCursorScreenPos();
    var text;
    var _callback = callback && (function (data) { return callback(new ImGuiInputTextCallbackData(data, user_data)); }) || null;
    if (Array.isArray(buf)) {
        return bind.InputTextMultiline(label, buf, buf_size, size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        var ref_buf = [buf.buffer];
        var _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputTextMultiline(label, ref_buf, _buf_size, size, flags, _callback, null);
        //buf.buffer = ref_buf[0];
    }
    else {
        var ref_buf = [buf()];
        text = buf();
        ret = bind.InputTextMultiline(label, ref_buf, buf_size, size, flags, _callback, null);
        //buf(ref_buf[0]);        
    }
    if (isMobile.any() || true) {
        if (IsItemClicked()) {
            if (!dom_inputMultiline) {
                dom_inputMultiline = new _input__WEBPACK_IMPORTED_MODULE_1__.Input(true);
            }
            dom_inputMultiline.setText(text, GetID(label), GetIO().Fonts.CurrentFont);
        }
        if (dom_inputMultiline && dom_inputMultiline.isMe(GetID(label))) {
            var size_1 = GetItemRectSize();
            size_1.x = CalcItemWidth();
            dom_inputMultiline.setRect(screenPos.x, screenPos.y, size_1.x, size_1.y);
            if (Array.isArray(buf)) {
            }
            else if (buf instanceof ImStringBuffer) {
                buf.buffer = dom_inputMultiline.Text;
            }
            else {
                buf(dom_inputMultiline.Text);
            }
        }
    }
    return ret;
}
function InputTextWithHint(label, hint, buf, buf_size, flags, callback, user_data) {
    if (buf_size === void 0) { buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize; }
    if (flags === void 0) { flags = 0; }
    if (callback === void 0) { callback = null; }
    if (user_data === void 0) { user_data = null; }
    var ret = false;
    var screenPos = GetCursorScreenPos();
    var text;
    var _callback = callback && (function (data) { return callback(new ImGuiInputTextCallbackData(data, user_data)); }) || null;
    if (Array.isArray(buf)) {
        return bind.InputTextWithHint(label, hint, buf, buf_size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        var ref_buf = [buf.buffer];
        var _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputTextWithHint(label, hint, ref_buf, _buf_size, flags, _callback, null);
        //buf.buffer = ref_buf[0];
    }
    else {
        var ref_buf = [buf()];
        text = buf();
        ret = bind.InputTextWithHint(label, hint, ref_buf, buf_size, flags, _callback, null);
        //buf(ref_buf[0]);
    }
    if (isMobile.any() || true) {
        if (IsItemClicked()) {
            if (!dom_input) {
                dom_input = new _input__WEBPACK_IMPORTED_MODULE_1__.Input(false);
            }
            dom_input.setText(text, GetID(label), GetIO().Fonts.CurrentFont);
        }
        if (dom_input && dom_input.isMe(GetID(label))) {
            var size = GetItemRectSize();
            size.x = CalcItemWidth();
            dom_input.setRect(screenPos.x, screenPos.y, size.x, size.y);
            if (Array.isArray(buf)) {
            }
            else if (buf instanceof ImStringBuffer) {
                buf.buffer = dom_input.Text;
            }
            else {
                buf(dom_input.Text);
            }
        }
    }
    return ret;
}
function InputFloat(label, v, step, step_fast, format, flags) {
    if (step === void 0) { step = 0.0; }
    if (step_fast === void 0) { step_fast = 0.0; }
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.InputFloat(label, _v, step, step_fast, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputFloat2(label, v, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.InputFloat2(label, _v, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function InputFloat3(label, v, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.InputFloat3(label, _v, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function InputFloat4(label, v, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.InputFloat4(label, _v, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function InputInt(label, v, step, step_fast, flags) {
    if (step === void 0) { step = 1; }
    if (step_fast === void 0) { step_fast = 100; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.InputInt(label, _v, step, step_fast, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputInt2(label, v, flags) {
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.InputInt2(label, _v, flags);
    export_Vector2(_v, v);
    return ret;
}
function InputInt3(label, v, flags) {
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.InputInt3(label, _v, flags);
    export_Vector3(_v, v);
    return ret;
}
function InputInt4(label, v, flags) {
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.InputInt4(label, _v, flags);
    export_Vector4(_v, v);
    return ret;
}
function InputDouble(label, v, step, step_fast, format, flags) {
    if (step === void 0) { step = 0.0; }
    if (step_fast === void 0) { step_fast = 0.0; }
    if (format === void 0) { format = "%.6f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.InputDouble(label, _v, step, step_fast, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputScalar(label, v, step, step_fast, format, flags) {
    if (step === void 0) { step = null; }
    if (step_fast === void 0) { step_fast = null; }
    if (format === void 0) { format = null; }
    if (flags === void 0) { flags = 0; }
    if (v instanceof Int8Array) {
        return bind.InputScalar(label, ImGuiDataType.S8, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.InputScalar(label, ImGuiDataType.U8, v, step, step_fast, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.InputScalar(label, ImGuiDataType.S16, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.InputScalar(label, ImGuiDataType.U16, v, step, step_fast, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.InputScalar(label, ImGuiDataType.S32, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.InputScalar(label, ImGuiDataType.U32, v, step, step_fast, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.InputScalar(label, ImGuiDataType.S64, v, step, step_fast, format, flags); }
    // if (v instanceof Uint64Array) { return bind.InputScalar(label, ImGuiDataType.U64, v, step, step_fast, format, flags); }
    if (v instanceof Float32Array) {
        return bind.InputScalar(label, ImGuiDataType.Float, v, step, step_fast, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.InputScalar(label, ImGuiDataType.Double, v, step, step_fast, format, flags);
    }
    throw new Error();
}
// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)
// - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.
// - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x
// IMGUI_API bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL);
// IMGUI_API bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0, 0)); // display a color square/button, hover for details, return true when pressed.
// IMGUI_API void          SetColorEditOptions(ImGuiColorEditFlags flags);                     // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.
function ColorEdit3(label, col, flags) {
    if (flags === void 0) { flags = 0; }
    var _col = import_Color3(col);
    var ret = bind.ColorEdit3(label, _col, flags);
    export_Color3(_col, col);
    return ret;
}
function ColorEdit4(label, col, flags) {
    if (flags === void 0) { flags = 0; }
    var _col = import_Color4(col);
    var ret = bind.ColorEdit4(label, _col, flags);
    export_Color4(_col, col);
    return ret;
}
function ColorPicker3(label, col, flags) {
    if (flags === void 0) { flags = 0; }
    var _col = import_Color3(col);
    var ret = bind.ColorPicker3(label, _col, flags);
    export_Color3(_col, col);
    return ret;
}
function ColorPicker4(label, col, flags, ref_col) {
    if (flags === void 0) { flags = 0; }
    if (ref_col === void 0) { ref_col = null; }
    var _col = import_Color4(col);
    var _ref_col = ref_col ? import_Color4(ref_col) : null;
    var ret = bind.ColorPicker4(label, _col, flags, _ref_col);
    export_Color4(_col, col);
    if (_ref_col && ref_col) {
        export_Color4(_ref_col, ref_col);
    }
    return ret;
}
function ColorButton(desc_id, col, flags, size) {
    if (flags === void 0) { flags = 0; }
    if (size === void 0) { size = ImVec2.ZERO; }
    return bind.ColorButton(desc_id, col, flags, size);
}
function SetColorEditOptions(flags) {
    bind.SetColorEditOptions(flags);
}
function TreeNode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (typeof (args[0]) === "string") {
        if (args.length === 1) {
            var label = args[0];
            return bind.TreeNode_A(label);
        }
        else {
            var str_id = args[0];
            var fmt = args[1];
            return bind.TreeNode_B(str_id, fmt);
        }
    }
    else {
        var ptr_id = args[0];
        var fmt = args[1];
        return bind.TreeNode_C(ptr_id, fmt);
    }
}
function TreeNodeEx() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (typeof (args[0]) === "string") {
        if (args.length < 3) {
            var label = args[0];
            var flags = args[1] || 0;
            return bind.TreeNodeEx_A(label, flags);
        }
        else {
            var str_id = args[0];
            var flags = args[1];
            var fmt = args[2];
            return bind.TreeNodeEx_B(str_id, flags, fmt);
        }
    }
    else {
        var ptr_id = args[0];
        var flags = args[1];
        var fmt = args[2];
        return bind.TreeNodeEx_C(ptr_id, flags, fmt);
    }
}
function TreePush() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (typeof (args[0]) === "string") {
        var str_id = args[0];
        bind.TreePush_A(str_id);
    }
    else {
        var ptr_id = args[0];
        bind.TreePush_B(ptr_id);
    }
}
function TreePop() { bind.TreePop(); }
function GetTreeNodeToLabelSpacing() { return bind.GetTreeNodeToLabelSpacing(); }
function CollapsingHeader(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (args.length === 0) {
        return bind.CollapsingHeader_A(label, 0);
    }
    else {
        if (typeof (args[0]) === "number") {
            var flags = args[0];
            return bind.CollapsingHeader_A(label, flags);
        }
        else {
            var p_open = args[0];
            var flags = args[1] || 0;
            var ref_open = Array.isArray(p_open) ? p_open : [p_open()];
            var ret = bind.CollapsingHeader_B(label, ref_open, flags);
            if (!Array.isArray(p_open)) {
                p_open(ref_open[0]);
            }
            return ret;
        }
    }
}
function SetNextItemOpen(is_open, cond) {
    if (cond === void 0) { cond = 0; }
    bind.SetNextItemOpen(is_open, cond);
}
function Selectable(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (args.length === 0) {
        return bind.Selectable_A(label, false, 0, ImVec2.ZERO);
    }
    else {
        if (typeof (args[0]) === "boolean") {
            var selected = args[0];
            var flags = args[1] || 0;
            var size = args[2] || ImVec2.ZERO;
            return bind.Selectable_A(label, selected, flags, size);
        }
        else {
            var p_selected = args[0];
            var flags = args[1] || 0;
            var size = args[2] || ImVec2.ZERO;
            var ref_selected = Array.isArray(p_selected) ? p_selected : [p_selected()];
            var ret = bind.Selectable_B(label, ref_selected, flags, size);
            if (!Array.isArray(p_selected)) {
                p_selected(ref_selected[0]);
            }
            return ret;
        }
    }
}
function ListBox(label, current_item) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var ret = false;
    var _current_item = Array.isArray(current_item) ? current_item : [current_item()];
    if (Array.isArray(args[0])) {
        var items = args[0];
        var items_count = typeof (args[1]) === "number" ? args[1] : items.length;
        var height_in_items = typeof (args[2]) === "number" ? args[2] : -1;
        ret = bind.ListBox_A(label, _current_item, items, items_count, height_in_items);
    }
    else {
        var items_getter = args[0];
        var data = args[1];
        var items_count = args[2];
        var height_in_items = typeof (args[3]) === "number" ? args[3] : -1;
        ret = bind.ListBox_B(label, _current_item, items_getter, data, items_count, height_in_items);
    }
    if (!Array.isArray(current_item)) {
        current_item(_current_item[0]);
    }
    return ret;
}
function ListBoxHeader(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof (args[0]) === "object") {
        var size = args[0];
        return bind.ListBoxHeader_A(label, size);
    }
    else {
        var items_count = args[0];
        var height_in_items = typeof (args[1]) === "number" ? args[1] : -1;
        return bind.ListBoxHeader_B(label, items_count, height_in_items);
    }
}
function ListBoxFooter() { bind.ListBoxFooter(); }
function PlotLines(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (Array.isArray(args[0])) {
        var values_1 = args[0];
        var values_getter = function (data, idx) { return values_1[idx * stride_1]; };
        var values_count = typeof (args[1]) === "number" ? args[1] : values_1.length;
        var values_offset = typeof (args[2]) === "number" ? args[2] : 0;
        var overlay_text = typeof (args[3]) === "string" ? args[3] : null;
        var scale_min = typeof (args[4]) === "number" ? args[4] : Number.MAX_VALUE;
        var scale_max = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        var graph_size = args[6] || ImVec2.ZERO;
        var stride_1 = typeof (args[7]) === "number" ? args[7] : 1;
        bind.PlotLines(label, values_getter, null, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
    else {
        var values_getter = args[0];
        var data = args[1];
        var values_count = args[2];
        var values_offset = typeof (args[3]) === "number" ? args[3] : 0;
        var overlay_text = typeof (args[4]) === "string" ? args[4] : null;
        var scale_min = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        var scale_max = typeof (args[6]) === "number" ? args[6] : Number.MAX_VALUE;
        var graph_size = args[7] || ImVec2.ZERO;
        bind.PlotLines(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
}
function PlotHistogram(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (Array.isArray(args[0])) {
        var values_2 = args[0];
        var values_getter = function (data, idx) { return values_2[idx * stride_2]; };
        var values_count = typeof (args[1]) === "number" ? args[1] : values_2.length;
        var values_offset = typeof (args[2]) === "number" ? args[2] : 0;
        var overlay_text = typeof (args[3]) === "string" ? args[3] : null;
        var scale_min = typeof (args[4]) === "number" ? args[4] : Number.MAX_VALUE;
        var scale_max = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        var graph_size = args[6] || ImVec2.ZERO;
        var stride_2 = typeof (args[7]) === "number" ? args[7] : 1;
        bind.PlotHistogram(label, values_getter, null, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
    else {
        var values_getter = args[0];
        var data = args[1];
        var values_count = args[2];
        var values_offset = typeof (args[3]) === "number" ? args[3] : 0;
        var overlay_text = typeof (args[4]) === "string" ? args[4] : null;
        var scale_min = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        var scale_max = typeof (args[6]) === "number" ? args[6] : Number.MAX_VALUE;
        var graph_size = args[7] || ImVec2.ZERO;
        bind.PlotHistogram(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
}
function Value(prefix) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof (args[0]) === "boolean") {
        bind.Value_A(prefix, args[0]);
    }
    else if (typeof (args[0]) === "number") {
        if (Number.isInteger(args[0])) {
            bind.Value_B(prefix, args[0]);
        }
        else {
            bind.Value_D(prefix, args[0], typeof (args[1]) === "string" ? args[1] : null);
        }
    }
    else {
        bind.Text(prefix + String(args[0]));
    }
}
// Widgets: Menus
// - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.
// - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.
// - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.
// IMGUI_API bool          BeginMenuBar();                                                     // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
// IMGUI_API void          EndMenuBar();                                                       // only call EndMenuBar() if BeginMenuBar() returns true!
// IMGUI_API bool          BeginMainMenuBar();                                                 // create and append to a full screen menu-bar.
// IMGUI_API void          EndMainMenuBar();                                                   // only call EndMainMenuBar() if BeginMainMenuBar() returns true!
// IMGUI_API bool          BeginMenu(const char* label, bool enabled = true);                  // create a sub-menu entry. only call EndMenu() if this returns true!
// IMGUI_API void          EndMenu();                                                          // only call EndMenu() if BeginMenu() returns true!
// IMGUI_API bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true);  // return true when activated. shortcuts are displayed for convenience but not processed by ImGui at the moment
// IMGUI_API bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true);              // return true when activated + toggle (*p_selected) if p_selected != NULL
function BeginMenuBar() { return bind.BeginMenuBar(); }
function EndMenuBar() { bind.EndMenuBar(); }
function BeginMainMenuBar() { return bind.BeginMainMenuBar(); }
function EndMainMenuBar() { bind.EndMainMenuBar(); }
function BeginMenu(label, enabled) {
    if (enabled === void 0) { enabled = true; }
    return bind.BeginMenu(label, enabled);
}
function EndMenu() { bind.EndMenu(); }
function MenuItem(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (args.length === 0) {
        return bind.MenuItem_A(label, null, false, true);
    }
    else if (args.length === 1) {
        var shortcut = args[0];
        return bind.MenuItem_A(label, shortcut, false, true);
    }
    else {
        var shortcut = args[0];
        if (typeof (args[1]) === "boolean") {
            var selected = args[1];
            var enabled = typeof (args[2]) === "boolean" ? args[2] : true;
            return bind.MenuItem_A(label, shortcut, selected, enabled);
        }
        else {
            var p_selected = args[1];
            var enabled = typeof (args[2]) === "boolean" ? args[2] : true;
            var ref_selected = Array.isArray(p_selected) ? p_selected : [p_selected()];
            var ret = bind.MenuItem_B(label, shortcut, ref_selected, enabled);
            if (!Array.isArray(p_selected)) {
                p_selected(ref_selected[0]);
            }
            return ret;
        }
    }
}
// Tooltips
// - Tooltip are windows following the mouse. They do not take focus away.
// IMGUI_API void          BeginTooltip();                                                     // begin/append a tooltip window. to create full-featured tooltip (with any kind of items).
// IMGUI_API void          EndTooltip();
// IMGUI_API void          SetTooltip(const char* fmt, ...) IM_FMTARGS(1);                     // set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip().
// IMGUI_API void          SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1);
function BeginTooltip() { bind.BeginTooltip(); }
function EndTooltip() { bind.EndTooltip(); }
function SetTooltip(fmt) { bind.SetTooltip(fmt); }
// Popups, Modals
//  - They block normal mouse hovering detection (and therefore most mouse interactions) behind them.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.
//  - The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.
//  - You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().
//  - IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.
//    This is sometimes leading to confusing mistakes. May rework this in the future.
// Popups: begin/end functions
//  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards. ImGuiWindowFlags are forwarded to the window.
//  - BeginPopupModal(): block every interactions behind the window, cannot be closed by user, add a dimming background, has a title bar.
// IMGUI_API bool          BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0);                         // return true if the popup is open, and you can start outputting to it.
// IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0); // return true if the modal is open, and you can start outputting to it.
// IMGUI_API void          EndPopup();                                                                         // only call EndPopup() if BeginPopupXXX() returns true!
function BeginPopup(str_id, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.BeginPopup(str_id, flags);
}
function BeginPopupModal(str_id, p_open, flags) {
    if (p_open === void 0) { p_open = null; }
    if (flags === void 0) { flags = 0; }
    if (Array.isArray(p_open)) {
        return bind.BeginPopupModal(str_id, p_open, flags);
    }
    else if (typeof (p_open) === "function") {
        var _p_open = [p_open()];
        var ret = bind.BeginPopupModal(str_id, _p_open, flags);
        p_open(_p_open[0]);
        return ret;
    }
    else {
        return bind.BeginPopupModal(str_id, null, flags);
    }
}
function EndPopup() { bind.EndPopup(); }
// Popups: open/close functions
//  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.
//  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).
//  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().
// IMGUI_API void          OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags = 0);                     // call to mark popup as open (don't call every frame!).
// IMGUI_API void          OpenPopupOnItemClick(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);   // helper to open popup when clicked on last item. return true when just opened. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
// IMGUI_API void          CloseCurrentPopup();                                                                // manually close the popup we have begin-ed into.
function OpenPopup(str_id, popup_flags) {
    if (popup_flags === void 0) { popup_flags = 0; }
    bind.OpenPopup(str_id, popup_flags);
}
function OpenPopupOnItemClick(str_id, popup_flags) {
    if (str_id === void 0) { str_id = null; }
    if (popup_flags === void 0) { popup_flags = 1; }
    bind.OpenPopupOnItemClick(str_id, popup_flags);
}
function CloseCurrentPopup() { bind.CloseCurrentPopup(); }
// Popups: open+begin combined functions helpers
//  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.
//  - They are convenient to easily create context menus, hence the name.
//  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.
//  - IMPORTANT: we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight.
// IMGUI_API bool          BeginPopupContextItem(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked on last item. if you can pass a NULL str_id only if the previous item had an id. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
// IMGUI_API bool          BeginPopupContextWindow(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);// open+begin popup when clicked on current window.
// IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked in void (where there are no windows).
function BeginPopupContextItem(str_id, popup_flags) {
    if (str_id === void 0) { str_id = null; }
    if (popup_flags === void 0) { popup_flags = 1; }
    return bind.BeginPopupContextItem(str_id, popup_flags);
}
function BeginPopupContextWindow(str_id, popup_flags) {
    if (str_id === void 0) { str_id = null; }
    if (popup_flags === void 0) { popup_flags = 1; }
    return bind.BeginPopupContextWindow(str_id, popup_flags);
}
function BeginPopupContextVoid(str_id, popup_flags) {
    if (str_id === void 0) { str_id = null; }
    if (popup_flags === void 0) { popup_flags = 1; }
    return bind.BeginPopupContextVoid(str_id, popup_flags);
}
// Popups: test function
//  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open.
// IMGUI_API bool          IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0);                         // return true if the popup is open.
function IsPopupOpen(str_id, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.IsPopupOpen(str_id, flags);
}
// Tables
// [BETA API] API may evolve slightly! If you use this, please update to the next version when it comes out!
// - Full-featured replacement for old Columns API.
// - See Demo->Tables for demo code.
// - See top of imgui_tables.cpp for general commentary.
// - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.
// The typical call flow is:
// - 1. Call BeginTable().
// - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.
// - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.
// - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.
// - 5. Populate contents:
//    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.
//    - If you are using tables as a sort of grid, where every columns is holding the same type of contents,
//      you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().
//      TableNextColumn() will automatically wrap-around into the next row if needed.
//    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!
//    - Summary of possible call flow:
//        --------------------------------------------------------------------------------------------------------
//        TableNextRow() -> TableSetColumnIndex(0) -> Text("Hello 0") -> TableSetColumnIndex(1) -> Text("Hello 1")  // OK
//        TableNextRow() -> TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK
//                          TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!
//        TableNextRow()                           -> Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!
//        --------------------------------------------------------------------------------------------------------
// - 5. Call EndTable()
// IMGUI_API bool          BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f);
// IMGUI_API void          EndTable();                                 // only call EndTable() if BeginTable() returns true!
// IMGUI_API void          TableNextRow(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f); // append into the first cell of a new row.
// IMGUI_API bool          TableNextColumn();                          // append into the next column (or first column of next row if currently in last column). Return true when column is visible.
// IMGUI_API bool          TableSetColumnIndex(int column_n);          // append into the specified column. Return true when column is visible.
function BeginTable(str_id, column, flags, outer_size, inner_width) {
    if (flags === void 0) { flags = 0; }
    if (outer_size === void 0) { outer_size = ImVec2.ZERO; }
    if (inner_width === void 0) { inner_width = 0.0; }
    return bind.BeginTable(str_id, column, flags, outer_size, inner_width);
}
function EndTable() { bind.EndTable(); }
function TableNextRow(row_flags, min_row_height) {
    if (row_flags === void 0) { row_flags = 0; }
    if (min_row_height === void 0) { min_row_height = 0.0; }
    bind.TableNextRow(row_flags, min_row_height);
}
function TableNextColumn() { return bind.TableNextColumn(); }
function TableSetColumnIndex(column_n) { return bind.TableSetColumnIndex(column_n); }
// Tables: Headers & Columns declaration
// - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.
// - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.
//   Headers are required to perform: reordering, sorting, and opening the context menu.
//   The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.
// - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in
//   some advanced use cases (e.g. adding custom widgets in header row).
// - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
// IMGUI_API void          TableSetupColumn(const char* label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImU32 user_id = 0);
// IMGUI_API void          TableSetupScrollFreeze(int cols, int rows); // lock columns/rows so they stay visible when scrolled.
// IMGUI_API void          TableHeadersRow();                          // submit all headers cells based on data provided to TableSetupColumn() + submit context menu
// IMGUI_API void          TableHeader(const char* label);             // submit one header cell manually (rarely used)
function TableSetupColumn(label, flags, init_width_or_weight, user_id) {
    if (flags === void 0) { flags = 0; }
    if (init_width_or_weight === void 0) { init_width_or_weight = 0.0; }
    if (user_id === void 0) { user_id = 0; }
    bind.TableSetupColumn(label, flags, init_width_or_weight, user_id);
}
function TableSetupScrollFreeze(cols, rows) { bind.TableSetupScrollFreeze(cols, rows); }
function TableHeadersRow() { bind.TableHeadersRow(); }
function TableHeader(label) { bind.TableHeader(label); }
// Tables: Sorting
// - Call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting.
// - When 'SpecsDirty == true' you should sort your data. It will be true when sorting specs have changed
//   since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting, else you may
//   wastefully sort your data every frame!
// - Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().
// IMGUI_API ImGuiTableSortSpecs* TableGetSortSpecs();                        // get latest sort specs for the table (NULL if not sorting).
function TableGetSortSpecs() {
    var sort_specs = bind.TableGetSortSpecs();
    return (sort_specs === null) ? null : new ImGuiTableSortSpecs(sort_specs);
}
// Tables: Miscellaneous functions
// - Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index.
// IMGUI_API int                   TableGetColumnCount();                      // return number of columns (value passed to BeginTable)
// IMGUI_API int                   TableGetColumnIndex();                      // return current column index.
// IMGUI_API int                   TableGetRowIndex();                         // return current row index.
// IMGUI_API const char*           TableGetColumnName(int column_n = -1);      // return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
// IMGUI_API ImGuiTableColumnFlags TableGetColumnFlags(int column_n = -1);     // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
// IMGUI_API void                  TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1);  // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
function TableGetColumnCount() { return bind.TableGetColumnCount(); }
function TableGetColumnIndex() { return bind.TableGetColumnIndex(); }
function TableGetRowIndex() { return bind.TableGetRowIndex(); }
function TableGetColumnName(column_n) {
    if (column_n === void 0) { column_n = -1; }
    return bind.TableGetColumnName(column_n);
}
function TableGetColumnFlags(column_n) {
    if (column_n === void 0) { column_n = -1; }
    return bind.TableGetColumnFlags(column_n);
}
function TableSetBgColor(target, color, column_n) {
    if (column_n === void 0) { column_n = -1; }
    bind.TableSetBgColor(target, color, column_n);
}
// Legacy Columns API (2020: prefer using Tables!)
// - You can also use SameLine(pos_x) to mimic simplified columns.
// IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);
// IMGUI_API void          NextColumn();                                                       // next column, defaults to current row or next row if the current row is finished
// IMGUI_API int           GetColumnIndex();                                                   // get current column index
// IMGUI_API float         GetColumnWidth(int column_index = -1);                              // get column width (in pixels). pass -1 to use current column
// IMGUI_API void          SetColumnWidth(int column_index, float width);                      // set column width (in pixels). pass -1 to use current column
// IMGUI_API float         GetColumnOffset(int column_index = -1);                             // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
// IMGUI_API void          SetColumnOffset(int column_index, float offset_x);                  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
// IMGUI_API int           GetColumnsCount();
function Columns(count, id, border) {
    if (count === void 0) { count = 1; }
    if (id === void 0) { id = null; }
    if (border === void 0) { border = true; }
    bind.Columns(count, id, border);
}
function NextColumn() { bind.NextColumn(); }
function GetColumnIndex() { return bind.GetColumnIndex(); }
function GetColumnWidth(column_index) {
    if (column_index === void 0) { column_index = -1; }
    return bind.GetColumnWidth(column_index);
}
function SetColumnWidth(column_index, width) { bind.SetColumnWidth(column_index, width); }
function GetColumnOffset(column_index) {
    if (column_index === void 0) { column_index = -1; }
    return bind.GetColumnOffset(column_index);
}
function SetColumnOffset(column_index, offset_x) { bind.SetColumnOffset(column_index, offset_x); }
function GetColumnsCount() { return bind.GetColumnsCount(); }
// Tab Bars, Tabs
// IMGUI_API bool          BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0);        // create and append into a TabBar
// IMGUI_API void          EndTabBar();                                                        // only call EndTabBar() if BeginTabBar() returns true!
// IMGUI_API bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0); // create a Tab. Returns true if the Tab is selected.
// IMGUI_API void          EndTabItem();                                                       // only call EndTabItem() if BeginTabItem() returns true!
// IMGUI_API bool          TabItemButton(const char* label, ImGuiTabItemFlags flags = 0);      // create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
// IMGUI_API void          SetTabItemClosed(const char* tab_or_docked_window_label);           // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.
function BeginTabBar(str_id, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.BeginTabBar(str_id, flags);
}
function EndTabBar() { bind.EndTabBar(); }
function BeginTabItem(label, p_open, flags) {
    if (p_open === void 0) { p_open = null; }
    if (flags === void 0) { flags = 0; }
    if (p_open === null) {
        return bind.BeginTabItem(label, null, flags);
    }
    else if (Array.isArray(p_open)) {
        return bind.BeginTabItem(label, p_open, flags);
    }
    else {
        var ref_open = [p_open()];
        var ret = bind.BeginTabItem(label, ref_open, flags);
        p_open(ref_open[0]);
        return ret;
    }
}
function EndTabItem() { bind.EndTabItem(); }
function TabItemButton(label, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.TabItemButton(label, flags);
}
function SetTabItemClosed(tab_or_docked_window_label) { bind.SetTabItemClosed(tab_or_docked_window_label); }
// Logging/Capture
// - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.
// IMGUI_API void          LogToTTY(int auto_open_depth = -1);                                 // start logging to tty (stdout)
// IMGUI_API void          LogToFile(int auto_open_depth = -1, const char* filename = NULL);   // start logging to file
// IMGUI_API void          LogToClipboard(int auto_open_depth = -1);                           // start logging to OS clipboard
// IMGUI_API void          LogFinish();                                                        // stop logging (close file, etc.)
// IMGUI_API void          LogButtons();                                                       // helper to display buttons for logging to tty/file/clipboard
// IMGUI_API void          LogText(const char* fmt, ...) IM_FMTARGS(1);                        // pass text data straight to log (without being displayed)
function LogToTTY(max_depth) {
    if (max_depth === void 0) { max_depth = -1; }
    bind.LogToTTY(max_depth);
}
function LogToFile(max_depth, filename) {
    if (max_depth === void 0) { max_depth = -1; }
    if (filename === void 0) { filename = null; }
    bind.LogToFile(max_depth, filename);
}
function LogToClipboard(max_depth) {
    if (max_depth === void 0) { max_depth = -1; }
    bind.LogToClipboard(max_depth);
}
function LogFinish() { bind.LogFinish(); }
function LogButtons() { bind.LogButtons(); }
function LogText(fmt) { bind.LogText(fmt); }
// Drag and Drop
// - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback "..." tooltip as replacement)
// IMGUI_API bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0);                                      // call when the current item is active. If this return true, you can call SetDragDropPayload() + EndDragDropSource()
// IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0);  // type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.
// IMGUI_API void          EndDragDropSource();                                                                    // only call EndDragDropSource() if BeginDragDropSource() returns true!
// IMGUI_API bool                  BeginDragDropTarget();                                                          // call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
// IMGUI_API const ImGuiPayload*   AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0);          // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
// IMGUI_API void                  EndDragDropTarget();                                                            // only call EndDragDropTarget() if BeginDragDropTarget() returns true!
// IMGUI_API const ImGuiPayload*   GetDragDropPayload();                                                           // peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type.
var _ImGui_DragDropPayload_data = {};
function BeginDragDropSource(flags) {
    if (flags === void 0) { flags = 0; }
    return bind.BeginDragDropSource(flags);
}
function SetDragDropPayload(type, data, cond) {
    if (cond === void 0) { cond = 0; }
    _ImGui_DragDropPayload_data[type] = data;
    return bind.SetDragDropPayload(type, data, 0, cond);
}
function EndDragDropSource() {
    bind.EndDragDropSource();
}
function BeginDragDropTarget() {
    return bind.BeginDragDropTarget();
}
function AcceptDragDropPayload(type, flags) {
    if (flags === void 0) { flags = 0; }
    var data = _ImGui_DragDropPayload_data[type];
    return bind.AcceptDragDropPayload(type, flags) ? { Data: data } : null;
}
function EndDragDropTarget() {
    bind.EndDragDropTarget();
}
function GetDragDropPayload() {
    return bind.GetDragDropPayload();
}
// Clipping
// - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
// IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);
// IMGUI_API void          PopClipRect();
function PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect) {
    bind.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
}
function PopClipRect() {
    bind.PopClipRect();
}
// Focus, Activation
// - Prefer using "SetItemDefaultFocus()" over "if (IsWindowAppearing()) SetScrollHereY()" when applicable to signify "this is the default item"
// IMGUI_API void          SetItemDefaultFocus();                                              // make last item the default focused item of a window.
// IMGUI_API void          SetKeyboardFocusHere(int offset = 0);                               // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
function SetItemDefaultFocus() { bind.SetItemDefaultFocus(); }
function SetKeyboardFocusHere(offset) {
    if (offset === void 0) { offset = 0; }
    bind.SetKeyboardFocusHere(offset);
}
// Item/Widgets Utilities
// - Most of the functions are referring to the last/previous item we submitted.
// - See Demo Window under "Widgets->Querying Status" for an interactive visualization of most of those functions.
// IMGUI_API bool          IsItemHovered(ImGuiHoveredFlags flags = 0);                         // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
// IMGUI_API bool          IsItemActive();                                                     // is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
// IMGUI_API bool          IsItemFocused();                                                    // is the last item focused for keyboard/gamepad navigation?
// IMGUI_API bool          IsItemClicked(ImGuiMouseButton mouse_button = 0);                   // is the last item clicked? (e.g. button/node just clicked on) == IsMouseClicked(mouse_button) && IsItemHovered()
// IMGUI_API bool          IsItemVisible();                                                    // is the last item visible? (items may be out of sight because of clipping/scrolling)
// IMGUI_API bool          IsItemEdited();                                                     // did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
// IMGUI_API bool          IsItemActivated();                                                  // was the last item just made active (item was previously inactive).
// IMGUI_API bool          IsItemDeactivated();                                                // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.
// IMGUI_API bool          IsItemDeactivatedAfterEdit();                                       // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
// IMGUI_API bool          IsItemToggledOpen();                                                // was the last item open state toggled? set by TreeNode().
// IMGUI_API bool          IsAnyItemHovered();                                                 // is any item hovered?
// IMGUI_API bool          IsAnyItemActive();                                                  // is any item active?
// IMGUI_API bool          IsAnyItemFocused();                                                 // is any item focused?
// IMGUI_API ImVec2        GetItemRectMin();                                                   // get upper-left bounding rectangle of the last item (screen space)
// IMGUI_API ImVec2        GetItemRectMax();                                                   // get lower-right bounding rectangle of the last item (screen space)
// IMGUI_API ImVec2        GetItemRectSize();                                                  // get size of last item
// IMGUI_API void          SetItemAllowOverlap();                                              // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.
function IsItemHovered(flags) {
    if (flags === void 0) { flags = 0; }
    return bind.IsItemHovered(flags);
}
function IsItemActive() { return bind.IsItemActive(); }
function IsItemFocused() { return bind.IsItemFocused(); }
function IsItemClicked(mouse_button) {
    if (mouse_button === void 0) { mouse_button = 0; }
    return bind.IsItemClicked(mouse_button);
}
function IsItemVisible() { return bind.IsItemVisible(); }
function IsItemEdited() { return bind.IsItemEdited(); }
function IsItemActivated() { return bind.IsItemActivated(); }
function IsItemDeactivated() { return bind.IsItemDeactivated(); }
function IsItemDeactivatedAfterEdit() { return bind.IsItemDeactivatedAfterEdit(); }
function IsItemToggledOpen() { return bind.IsItemToggledOpen(); }
function IsAnyItemHovered() { return bind.IsAnyItemHovered(); }
function IsAnyItemActive() { return bind.IsAnyItemActive(); }
function IsAnyItemFocused() { return bind.IsAnyItemFocused(); }
function GetItemRectMin(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetItemRectMin(out);
}
function GetItemRectMax(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetItemRectMax(out);
}
function GetItemRectSize(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetItemRectSize(out);
}
function SetItemAllowOverlap() { bind.SetItemAllowOverlap(); }
function IsRectVisible() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args.length === 1) {
        var size = args[0];
        return bind.IsRectVisible_A(size);
    }
    else {
        var rect_min = args[0];
        var rect_max = args[1];
        return bind.IsRectVisible_B(rect_min, rect_max);
    }
}
function GetTime() { return bind.GetTime(); }
function GetFrameCount() { return bind.GetFrameCount(); }
function GetBackgroundDrawList() {
    return new ImDrawList(bind.GetBackgroundDrawList());
}
function GetForegroundDrawList() {
    return new ImDrawList(bind.GetForegroundDrawList());
}
function GetDrawListSharedData() {
    return new ImDrawListSharedData(bind.GetDrawListSharedData());
}
function GetStyleColorName(idx) { return bind.GetStyleColorName(idx); }
// IMGUI_API void          SetStateStorage(ImGuiStorage* tree);
// IMGUI_API ImGuiStorage* GetStateStorage();
function CalcListClipping(items_count, items_height, out_items_display_start, out_items_display_end) {
    return bind.CalcListClipping(items_count, items_height, out_items_display_start, out_items_display_end);
}
function BeginChildFrame(id, size, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.BeginChildFrame(id, size, flags);
}
function EndChildFrame() { bind.EndChildFrame(); }
// Text Utilities
// IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);
function CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width, out) {
    if (text_end === void 0) { text_end = null; }
    if (hide_text_after_double_hash === void 0) { hide_text_after_double_hash = false; }
    if (wrap_width === void 0) { wrap_width = -1; }
    if (out === void 0) { out = new ImVec2(); }
    return bind.CalcTextSize(text_end !== null ? text.substring(0, text_end) : text, hide_text_after_double_hash, wrap_width, out);
}
// Color Utilities
// IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);
// IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);
// IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);
// IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);
function ColorConvertU32ToFloat4(in_, out) {
    if (out === void 0) { out = new ImVec4(); }
    return bind.ColorConvertU32ToFloat4(in_, out);
}
function ColorConvertFloat4ToU32(in_) { return bind.ColorConvertFloat4ToU32(in_); }
function ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v) { bind.ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v); }
function ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b) { bind.ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b); }
// Inputs Utilities: Keyboard
// - For 'int user_key_index' you can use your own indices/enums according to how your backend/engine stored them in io.KeysDown[].
// - We don't know the meaning of those value. You can use GetKeyIndex() to map a ImGuiKey_ value into the user index.
// IMGUI_API int           GetKeyIndex(ImGuiKey imgui_key);                                    // map ImGuiKey_* values into user's key index. == io.KeyMap[key]
// IMGUI_API bool          IsKeyDown(int user_key_index);                                      // is key being held. == io.KeysDown[user_key_index].
// IMGUI_API bool          IsKeyPressed(int user_key_index, bool repeat = true);               // was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
// IMGUI_API bool          IsKeyReleased(int user_key_index);                                  // was key released (went from Down to !Down)?
// IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate); // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
// IMGUI_API void          CaptureKeyboardFromApp(bool want_capture_keyboard_value = true);    // attention: misleading name! manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard_value"; after the next NewFrame() call.
function GetKeyIndex(imgui_key) { return bind.GetKeyIndex(imgui_key); }
function IsKeyDown(user_key_index) { return bind.IsKeyDown(user_key_index); }
function IsKeyPressed(user_key_index, repeat) {
    if (repeat === void 0) { repeat = true; }
    return bind.IsKeyPressed(user_key_index, repeat);
}
function IsKeyReleased(user_key_index) { return bind.IsKeyReleased(user_key_index); }
function GetKeyPressedAmount(user_key_index, repeat_delay, rate) { return bind.GetKeyPressedAmount(user_key_index, repeat_delay, rate); }
function CaptureKeyboardFromApp(capture) {
    if (capture === void 0) { capture = true; }
    return bind.CaptureKeyboardFromApp(capture);
}
// Inputs Utilities: Mouse
// - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.
// - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.
// - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')
// IMGUI_API bool          IsMouseDown(ImGuiMouseButton button);                               // is mouse button held?
// IMGUI_API bool          IsMouseClicked(ImGuiMouseButton button, bool repeat = false);       // did mouse button clicked? (went from !Down to Down)
// IMGUI_API bool          IsMouseReleased(ImGuiMouseButton button);                           // did mouse button released? (went from Down to !Down)
// IMGUI_API bool          IsMouseDoubleClicked(ImGuiMouseButton button);                      // did mouse button double-clicked? (note that a double-click will also report IsMouseClicked() == true)
// IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
// IMGUI_API bool          IsMousePosValid(const ImVec2* mouse_pos = NULL);                    // by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
// IMGUI_API bool          IsAnyMouseDown();                                                   // is any mouse button held?
// IMGUI_API ImVec2        GetMousePos();                                                      // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
// IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();                                 // retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)
// IMGUI_API bool          IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f);         // is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
// IMGUI_API ImVec2        GetMouseDragDelta(ImGuiMouseButton button = 0, float lock_threshold = -1.0f);   // return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
// IMGUI_API void          ResetMouseDragDelta(ImGuiMouseButton button = 0);                   //
// IMGUI_API ImGuiMouseCursor GetMouseCursor();                                                // get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
// IMGUI_API void          SetMouseCursor(ImGuiMouseCursor cursor_type);                       // set desired cursor type
// IMGUI_API void          CaptureMouseFromApp(bool want_capture_mouse_value = true);          // attention: misleading name! manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse_value;" after the next NewFrame() call.
function IsMouseDown(button) { return bind.IsMouseDown(button); }
function IsMouseClicked(button, repeat) {
    if (repeat === void 0) { repeat = false; }
    return bind.IsMouseClicked(button, repeat);
}
function IsMouseDoubleClicked(button) { return bind.IsMouseDoubleClicked(button); }
function IsMouseReleased(button) { return bind.IsMouseReleased(button); }
function IsMouseHoveringRect(r_min, r_max, clip) {
    if (clip === void 0) { clip = true; }
    return bind.IsMouseHoveringRect(r_min, r_max, clip);
}
function IsMousePosValid(mouse_pos) {
    if (mouse_pos === void 0) { mouse_pos = null; }
    return bind.IsMousePosValid(mouse_pos);
}
function IsAnyMouseDown() { return bind.IsAnyMouseDown(); }
function GetMousePos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetMousePos(out);
}
function GetMousePosOnOpeningCurrentPopup(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetMousePosOnOpeningCurrentPopup(out);
}
function IsMouseDragging(button, lock_threshold) {
    if (button === void 0) { button = 0; }
    if (lock_threshold === void 0) { lock_threshold = -1.0; }
    return bind.IsMouseDragging(button, lock_threshold);
}
function GetMouseDragDelta(button, lock_threshold, out) {
    if (button === void 0) { button = 0; }
    if (lock_threshold === void 0) { lock_threshold = -1.0; }
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetMouseDragDelta(button, lock_threshold, out);
}
function ResetMouseDragDelta(button) {
    if (button === void 0) { button = 0; }
    bind.ResetMouseDragDelta(button);
}
function GetMouseCursor() { return bind.GetMouseCursor(); }
function SetMouseCursor(type) { bind.SetMouseCursor(type); }
function CaptureMouseFromApp(capture) {
    if (capture === void 0) { capture = true; }
    bind.CaptureMouseFromApp(capture);
}
// Clipboard Utilities
// - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
// IMGUI_API const char*   GetClipboardText();
// IMGUI_API void          SetClipboardText(const char* text);
function GetClipboardText() { return bind.GetClipboardText(); }
function SetClipboardText(text) { bind.SetClipboardText(text); }
// Settings/.Ini Utilities
// - The disk functions are automatically called if io.IniFilename != NULL (default is "imgui.ini").
// - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.
// IMGUI_API void          LoadIniSettingsFromDisk(const char* ini_filename);                  // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
// IMGUI_API void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0); // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
// IMGUI_API void          SaveIniSettingsToDisk(const char* ini_filename);                    // this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
// IMGUI_API const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL);               // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
function LoadIniSettingsFromDisk(ini_filename) { throw new Error(); } // TODO
function LoadIniSettingsFromMemory(ini_data, ini_size) {
    if (ini_size === void 0) { ini_size = 0; }
    bind.LoadIniSettingsFromMemory(ini_data);
}
function SaveIniSettingsToDisk(ini_filename) { throw new Error(); } // TODO
function SaveIniSettingsToMemory(out_ini_size) {
    if (out_ini_size === void 0) { out_ini_size = null; }
    return bind.SaveIniSettingsToMemory();
}
// Debug Utilities
// IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
function DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_draw_vert, sz_draw_idx) {
    return bind.DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_draw_vert, sz_draw_idx);
}
// Memory Allocators
// - All those functions are not reliant on the current context.
// - If you reload the contents of imgui.cpp at runtime, you may need to call SetCurrentContext() + SetAllocatorFunctions() again because we use global storage for those.
// IMGUI_API void          SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_func)(void* ptr, void* user_data), void* user_data = NULL);
// IMGUI_API void*         MemAlloc(size_t size);
// IMGUI_API void          MemFree(void* ptr);
function SetAllocatorFunctions(alloc_func, free_func, user_data) {
    if (user_data === void 0) { user_data = null; }
    bind.SetAllocatorFunctions(alloc_func, free_func, user_data);
}
function MemAlloc(sz) { bind.MemAlloc(sz); }
function MemFree(ptr) { bind.MemFree(ptr); }


/***/ }),

/***/ "./src/imgui_impl.ts":
/*!***************************!*\
  !*** ./src/imgui_impl.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "canvas": () => (/* binding */ canvas),
/* harmony export */   "SetCanvasScale": () => (/* binding */ SetCanvasScale),
/* harmony export */   "GetCanvasScale": () => (/* binding */ GetCanvasScale),
/* harmony export */   "gl": () => (/* binding */ gl),
/* harmony export */   "ctx": () => (/* binding */ ctx),
/* harmony export */   "any_pointerdown": () => (/* binding */ any_pointerdown),
/* harmony export */   "Init": () => (/* binding */ Init),
/* harmony export */   "Shutdown": () => (/* binding */ Shutdown),
/* harmony export */   "ClearBuffer": () => (/* binding */ ClearBuffer),
/* harmony export */   "NewFrame": () => (/* binding */ NewFrame),
/* harmony export */   "dom_font": () => (/* binding */ dom_font),
/* harmony export */   "RenderDrawData": () => (/* binding */ RenderDrawData),
/* harmony export */   "CreateFontsTexture": () => (/* binding */ CreateFontsTexture),
/* harmony export */   "DestroyFontsTexture": () => (/* binding */ DestroyFontsTexture),
/* harmony export */   "CreateDeviceObjects": () => (/* binding */ CreateDeviceObjects),
/* harmony export */   "DestroyDeviceObjects": () => (/* binding */ DestroyDeviceObjects),
/* harmony export */   "Texture": () => (/* binding */ Texture),
/* harmony export */   "FrameBufferObject": () => (/* binding */ FrameBufferObject),
/* harmony export */   "Shader": () => (/* binding */ Shader)
/* harmony export */ });
/* harmony import */ var _font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font */ "./src/font.ts");
/* harmony import */ var _imgui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imgui */ "./src/imgui.ts");


var clipboard_text = "";
var canvas = null;
var canvas_scale = window.devicePixelRatio;
function SetCanvasScale(v) {
    canvas_scale = v;
}
function GetCanvasScale() {
    return canvas_scale;
}
var gl = null;
var g_ShaderHandle = null;
var g_VertHandle = null;
var g_FragHandle = null;
var g_AttribLocationTex = null;
var g_AttribLocationProjMtx = null;
var g_AttribLocationPosition = -1;
var g_AttribLocationUV = -1;
var g_AttribLocationColor = -1;
var g_VboHandle = null;
var g_ElementsHandle = null;
var g_FontTexture = null;
var ctx = null;
var prev_time = 0;
function document_on_copy(event) {
    if (event.clipboardData) {
        event.clipboardData.setData("text/plain", clipboard_text);
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function document_on_cut(event) {
    if (event.clipboardData) {
        event.clipboardData.setData("text/plain", clipboard_text);
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function document_on_paste(event) {
    if (event.clipboardData) {
        clipboard_text = event.clipboardData.getData("text/plain");
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function window_on_resize() {
    if (canvas !== null) {
        canvas.width = canvas.scrollWidth * canvas_scale;
        canvas.height = canvas.scrollHeight * canvas_scale;
    }
}
function window_on_gamepadconnected(event /* GamepadEvent */) {
    console.log("Gamepad connected at index %d: %s. %d buttons, %d axes.", event.gamepad.index, event.gamepad.id, event.gamepad.buttons.length, event.gamepad.axes.length);
}
function window_on_gamepaddisconnected(event /* GamepadEvent */) {
    console.log("Gamepad disconnected at index %d: %s.", event.gamepad.index, event.gamepad.id);
}
function canvas_on_blur(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = false;
    io.KeyShift = false;
    io.KeyAlt = false;
    io.KeySuper = false;
    for (var i = 0; i < io.KeysDown.length; ++i) {
        io.KeysDown[i] = false;
    }
    for (var i = 0; i < io.MouseDown.length; ++i) {
        io.MouseDown[i] = false;
    }
}
var key_code_to_index = {
    "NumpadEnter": 176,
};
function canvas_on_keydown(event) {
    // console.log(event.type, event.key, event.code, event.keyCode);
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = event.ctrlKey;
    io.KeyShift = event.shiftKey;
    io.KeyAlt = event.altKey;
    io.KeySuper = event.metaKey;
    var key_index = key_code_to_index[event.code] || event.keyCode;
    _imgui__WEBPACK_IMPORTED_MODULE_1__.ASSERT(key_index >= 0 && key_index < _imgui__WEBPACK_IMPORTED_MODULE_1__.ARRAYSIZE(io.KeysDown));
    io.KeysDown[key_index] = true;
    // forward to the keypress event
    if ( /*io.WantCaptureKeyboard ||*/event.key === "Tab") {
        event.preventDefault();
    }
}
function canvas_on_keyup(event) {
    // console.log(event.type, event.key, event.code, event.keyCode);
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = event.ctrlKey;
    io.KeyShift = event.shiftKey;
    io.KeyAlt = event.altKey;
    io.KeySuper = event.metaKey;
    var key_index = key_code_to_index[event.code] || event.keyCode;
    _imgui__WEBPACK_IMPORTED_MODULE_1__.ASSERT(key_index >= 0 && key_index < _imgui__WEBPACK_IMPORTED_MODULE_1__.ARRAYSIZE(io.KeysDown));
    io.KeysDown[key_index] = false;
    if (io.WantCaptureKeyboard) {
        event.preventDefault();
    }
}
function canvas_on_keypress(event) {
    // console.log(event.type, event.key, event.code, event.keyCode);
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.AddInputCharacter(event.charCode);
    if (io.WantCaptureKeyboard) {
        event.preventDefault();
    }
}
function canvas_on_pointermove(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MousePos.x = event.offsetX;
    io.MousePos.y = event.offsetY;
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
// MouseEvent.button
// A number representing a given button:
// 0: Main button pressed, usually the left button or the un-initialized state
// 1: Auxiliary button pressed, usually the wheel button or the middle button (if present)
// 2: Secondary button pressed, usually the right button
// 3: Fourth button, typically the Browser Back button
// 4: Fifth button, typically the Browser Forward button
var mouse_button_map = [0, 2, 1, 3, 4];
function any_pointerdown() {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    for (var i = 0; i < io.MouseDown.length; i++) {
        if (io.MouseDown[i])
            return true;
    }
    return false;
}
function canvas_on_pointerdown(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MousePos.x = event.offsetX;
    io.MousePos.y = event.offsetY;
    io.MouseDown[mouse_button_map[event.button]] = true;
    // if (io.WantCaptureMouse) {
    //     event.preventDefault();
    // }
    //console.log("canvas_on_pointerdown", event);
}
function canvas_on_contextmenu(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
function canvas_on_pointerup(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MouseDown[mouse_button_map[event.button]] = false;
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
    //console.log("canvas_on_pointerup", event);
}
function canvas_on_wheel(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    var scale = 1.0;
    switch (event.deltaMode) {
        case event.DOM_DELTA_PIXEL:
            scale = 0.01;
            break;
        case event.DOM_DELTA_LINE:
            scale = 0.2;
            break;
        case event.DOM_DELTA_PAGE:
            scale = 1.0;
            break;
    }
    io.MouseWheelH = event.deltaX * scale;
    io.MouseWheel = -event.deltaY * scale; // Mouse wheel: 1 unit scrolls about 5 lines text.
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
function Init(value) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (typeof (window) !== "undefined") {
        io.BackendPlatformName = "imgui_impl_browser";
        _imgui__WEBPACK_IMPORTED_MODULE_1__.LoadIniSettingsFromMemory(window.localStorage.getItem("imgui.ini") || "");
    }
    else {
        io.BackendPlatformName = "imgui_impl_console";
    }
    if (typeof (navigator) !== "undefined") {
        io.ConfigMacOSXBehaviors = navigator.platform.match(/Mac/) !== null;
    }
    /*
    if (typeof(document) !== "undefined") {
        document.body.addEventListener("copy", document_on_copy);
        document.body.addEventListener("cut", document_on_cut);
        document.body.addEventListener("paste", document_on_paste);
    }
    */
    io.SetClipboardTextFn = function (user_data, text) {
        clipboard_text = text;
        // console.log(`set clipboard_text: "${clipboard_text}"`);
        if (typeof navigator !== "undefined" && typeof navigator.clipboard !== "undefined") {
            // console.log(`clipboard.writeText: "${clipboard_text}"`);
            navigator.clipboard.writeText(clipboard_text).then(function () {
                // console.log(`clipboard.writeText: "${clipboard_text}" done.`);
            });
        }
    };
    io.GetClipboardTextFn = function (user_data) {
        // if (typeof navigator !== "undefined" && typeof (navigator as any).clipboard !== "undefined") {
        //     console.log(`clipboard.readText: "${clipboard_text}"`);
        //     (navigator as any).clipboard.readText().then((text: string): void => {
        //         clipboard_text = text;
        //         console.log(`clipboard.readText: "${clipboard_text}" done.`);
        //     });
        // }
        // console.log(`get clipboard_text: "${clipboard_text}"`);
        return clipboard_text;
    };
    io.ClipboardUserData = null;
    if (typeof (window) !== "undefined") {
        window.addEventListener("resize", window_on_resize);
        window.addEventListener("gamepadconnected", window_on_gamepadconnected);
        window.addEventListener("gamepaddisconnected", window_on_gamepaddisconnected);
    }
    if (typeof (window) !== "undefined") {
        if (value instanceof (HTMLCanvasElement)) {
            canvas = value;
            value = canvas.getContext("webgl2", { alpha: false }) || canvas.getContext("webgl", { alpha: false }) || canvas.getContext("2d");
        }
        if (typeof WebGL2RenderingContext !== "undefined" && value instanceof (WebGL2RenderingContext)) {
            io.BackendRendererName = "imgui_impl_webgl2";
            canvas = canvas || value.canvas;
            gl = value;
        }
        else if (typeof WebGLRenderingContext !== "undefined" && value instanceof (WebGLRenderingContext)) {
            io.BackendRendererName = "imgui_impl_webgl";
            canvas = canvas || value.canvas;
            gl = value;
        }
        else if (typeof CanvasRenderingContext2D !== "undefined" && value instanceof (CanvasRenderingContext2D)) {
            io.BackendRendererName = "imgui_impl_2d";
            canvas = canvas || value.canvas;
            ctx = value;
        }
    }
    if (canvas !== null) {
        window_on_resize();
        canvas.style.touchAction = "none"; // Disable browser handling of all panning and zooming gestures.
        canvas.addEventListener("blur", canvas_on_blur);
        //if(ImGui.isMobile.any())    {
        canvas.addEventListener("keydown", canvas_on_keydown);
        canvas.addEventListener("keyup", canvas_on_keyup);
        canvas.addEventListener("keypress", canvas_on_keypress);
        //}else {
        //    window.addEventListener("keydown", canvas_on_keydown);
        //    window.addEventListener("keyup", canvas_on_keyup);
        //    window.addEventListener("keypress", canvas_on_keypress);
        //}
        canvas.addEventListener("pointermove", canvas_on_pointermove);
        window.addEventListener("pointerdown", canvas_on_pointerdown);
        canvas.addEventListener("contextmenu", canvas_on_contextmenu);
        window.addEventListener("pointerup", canvas_on_pointerup);
        canvas.addEventListener("wheel", canvas_on_wheel);
    }
    // Setup back-end capabilities flags
    io.BackendFlags |= _imgui__WEBPACK_IMPORTED_MODULE_1__.BackendFlags.HasMouseCursors; // We can honor GetMouseCursor() values (optional)
    // Keyboard mapping. ImGui will use those indices to peek into the io.KeyDown[] array.
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Tab] = 9;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.LeftArrow] = 37;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.RightArrow] = 39;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.UpArrow] = 38;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.DownArrow] = 40;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.PageUp] = 33;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.PageDown] = 34;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Home] = 36;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.End] = 35;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Insert] = 45;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Delete] = 46;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Backspace] = 8;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Space] = 32;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Enter] = 13;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Escape] = 27;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.KeyPadEnter] = key_code_to_index["NumpadEnter"];
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.A] = 65;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.C] = 67;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.V] = 86;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.X] = 88;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Y] = 89;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Z] = 90;
    CreateDeviceObjects();
}
function Shutdown() {
    DestroyDeviceObjects();
    if (canvas !== null) {
        canvas.removeEventListener("blur", canvas_on_blur);
        canvas.removeEventListener("keydown", canvas_on_keydown);
        canvas.removeEventListener("keyup", canvas_on_keyup);
        canvas.removeEventListener("keypress", canvas_on_keypress);
        canvas.removeEventListener("pointermove", canvas_on_pointermove);
        canvas.removeEventListener("pointerdown", canvas_on_pointerdown);
        canvas.removeEventListener("contextmenu", canvas_on_contextmenu);
        canvas.removeEventListener("pointerup", canvas_on_pointerup);
        canvas.removeEventListener("wheel", canvas_on_wheel);
    }
    gl = null;
    ctx = null;
    canvas = null;
    if (typeof (window) !== "undefined") {
        window.removeEventListener("resize", window_on_resize);
        window.removeEventListener("gamepadconnected", window_on_gamepadconnected);
        window.removeEventListener("gamepaddisconnected", window_on_gamepaddisconnected);
    }
    if (typeof (document) !== "undefined") {
        document.body.removeEventListener("copy", document_on_copy);
        document.body.removeEventListener("cut", document_on_cut);
        document.body.removeEventListener("paste", document_on_paste);
    }
}
function ClearBuffer(color, bufferBit) {
    if (bufferBit === void 0) { bufferBit = gl.COLOR_BUFFER_BIT; }
    gl.clearColor(color.x, color.y, color.z, color.w);
    gl.clear(bufferBit);
}
function NewFrame(time) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (io.WantSaveIniSettings) {
        io.WantSaveIniSettings = false;
        if (typeof (window) !== "undefined") {
            window.localStorage.setItem("imgui.ini", _imgui__WEBPACK_IMPORTED_MODULE_1__.SaveIniSettingsToMemory());
        }
    }
    var w = canvas && canvas.scrollWidth || 640;
    var h = canvas && canvas.scrollHeight || 480;
    var display_w = gl && gl.drawingBufferWidth || w;
    var display_h = gl && gl.drawingBufferHeight || h;
    io.DisplaySize.x = w;
    io.DisplaySize.y = h;
    io.DisplayFramebufferScale.x = w > 0 ? (display_w / w) : 0;
    io.DisplayFramebufferScale.y = h > 0 ? (display_h / h) : 0;
    var dt = time - prev_time;
    prev_time = time;
    io.DeltaTime = dt / 1000;
    if (io.WantSetMousePos) {
        console.log("TODO: MousePos", io.MousePos.x, io.MousePos.y);
    }
    if (typeof (document) !== "undefined") {
        if (io.MouseDrawCursor) {
            document.body.style.cursor = "none";
        }
        else {
            switch (_imgui__WEBPACK_IMPORTED_MODULE_1__.GetMouseCursor()) {
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.None:
                    document.body.style.cursor = "none";
                    break;
                default:
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.Arrow:
                    document.body.style.cursor = "default";
                    break;
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.TextInput:
                    document.body.style.cursor = "text";
                    break; // When hovering over InputText, etc.
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeAll:
                    document.body.style.cursor = "all-scroll";
                    break; // Unused
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNS:
                    document.body.style.cursor = "ns-resize";
                    break; // When hovering over an horizontal border
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeEW:
                    document.body.style.cursor = "ew-resize";
                    break; // When hovering over a vertical border or a column
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNESW:
                    document.body.style.cursor = "nesw-resize";
                    break; // When hovering over the bottom-left corner of a window
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNWSE:
                    document.body.style.cursor = "nwse-resize";
                    break; // When hovering over the bottom-right corner of a window
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.Hand:
                    document.body.style.cursor = "move";
                    break;
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.NotAllowed:
                    document.body.style.cursor = "not-allowed";
                    break;
            }
        }
    }
    // Gamepad navigation mapping [BETA]
    for (var i = 0; i < io.NavInputs.length; ++i) {
        // TODO: This is currently causing an issue and I have no gamepad to test with.
        //       The error is: ''set' on proxy: trap returned falsish for property '21'
        //       I think that the NavInputs are zeroed out by ImGui at the start of each frame anyway
        //       so I am not sure if the following is even necessary.
        //io.NavInputs[i] = 0.0;
    }
    if (io.ConfigFlags & _imgui__WEBPACK_IMPORTED_MODULE_1__.ConfigFlags.NavEnableGamepad) {
        // Update gamepad inputs
        var gamepads = (typeof (navigator) !== "undefined" && typeof (navigator.getGamepads) === "function") ? navigator.getGamepads() : [];
        var _loop_1 = function (i) {
            var gamepad = gamepads[i];
            if (!gamepad) {
                return "continue";
            }
            io.BackendFlags |= _imgui__WEBPACK_IMPORTED_MODULE_1__.BackendFlags.HasGamepad;
            var buttons_count = gamepad.buttons.length;
            var axes_count = gamepad.axes.length;
            MAP_BUTTON = function MAP_BUTTON(NAV_NO, BUTTON_NO) {
                if (!gamepad) {
                    return;
                }
                if (buttons_count > BUTTON_NO && gamepad.buttons[BUTTON_NO].pressed)
                    io.NavInputs[NAV_NO] = 1.0;
            };
            MAP_ANALOG = function MAP_ANALOG(NAV_NO, AXIS_NO, V0, V1) {
                if (!gamepad) {
                    return;
                }
                var v = (axes_count > AXIS_NO) ? gamepad.axes[AXIS_NO] : V0;
                v = (v - V0) / (V1 - V0);
                if (v > 1.0)
                    v = 1.0;
                if (io.NavInputs[NAV_NO] < v)
                    io.NavInputs[NAV_NO] = v;
            };
            // TODO: map input based on vendor and product id
            // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id
            var match = gamepad.id.match(/^([0-9a-f]{4})-([0-9a-f]{4})-.*$/);
            var match_chrome = gamepad.id.match(/^.*\(.*Vendor: ([0-9a-f]{4}) Product: ([0-9a-f]{4})\).*$/);
            var vendor = (match && match[1]) || (match_chrome && match_chrome[1]) || "0000";
            var product = (match && match[2]) || (match_chrome && match_chrome[2]) || "0000";
            switch (vendor + product) {
                case "046dc216": // Logitech Logitech Dual Action (Vendor: 046d Product: c216)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 1); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 2); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 0); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 4, -0.3, -0.9); // D-Pad Left
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 4, +0.3, +0.9); // D-Pad Right
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 5, -0.3, -0.9); // D-Pad Up
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 5, +0.3, +0.9); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                case "046dc21d": // Logitech Gamepad F310 (STANDARD GAMEPAD Vendor: 046d Product: c21d)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 0); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 1); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 2); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 14); // D-Pad Left
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 15); // D-Pad Right
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 12); // D-Pad Up
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 13); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6, +0.3, +0.9); // L2 / LT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7, +0.3, +0.9); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                case "2dc86001": // 8Bitdo SN30 Pro  8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6001)
                case "2dc86101": // 8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6101)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 1); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 0); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 4); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 6, -0.3, -0.9); // D-Pad Left
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 6, +0.3, +0.9); // D-Pad Right
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 7, -0.3, -0.9); // D-Pad Up
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 7, +0.3, +0.9); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 6); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 7); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 8); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 9); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                default: // standard gamepad: https://w3c.github.io/gamepad/#remapping
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 0); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 1); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 2); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 14); // D-Pad Left
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 15); // D-Pad Right
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 12); // D-Pad Up
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 13); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
            }
        };
        var MAP_BUTTON, MAP_ANALOG;
        for (var i = 0; i < gamepads.length; ++i) {
            _loop_1(i);
        }
    }
}
function toRgba(col) {
    var r = (col >>> 24);
    var g = (col >> 16) & 0xFF;
    var b = (col >> 8) & 0xFF;
    var a = (col & 0xFF);
    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
}
var dom_font = new _font__WEBPACK_IMPORTED_MODULE_0__.Font;
function RenderDrawData(draw_data) {
    if (draw_data === void 0) { draw_data = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetDrawData(); }
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.Fonts.Fonts.forEach(function (font) {
        var glyph = font.GlyphToCreate;
        while (glyph) {
            glyph = dom_font.Create(glyph, font);
            font.GlyphCreated(glyph);
            glyph = font.GlyphToCreate;
        }
    });
    dom_font.UpdateTexture();
    if (draw_data === null) {
        throw new Error();
    }
    gl || ctx || console.log(draw_data);
    // Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)
    var fb_width = io.DisplaySize.x * io.DisplayFramebufferScale.x;
    var fb_height = io.DisplaySize.y * io.DisplayFramebufferScale.y;
    if (fb_width === 0 || fb_height === 0) {
        return;
    }
    draw_data.ScaleClipRects(io.DisplayFramebufferScale);
    var gl2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext && gl || null;
    var gl_vao = gl && gl.getExtension("OES_vertex_array_object") || null;
    // Backup GL state
    //const last_active_texture: GLenum | null = gl && gl.getParameter(gl.ACTIVE_TEXTURE) || null;
    //const last_program: WebGLProgram | null = gl && gl.getParameter(gl.CURRENT_PROGRAM) || null;
    //const last_texture: WebGLTexture | null = gl && gl.getParameter(gl.TEXTURE_BINDING_2D) || null;
    //const last_array_buffer: WebGLBuffer | null = gl && gl.getParameter(gl.ARRAY_BUFFER_BINDING) || null;
    //const last_element_array_buffer: WebGLBuffer | null = gl && gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING) || null;
    //const last_vertex_array_object: WebGLVertexArrayObject | WebGLVertexArrayObjectOES | null = gl2 && gl2.getParameter(gl2.VERTEX_ARRAY_BINDING) || gl && gl_vao && gl.getParameter(gl_vao.VERTEX_ARRAY_BINDING_OES) || null;
    // GLint last_polygon_mode[2]; glGetIntegerv(GL_POLYGON_MODE, last_polygon_mode);
    var last_viewport = gl && gl.getParameter(gl.VIEWPORT) || null;
    var last_scissor_box = gl && gl.getParameter(gl.SCISSOR_BOX) || null;
    //const last_blend_src_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_SRC_RGB) || null;
    //const last_blend_dst_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_DST_RGB) || null;
    //const last_blend_src_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_SRC_ALPHA) || null;
    //const last_blend_dst_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_DST_ALPHA) || null;
    //const last_blend_equation_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_EQUATION_RGB) || null;
    //const last_blend_equation_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_EQUATION_ALPHA) || null;
    //const last_enable_blend: GLboolean | null = gl && gl.getParameter(gl.BLEND) || null;
    //const last_enable_cull_face: GLboolean | null = gl && gl.getParameter(gl.CULL_FACE) || null;
    //const last_enable_depth_test: GLboolean | null = gl && gl.getParameter(gl.DEPTH_TEST) || null;
    var last_enable_scissor_test = gl && gl.getParameter(gl.SCISSOR_TEST) || null;
    // Setup desired GL state
    // Recreate the VAO every time (this is to easily allow multiple GL contexts to be rendered to. VAO are not shared among GL contexts)
    // The renderer would actually work without any VAO bound, but then our VertexAttrib calls would overwrite the default one currently bound.
    var vertex_array_object = gl2 && gl2.createVertexArray() || gl_vao && gl_vao.createVertexArrayOES();
    // Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill
    gl && gl.enable(gl.BLEND);
    gl && gl.blendEquation(gl.FUNC_ADD);
    gl && gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    gl && gl.disable(gl.CULL_FACE);
    gl && gl.disable(gl.DEPTH_TEST);
    gl && gl.enable(gl.SCISSOR_TEST);
    // glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    // Setup viewport, orthographic projection matrix
    // Our visible imgui space lies from draw_data->DisplayPps (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayMin is typically (0,0) for single viewport apps.
    gl && gl.viewport(0, 0, fb_width, fb_height);
    var L = draw_data.DisplayPos.x;
    var R = draw_data.DisplayPos.x + draw_data.DisplaySize.x;
    var T = draw_data.DisplayPos.y;
    var B = draw_data.DisplayPos.y + draw_data.DisplaySize.y;
    var ortho_projection = new Float32Array([
        2.0 / (R - L), 0.0, 0.0, 0.0,
        0.0, 2.0 / (T - B), 0.0, 0.0,
        0.0, 0.0, -1.0, 0.0,
        (R + L) / (L - R), (T + B) / (B - T), 0.0, 1.0,
    ]);
    gl && gl.useProgram(g_ShaderHandle);
    gl && gl.uniform1i(g_AttribLocationTex, 0);
    gl && g_AttribLocationProjMtx && gl.uniformMatrix4fv(g_AttribLocationProjMtx, false, ortho_projection);
    gl2 && gl2.bindVertexArray(vertex_array_object);
    gl_vao && gl_vao.bindVertexArrayOES(vertex_array_object);
    // Render command lists
    gl && gl.bindBuffer(gl.ARRAY_BUFFER, g_VboHandle);
    gl && gl.enableVertexAttribArray(g_AttribLocationPosition);
    gl && gl.enableVertexAttribArray(g_AttribLocationUV);
    gl && gl.enableVertexAttribArray(g_AttribLocationColor);
    gl && gl.vertexAttribPointer(g_AttribLocationPosition, 2, gl.FLOAT, false, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertPosOffset);
    gl && gl.vertexAttribPointer(g_AttribLocationUV, 2, gl.FLOAT, false, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertUVOffset);
    gl && gl.vertexAttribPointer(g_AttribLocationColor, 4, gl.UNSIGNED_BYTE, true, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertColOffset);
    // Draw
    var pos = draw_data.DisplayPos;
    var idx_buffer_type = gl && ((_imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize === 4) ? gl.UNSIGNED_INT : gl.UNSIGNED_SHORT) || 0;
    draw_data.IterateDrawLists(function (draw_list) {
        gl || ctx || console.log(draw_list);
        gl || ctx || console.log("VtxBuffer.length", draw_list.VtxBuffer.length);
        gl || ctx || console.log("IdxBuffer.length", draw_list.IdxBuffer.length);
        var idx_buffer_offset = 0;
        if (draw_list.VtxBuffer) {
            gl && gl.bindBuffer(gl.ARRAY_BUFFER, g_VboHandle);
            gl && gl.bufferData(gl.ARRAY_BUFFER, draw_list.VtxBuffer, gl.STREAM_DRAW);
        }
        if (draw_list.IdxBuffer) {
            gl && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, g_ElementsHandle);
            gl && gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, draw_list.IdxBuffer, gl.STREAM_DRAW);
        }
        draw_list.IterateDrawCmds(function (draw_cmd) {
            gl || ctx || console.log(draw_cmd);
            gl || ctx || console.log("ElemCount", draw_cmd.ElemCount);
            gl || ctx || console.log("ClipRect", draw_cmd.ClipRect.x, fb_height - draw_cmd.ClipRect.w, draw_cmd.ClipRect.z - draw_cmd.ClipRect.x, draw_cmd.ClipRect.w - draw_cmd.ClipRect.y);
            gl || ctx || console.log("TextureId", draw_cmd.TextureId);
            if (!gl && !ctx) {
                console.log("i: pos.x pos.y uv.x uv.y col");
                for (var i = 0; i < Math.min(3, draw_cmd.ElemCount); ++i) {
                    var view = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                    console.log(i + ": " + view.pos[0].toFixed(2) + " " + view.pos[1].toFixed(2) + " " + view.uv[0].toFixed(5) + " " + view.uv[1].toFixed(5) + " " + ("00000000" + view.col[0].toString(16)).substr(-8));
                }
            }
            if (draw_cmd.UserCallback !== null) {
                // User callback (registered via ImDrawList::AddCallback)
                draw_cmd.UserCallback(draw_list, draw_cmd);
            }
            else {
                var clip_rect = new _imgui__WEBPACK_IMPORTED_MODULE_1__.Vec4(draw_cmd.ClipRect.x - pos.x, draw_cmd.ClipRect.y - pos.y, draw_cmd.ClipRect.z - pos.x, draw_cmd.ClipRect.w - pos.y);
                if (clip_rect.x < fb_width && clip_rect.y < fb_height && clip_rect.z >= 0.0 && clip_rect.w >= 0.0) {
                    // Apply scissor/clipping rectangle
                    gl && gl.scissor(clip_rect.x, fb_height - clip_rect.w, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);
                    // Bind texture, Draw
                    gl && gl.activeTexture(gl.TEXTURE0);
                    gl && gl.bindTexture(gl.TEXTURE_2D, draw_cmd.TextureId);
                    gl && gl.drawElements(gl.TRIANGLES, draw_cmd.ElemCount, idx_buffer_type, idx_buffer_offset);
                    if (ctx) {
                        ctx.save();
                        ctx.beginPath();
                        ctx.rect(clip_rect.x, clip_rect.y, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);
                        ctx.clip();
                        var idx = _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize === 4 ?
                            new Uint32Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset) :
                            new Uint16Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset);
                        for (var i = 0; i < draw_cmd.ElemCount; i += 3) {
                            var i0 = idx[i + 0];
                            var i1 = idx[i + 1];
                            var i2 = idx[i + 2];
                            var v0 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i0 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var v1 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i1 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var v2 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i2 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var i3 = idx[i + 3];
                            var i4 = idx[i + 4];
                            var i5 = idx[i + 5];
                            var v3 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i3 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var v4 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i4 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var v5 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i5 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var quad = true;
                            var minmin = v0;
                            var minmax = v0;
                            var maxmin = v0;
                            var maxmax = v0;
                            for (var _i = 0, _a = [v1, v2, v3, v4, v5]; _i < _a.length; _i++) {
                                var v = _a[_i];
                                var found = false;
                                if (v.pos[0] <= minmin.pos[0] && v.pos[1] <= minmin.pos[1]) {
                                    minmin = v;
                                    found = true;
                                }
                                if (v.pos[0] <= minmax.pos[0] && v.pos[1] >= minmax.pos[1]) {
                                    minmax = v;
                                    found = true;
                                }
                                if (v.pos[0] >= maxmin.pos[0] && v.pos[1] <= maxmin.pos[1]) {
                                    maxmin = v;
                                    found = true;
                                }
                                if (v.pos[0] >= maxmax.pos[0] && v.pos[1] >= maxmax.pos[1]) {
                                    maxmax = v;
                                    found = true;
                                }
                                if (!found) {
                                    quad = false;
                                }
                            }
                            quad = quad && (minmin.pos[0] === minmax.pos[0]);
                            quad = quad && (maxmin.pos[0] === maxmax.pos[0]);
                            quad = quad && (minmin.pos[1] === maxmin.pos[1]);
                            quad = quad && (minmax.pos[1] === maxmax.pos[1]);
                            if (quad) {
                                if (minmin.uv[0] === maxmax.uv[0] || minmin.uv[1] === maxmax.uv[1]) {
                                    // one vertex color
                                    ctx.beginPath();
                                    ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    ctx.fillStyle = "rgba(" + (v0.col[0] >> 0 & 0xff) + ", " + (v0.col[0] >> 8 & 0xff) + ", " + (v0.col[0] >> 16 & 0xff) + ", " + (v0.col[0] >> 24 & 0xff) / 0xff + ")";
                                    ctx.fill();
                                }
                                else {
                                    // no vertex color
                                    var image = draw_cmd.TextureId; // HACK
                                    var width = image instanceof HTMLVideoElement ? image.videoWidth : image.width;
                                    var height = image instanceof HTMLVideoElement ? image.videoHeight : image.height;
                                    image && ctx.drawImage(image, minmin.uv[0] * width, minmin.uv[1] * height, (maxmax.uv[0] - minmin.uv[0]) * width, (maxmax.uv[1] - minmin.uv[1]) * height, minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    // ctx.beginPath();
                                    // ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    // ctx.strokeStyle = "yellow";
                                    // ctx.stroke();
                                }
                                i += 3;
                            }
                            else {
                                // one vertex color, no texture
                                ctx.beginPath();
                                ctx.moveTo(v0.pos[0], v0.pos[1]);
                                ctx.lineTo(v1.pos[0], v1.pos[1]);
                                ctx.lineTo(v2.pos[0], v2.pos[1]);
                                ctx.closePath();
                                ctx.fillStyle = "rgba(" + (v0.col[0] >> 0 & 0xff) + ", " + (v0.col[0] >> 8 & 0xff) + ", " + (v0.col[0] >> 16 & 0xff) + ", " + (v0.col[0] >> 24 & 0xff) / 0xff + ")";
                                ctx.fill();
                            }
                        }
                        ctx.restore();
                    }
                }
            }
            idx_buffer_offset += draw_cmd.ElemCount * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize;
        });
    });
    // Destroy the temporary VAO
    gl2 && gl2.deleteVertexArray(vertex_array_object);
    gl_vao && gl_vao.deleteVertexArrayOES(vertex_array_object);
    // Restore modified GL state
    //gl && (last_program !== null) && gl.useProgram(last_program);
    //gl && (last_texture !== null) && gl.bindTexture(gl.TEXTURE_2D, last_texture);
    //gl && (last_active_texture !== null) && gl.activeTexture(last_active_texture);
    //gl2 && gl2.bindVertexArray(last_vertex_array_object);
    //gl_vao && gl_vao.bindVertexArrayOES(last_vertex_array_object);
    //gl && (last_array_buffer !== null) && gl.bindBuffer(gl.ARRAY_BUFFER, last_array_buffer);
    //gl && (last_element_array_buffer !== null) && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, last_element_array_buffer);
    //gl && (last_blend_equation_rgb !== null && last_blend_equation_alpha !== null) && gl.blendEquationSeparate(last_blend_equation_rgb, last_blend_equation_alpha);
    //gl && (last_blend_src_rgb !== null && last_blend_src_alpha !== null && last_blend_dst_rgb !== null && last_blend_dst_alpha !== null) && gl.blendFuncSeparate(last_blend_src_rgb, last_blend_src_alpha, last_blend_dst_rgb, last_blend_dst_alpha);
    //gl && (last_enable_blend ? gl.enable(gl.BLEND) : gl.disable(gl.BLEND));
    //gl && (last_enable_cull_face ? gl.enable(gl.CULL_FACE) : gl.disable(gl.CULL_FACE));
    //gl && (last_enable_depth_test ? gl.enable(gl.DEPTH_TEST) : gl.disable(gl.DEPTH_TEST));
    gl && (last_enable_scissor_test ? gl.enable(gl.SCISSOR_TEST) : gl.disable(gl.SCISSOR_TEST));
    // glPolygonMode(GL_FRONT_AND_BACK, (GLenum)last_polygon_mode[0]);
    gl && (last_viewport !== null) && gl.viewport(last_viewport[0], last_viewport[1], last_viewport[2], last_viewport[3]);
    gl && (last_scissor_box !== null) && gl.scissor(last_scissor_box[0], last_scissor_box[1], last_scissor_box[2], last_scissor_box[3]);
}
function CreateFontsTexture() {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    // Backup GL state
    var last_texture = gl && gl.getParameter(gl.TEXTURE_BINDING_2D);
    // Build texture atlas
    // const width: number = 256;
    // const height: number = 256;
    // const pixels: Uint8Array = new Uint8Array(4 * width * height).fill(0xff);
    //const { width, height, pixels } = io.Fonts.GetTexDataAsRGBA32();   // Load as RGBA 32-bits (75% of the memory is wasted, but default font is so small) because it is more likely to be compatible with user's existing shaders. If your ImTextureId represent a higher-level concept than just a GL texture id, consider calling GetTexDataAsAlpha8() instead to save on GPU memory.
    var _a = io.Fonts.GetTexDataAsAlpha8(), width = _a.width, height = _a.height, pixels = _a.pixels;
    if (width && height && pixels) {
        var rgba4_1 = new Uint16Array(width * height);
        var i_1 = 0;
        pixels.forEach(function (p) {
            rgba4_1[i_1] = 0xFFF0 | (p >> 4);
            i_1++;
        });
        // Upload texture to graphics system
        g_FontTexture = gl && gl.createTexture();
        gl && gl.bindTexture(gl.TEXTURE_2D, g_FontTexture);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        // gl && gl.pixelStorei(gl.UNPACK_ROW_LENGTH); // WebGL2
        gl && gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, rgba4_1);
        //gl && gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
        // Store our identifier
        io.Fonts.TexID = g_FontTexture || { foo: "bar" };
        // console.log("font texture id", g_FontTexture);
    }
    if (ctx) {
        var image_canvas = document.createElement("canvas");
        image_canvas.width = width;
        image_canvas.height = height;
        var image_ctx = image_canvas.getContext("2d");
        if (image_ctx === null) {
            throw new Error();
        }
        var image_data = image_ctx.getImageData(0, 0, width, height);
        image_data.data.set(pixels);
        image_ctx.putImageData(image_data, 0, 0);
        io.Fonts.TexID = image_canvas;
    }
    // Restore modified GL state
    gl && last_texture && gl.bindTexture(gl.TEXTURE_2D, last_texture);
}
function DestroyFontsTexture() {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.Fonts.TexID = null;
    gl && gl.deleteTexture(g_FontTexture);
    g_FontTexture = null;
}
function CreateDeviceObjects() {
    var vertex_shader = [
        "uniform mat4 ProjMtx;",
        "attribute vec2 Position;",
        "attribute vec2 UV;",
        "attribute vec4 Color;",
        "varying vec2 Frag_UV;",
        "varying vec4 Frag_Color;",
        "void main() {",
        "	Frag_UV = UV;",
        "	Frag_Color = Color;",
        "	gl_Position = ProjMtx * vec4(Position.xy,0,1);",
        "}",
    ];
    var fragment_shader = [
        "precision mediump float;",
        "uniform sampler2D Texture;",
        "varying vec2 Frag_UV;",
        "varying vec4 Frag_Color;",
        "void main() {",
        "	gl_FragColor = Frag_Color * texture2D(Texture, Frag_UV);",
        "}",
    ];
    g_ShaderHandle = gl && gl.createProgram();
    g_VertHandle = gl && gl.createShader(gl.VERTEX_SHADER);
    g_FragHandle = gl && gl.createShader(gl.FRAGMENT_SHADER);
    gl && gl.shaderSource(g_VertHandle, vertex_shader.join("\n"));
    gl && gl.shaderSource(g_FragHandle, fragment_shader.join("\n"));
    gl && gl.compileShader(g_VertHandle);
    gl && gl.compileShader(g_FragHandle);
    gl && gl.attachShader(g_ShaderHandle, g_VertHandle);
    gl && gl.attachShader(g_ShaderHandle, g_FragHandle);
    gl && gl.linkProgram(g_ShaderHandle);
    g_AttribLocationTex = gl && gl.getUniformLocation(g_ShaderHandle, "Texture");
    g_AttribLocationProjMtx = gl && gl.getUniformLocation(g_ShaderHandle, "ProjMtx");
    g_AttribLocationPosition = gl && gl.getAttribLocation(g_ShaderHandle, "Position") || 0;
    g_AttribLocationUV = gl && gl.getAttribLocation(g_ShaderHandle, "UV") || 0;
    g_AttribLocationColor = gl && gl.getAttribLocation(g_ShaderHandle, "Color") || 0;
    g_VboHandle = gl && gl.createBuffer();
    g_ElementsHandle = gl && gl.createBuffer();
    CreateFontsTexture();
}
function DestroyDeviceObjects() {
    DestroyFontsTexture();
    gl && gl.deleteBuffer(g_VboHandle);
    g_VboHandle = null;
    gl && gl.deleteBuffer(g_ElementsHandle);
    g_ElementsHandle = null;
    g_AttribLocationTex = null;
    g_AttribLocationProjMtx = null;
    g_AttribLocationPosition = -1;
    g_AttribLocationUV = -1;
    g_AttribLocationColor = -1;
    gl && gl.deleteProgram(g_ShaderHandle);
    g_ShaderHandle = null;
    gl && gl.deleteShader(g_VertHandle);
    g_VertHandle = null;
    gl && gl.deleteShader(g_FragHandle);
    g_FragHandle = null;
}
var Texture = /** @class */ (function () {
    function Texture(param) {
        this._internalFormat = gl.RGBA;
        this._srcFormat = gl.RGBA;
        this._srcType = gl.UNSIGNED_BYTE;
        this._wrapS = gl.CLAMP_TO_EDGE;
        this._wrapT = gl.CLAMP_TO_EDGE;
        this._minFilter = gl.LINEAR;
        this._magFilter = gl.LINEAR;
        this._width = 1;
        this._height = 1;
    }
    Texture.prototype.Destroy = function () {
        if (this._texture) {
            gl && gl.deleteTexture(this._texture);
            this._texture = null;
        }
    };
    Texture.prototype.Bind = function (index) {
        if (index === void 0) { index = gl.TEXTURE0; }
        gl.activeTexture(index);
        gl.bindTexture(gl.TEXTURE_2D, this._texture);
    };
    Texture.prototype.Update = function (src, param) {
        var w, h;
        if (src == null) {
            if (param) {
                w = param.width;
                h = param.height;
            }
        }
        else if (src instanceof HTMLVideoElement) {
            var srcVideo = src;
            if (srcVideo) {
                w = srcVideo.videoWidth;
                h = srcVideo.videoHeight;
            }
        }
        else if (src instanceof Uint8Array || src instanceof Uint16Array) {
            if (param) {
                w = param.width;
                h = param.height;
            }
            else {
                w = this._width;
                h = this._height;
            }
        }
        else {
            w = src.width;
            h = src.height;
        }
        if (!this._texture) {
            this._texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this._texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        }
        var level = param ? param.level ? param.level : 0 : 0;
        gl.bindTexture(gl.TEXTURE_2D, this._texture);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this._minFilter);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this._magFilter);
        if (w != this._width || h != this._height) {
            if (src == null) {
                var data = null;
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, w, h, 0, this._srcFormat, this._srcType, data);
            }
            else if (src instanceof Uint8Array || src instanceof Uint16Array) {
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, w, h, 0, this._srcFormat, this._srcType, src);
            }
            else {
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, this._srcFormat, this._srcType, src);
            }
            this._width = w;
            this._height = h;
        }
        else {
            if (src instanceof Uint8Array || src instanceof Uint16Array) {
                gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, w, h, this._srcFormat, this._srcType, src);
            }
            else {
                gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, this._srcFormat, this._srcType, src);
            }
        }
    };
    return Texture;
}());

var FrameBufferObject = /** @class */ (function () {
    function FrameBufferObject() {
    }
    FrameBufferObject.prototype.Destroy = function () {
        if (this._target) {
            this._target.Destroy();
            this._target = null;
        }
        if (this._depth) {
            gl.deleteRenderbuffer(this._depth);
            this._depth = null;
        }
        if (this._fbo) {
            gl.deleteFramebuffer(this._fbo);
            this._fbo = null;
        }
    };
    FrameBufferObject.prototype.Create = function (width, height, format, depth) {
        if (format === void 0) { format = gl.RGB; }
        if (depth === void 0) { depth = gl.DEPTH_COMPONENT16; }
        this.width = width;
        this.height = height;
        this.format = format;
        this.depth_format = depth;
    };
    FrameBufferObject.prototype.Bind = function (use) {
        if (use === void 0) { use = true; }
        if (use) {
            if (!this._target) {
                var target = new Texture();
                target._srcFormat = target._internalFormat = this.format;
                target.Update(null, { width: this.width, height: this.height });
                this._target = target;
            }
            if (this.depth_format && !this._depth) {
                var depth = gl.createRenderbuffer();
                gl.bindRenderbuffer(gl.RENDERBUFFER, depth);
                gl.renderbufferStorage(gl.RENDERBUFFER, this.depth_format, this.width, this.height);
                this._depth = depth;
            }
            if (!this._fbo) {
                var fbo = gl.createFramebuffer();
                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._target._texture, 0);
                if (this._depth) {
                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depth);
                }
                this._fbo = fbo;
            }
            gl.bindFramebuffer(gl.FRAMEBUFFER, this._fbo);
            gl.viewport(0, 0, this.width, this.height);
        }
        else {
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
    };
    FrameBufferObject.prototype.get_texture = function () {
        return this._target ? this._target._texture : null;
    };
    return FrameBufferObject;
}());

var Shader = /** @class */ (function () {
    function Shader() {
    }
    Shader.prototype.Destroy = function () {
        if (this._program) {
            gl && gl.deleteProgram(this._program);
            this._program = null;
        }
        if (this._vs) {
            gl && gl.deleteShader(this._vs);
            this._vs = null;
        }
        if (this._ps) {
            gl && gl.deleteShader(this._ps);
            this._ps = null;
        }
    };
    Shader.prototype.Create = function (vsCode, psCode) {
        var vs;
        if (vsCode) {
            vs = gl && gl.createShader(gl.VERTEX_SHADER);
            gl && gl.shaderSource(vs, vsCode.join("\n"));
            gl && gl.compileShader(vs);
            if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
                console.log('VertexShader compile failed: ' + gl.getShaderInfoLog(vs));
            }
            this._vs = vs;
        }
        else {
            vs = g_VertHandle;
        }
        var ps;
        if (psCode) {
            ps = gl && gl.createShader(gl.FRAGMENT_SHADER);
            gl && gl.shaderSource(ps, psCode.join("\n"));
            gl && gl.compileShader(ps);
            if (!gl.getShaderParameter(ps, gl.COMPILE_STATUS)) {
                console.log('FragmentShader compile failed: ' + gl.getShaderInfoLog(ps));
            }
            this._ps = ps;
        }
        else {
            ps = g_FragHandle;
        }
        var program = gl && gl.createProgram();
        gl && gl.attachShader(program, vs);
        gl && gl.attachShader(program, ps);
        gl && gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.log('linkProgram failed: ' + gl.getProgramInfoLog(program));
        }
        this._program = program;
    };
    return Shader;
}());



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImGui": () => (/* reexport module object */ _imgui__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "ImGui_Impl": () => (/* reexport module object */ _imgui_impl__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "Main": () => (/* binding */ Main)
/* harmony export */ });
/* harmony import */ var _imgui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imgui */ "./src/imgui.ts");
/* harmony import */ var _imgui_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imgui_impl */ "./src/imgui_impl.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var _main;
function _loop(time) {
    _main.loop(time);
    window.requestAnimationFrame(_loop);
}
var Main = /** @class */ (function () {
    function Main() {
        this.text = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'whats up');
        this.text2 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'もじ/もんじ');
        this.text_area = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'whats up multiline');
        this.text_area2 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, '觀自在菩薩，行深般若波羅蜜多時，\n照見五蘊皆空，度一切苦厄。');
    }
    Main.prototype.ImObject = function (obj, id) {
        var _this = this;
        if (id === void 0) { id = 0; }
        Object.entries(obj).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            _imgui__WEBPACK_IMPORTED_MODULE_0__.PushID(id);
            id++;
            if (value == null) {
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Text(key + ": (null)");
            }
            else if (typeof (value) === 'object') {
                if (_imgui__WEBPACK_IMPORTED_MODULE_0__.TreeNode(key)) {
                    id = _this.ImObject(value, id + 1);
                    _imgui__WEBPACK_IMPORTED_MODULE_0__.TreePop();
                }
            }
            else if (typeof (value) === 'number') {
                var v = function (_) {
                    if (_ === void 0) { _ = value; }
                    return obj[key] = _;
                };
                _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextItemWidth(100);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat(key, v);
            }
            else if (typeof (value) === 'boolean') {
                var v = function (_) {
                    if (_ === void 0) { _ = value; }
                    return obj[key] = _;
                };
                _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextItemWidth(100);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Checkbox(key, v);
            }
            else {
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Text(key + ": " + value);
            }
            _imgui__WEBPACK_IMPORTED_MODULE_0__.PopID();
        });
        return id;
    };
    Main.prototype.loop = function (time) {
        if (!_imgui_impl__WEBPACK_IMPORTED_MODULE_1__.any_pointerdown() && time - this.prev_time < 1000.0 / 30) {
            return;
        }
        this.prev_time = time;
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.NewFrame(time);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.NewFrame();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Begin("Hello");
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("Version " + _imgui__WEBPACK_IMPORTED_MODULE_0__.VERSION);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Input", this.text);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Input2", this.text2);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputTextMultiline("Text", this.text_area);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputTextMultiline("Text2", this.text_area2);
        //this.ImObject(ImGui.GetIO().Fonts);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.TextColored(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec4(0, 1, 0, 1), "FontTexturePool");
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.dom_font.texturePage.forEach(function (page) {
            _imgui__WEBPACK_IMPORTED_MODULE_0__.Image(page.Texure._texture, new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec2(512 / window.devicePixelRatio, 512 / window.devicePixelRatio));
        });
        _imgui__WEBPACK_IMPORTED_MODULE_0__.End();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.EndFrame();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Render();
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.ClearBuffer(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec4(0.25, 0.25, 0.25, 1));
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.RenderDrawData(_imgui__WEBPACK_IMPORTED_MODULE_0__.GetDrawData());
    };
    return Main;
}());

window.addEventListener('DOMContentLoaded', function () { return __awaiter(void 0, void 0, void 0, function () {
    var io, canvas;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, _imgui__WEBPACK_IMPORTED_MODULE_0__.default()];
            case 1:
                _a.sent();
                _imgui__WEBPACK_IMPORTED_MODULE_0__.CHECKVERSION();
                console.log("ImGui.CreateContext() VERSION=", _imgui__WEBPACK_IMPORTED_MODULE_0__.VERSION);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.CreateContext();
                io = _imgui__WEBPACK_IMPORTED_MODULE_0__.GetIO();
                _imgui__WEBPACK_IMPORTED_MODULE_0__.StyleColorsDark();
                _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.SetCanvasScale(window.devicePixelRatio);
                canvas = document.getElementById("canvas");
                _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.Init(canvas);
                _main = new Main;
                window.requestAnimationFrame(_loop);
                return [2 /*return*/];
        }
    });
}); });


/***/ }),

/***/ "./src/input.ts":
/*!**********************!*\
  !*** ./src/input.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Input": () => (/* binding */ Input)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/index.ts");

var Input = /** @class */ (function () {
    function Input(multiline) {
        var _this = this;
        this.isVisible = false;
        var textCol = _index__WEBPACK_IMPORTED_MODULE_0__.ImGui.GetStyleColorVec4(_index__WEBPACK_IMPORTED_MODULE_0__.ImGui.ImGuiCol.Text);
        var textBg = _index__WEBPACK_IMPORTED_MODULE_0__.ImGui.GetStyleColorVec4(_index__WEBPACK_IMPORTED_MODULE_0__.ImGui.ImGuiCol.WindowBg);
        var input;
        if (multiline) {
            input = document.createElement('textarea');
            input.style.resize = 'none';
        }
        else {
            input = document.createElement('input');
            input.type = 'text';
        }
        input.style.position = 'fixed';
        input.style.top = 0 + 'px';
        input.style.left = 0 + 'px';
        input.style.borderWidth = '0';
        input.style.borderStyle = 'none';
        input.style.zIndex = '999';
        input.style.backgroundColor = this.to_rgba(textBg);
        input.style.color = this.to_rgba(textCol);
        input.value = "123";
        input.addEventListener('blur', function (e) { _this.onLostFocus(e); });
        document.body.appendChild(input);
        this._dom_input = input;
        this.setVisible(false);
    }
    Input.prototype.to_rgba = function (c) {
        return "rgba(" + c.x * 255 + "," + c.y * 255 + "," + c.z * 255 + "," + c.w * 255 + ")";
    };
    Input.prototype.onLostFocus = function (e) {
        if (this.on_input) {
            this.on_input(this._dom_input.value);
        }
        this.setVisible(false);
    };
    Input.prototype.isMe = function (id) {
        return this.isVisible && this._id == id;
    };
    Object.defineProperty(Input.prototype, "Text", {
        get: function () {
            return this._dom_input.value;
        },
        enumerable: false,
        configurable: true
    });
    Input.prototype.setRect = function (x, y, w, h) {
        var input = this._dom_input;
        input.style.left = x + 'px';
        input.style.top = y + 'px';
        input.style.width = w - 5 + 'px';
        input.style.height = h - 5 + 'px';
    };
    Input.prototype.setText = function (text, id, font) {
        this._id = id;
        var input = this._dom_input;
        input.style.font = font.FontSize + "px " + font.FontName;
        input.value = text;
        this.setVisible(true);
    };
    Input.prototype.setVisible = function (b) {
        var input = this._dom_input;
        if (b) {
            input.style.display = 'inline-block';
            input.focus();
        }
        else {
            input.style.display = 'none';
        }
        this.isVisible = b;
    };
    return Input;
}());



/***/ }),

/***/ "./src/bind-imgui.js":
/*!***************************!*\
  !*** ./src/bind-imgui.js ***!
  \***************************/
/***/ ((module) => {


var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(Module) {
  Module = Module || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_main')) {
        Object.defineProperty(Module['ready'], '_main', { configurable: true, get: function() { abort('You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_main', { configurable: true, set: function() { abort('You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_end')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_free')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_init')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, get: function() { abort('You are getting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, set: function() { abort('You are setting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackSave')) {
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, get: function() { abort('You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, set: function() { abort('You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackRestore')) {
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, get: function() { abort('You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, set: function() { abort('You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackAlloc')) {
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, get: function() { abort('You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, set: function() { abort('You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, get: function() { abort('You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, set: function() { abort('You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, get: function() { abort('You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, set: function() { abort('You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, get: function() { abort('You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, set: function() { abort('You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_free')) {
        Object.defineProperty(Module['ready'], '_free', { configurable: true, get: function() { abort('You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_free', { configurable: true, set: function() { abort('You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___getTypeName')) {
        Object.defineProperty(Module['ready'], '___getTypeName', { configurable: true, get: function() { abort('You are getting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___getTypeName', { configurable: true, set: function() { abort('You are setting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___embind_register_native_and_builtin_types')) {
        Object.defineProperty(Module['ready'], '___embind_register_native_and_builtin_types', { configurable: true, get: function() { abort('You are getting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___embind_register_native_and_builtin_types', { configurable: true, set: function() { abort('You are setting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, get: function() { abort('You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, set: function() { abort('You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process === 'object' && "function" === 'function') || typeof window === 'object' || typeof importScripts === 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(function() { onload(readBinary(f)); }, 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';
function alignMemory() { abort('`alignMemory` is now a library function and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line'); }

assert(!ENVIRONMENT_IS_WORKER, "worker environment detected but not enabled at build time.  Add 'worker' to `-s ENVIRONMENT` to enable.");

assert(!ENVIRONMENT_IS_NODE, "node environment detected but not enabled at build time.  Add 'node' to `-s ENVIRONMENT` to enable.");

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");




var STACK_ALIGN = 16;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || false;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it.
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -s IMPORTED_MEMORY to define wasmMemory externally');
assert(INITIAL_MEMORY == 16777216, 'Detected runtime INITIAL_MEMORY setting.  Use -s IMPORTED_MEMORY to define wasmMemory dynamically');

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;
var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  flush_NO_FILESYSTEM()
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'data:application/octet-stream;base64,AGFzbQEAAAABjYuAgACmAWABfwF/YAJ/fwBgAAF/YAJ/fwF/YAF/AGADf39/AGADf39/AX9gAABgBH9/f38AYAR/f39/AX9gB39/f39/f38Bf2AFf39/f38AYAZ/f39/f38Bf2ACf38BfWAGf39/f39/AGABfAF/YAV/f39/fwF/YAJ/fQBgAAF9YAN/f30AYAF/AX1gCH9/f39/f39/AX9gAX0BfWAHf39/f39/fwBgAX0AYAJ9fQF9YAV/f31/fwBgBn9/f39/fQBgCH9/f31/f39/AX9gCX9/f39/f39/fwF/YAR/f399AGAFf39/f30AYAN9fX0BfWAEf399fwBgAXwBfGADf399AX9gBX9/f31/AGAAAX5gCn9/f39/f39/f38AYAZ9fX1/f38AYAZ/f31/f30AYAV/fn5+fgBgCH9/f39/f39/AGAHf39/f39/fQBgB39/fX9/f38Bf2AGf399fX9/AX9gAX8BfGADf35/AX5gBH99f38AYAJ9fQBgBn9/f399fwBgCH9/f39/f31/AGAHf39/f399fwBgC39/f39/f39/f39/AGAJf39/f39/f31/AGACfn4BfmAHf399fX1/fwF/YAl/f39/f39/f38AYAN/fX0Bf2ACf30Bf2ACf30BfWAEf399fQBgBn9/fX19fwBgB39/f399f30AYAV/f39/fQF/YAN9f38AYAZ/f3x8f38Bf2ADf31/AGAIf399fX1/f38AYAZ/f31/f38AYAF8AX1gAX8BfmAFf39/fX0AYAN/fX0AYAN/f38BfWACfHwBfGAIf399f39/fX8AYAJ/fABgBH99f30Bf2AEf35+fwBgBH9+fn8BfmAFf319fX0Bf2AAAXxgBH19fX0BfWAGf39/f399AX9gB39/fX5+f38Bf2AHf39/f399fQF9YAd/fX9/f319AX9gB39+fn5/fX0BfWAHf31+fn99fQF+YAN/f34BfmAHf319fX99fQF9YAl/f39/fn5/f38Bf2AJf39/f39/fX1/AGADfn5+AX5gA35+fQF+YAZ/f399f38AYAF9AX9gA39+fwF/YAJ8fwF8YAZ/fH9/f38Bf2ACfn8Bf2AEfn5+fgF/YA1/f39/f39/f39/f39/AGADf39/AXxgA39/fABgCH9/f319f39/AGAEfX19fQF/YAJ9fQF/YAt/fX19fX19fX19fwBgCX99fX19fX19fwBgCX9/fX9/f399fwBgB39/fX9/f38AYAZ/f399fX0AYAh/f39/fX99fwBgB39/f399fX8Bf2AHf399fHx/fwF/YAN/f30BfWAHf3x8fH99fQF9YAd/fXx8f319AXxgA39/fAF8YAl/f39/fX9/f38Bf2AJf39/fX19f39/AX9gCX9/f31/f39/fwF/YAl/f39/fX1/f38Bf2AJf39/f3x8f39/AX9gB39/f319f38Bf2AKf39/f39/f319fwF/YAR/fX19AX1gA3x8fAF8YAN8fH0BfGAKf39/f39/f39/fwF/YAd/f398fH9/AX9gBX9/f31/AX9gB399fX1/f38AYAR/f319AX9gBH9/fX8Bf2AIf39/f399f30AYAh/f39/f39/fQBgB39/f31/f30AYAl/f399f39/fX8AYAx/f39/f39/f39/f38AYAp/f39/f39/f31/AGAHf39/fX19fwBgCH9/fX19f39/AX9gBX9/fX99AX9gB39/f31/f38AYAR/f399AX9gBX99f399AX9gCn9/fX9/f39/fX8AYAJ9fwF9YAJ9fwF/YAN+f38Bf2ABfAF+YAJ/fgBgA39+fgBgAn9/AX5gBH9/f34BfmADf39+AGACf38BfGACfn4BfGACfn4BfWACfn4Bf2AEf39+fwF+YAV/f39+fgBgBH9+f38BfwKsiYCAACwDZW52DV9fYXNzZXJ0X2ZhaWwACANlbnYRX2VtdmFsX25ld19vYmplY3QAAgNlbnYTX2VtdmFsX3NldF9wcm9wZXJ0eQAFA2VudhFfZW12YWxfdGFrZV92YWx1ZQADA2Vudg1fZW12YWxfZGVjcmVmAAQDZW52GV9lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24ADgNlbnYWX2VtYmluZF9yZWdpc3Rlcl9jbGFzcwBnA2VudglfZW12YWxfYXMAaANlbnYSX2VtdmFsX25ld19jc3RyaW5nAAADZW52E19lbXZhbF9nZXRfcHJvcGVydHkAAwNlbnYWX2VtdmFsX3N0cmljdGx5X2VxdWFscwADA2Vudh9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX3Byb3BlcnR5ACYDZW52GV9lbWJpbmRfcmVnaXN0ZXJfY29uc3RhbnQAaQNlbnYNX2VtdmFsX2luY3JlZgAEA2VudhhfX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24AAANlbnYLX19jeGFfdGhyb3cABQNlbnYWX2VtdmFsX3J1bl9kZXN0cnVjdG9ycwAEA2Vudh9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2Z1bmN0aW9uACoDZW52Il9lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfY29uc3RydWN0b3IADgNlbnYLX2VtdmFsX2NhbGwACQNlbnYNX2VtdmFsX3R5cGVvZgAAA2VudhBfZW12YWxfbmV3X2FycmF5AAIDZW52F19lbXZhbF9jYWxsX3ZvaWRfbWV0aG9kAAgDZW52GF9lbXZhbF9nZXRfbWV0aG9kX2NhbGxlcgADA2VudhVfZW1iaW5kX3JlZ2lzdGVyX3ZvaWQAAQNlbnYVX2VtYmluZF9yZWdpc3Rlcl9ib29sAAsDZW52G19lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZwABA2VudhxfZW1iaW5kX3JlZ2lzdGVyX3N0ZF93c3RyaW5nAAUDZW52Fl9lbWJpbmRfcmVnaXN0ZXJfZW12YWwAAQNlbnYYX2VtYmluZF9yZWdpc3Rlcl9pbnRlZ2VyAAsDZW52Fl9lbWJpbmRfcmVnaXN0ZXJfZmxvYXQABQNlbnYcX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldwAFA2VudgpfX3N5c19vcGVuAAYWd2FzaV9zbmFwc2hvdF9wcmV2aWV3MQhmZF9jbG9zZQAAA2Vudg1fX3N5c19mY250bDY0AAYDZW52C19fc3lzX2lvY3RsAAYWd2FzaV9zbmFwc2hvdF9wcmV2aWV3MQdmZF9yZWFkAAkWd2FzaV9zbmFwc2hvdF9wcmV2aWV3MQhmZF93cml0ZQAJA2VudgVhYm9ydAAHA2VudhZlbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwAAADZW52FWVtc2NyaXB0ZW5fbWVtY3B5X2JpZwAGA2VudgtzZXRUZW1wUmV0MAAEA2VudhdfZW1iaW5kX3JlZ2lzdGVyX2JpZ2ludAAXFndhc2lfc25hcHNob3RfcHJldmlldzEHZmRfc2VlawAQA/mrgIAA0SsHAAAAOhETARYAAAEBAAAABAEDAQEDAQEBBgMEAQgFFBMFCRcLGQUAAAYEBgYGAwMEAAkJBgYD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AgAEAwEABQEAAwAFAwAFDQATAQEBAwAFAQEBAQUABQUABQAABQUABQUFAAUFAQAADwAPAA8ADwAPAE0ABwAHAgICAgIABAUBAAEBAQMBAAUBAAMABQEBAQEBBwAHAgICAgIABAIDAAUNABMDAQAFAQABAQEBAwAFAwAFAQEFAQVEAU4BRQEBAQEBAQEEAQcABwICAgICAAQDAAUDAQANABMBBQEAAQEDAQYBAQEBAwAFAQEBAQEBAQEBAQEBAQEBAQEBAQEDAQYBAwYNASMBAQEBAQEBAQUBDQENDQcABwICAgICAAQNABMDAQABAQMABQEBAQEBAQEBAQMABQUBBgECBAEHAAMBAgEBAAEEAQIBBAQBBAEEBAEEBAYBCQEBBAEBAQEFAQEBCAEEAQEBAQEBBwUBBQUBBAEBAQEBAQQBAQEBAQQBAwEAAQABAQEEAQQBAQQEAAQEAQEEBAEBBAMBAAEGAwEOAQoBAwYBAwEGQQEGDAEKAQoKCh0BCgEKCgodFQEMAQwMDAwMAQwMDAoBCgoVAQwBCgEKAQwJAQkJEAEGBgZCAQoGBgYJAQkAAwEDAQMGAQYBBAQDBgkBCRABDAMGATkBOQEBAQEBAUMBAwkBCQEEAwYBAQMBAwMDQAEHEQECACEBAQEHBAQCAQICAQEAAQUBBQEBAwYDBAEECQEDBAUBAQEBAAEDAQEEBAQBBAQwAQYBJAEFAQAnAScBAQYBAAEBASEBBAEEBAQKAQUBAQEEAgAABgAAAAIALgAAAwAAAgEAAAAAAAAABAAAAQAAAgkAAAIQAAADAAADAAACFAAAAggAAAUAAAILAAABAAAFAAACEQAACAAACAAAAQAAAkkAAAUAAAEAAAEAAAIGAAADAAADAAADAAAFAAAFAAAGAAADAAAGAAACFwAAAhUAAAkAAAYAAAIwAAACCgAAFQAAAoMBAAAVAAACHQAACgAACgAAFQAAHQAACgAAFQAAFQAAEAAAAgwAAAKEAQAAEAAABgAABgAACQAACQAAEAAADAAACQAAAiYAAAUAAAUAAAUAAAIhAAAQAAAQAAAGAAACVAAAEwAAAiQAAAUAAAAAAwAAAwAACAAACAAADQAAEAAACAAAAwAABgACLgAAAhoAAAkAAAKFAQAABgAAAoYBAAAGAAAChwEAAAkAAAIjAAACiAEAAAAAFQAACAAAAwAABQUAAAAAAAAFAQQAAAAAAQQCAAACAAAAAAEAAAEABAMDAAIPAQYAAAAAAAAAAAICAgIiIgADAgAUEQIAAgICFgIAAAkAAQIBAAAGAAIGAAACAAICAgAADAACAAICAgACAAACAQMAAwABAgAAAAABAgAAAAIAAAgAAAIFAAAIAAACAAADAAACAAICAgEDAAMCAAABAgABAQACAgIAAAAAAgAAAh4AAAIAAAEAAgAAAwACAAICAgAAAgAAAgEAAAICAgUDAAMCAAABAgAABgAAAgACAgIBAwADAgAAAQIAAQMAAwAAAgICAQADAwgACwADAgAAAwIABgAAAQIAAAECAQIAAAUAAAIBAAAFAwYAAwIAAQECAAEAAAgAAAsAAAIAAAEAAAICDwEAAAUAAgUBAwAAAAYAAgUBHwAAAhsAAj8AAAKJAQACMgAAAjQAAhcAAAIqAAIrAAACigEAAg4AABcAAhsAAAIrAAILAAACDgACKAAAAosBAAIaAAACYAACKBoIAAALAAJMAAMAAA8CDwAEAAACjAEAAhcAACoAAjUAAAKNAQACNgAAAo4BAAIbBQAAKwACCAAACwACMwAAAjYAAjQAAAIzAAIBAQEBAAAFAAIeAAACHwACPgAAAo8BAAIaAABgAAILAAAOAAIIAAALAAIkAAACMgACAAAFAAIAAAgAAgAACAACCAAACwACDiYAAAI1AAIIAQAABQACCAACAgIBAwUIAAMCAAMAAAECAAAFAAACAQABAQAAAQAAAgEAAAUAAAIAAgICAQMAAwIAAgABAwADAAEBAQAAAgICBAcAAAEBAQMAAwIAAAECAQEBAwADAgAAAQICDwACDwIPAAIPAAICAgUAAAYAAAIAAAMAAAIBBQMFAwYAAwIAAAMCAAEBAgIAAAMAAgEBAAABAQAABQAAAgQAAAACAgIDAQEBAAEBFEYCRgAAAQEBAwMAAwIAAAECAAAFAAIBAwADAgAAAQIAAAMAAgUDAAMCAAABAgAABgAAAgVEBQAAApABAAJOAAACkQEAAkUAAA8CDwAAApIBAAIBAAAAAwIBAAAFAAIBAAAPAg8AAAAFAgQEBAAAAQACAAICAgEAAQECAAEBAwAABgAAAgYAAAkAAgQEAwEDAAMCAAABAgEBAQQEBAQEBAQEBAQEBAQEBAQBAwAABgACBgAACQACAwYNAAACSgACIwAAApMBAAIAAAUAAAIBAAAFAAIBAAAFAAIAAAEAAgEFAwQAAwIAAgAABgAAAg0AAA0NAAICAgEAAQEBAQEBAQEBAQEFAwADAgAAAQIAAAYAAAIGAAAJAAIAAAAAAgAAEwACAgICAAADAQAFAwgACAMAAAACAwALBgAAAAIAAgQEAAICAgQEBAMAAwIAAAECBAMAAwIAAQICBAMAAwIAAAECBAIEBAYDAAAEBAUABAEFAwADAAEDAAMCAAICCQECAgQDAAMCAAABAgEBBQIBAgUEBAMAAwIAAAECAgQCAgIBAQEHBQIFBQIEAgEBAQECBAECAgECBAEDAgACAAIBAgQBBAEBBAQABAQBAgQEAQIEAwIAAgYDAg4CCgIDAwAABAQEBgMAAAQEBAABAgMCBgMAAAQEBAABQQMAAAMABAEEAgYMBgMEAwMLAwIADgIJAAAAAAIAAgoDAAAEBAQCCgMAAAQEBAoDAAAEBAQKAwAABAQEHQIKAgoDAAAEBAQKAwAABAQECgMAAAQEBB0VAwADABwAAwADABwAAwADABwAAwADABwAAwADABwAAwADABwAAwADABwAAwADABwAAAAAAQUDBQUAAAAAAQUAAAAAAQUDBQAAAAABBQMFAAAAAAEFAwUAAAAAAQUDBQAAAAABBQMFAAAAAAEFAwUAAAABAQYAAwIABQAGAAMAAAABAAMJAQEAAQEBAAYBAAAAAAMGAAMABgAECAEBBAQABQABAAAAAgMAAwMAAAIGAAAAAAADAwAAAAALAAEFAAEBAQABAQICAgAAAgQAAAAPAg8ABQACAgAAAgQAAAEBBgMAAAABAAMJAQEAAQEBAAYBAAAAAAYAAwAGAAQIAQEEBAAFAAEAAAAAAAAAAAAAAAMDAAAAAAsAAQUAAQEBAAQAAAAPAg8ABQACAgAAAgQAAAEBBgADAgAGAwAAAAEAAwkBAQABAQEABgEAAAAABgADAAYABAgBAQQEAAUAAQAAAAAAAAAAAAAAAwMAAAAACwABBQABAQEAAQECBAAAAA8CDwUAAgIAAAIEAAABAQYAAwIABgMAAAABAAMJAQEAAQEBAAYBAAAAAAYAAwAGAAQIAQEEBAAFAAEAAAAAAAAAAAAAAAMDAAAAAAsAAQUAAQEBAAEBAgQAAAAPAg8FAAICAAACBAAAAQEGAAMCAAYD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AQtBgICAgHghBAsgAyAEciEDAkACQCAAKgIIEHRDAAB/Q5RDAAAAP5IiAYtDAAAAT11FDQAgAaghBAwBC0GAgICAeCEECyADIARBEHRyIQMCQAJAIAAqAgwQdEMAAH9DlEMAAAA/kiIBi0MAAABPXUUNACABqCEADAELQYCAgIB4IQALIAMgAEEYdHILGABDAAAAACAAQwAAgD+WIABDAAAAAF0bC8wBAgF/AX0jAEEQayIGJAAgBiABOAIIIAYgADgCDCAGIAI4AgRDAAAAACEHAkAgASACXUUNACAGQQhqIAZBBGoQdkMAAIC/IQcgBioCCCEBCwJAIAEgAF5FDQBDq6qqviAHkyEHIAZBDGogBkEIahB2IAYqAgghASAGKgIMIQALIAMgByABIAYqAgQiApMgACABIAIgASACXRuTIgFDAADAQJRDCOU8HpKVkos4AgAgBCABIABDCOU8HpKVOAIAIAUgADgCACAGQRBqJAALHAEBfSAAKgIAIQIgACABKgIAOAIAIAEgAjgCAAuyAgIBfwF9AkAgAUMAAAAAXA0AIAUgAjgCACAEIAI4AgAgAyACOAIADwsCQAJAIABDAACAPxDoK0Orqio+lSIAi0MAAABPXUUNACAAqCEGDAELQYCAgIB4IQYLQwAAgD8gACAGspMiACABlJMgApQhB0MAAIA/QwAAgD8gAJMgAZSTIAKUIQBDAACAPyABkyAClCEBAkACQAJAAkACQAJAIAYOBQABAgMEBQsgAyACOAIAIAQgADgCACAFIAE4AgAPCyADIAc4AgAgBCACOAIAIAUgATgCAA8LIAMgATgCACAEIAI4AgAgBSAAOAIADwsgAyABOAIAIAQgBzgCACAFIAI4AgAPCyADIAA4AgAgBCABOAIAIAUgAjgCAA8LIAMgAjgCACAEIAE4AgAgBSAHOAIACykBAX8CQCAAIAEQeSIDIAAQekYNACADKAIAIAFHDQAgAygCBCECCyACC08BA38gACgCCCECAkAgACgCACIARQ0AA0AgAiAAQQF2IgNBA3RqIgRBCGogAiAEKAIAIAFJIgQbIQIgACADQX9zaiADIAQbIgANAAsLIAILEAAgACgCCCAAKAIAQQN0agstAQJ/QQAhAgJAIAAgARB5IgMgABB6Rg0AIAMoAgAgAUcNACADKAIEIQILIAILSwECfyMAQRBrIgMkAAJAAkAgACABEHkiBCAAEH1GDQAgBCgCACABRg0BCyAAIAQgA0EIaiABIAIQfhB/IQQLIANBEGokACAEQQRqCxAAIAAoAgggACgCAEEDdGoLEgAgACACNgIEIAAgATYCACAAC7YBAQJ/AkAgACgCCCIDIAFLDQAgAyAAKAIAIgRBA3RqIAFJDQAgASADa0EDdSEBAkAgBCAAKAIERw0AIAAgACAEQQFqEIABEIEBIAAoAgAhBAsCQCAEIAFMDQAgACgCCCABQQN0aiIDQQhqIAMgBCABa0EDdBDuKxoLIAAoAgggAUEDdCIEaiACKQIANwIAIAAgACgCAEEBajYCACAAKAIIIARqDwtB2OgAQcrQAEH3DEG4HBAAAAsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEDdBBUIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBA3QQ7CsaIAAoAggQVgsgACABNgIEIAAgAjYCCAsLEgAgACACNgIEIAAgATYCACAAC1EBAn8jAEEQayIDJAACQAJAAkAgACABEHkiBCAAEH1GDQAgBCgCACABRg0BCyAAIAQgA0EIaiABIAIQfhB/GgwBCyAEIAI2AgQLIANBEGokAAtSAQJ/IwBBEGsiAyQAAkACQAJAIAAgARB5IgQgABB9Rg0AIAQoAgAgAUYNAQsgACAEIANBCGogASACEIIBEH8aDAELIAQgAjYCBAsgA0EQaiQACzYAAkACQCABQQBIDQAgACgCACABSg0BC0HF6ABBytAAQdwMQc2KARAAAAsgACgCCCABQQN0agsNACAAQSBGIABBCUZyCyUBAX9BACgCkIcDIgFB1DZqIAA4AgAgASABKALQNkEBcjYC0DYLegEDfwJAAkAgAkUNACACIAFrIQIMAQsgARD1KyECCwJAIAAoAgAiA0EBIAMbIgQgAmoiAyAAKAIEIgVIDQAgACADIAVBAXQiBSADIAVKGxCJAQsgACADED0gACAEQX9qIgMQPiABIAIQ7CsaIAAgAyACahA+QQA6AAALRgECfwJAIAAoAgQgAU4NACABEFQhAgJAIAAoAggiA0UNACACIAMgACgCABDsKxogACgCCBBWCyAAIAE2AgQgACACNgIICwsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobCyQBAX8jAEEQayIDJAAgAyACNgIMIAAgASACEIwBIANBEGokAAuIAQEEfyMAQRBrIgMkACADIAI2AgwgAyACNgIIAkBBAEEAIAEgAhBfIgJBAUgNAAJAIAAoAgAiBEEBIAQbIgUgAmoiBCAAKAIEIgZIDQAgACAEIAZBAXQiBiAEIAZKGxCJAQsgACAEED0gACAFQX9qED4gAkEBaiABIAMoAggQXxoLIANBEGokAAuOAwIEfwJ9IwBBMGsiBCQAAkACQEEAKAKQhwMiBS0AmF9FDQAgAkEANgIAIAMgADYCAAwBCyAFKALsNCEGAkAQjgFFDQAgA0EANgIAIAJBADYCAAwBCyAEQShqIAZBvARqKQIANwMAIAQgBikCtAQ3AyACQCAFLQCwOEUNACAEQSBqIAVB+DdqEI8BCwJAIAUoAuQ3IgdFDQAgBigCsAYgB0cNACAEQQhqIAZBDGoiByAGQbgGahBNIAQgByAGQcAGahBNIARBIGogBEEQaiAEQQhqIAQQkAEQjwELAkACQCAEQSxqKgIAIAZB0AFqKgIAIgiTIAGVIgmLQwAAAE9dRQ0AIAmoIQYMAQtBgICAgHghBgsCQAJAIAQqAiQgCJMgAZUiAYtDAAAAT11FDQAgAaghBwwBC0GAgICAeCEHCwJAIAUtALA4RQ0AIAUoAsg4IgVBA0YgBmohBiAHIAVBAkZrIQcLIAIgB0EAIAAQkQEiBTYCACADIAZBAWogBSAAEJEBNgIACyAEQTBqJAALNwECfwJAAkBBACgCkIcDIgAoAvw9IgFFDQAgAUGiBGohAQwBCyAAKALsNEGPAWohAQsgAS0AAAtyAQF9AkAgACoCACABKgIAIgJeRQ0AIAAgAjgCAAsCQCAAKgIEIAEqAgQiAl5FDQAgACACOAIECwJAIAAqAgggASoCCCICXUUNACAAIAI4AggLAkAgAEEMaioCACABQQxqKgIAIgJdRQ0AIAAgAjgCDAsLGAAgACABKQIANwIAIAAgAikCADcCCCAACxQAIAEgAiAAIAAgAkobIAAgAUgbCzQBAX8gAEEIaiIBQgA3AgAgAEIANwIAIABBGGpBADYCACAAQRBqQgA3AgAgAUF/NgIAIAALIQACQCAAKAIIQX9GDQBBkMkBQcw+QbgRQes4EAAACyAAC2MCAn8BfUEAKAKQhwMiAygC7DQhBAJAIAMoAvw9IgNFDQAgAy0AlQRFDQAgAxD0BwsgBEHQAWoqAgAhBSAAIAI4AhQgACAFOAIYIAAgATYCCCAAQgA3AgwgAEL/////DzcCAAtUAgF/AX0CQCAAKAIIIgFBAEgNAAJAIAFB/////wdGDQAgACgCAEEASA0AIAAqAhggACoCFCICIAEgACgCEGuylJIgAhCWAQsgAEL/////PzcCCAsL6QECA38CfUEAKAKQhwMiAigC7DQiA0HQAWoiBCoCACEFIAQgADgCACADQegBaiIEKgIAIQYgA0HYAWogACABkzgCACAEIAYgABCXATgCACADQYACaiABIAJB5CpqKgIAkzgCAAJAIANBmANqKAIAIgRFDQAgBCAAOAIcCwJAIAIoAvw9IgJFDQAgACAFkyEGAkAgAi0AlQRFDQAgAhD0ByADKgLQASEACyACIAA4AmgCQAJAIAYgAZVDAAAAP5IiAItDAAAAT11FDQAgAKghAwwBC0GAgICAeCEDCyACIAIoAnwgA2o2AnwLCwwAIAAgASAAIAFgGwvQBAIEfwJ9QQAoApCHAyIBKALsNCECAkAgASgC/D0iAUUNACABLQCVBEUNACABEPQHCwJAAkAgACgCCCIDRQ0AEI4BDQACQAJAAkACQAJAAkACQAJAIAAoAgwiBA4CAAEECwJAIAFFDQAgAS0AnwQNACAAIAAoAhAiATYCACAAIAFBAWoiATYCECAAIAE2AgRBAQ8LIAAgAkHQAWoqAgA4AhggACoCFEMAAAAAX0UNASAAQQE2AgwgACAAKAIQIgE2AgAgACABQQFqNgIEQQEPCyAAKgIUQwAAAABfRQ0DAkACQCABRQ0AIAAgASoCaCIFIAEqAmSTIgY4AhQgAkHQAWogBTgCAAwBCyAAIAJB0AFqKgIAIAAqAhiTIgY4AhQLIAZDAAAAAF4NAUHS2gFBzD5BlxJBgcAAEAAACyAAIAAoAgQ2AgALQQIhBCAAQQI2AgwLIAMgACgCBCIBTA0DAkACQCAEQX5qDgIAAQQLIAAqAhQiBkMAAAAAXkUNAiADIAFrIAYgACAAQQRqEI0BIAAgACgCACIDIAFqIgI2AgAgACAAKAIEIAFqNgIEAkAgA0EBSA0AIAAqAhggACoCFCIGIAIgACgCEGuylJIgBhCWAQsgAEEDNgIMQQEPCwJAIANB/////wdGDQAgACoCGCAAKgIUIgYgAyAAKAIQa7KUkiAGEJYBCyAAQX82AggMBAtBpt4AQcw+QYsSQYHAABAAAAtB/9oAQcw+QaUSQYHAABAAAAtB768BQcw+Qb8SQYHAABAAAAsgABCVAQtBAAspAQF/AkBBACgCkIcDIgANAEHhzwFBzD5ByRJBp/MAEAAACyAAQZgqagtiAQJ/IwBBEGsiAiQAIAJBCGpBACgCkIcDIgNBmCpqIABBBHRqIgBBzAFqKQIANwMAIAIgAEHEAWopAgA3AwAgAiACKgIMIAMqApgqIAGUlDgCDCACEHMhACACQRBqJAAgAAtQAQJ/IwBBEGsiASQAQQAoApCHAyECIAFBCGogAEEIaikCADcDACABIAApAgA3AwAgASACKgKYKiABKgIMlDgCDCABEHMhACABQRBqJAAgAAsTAEEAKAKQhwMgAEEEdGpB3CtqC2ICAX0BfwJAQQAoApCHAyoCmCoiAUMAAIA/YA0AIABB////B3EhAgJAAkAgASAAQRh2s5QiAUMAAIBPXSABQwAAAABgcUUNACABqSEADAELQQAhAAsgAEEYdCACciEACyAAC4IBAQR/IwBBMGsiAiQAQQAoApCHAyEDIAJBGGoQnwEiBCAANgIAIAQgAyAAQQR0aiIAQdwraiIFKQIANwIEIARBDGogAEHkK2oiACkCADcCACADQeQ2aiAEEKABIAJBCGogARBxIAAgAkEQaikDADcCACAFIAIpAwg3AgAgAkEwaiQACwwAIABBBGoQLxogAAtuAQF/AkAgACgCACICIAAoAgRHDQAgACAAIAJBAWoQoQEQogEgACgCACECCyAAKAIIIAJBFGxqIgIgASkCADcCACACQRBqIAFBEGooAgA2AgAgAkEIaiABQQhqKQIANwIAIAAgACgCAEEBajYCAAsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEUbBBUIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBFGwQ7CsaIAAoAggQVgsgACABNgIEIAAgAjYCCAsLeQEEfyMAQSBrIgIkAEEAKAKQhwMhAyACQQhqEJ8BIgQgADYCACAEIAMgAEEEdGoiAEHcK2oiBSkCADcCBCAEQQxqIABB5CtqIgApAgA3AgAgA0HkNmogBBCgASAAIAFBCGopAgA3AgAgBSABKQIANwIAIAJBIGokAAtmAQR/AkAgAEEBSA0AQQAoApCHAyIBQeQ2aiECA0AgASACEKUBIgMoAgBBBHRqIgRB5CtqIANBDGopAgA3AgAgBEHcK2ogAykCBDcCACACEKYBIABBAUohAyAAQX9qIQAgAw0ACwsLMwEBfwJAIAAoAgAiAUEASg0AQcqqAUHK0ABB5gxB8M0AEAAACyABQRRsIAAoAghqQWxqCy8BAX8CQCAAKAIAIgFBAEoNAEHKqgFBytAAQfIMQezNABAAAAsgACABQX9qNgIAC28BA38jAEEQayICJAACQCAAEKgBIgMoAgBBCEcNACADKAIEQQFHDQBBACgCkIcDIgRB8DZqIAIgACADIARBmCpqEKkBIgMqAgAQqgEQqwEgAyABOAIAIAJBEGokAA8LQcvfAUHMPkHEE0HDOxAAAAsnAAJAIABBGEkNAEGEjwFBzD5BtBNB38AAEAAACyAAQQxsQYD9AWoLCgAgASAAKAIIagsSACAAIAI4AgQgACABNgIAIAALXgEBfwJAIAAoAgAiAiAAKAIERw0AIAAgACACQQFqEKwBEK0BIAAoAgAhAgsgACgCCCACQQxsaiICIAEpAgA3AgAgAkEIaiABQQhqKAIANgIAIAAgACgCAEEBajYCAAsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEMbBBUIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBDGwQ7CsaIAAoAggQVgsgACABNgIEIAAgAjYCCAsLhwECA38BfiMAQSBrIgIkAAJAIAAQqAEiAygCAEEIRw0AIAMoAgRBAkcNACACIANBACgCkIcDIgRBmCpqEKkBIgMpAgAiBTcDACACIAU3AwggBEHwNmogAkEQaiAAIAIQrwEQqwEgAyABKQIANwIAIAJBIGokAA8LQcLsAUHMPkHSE0HDOxAAAAsiACAAIAE2AgAgACACKgIAOAIEIABBCGogAioCBDgCACAAC6MBAQV/AkAgAEEBSA0AQQAoApCHAyIBQZgqaiECIAFB8DZqIQMDQCAAIQEgAxCxASIEKAIAEKgBIgAgAhCpASEFAkAgACgCAEEIRw0AAkACQAJAIAAoAgRBf2oOAgABAwsgBEEEaiEADAELIAUgBCoCBDgCACAFQQRqIQUgBEEIaiEACyAFIAAqAgA4AgALIAMQsgEgAUF/aiEAIAFBAUoNAAsLCzMBAX8CQCAAKAIAIgFBAEoNAEHKqgFBytAAQeYMQfDNABAAAAsgAUEMbCAAKAIIakF0agsvAQF/AkAgACgCACIBQQBKDQBByqoBQcrQAEHyDEHszQAQAAALIAAgAUF/ajYCAAsqAAJAIABBNUkNAEHvrwFBzD5BoBRBz/IAEAAACyAAQQJ0QaD/AWooAgALTAEBfwJAIAFBfyABGyICIABNDQADQAJAAkAgAC0AACIBQSNGDQAgAQ0BDAMLIAAtAAFBI0YNAgsgAEEBaiIAIAJHDQALIAIhAAsgAAt/AQJ/QQAoApCHAyIEKALsNCEFAkACQCADRQ0AIAEgAhC0ASECDAELIAINACABIAEQ9StqIQILAkAgAiABRg0AIAUoAogFIAQoAqwyIAQqArAyIABBAEMAAIA/EJoBIAEgAkMAAAAAQQAQjQcgBC0AmF9FDQAgACABIAIQtgELC/8CAgd/An0jAEEwayIDJABBACEEQQAoApCHAyIFKALsNCEGAkAgAg0AIAFBABC0ASECCwJAIABFDQAgBSoCsF8hCiAFIAAqAgQiCzgCsF8gCyAKQwAAgD+SXkUNAEEBIQQgBUEBOgC0XwsCQCAFKAK4XyIHIAZBgANqKAIAIgBMDQAgBSAANgK4XyAAIQcLIAAgB2tBAnQhCCABIQACQANAAkACQAJAIAAgAhBaIgcgAkciBg0AIAAgB0YNAQsgByAAayEJAkACQCAEIAAgAUdyQQFHDQAgAyAANgIMIAMgCTYCCCADQe7xATYCBCADIAg2AgBB5jUgAxC3AQwBCwJAIAUtALRfRQ0AIAMgATYCLCADIAk2AiggA0Hu8QE2AiQgAyAINgIgQec1IANBIGoQtwEMAQsgAyABNgIUIAMgCTYCEEHvNSADQRBqELcBCyAFQQA6ALRfDAELIARFDQBB7fEBQQAQtwEMAgsgB0EBaiEAIAYNAAsLIANBMGokAAt5AQJ/IwBBEGsiAiQAAkBBACgCkIcDIgMtAJhfRQ0AIAIgATYCDCADQaTfAGohAQJAIAMoAqBfRQ0AIAFBABA9IAEgACACKAIMEIwBIAEQ7wVCASABEOwDrCADKAKgXxBmGgwBCyABIAAgAigCDBCMAQsgAkEQaiQAC2kBAn9BACgCkIcDIgQoAuw0IQUCQCACDQAgASABEPUraiECCwJAIAIgAUYNACAFKAKIBSAEKAKsMiAEKgKwMiAAQQBDAACAPxCaASABIAIgA0EAEI0HIAQtAJhfRQ0AIAAgASACELYBCwulAwMCfwF+BX0jAEEgayIIJAAgCCABKQIAIgo3AxggCkIgiKchCSAKp74hCwJAAkAgBUUNACAIIAUpAgAiCjcDECAKp74hDAwBCyAIQRBqIAMgBEEAQwAAAAAQugEgCCoCECEMCyAJviENQQEhBQJAIAwgC5IgB0EIaiACIAcbIgkqAgAiDmANACAIKgIUIA2SIAkqAgRgIQULIAcgASAHGyEBAkAgB0UNAEEBIQcCQCABKgIAIAteDQAgASoCBCANXiEHCyAHIAVyQQBHIQULAkAgBioCACIPQwAAAABeRQ0AIAggCyAPIAIqAgAgC5MgDJOUIAuSEJcBOAIYCwJAIAYqAgQiC0MAAAAAXkUNACAIIA0gCyACKgIEIA2TIAgqAhSTlCANkhCXATgCHAsCQAJAIAVFDQAgCCABKgIAIAEqAgQgDiAJKgIEEHIhByAAQQBDAAAAACAIQRhqQQBDAACAPxCaASADIARDAAAAACAHEI0HDAELIABBAEMAAAAAIAhBGGpBAEMAAIA/EJoBIAMgBEMAAAAAQQAQjQcLIAhBIGokAAuuAQICfwF9IwBBEGsiBSQAQQAoApCHAyEGAkAgA0UNACABIAIQtAEhAgsgBioCsDIhBwJAAkAgAiABRw0AIABDAAAAACAHEDAaDAELIAVBCGogBigCrDIgB0P//39/IAQgASACQQAQ/CgCQAJAIAUqAghDMzNzP5IiB4tDAAAAT11FDQAgB6ghAgwBC0GAgICAeCECCyAFIAKyOAIIIAAgBSkDCDcCAAsgBUEQaiQAC0kBAX8CQCACIAMQtAEiAyACRg0AQQAoApCHAyIHKALsNCgCiAUgACABIAIgAyAEIAUgBhC5ASAHLQCYX0UNACAAIAIgAxC2AQsLwAUDBn8BfgR9IwBBMGsiCCQAQQAoApCHAyEJAkAgBg0AIAVBABC0ASEGCwJAAkAgB0UNACAIIAcpAgAiDjcDKCAOp74hDwwBCyAIQShqIAUgBkEAQwAAAAAQugEgCCoCKCEPCwJAAkAgDyACKgIAIAEqAgCTXkUNACAAKAIsIgcqAgwhECAHKAIIIQogCEEANgIkQQNBASAKLwHIASIHQf//A0YiCxshDCAKQS4gByALGyINEPUoIgsqAhAhEQJAAkAgB0H//wNGDQAgESESDAELIAAoAiwqAgwgCioCKJUiDyARIAsqAgiTkiIRIAyylCAPkyESCyAIQRhqIAogECACKgIAIAQQlwEgEpMgASoCAJNDAACAPxCXAUMAAAAAIAUgBiAIQSRqEPwoIAgqAhghDwJAIAgoAiQiByAFRw0AIAcgBk8NACAIIAUgBSAGEGpqIgc2AiQgCEEYaiAKIBBD//9/f0MAAAAAIAUgB0EAEPwoIAgqAhghDyAIKAIkIQcLAkAgByAFTQ0AA0AgB0F/aiILLAAAEIYBRQ0BIAggCzYCJCAIQRhqIAogEEP//39/QwAAAAAgCyAHQQAQ/CggDyAIKgIYkyEPIAgoAiQiByAFSw0ACwsgACABIAhBGGogAyACKgIEEDAgBSAIKAIkIAhBKGogCEEQakMAAAAAQwAAAAAQMEEAELkBIBIgDyABKgIAkiIPkiAEX0UNAUEAIQcDQCAIQQhqIA8gASoCBBAwIQtBAEMAAIA/EJoBIQIgCCALKQIANwMAIAogACAQIAggAiANEP8oIBEgD5IhDyAHQQFqIgcgDEcNAAwCCwALIAAgASAIQRhqIAMgAioCBBAwIAUgBiAIQShqIAhBEGpDAAAAAEMAAAAAEDBBABC5AQsCQCAJLQCYX0UNACABIAUgBhC2AQsgCEEwaiQAC8cBAgN/AX0jAEEgayIFJABBACgCkIcDIgYoAuw0IgcoAogFIAAgASACIARBDxD/BgJAIANFDQAgBkHcKmoqAgAiCEMAAAAAXkUNACAHKAKIBSEDIAVBGGogACAFQRBqQwAAgD9DAACAPxAwEE0gBUEIaiABIAVDAACAP0MAAIA/EDAQTSADIAVBGGogBUEIakEGQwAAgD8QmgEgBEEPIAgQ/gYgBygCiAUgACABQQVDAACAPxCaASAEQQ8gCBD+BgsgBUEgaiQAC68BAgN/AX0jAEEgayIDJAACQEEAKAKQhwMiBEHcKmoqAgAiBkMAAAAAXkUNACAEKALsNCIEKAKIBSEFIANBGGogACADQRBqQwAAgD9DAACAPxAwEE0gA0EIaiABIANDAACAP0MAAIA/EDAQTSAFIANBGGogA0EIakEGQwAAgD8QmgEgAkEPIAYQ/gYgBCgCiAUgACABQQVDAACAPxCaASACQQ8gBhD+BgsgA0EgaiQAC7UDAwJ/AX0CfiMAQdAAayIDJAACQEEAKAKQhwMiBCgCyDcgAUcNAAJAIAQtAJY4RQ0AIAJBBHFFDQELIAQoAuw0IgFB0AJqLQAADQBDAAAAACEFAkAgAkEIcQ0AIARB2CpqKgIAIQULIANBwABqQQhqIABBCGopAgA3AwAgAyAAKQIANwNAIANBwABqIAFBtARqIgQQwAECQCACQQFxRQ0AIANBwABqIANBOGpDAACAQEMAAIBAEDAQwQECQCAEIANBwABqEMIBIgQNACABKAKIBSEAIAMgAykDQCIGNwMwIAMgAykDSCIHNwMoIAMgBjcDCCADIAc3AwAgACADQQhqIANBABDcBgsgASgCiAUhACADQThqIANBwABqIANBIGpDAACAP0MAAIA/EDAQTSADQRhqIANByABqIANBEGpDAACAP0MAAIA/EDAQSiAAIANBOGogA0EYakExQwAAgD8QmgEgBUEPQwAAAEAQ/gYgBA0AIAEoAogFEOAGCyACQQJxRQ0AIAEoAogFIANBwABqIANByABqQTFDAACAPxCaASAFQX9DAACAPxD+BgsgA0HQAGokAAtGAQF/IwBBEGsiAiQAIAJBCGogACABEMMBIAAgAikDCDcCACACQQhqIABBCGogAUEIahDEASAAIAIpAwg3AgggAkEQaiQAC0cAIAAgACoCACABKgIAkzgCACAAIAAqAgQgASoCBJM4AgQgACABKgIAIAAqAgiSOAIIIABBDGoiACABKgIEIAAqAgCSOAIAC0oBAX9BACECAkAgASoCACAAKgIAYEUNACABKgIEIAAqAgRgRQ0AIAEqAgggACoCCF9FDQAgAUEMaioCACAAQQxqKgIAXyECCyACCzEBAn0gACABKgIAIgMgAioCACIEIAMgBGAbIAEqAgQiAyACKgIEIgQgAyAEYBsQMBoLMQECfSAAIAEqAgAiAyACKgIAIgQgAyAEXRsgASoCBCIDIAIqAgQiBCADIARdGxAwGgvdBAIJfwF+IwBBEGsiAyQAIABBDGoQLhogAEEUahAuGiAAQRxqEC4aIABBJGoQLhogAEEsahAuGiAAQTRqEC4aIABBPGoQLhogAEHYAGoQLhogAEHgAGoQLhogAEHoAGoQLiEEIABB8ABqEC4hBSAAQfgAahAuGiAAQYABahAuGiAAQbABahAuIQYgAEG4AWoQLiEHIABBwAFqEMYBIQggAEHMAWoQxwEaIABB5ANqEMgBGiAAQfQDahDIARogAEGEBGoQyAEaIABBlARqEMgBGiAAQaQEahDIARogAEG0BGoQyAEaIABBxARqEMgBGiAAQdQEahDJARogAEHYBGoQyQEaIABB6ARqEMoBGiAAQfQEahDLARogAEHYBmohCSAAQbgGaiEKIABBjAVqQQAQzAEhCwNAIAoQyAFBEGoiCiAJRw0ACyAAQQBB5AYQ7SsiCiACEFM2AgAgCiACEPUrQQFqNgJMIAogAkEAQQAQYTYCBCAIIApBBGoQzQEgCiAKQeiUAUEAEM4BNgJQIANBCGpD//9/f0P//39/EDAaIAQgAykDCDcCACADQQhqQwAAAD9DAAAAPxAwGiAFIAMpAwg3AgAgCkF/NgKkASAKQf//AzsBoAEgCiAKQa4Bai0AAEEYdEGPnjxyNgCrASADQQhqQ///f39D//9/fxAwGiAHIAMpAwgiDDcCACAGIAw3AgAgCkG4BWogAUG4Mmo2AgAgCiALNgKIBSAKQoCAgPxzNwKABSAKQv////+PgIDAv383AtwEIApBvAVqIAooAgA2AgAgA0EQaiQAIAoLEgAgAEEANgIIIABCADcCACAAC6YBACAAEC4aIABBCGoQLhogAEEQahAuGiAAQRhqEC4aIABBIGoQLhogAEEoahAuGiAAQTBqEC4aIABBwABqEM8BGiAAQcQAahDPARogAEHIAGoQzwEaIABB1ABqEMgBGiAAQeQAahDIARogAEGIAWoQLhogAEGQAWoQ0AEaIABBvAFqENEBGiAAQfABahDSARogAEH8AWoQ0gEaIABBiAJqENMBGiAACyUAIABDAAAAAEMAAAAAEDAaIABBCGpDAAAAAEMAAAAAEDAaIAALCwAgAEEANgEAIAALCgAgABDUARogAAsSACAAQQA2AgggAEIANwIAIAALXQAgABDVARogAEEMahA2GiAAQRhqENYBGiAAQTxqENcBGiAAQcgAahDYARogAEHUAGoQ2QEaIABB4ABqENoBGiAAQfgAahDbARogAEEAQZABEO0rIgAgATYCLCAAC0wBAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahDcARDdASAAKAIAIQILIAAoAgggAkECdGogASgCADYCACAAIAAoAgBBAWo2AgALIwAgASACIAFrQQAgAhsgAEHAAWoQ3gEoAgAQYSICEN8BIAILCwAgAEEANgIAIAALCwAgAEEAQSQQ7SsLEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsVACAAQgA3AQAgAEEGakIANwEAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALCQAgABAvGiAACykBAX8gAEEIaiIBEK0CGiAAQRBqQQA2AgAgAUIANwIAIABCADcCACAACysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQQJ0EFQhAgJAIAAoAggiA0UNACACIAMgACgCAEECdBDsKxogACgCCBBWCyAAIAE2AgQgACACNgIICwszAQF/AkAgACgCACIBQQBKDQBByqoBQcrQAEHmDEHwzQAQAAALIAFBAnQgACgCCGpBfGoLNwEBfwJAQQAoApCHAyIBKAKkNSAARw0AIAEgADYCqDULAkAgASgC3DUgAEcNACABQQE6AOA1CwuRAQEDfwJAIAAoAogFIgEgAEGMBWpHDQAgACgCABDhASAAQfQEaiECAkAgACgC9ARFDQBBACEDA0AgAiADEOIBEOMBGiADQQFqIgMgAigCAEcNAAsLIAEQ5AEaIAIQ5QEaIABB6ARqEOYBGiAAQcwBahDnARogAEHAAWoQ6AEaIAAPC0H7GkHMPkG5FkHnEBAAAAsOAAJAIABFDQAgABBWCws3AAJAAkAgAUEASA0AIAAoAgAgAUoNAQtBxegAQcrQAEHcDEHNigEQAAALIAAoAgggAUH8AGxqCxgAIABB6ABqEOkBGiAAQdwAahDqARog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GiAAQfA2ahChAhogAEH8NmoQogIaIABBiDdqEMYBGiAAQZQ3ahCjAhogAEGgN2oQpAIaIABBrDdqEKUCGiAAQbg3ahClAhogAEH4N2oQyAEhBSAAQaA4ahDIARogAEHMOGoQpgIaIABB9DhqEKYCGiAAQZw5ahCmAhogAEGAOmoQpwIaIABBrDpqEKgCGiAAQcg6aiADEMwBGiAAQdg7aiADEMwBGiAAQfw8ahCpAhogAEG0PWoQyAEaIABB4D1qEKoCGiAAQYA+ahCrAhogAEGcPmoQrAIaIABBqD5qENIBGiAAQbQ+ahCtAhogAEHEPmoQrgIaIABB4D5qEKwCGiAAQew+ahCvAhogAEH4PmoQLiEDIABBgD9qELACGiAAQfzbAGoQ5ygaIABBgN4AahAvGiAAQazeAGoQsQIaIABBuN4AahDGARogAEHE3gBqEC4hBiAAQczeAGoQLiEHIABB3N4AahCyAhogAEHo3gBqELMCGiAAQfTeAGoQtAIaIABBgN8AahC1AhogAEGM3wBqELYCGiAAQaTfAGoQsgIaIABBzN8AahC3AhogAEEANgK0MiAAIAFFOgABIABBADoAACAAQgA3AqwyAkAgAQ0AQbQIQbQIEFQQmwIQ4SghAQsgAEIANwOINCAAQgA3AqQ0IABCgICAgHA3A5A0IABC/////w83A5g0IABCADcD6DQgAEGYAWogATYCACAAQaA0akEAOgAAIABB8DRqQgA3AwAgAEH4NGpCADcDACAAQYA1akEANgIAIABBjDVqQQBBKxDtKxogAEHANWpCADcDACAAQgA3A7g1IAJDAACAv0MAAIC/EDAaIAQgAikDADcDACAAQQA2Auw1IABCADcC5DUgAEIANwPQNSAAQdg1akIANwMAIABB4DVqQQA7AQAgAEHEN2pBAEE0EO0rGiACEMgBGiAFQQhqIAJBCGopAwA3AgAgBSACKQMANwIAIABBADYCvDggAEIANwK0OCAAQQA6ALA4IABBADYCnDggAEEBOgCWOCAAQQA7AZQ4IABB/////wc2ApA4IABCADcDiDggAEF/NgLIOCAAQQA2AJc4IABCfzcDwDggAEIANwLkOSAAQgA3AsQ5IABBzDlqQgA3AgAgAEHUOWpCADcCACAAQdk5akIANwAAIABB/////wc2AvA5IABB/////wc2Auw5IABC//////f/////ADcC9DkgAEH4OmpBuPkANgIAIABBiDxqQcX5ADYCACAAQQA2AvA8IABBADYCxDogAEEAOgD8OSAAQQA2Aug8IABB6zxqQQA2AAAgAEJ/NwL0PCAAQgA3AsQ9IABBzD1qQgA3AgAgAEHUPWpBADYCACAAQQA2AsA+IABC/////w83A9g9IABCADcC7D0gAEH0PWpCADcCACAAQfw9akEANgIAIAJDAAAAAEMAAAAAEDAaIAMgAikDADcDACAAQoCAgICAgIDICjcC5F0gAEH83QBqQf////sHNgIAIABCADcC7F0gAEGAgID4AzYCqF4gAEIANwOgXiAAQoCAgICg4fWRPDcDmF4gAEEAOwGUXiAAQQA2ApBeIABC////+/f//7//ADcC9F0gAkP//39/Q///f38QMBogByACKQMAIgg3AgAgBiAINwIAIABBAjYCwF8gAEEAOgC0XyAAQf////sHNgKwXyAAQgA3ApxfIABBADoAmF8gAEEANgLYXiAAQS47AdReIABBADYCyF8gAEEAOgDEXyAAQoCAgIAgNwO4XyAAQdzfAGpBAEHoAxDtKxogAEF/NgLMYyAAQn83AsRjIABB0OMAakEAQYEYEO0rGiACQRBqJAAgAAuYAQEDfyMAQTBrIgEkAAJAAkAgAC0AAA0AIAAtANVeRQ0BC0HagwFBzD5Bnh9B7N8AEAAACyABQQhqELgCIgJB3RE2AgBB3RFBAEEAEGEhAyACQQQ2AhwgAkEFNgIYIAJBBjYCFCACQQc2AhAgAkEINgIIIAIgAzYCBCAAQejeAGogAhC+AiAAEK0IIABBAToAACABQTBqJAALRgAgAEEQahAuGiAAQRhqEC4aIABBIGoQLhogAEEoahAuGiAAQTBqEC4aIABBPGoQyAEaIABB2ABqEC4aIABBAEHgABDtKwsfACAAQgA3AgAgAEEQakEANgIAIABBCGpCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBGGoQyAEaIAAQogMgAAsoACAAQRRqEC4aIABBHGoQLhogAEEk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0DUgAEIANwPwNCAAQfg0akIANwMAIABB5DZqEMgCIABB8DZqEMkCIABB/DZqEMoCIABBrDdqEMsCIABBuDdqEMsCIABBrDpqEMwCIABByDpqEM4GIABB2DtqEM4GIABBxD5qEM0CIABB4D5qEM4CIABB7D5qEM8CIABBgD5qENACIABBnD5qEM4CIABBtD5qENECIABBrN4AahA8IABBuN4AahD+ASAAQYA/ahDSAiAAQfTeAGoQ0wIgAEHo3gBqENQCAkAgACgCoF8iAUUNAAJAIAFBACgC4PICRg0AIAEQYxoLIABBADYCoF8LIABBpN8AahDVAiAAQQA6AAALCxEAAkAgAEUNACAAENYCEFYLCxEAAkAgAEUNACAAEOIoEFYLC1kBAn8jAEEQayIBJABBACgCkIcDQQA2AtheAkAgAEUNACABQQA2AgwgAUEMahDyAyECIABB8RUQYiIARQ0AIAJCASABNQIMIAAQZhogABBjGgsgAUEQaiQAC10BA39BACECAkAgACgCjF9BAEwNACAAQYzfAGohAwNAAkAgAyACENcCKAIAIAFHDQAgAyACENcCKAIIIQQgACADIAIQ1wIgBBEBAAsgAkEBaiICIAMoAgBIDQALCws2AAJAAkAgAUEASA0AIAAoAgAgAUoNAQtBxegAQcrQAEHcDEHNigEQAAALIAAoAgggAUECdGoLEQACQCAARQ0AIAAQ4AEQVgsLBwAgABDzAwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsPACAAEPQDIABBDGoQ9AMLXgEDfyAAQQxqIQFBACECAkAgACgCDEEATA0AA0ACQCABIAIQhQEoAgQiA0F/Rg0AIAAgAxD1AxD2AxoLIAJBAWoiAiABKAIASA0ACwsgARDHAiAAEPcDIABBADYCGAsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwteAQN/IABBDGohAUEAIQICQCAAKAIMQQBMDQADQAJAIAEgAhCFASgCBCIDQX9GDQAgACADELADEPgDGgsgAkEBaiICIAEoAgBIDQALCyABEMcCIAAQ+QMgAEEANgIYCyMBAX8CQCAAKAIIIgFFDQAgAEIANwIAIAEQViAAQQA2AggLCxgAIABBDGoQ+gMgAEEYahA8IABBJGoQPAsGACAAEDwLIwEBfwJAIAAoAggiAUUNACAAQgA3AgAgARBWIABBADYCCAsLBgAgABA8C/QCACAAQaTfAGoQnAYaIABBjN8AahCdBhogAEGA3wBqEJ4GGiAAQfTeAGoQnwYaIABB6N4AahCgBhogAEHc3gBqEJwGGiAAQbjeAGoQ6AEaIABBrN4AahChBhogAEH82wBqEOUoGiAAQYA/ahCiBhogAEHsPmoQowYaIABB4D5qEKQGGiAAQcQ+ahClBhogAEG0PmoQiwYaIABBqD5qEPIBGiAAQZw+ahCkBhogAEGAPmoQpgYaIABB4D1qEKcGGiAAQdg7ahDkARogAEHIOmoQ5AEaIABBrDpqEKgGGiAAQYA6ahCpBhogAEG4N2oQqgYaIABBrDdqEKoGGiAAQaA3ahCrBhogAEGUN2oQrAYaIABBiDdqEOgBGiAAQfw2ahCtBhogAEHwNmoQrgYaIABB5DZqEK8GGiAAQdw0ahDmARogAEHQNGoQ8wEaIABBxDRqEPMBGiAAQbg0ahDzARogAEGsNGoQ8wEaIABBCGoQsAYaIAALNgACQAJAIAFBAEgNACAAKAIAIAFKDQELQcXoAEHK0ABB3AxBzYoBEAAACyAAKAIIIAFBBHRqCygBAX8CQEEAKAKQhwMiAA0AQeHPAUHMPkGoGkGEkQEQAAALIABBCGoLGgEBf0EAKAKQhwMiAEGAOmpBACAALQCAOhsLDQBBACgCkIcDKwOINAsNAEEAKAKQhwMoApA0Cw0AQQAoApCHA0HIOmoLDQBBACgCkIcDQbgyaguAAQECfyMAQRBrIgEkAEEAKAKQhwMhAiAAEN8CIAAoAlAgABCDAiACQQE6ALI1IAJBAToAljggAUEIaiACQeQBaiAAKAKgBkEMahBKIAIgASkDCDcDyDUCQCAALQAIQQRxDQAgACgCoAYtAAhBBHENACACIAA2Avw0CyABQRBqJAALgQIBA39BACEBAkBBACgCkIcDIgIoAsQ3IABGDQAgAiAANgLENwJAAkAgAEUNAAJAIAItAJc4RQ0AIAJBAToAlTgLIAJBADoAmTggACgCsAYhAwwBC0EAIQMgAkEAOgCZOAsgAkEAOgCUOCACQQA2Asw3IAIgAzYCyDcgAkEANgKMOAsgAEEAEOACAkACQCAARQ0AIAAoAqAGIgFFDQELAkAgAigCpDVFDQAgAigC0DUiA0UNACADKAKgBiABRg0AIAItALI1DQAQhAILAkAgAEUNACABEOECIAEoAgggACgCCHJBgMAAcQ0AIAEQ4gILDwtB7pIBQcw+QYkxQagQEAAAC94BAQR/QQAhAgJAAkBBACgCkIcDIgMoAqw3IgRFDQACQCAARQ0AIARBAUgNACADQaw3aiEFA0ACQCAFIAIQ7gIoAgQiA0UNACADKAIIIgNBgICAIHFFDQQgA0GAgIAIcQ0AIAIhAyACIAUoAgAiBE4NAgNAAkAgBSADEO4CKAIEIgRFDQAgBCgCoAYgACgCoAZGDQILIANBAWoiAyAFKAIAIgRIDQAMAwsACyACQQFqIgIgBSgCACIESA0ACwsgAiAETg0AIAIgARDwAgsPC0G9rwFBzD5Buj5BtBAQAAALjwEBA38CQEEAKAKQhwNBuDRqIgEQxAMoAgAgAEYNACABKAIAIgJBAkgNACACQX5qIQIDQAJAIAEgAhDFAigCACAARw0AIAEgAhDFAiABIAJBAWoQxQIgASgCACACQX9zakECdBDuKxogASABKAIAQX9qEMUCIAA2AgAPCyACQQBKIQMgAkF/aiECIAMNAAsLC5wBAQN/AkBBACgCkIcDQaw0aiIBEMQDKAIAIgIgAEYNACACKAKgBiAARg0AIAEoAgAiAkECSA0AIAJBfmohAgNAAkAgASACEMUCKAIAIABHDQAgASACEMUCIAEgAkEBahDFAiABKAIAIAJBf3NqQQJ0EO4rGiABIAEoAgBBf2oQxQIgADYCAA8LIAJBAEohAyACQX9qIQIgAw0ACwsLgwIBBH8jAEEQayIAJAACQAJAAkBBACgCkIcDIgEoAvw0RQ0AIAEoAqQ1EN8BIAEoAvw0IgJFDQIgAigCoAYiAkUNAgJAIAFB7AFqLQAARQ0AIAFB5AFqIgMQ5AJFDQAgAEEIaiADIAFByDVqEEoCQAJAIAIqAgwgACoCCFwNACACQRBqKgIAIAAqAgxbDQELIAIQ5QIgAiAAQQhqQQEQ5gILIAEoAvw0EN8CDAILEIQCIAFBADYC/DQMAQsgASgC0DUiAkUNACACKAJQIgIgASgCpDVHDQAgAhDfASABQewBai0AAA0AEIQCCyAAQRBqJAAPC0HgDkHMPkHsGkHk8QAQAAALRQEBfwJAQQAoApCHAyIBDQBBh5QBQcw+QYokQbX8ABAAAAsgACABQeQBaiAAGyIAKgIAQwAAeshgIAAqAgRDAAB6yGBxCzYAAkAgAEEJai0AAEEBcQ0AQQAoApCHAyIAKgLYXkMAAAAAX0UNACAAIABBHGoqAgA4AtheCwvCAQECfyMAQRBrIgMkACAAKACrASEEAkACQAJAIAJFDQAgBEEYdEEYdSACcUUNASACEOcCRQ0CCyAAIARBcXE2AKsBIANBCGpD//9/f0P//39/EDAaIAAgAykDCDcCsAEgAyAAKQIMNwMIIAMgARAzIAAgAykDADcCDCADIABBDGogA0EIahBKIABBzAFqIAMQ6AIgAEHkAWogAxDoAiAAQdwBaiADEOgCCyADQRBqJAAPC0GQuQFBzD5BjjNB8y0QAAALCwAgACAAQX9qcUULIgAgACABKgIAIAAqAgCSOAIAIAAgASoCBCAAKgIEkjgCBAuZAgEEfyMAQRBrIgAkAAJAQQAoApCHAyIBKAKkNQ0AIAEoApA1DQACQCABKALENyICRQ0AIAItAJABDQELAkAgAUHYB2otAABFDQACQCABKAL0NCIDRQ0AAkAgA0ELai0AAEEEcUUNACADKAKcAUGAAhDqAkUNAgsgASgC8DQQ3gICQCABQbUBai0AAEUNACADLQAIQQFxDQAgACADEOsCIAAgAUGIB2oQjQINACABQQA2Avw0CyABLQCbNUUNASABQQA2Avw0DAELIAJFDQAQ7AINAEEAEN8CCyABQdkHai0AAEUNABDsAiECAkAgASgC8DQiA0UNACADIAIQ7QJFDQAgASgC8DQhAgsgAkEBEOACCyAAQRBqJAALzgEBBH9BACgCkIcDIQICQAJAIAFBgAFxRQ0AIAANASACKAKsNyEDAkAgAUGAAnFFDQAgA0EASg8LIAMgAigCuDdKDwsgAkGsN2ohAyACKAKsNyEEAkACQCABQYACcUUNAEEAIQECQCAEQQBKDQBBAA8LA0AgAyABEO4CKAIAIABGIgUNAiABQQFqIgEgAygCAE4NAgwACwALQQAhBSAEIAIoArg3IgFMDQAgAyABEO4CKAIAIABGIQULIAUPC0HmrAFBzD5BxD1B+McAEAAACz8BAX8jAEEQayICJAAgACABQQxqIAJBCGogASoCDCABKgIckiABQRBqKgIAIAEQ7wKSEDAQkAEaIAJBEGokAAtmAQR/AkACQEEAKAKQhwMiACgCrDciAUEBSA0AIABBtDdqKAIAIQIDQAJAIAIgAUF/aiIAQSRsaigCBCIDRQ0AIANBC2otAABBCHENAwsgAUEBSiEDIAAhASADDQALC0EAIQMLIAMLTQEDf0EAKAKQhwMiAkGsNGohAyACKAKsNCECAkADQCACQQFIDQECQCADIAJBf2oiAhDFAigCACIEIABHDQBBAQ8LIAQgAUcNAAsLQQALNgACQAJAIAFBAEgNACAAKAIAIAFKDQELQcXoAEHK0ABB3AxBzYoBEAAACyAAKAIIIAFBJGxqCzsCAX0Bf0MAAAAAIQECQCAALQAIQQFxDQBBACgCkIcDIQIgABCPAyACQdQqaioCACIBIAGSkiEBCyABC5sBAQR/AkAgAEEASA0AQQAoApCHAyICKAKsNyAATA0AIAJBrDdqIgMgABDuAigCCCEEIAMgABDuAigCBCEFIAMgABCFAwJAIAFFDQACQAJAIAQNAEEAIQQMAQsCQCAELQCLAQ0AIAVFDQAgBUEAEIMDDwsgAigCjDgNACAEELIDIQQLIAQQ3wILDwtB3uYAQcw+Qdo+QY3MABAAAAuxBAELf0EAKAKQhwMhABDyAkEAIQECQBDsAiICRQ0AQQAhASAAKAL0NCIDRQ0AIAMgAhDzAkEBcyEBCyAAKAIIIgRBEHEhBSAAQbAHaiEGQX8hB0EAIQNBACEIA0ACQCAAIANqIglB2AdqLQAARQ0AQQEhCgJAIAAoAvA0DQAgACgCrDdBAEohCgsgCUHnB2ogCjoAAAsgCUHsAWotAAAiCiAIQQFxciEJAkAgCkUNAAJAIAdBf0YNACAGIANBA3RqKwMAIAYgB0EDdGorAwBjRQ0BCyADIQcLIAlBAEchCCADQQFqIgNBBUcNAAtBASEIQQEhAwJAIAdBf0YNACAAIAdqQecHai0AAEEARyEDCyAFQQBHIQoCQCAALQDsPEUNACAALQDwPEEQcUUhCAsgCiABciEKAkACQAJAAkACQAJAIAMNACAIIApyDQEgACgCxGMiCEF/Rg0DDAQLIApFDQELIABBADYC+DQgAEIANwPwNCAAKALEYyIIQX9HDQJBASEIIAMgCUEAR3FFDQEMAwsgACgCxGMiCEF/Rw0BQQEhCCAAKALwNA0CIAkNAgsgACgCrDdBAEohCAwBCyAIQQBHIQgLIABB1AZqIAg6AAACQAJAIAAoAshjIgNBf0YNACADQQBHIQMMAQsgACgCpDUgAnJBAEchAwsgAEHWBmogACgCzGNBAWpBAUs6AAAgAEHVBmpBASADIARBCXFBAUYbIAMgAEHZBmotAAAbOgAAC4IEAgp/AX4jAEHQAGsiACQAQQAhAQJAQQAoApCHAyICKAL8NCIDRQ0AQQAgAyADQQlqLQAAQQJxGyEBCyAAIAJB+CpqIgMpAwAiCjcDSAJAAkAgAkG0AWotAABFDQAgAEHAAGogAyAAQTBqQwAAgEBDAACAQBAwEMMBDAELIAAgCjcDQAsCQAJAAkAgAigCrDQiBEEBSA0AIAJB5AFqIQUgAkGsNGohBiAAQThqIQcDQAJAIAYgBCIIQX9qIgQQxQIoAgAiAy0AigFFDQAgAy0AkQENACADQQlqLQAAQQJxDQAgByADQewDaikCADcDACAAIAMpAuQDNwMwIABBMGogAEHIAGogAEHAAGogAygCCEHCgIAIcRsQwQEgAEEwaiAFEI0CRQ0AAkAgAy8B1ARFDQAgAEEIaiAAQShqIAMqAgwgAy4B2ASykiADQRBqKgIAIANB2gRqLgEAspIQMCIJIABBIGogAy4B1ASyIANB1gRqLgEAshAwEE0gAEEQaiAJIABBCGoQkAEgBRCNAg0BCyABIAMgARshAQJAIAIoAvw0IglFDQAgAygCoAYgCSgCoAZGDQELIAIgATYC8DQMAwsgCEEBSg0ACwsgAiABNgLwNEEAIQNBACEEIAFFDQELIAEoAqAGIQQLIAIgAzYC+DQgAiAENgL0NCAAQdAAaiQACzABAX8CQCAAKAKgBiABRw0AQQEPCwJAA0AgACABRiICDQEgACgCnAYiAA0ACwsgAgtHAQJ/QQAoApCHAyIAQfwBai0AACIBQQJyIAEgAEH9AWotAAAbIgFBBHIgASAAQf4Bai0AABsiAUEIciABIABB/wFqLQAAGwvzDgIGfwN9IwBBEGsiACQAAkACQAJAAkBBACgCkIcDIgFFDQAgAUEAEMQCEPYCEPcCIAFBAToAnDQgAUEANgKkXiABQQA2Aug0IAEgASgCkDRBAWo2ApA0IAEgASsDiDQgAUEYaiICKgIAu6A5A4g0IAFBuN4AakEAEPgCIAEgASoCwGMgAioCACIGIAEgASgCvGMiAkECdGpB3N8AaiIDKgIAk5I4AsBjIAMgBjgCACABIAJBAWpB+ABvNgK8Y0P//39/IQYCQCABKgLAYyIHQwAAAABeRQ0AQwAAgD8gB0MAAPBClZUhBgsgAUHcBmogBjgCACABQZgBaigCAEEBOgAcEPkCEPoCIAEoAqwyEPsCRQ0BIABDAAAAAEMAAAAAIAFBEGoqAgAgAUEUaioCABByGiABQdgyaiAAQQhqKQMANwIAIAFB0DJqIAApAwA3AgAgAUHIMmogAUHUK2oqAgA4AgAgAUG4MmogAUHYK2oqAgAQuwYgAUHgMmogAUHQK2otAAAiAjYCAAJAIAFB0StqLQAARQ0AIAEoAqwyKAJILQAAQQRxDQAgASACQQJyIgI2AuAyCwJAIAFB0itqLQAARQ0AIAEgAkEEciICNgLgMgsCQCABQQxqLQAAQQhxRQ0AIAEgAkEIcjYC4DILIAFByDpqIgIQvgYgAiABKAKYASgCBBDiBiACEN8GIAFB2DtqIgIQvgYgAiABKAKYASgCBBDiBiACEN8GIAFBgDpqEPwCAkAgAS0A7DxFDQAgAUGEPWooAgAiAiABKAKkNUcNACACEN8BCwJAAkAgASgClDVFDQAgASgCkDUiA0UNASABKAKkNSADRw0EIAFBADYCoDUMBAsgAUIANwKcNSABKAKQNSIDDQMLIAEoAqQ1IQJBACEDDAMLQeHPAUHMPkHFHUH78QAQAAALQdvCAUHMPkHgHUH78QAQAAALIAEgASoCGCIGIAEqApw1kjgCnDUCQCABKAKkNSICIANHDQAgAyECDAELIAEgBiABKgKgNZI4AqA1CyABIAM2ApQ1IAFBADoAmzUgAUEAOgCYNSABQQA2ApA1IAEtAJk1IQMgAUEAOgCZNSABIAM6AJo1AkAgASgCqDUgAkYNACACRQ0AIAEoAtw1IAJHDQAQhAIgASgCpDUhAgsgASoCGCEIAkAgAkUNACABIAggASoCrDWSOAKsNQsgASACNgLcNSABQQA6AOA1IAFBADoAtTUgAUEANgKoNSABQQA6ALA1IAEgASgC0DU2AuQ1IAEgAS0AtDU6AOE1IAEgCCABKgLsNZI4Auw1AkAgASgC5F0iA0UNACACIANGDQAgAUEANgLkXQsCQCACDQAgAUIANwO4NSABQcA1akIANwMACyABQf////sHNgLMPUEAIQIgAUEANgLcPSABQQA7AO08IAEgASgC0D02AtQ9IAFBADYC0D0gAUH8BmoQ9AI2AgAgAUHYGGogAUHYCGpBgBAQ7CsaA0ACQAJAIAEgAmpBgAJqLQAADQBDAACAvyEGDAELQwAAAAAhBiABIAJBAnRqQdgIaioCACIHQwAAAABdDQAgByAIkiEGCyABIAJBAnRqQdgIaiAGOAIAIAJBAWoiAkGABEcNAAsQ/QIQ/gIQ8QIQ4wICQAJAAkAQ7AINACABKALMOUUNASABKgLcOUMAAAAAXkUNAQsgASABKgLEOiABKgIYQwAAwECUkkMAAIA/EFE4AsQ6DAELIAEgASoCxDogASoCGEMAACDBlJJDAAAAABCXATgCxDoLIAFBfzYCzGMgAUEANgLoPCABQn83AsRjIABDAACAP0MAAIA/EDAaIAEgACkDADcCxF4Q/wIQgAMCQAJAIAEoArg0IgIgASgCrDRHDQBD//9/fyEGAkAgAS0AnzQNACABQbgBaioCACIHQwAAAABdDQAgASsDiDS2IAeTIQYLAkAgAkUNACABQaw0aiEEQQAhAwNAIAQgAxDFAigCACICQQA7AZYBIAJBADoAjAEgAiACLQCKASIFOgCLASACQQA6AIoBAkAgBQ0AIAItAOAGDQAgAioC4AQgBl1FDQAgAhD9AQsgA0EBaiIDIAQoAgBHDQALC0EAIQICQCABKAKoPkEATA0AIAFBgD5qIQQgAUGoPmohAwNAAkAgAyACEIEDKgIAQwAAAABgRQ0AIAMgAhCBAyoCACAGXUUNACAEIAIQggMQtAgLIAJBAWoiAiADKAIASA0ACwsCQCABLQCfNEUNABD6AQsgAUEAOgCfNAJAIAEoAsQ3IgJFDQAgAi0AiwENAEEAQQAQgwMLIAFB0DRqQQAQhAMgAUG4N2pBABCFAyABQZQ3aiICQQAQhgMgAEEANgIAIAIgABCHAyABQaA3akEAEIgDIAEoAsQ3QQAQ4AIQiQMgAUEBOgCdNCAAQwAAyENDAADIQxAwQQQQigNB/yJBAEEAEIsDGiABKALsNC0AkgFFDQEgAUEBEMQCIABBEGokAA8LQeriAEHMPkHQHkH78QAQAAALQefrAEHMPkH9HkH78QAQAAAL5QQCAn8BfQJAAkACQAJAAkACQAJAAkACQAJAAkBBACgCkIcDIgAtAABFDQAgACgCkDQhAQJAAkAgAEEYaioCAEMAAAAAXg0AIAFFDQFBx+oBQcw+QbI2QdYxEAAACyABRQ0AIAAoApQ0IAFHDQILIABBEGoqAgBDAAAAAGBFDQIgAEEUaioCAEMAAAAAYEUNAiAAQZgBaigCACIBKAKoCEEATA0DIAFBqAhqQQAQjAMoAgAQ+wJFDQQgAEHUK2oqAgBDAAAAAF5FDQUgAEHYK2oqAgBDAAAAAF5FDQYgACoCmCoiAkMAAAAAYEUNByACQwAAgD9fRQ0HIABBrCpqKgIAQwAAgD9gRQ0IIABBsCpqKgIAQwAAgD9gRQ0IIABBvCpqKAIAQQFqQQNPDQpBACEBA0ACQCAAIAFBAnRqQTRqKAIAQQFqQYEESQ0AQaXYAUHMPkG9NkHWMRAAAAsgAUEBaiIBQRZHDQALAkAgAC0ACEEBcUUNACAAQeQAaigCAEF/Rg0KCwJAIABBtAFqLQAARQ0AIABBDGotAABBAnENACAAQQA6ALQBCw8LQYj9AEHMPkGxNkHWMRAAAAtB1skBQcw+QbM2QdYxEAAAC0Hu6QFBzD5BtDZB1jEQAAALQefNAUHMPkG1NkHWMRAAAAtB4c4BQcw+QbY2QdYxEAAAC0Gt6AFBzD5BtzZB1jEQAAALQeznAUHMPkG4NkHWMRAAAAtBoecBQcw+Qbk2QdYxEAAAC0GI1AFBzD5BujZB1jEQAAALQc7RAUHMPkHBNkHWMRAAAAtB3SRBzD5BuzZB1jEQAAALtgECAn8BfQJAAkBBACgCkIcDIgAtANVeDQAgAEH03gBqEI0DRQ0BAkAgAEEgaigCACIBRQ0AIAEQjgMLIABBAToA1V4LAkAgACoC2F4iAkMAAAAAXkUNACAAIAIgAEEYaioCAJMiAjgC2F4gAkMAAAAAX0UNAAJAAkAgAEEgaigCACIBRQ0AIAEQwwIMAQsgAEHYBmpBAToAAAsgAEEANgLYXgsPC0HJwAFBzD5Bus4AQcgyEAAACyIAAkAgACgCBCABTg0AIAAgACABENwBEN0BCyAAIAE2AgALNAECfwJAQQAoApCHAyIAQaQBaigCACIBDQAgAEGYAWooAgBBqAhqQQAQjAMoAgAhAQsgAQviAQMCfwJ9AX4CQAJAIABFDQBBACgCkIcDIQEgABD7AkUNAEMAAAAAIQMgACoCzAEiBEMAAAAAXkUNASABIAA2AqwyIAFDAACAPyAEIAFBnAFqKgIAIAAqAiiUlBCXATgCtDICQCABKALsNCICRQ0AIAIQjwMhAyABKAKsMiEACyABIAM4ArAyIAAoAkgiAikCICEFIAFBhDRqIAJBKGo2AgAgASAFNwO4MiABQcQyaiADOAIAIAFBwDJqIAA2AgAPC0HCwgFBzD5BuzFBuyEQAAALQcjcAEHMPkG8MUG7IRAAAAsEAEEBC1oCAX8BfiMAQRBrIgEkACAAQgA3AgQgAEEAOgAAIABBDGpCADcCACABQQhqQwAAAABDAAAAABAwGiAAIAEpAwgiAjcCHCAAIAI3AiQgACACNwIUIAFBEGokAAvgGQMIfwN9AX4jAEHQAGsiACQAQQAhAUEAKAKQhwMiAkIANwLEOSACQdcGakEAOgAAIAIoAggiA0EBcSEEAkAgA0ECcUUNACACQQxqLQAAQQFxRQ0AQQEhASACKAL0N0EERg0AAkAgAkGABmoqAgBDAAAAAF4NACACQYgGaioCAEMAAAAAXg0AIAJBhAZqKgIAQwAAAABeDQAgAkGMBmoqAgBDAAAAAF4NACACQZAGaioCAEMAAAAAXg0AIAJBlAZqKgIAQwAAAABeDQAgAkGYBmoqAgBDAAAAAF4NACACQZwGaioCAEMAAAAAXkUNAQsgAkEENgL0NwsCQCAERQ0AAkAgAkHkAGooAgAQkANFDQAgAkEDNgL0NyACQYAGakGAgID8AzYCAAsCQCACQegAaigCABCQA0UNACACQQM2AvQ3IAJBiAZqQYCAgPwDNgIACwJAIAJB7ABqKAIAEJADRQ0AIAJBAzYC9DcgAkGEBmpBgICA/AM2AgALAkAgAkE4aigCABCQA0UNACACQQM2AvQ3IAJBxAZqQYCAgPwDNgIACwJAIAJBPGooAgAQkANFDQAgAkEDNgL0NyACQcgGakGAgID8AzYCAAsCQCACQcAAaigCABCQA0UNACACQQM2AvQ3IAJBzAZqQYCAgPwDNgIACwJAIAJBxABqKAIAEJADRQ0AIAJBAzYC9DcgAkHQBmpBgICA/AM2AgALAkAgAkH8AWotAAAiA0UNACACQbgGakGAgID8AzYCAAsCQCACQf0Bai0AAEUNACACQbwGakGAgID8AzYCAAsgAkH+AWotAABFDQAgAw0AIAJBwAZqQYCAgPwDNgIACyACQawpaiACQdgoakHUABDsKxpBACEDA0BDAACAvyEIAkAgAiADQQJ0aiIFQYAGaioCAEMAAAAAXkUNAEMAAAAAIQggBUHYKGoqAgAiCUMAAAAAXQ0AIAkgAioCGJIhCAsgBUHYKGogCDgCACADQQFqIgNBFUcNAAsCQCACKAKcOEUNAAJAIAItAJY4RQ0AIAItAJo4RQ0BCxCRAwsgAkEANgKcOCACQQA7AJk4IAJBADYC5DcCQCACLQCwOEUNABCSAwsCQAJAAkACQAJAIAIoArg4QQJHDQAgAi0AsDhFDQECQCACQdA4aigCAA0AIAJBoDlqKAIADQAgAkEAOgCWOAsgAkEANgK4OAsCQCACLQCVOEUNACACLQCUOEUNAAJAIAItAAhBBHFFDQAgAkEMai0AAEEEcUUNACACLQCWOA0AIAItAJc4RQ0AIAIoAsQ3RQ0AIABBwABqEJMDIAJB5AFqIAApA0AiCzcCACACQYAHaiALNwMAIAJBAToA1wYLIAJBADoAlTgLIAJBADYC4DcgAkEAOgCUOCACKAKMOEECTw0BAkAgAigCxDciA0UNACADEJQDIAIoAsQ3IgNFDQAgAygCrAZFDQAgAigCjDgNACADQQA2AqwGCxCVAwJAAkAgASAEQQBHckEBRw0AIAIoAsQ3IgMNAQsgAkHZBmpBADoAAAwDCyACQdkGaiADKAIIQYCAEHEiA0ESdkEBczoAACADDQIgAigCyDdFDQIgAi0AljgNAkEBIQMMAwtBihxBzD5BlMUAQczsABAAAAtB86gBQcw+QarFAEHM7AAQAAALIAIoAsw5QQBHIQMLIAJB2gZqIAM6AAACQAJAAkACQAJAAkACQAJAAkBBAUEBEJYDRQ0AAkAgAigCpDVFDQBBARCXAw0BEIQCDAELAkAgAigCxDciA0UNACADKAIIQYCAgChxQYCAgAhHDQAgAygCnAYiBUUNACADKAJURQ0CIAUQ3wIgAygCVEEAQQAQmAMgAkEAOgCUOCACLQCXOEUNASACQQE6AJU4DAELAkAgAigCrDdBAUgNACACQaw3aiIDEJkDKAIEQQtqLQAAQQhxDQEgAygCAEF/akEBEPACDAELAkAgAigCjDhFDQBBABCaAwwBCwJAIANFDQAgAygCCEGAgIAocUGAgIAIRg0AIANBADYCsAYLIAJCADcDyDcLIAJCADcD0DcgAkHYN2pCADcDACACQdA3aiEDIAIoAsg3RQ0FIAItAJY4DQUgAigCzDkNBSACKALENyIFRQ0GIAVBCmotAABBBHENBQJAQQAQmwMNACACKAKkNSIFRQ0FIAIoAsg3IQYMAgtBAEEBEJYDIQcgAigCyDchAQJAIAIoAqQ1IgUNACAHRQ0AIAMgATYCAAwDCyAFRQ0CAkAgBSABRg0AIAEhBgwCCyACIAU2AtQ3IAEhBiAFIQEgB0UNAQwDC0H3rgFBzD5Bx8UAQczsABAAAAsgBSAGRg0CDAMLIAIgATYC1DcgB0UNAQsgAiABNgLYNwtBAkEBEJYDRQ0AIAIgAigCyDc2Atw3CyACKALENyIFRQ0AQQAhByAFQQpqLQAAQQRxRQ0BIAJBAToAljgMAQtBACEFQQEhBwsCQAJAAkACQAJAIAMoAgAiA0UNACACKALUNyADRw0BCyACQQA6ALA4AkAgAigC8DciA0UNACACIAM2Atg3IAIgAzYC3DcgAiADNgLUNyACIAM2AtA3CyACQQA2AvA3AkACQCACKAK4OCIBDQAgAkEANgK0OCACQX82AsA4AkAgBw0AIAIoAsw5DQAgBUEKai0AAEEEcQ0AAkBBABCcAw0AAkBBBEEDEJYDDQBBEUEDEJYDRQ0BCyACQQA2AsA4CwJAQQEQnAMNAAJAQQVBAxCWAw0AQRJBAxCWA0UNAQsgAkEBNgLAOAsCQEECEJwDDQACQEEGQQMQlgMNAEETQQMQlgNFDQELIAJBAjYCwDgLQQMQnAMNAAJAQQdBAxCWAw0AQRRBAxCWA0UNAQsgAkEDNgLAOAsgAiACKALAOCIDNgLIOAwBCyACKALAOCIDQX9GDQIgAigCyDhBf0YNAiABQQFHDQMgAkECNgK4OAtDAAAAACEIAkAgBEUNABCdAyEIIAIoAsA4IQMLAkACQAJAIANBf0YNACACQQE6ALA4IAIgAzYCxDggAiACQfwGaigCADYCvDgMAQsgAi0AsDhFDQELIAIoAsg3DQAgAkEANgKcOCACQYECOwCZOCACQQA6AJY4CxCeAwJAIAIoAsQ3IgNFDQAgA0EKai0AAEEEcQ0AIAIoAsw5DQACQAJAIAMQjwNDAADIQpQgAioCGJRDAAAAP5IiCYtDAAAAT11FDQAgCaghBQwBC0GAgICAeCEFCyAFsiEJAkAgA0HEAmooAgANACADQdECai0AAEUNACACLQCwOEUNAAJAIAIoAsA4IgVBAUsNACADIAkgCYwgBRsgAyoCWJIQNBCfAyACKALAOCEFCyAFQX5xQQJHDQAgAyAJjCAJIAVBAkYbIANB3ABqKgIAkhA0EKADCyAAQcAAakEEQQBDzczMPUMAACBBEKEDAkAgACoCQCIKQwAAAABbDQAgAy0AiAFFDQAgAyAKIAmUIAMqAliSEDQQnwMLIAAqAkQiCkMAAAAAWw0AIAMgCiAJlCADQdwAaioCAJIQNBCgAwsgAkHMOGoQogMgAkH0OGoQogMgAkGcOWoQogMCQCACLQCwOEUNACACKAL0N0EERw0AIAIoAow4DQAgAEE4aiACKALENyIDQfQDaiADQQxqIgUQSiAAQQhqIABBOGogAEEwakMAAIA/QwAAgD8QMBBKIABBIGogA0H8A2ogBRBKIABBKGogAEEgaiAAQRhqQwAAgD9DAACAPxAwEE0gAEHAAGogAEEIaiAAQShqEJABIgUgAyACKAKMOEEEdGpBuAZqEMIBDQAgAxCPAyEJIAUgAEEIaiAFEKMDIAlDAAAAP5QiCRBRjCAFEKQDIAkQUYwQMBDBASADIAIoAow4QQR0akG4BmogBRClAyACQgA3A8g3CwJAAkAgAigCxDciA0UNACAAQcgAaiADIAIoAow4QQR0aiIFQcAGaikCADcDACAAIAVBuAZqKQIANwNADAELIABBwABqQwAAAABDAAAAAEMAAAAAQwAAAAAQpgMaIAIoAsQ3IQMLAkACQCADRQ0AIABBOGogA0EMaiAAQcAAahBNIABBMGogAigCxDdBDGogAEHIAGoQTSAAQQhqIABBOGogAEEwahCQARoMAQsgAEEIahCnAwsgAiAAKQMINwL4NyACQYA4aiIDIABBEGopAwA3AgAgAkH4N2oiBSAIEKgDIAMgAioC+DdDAACAP5IgAyoCABBRIgg4AgAgAiAIOAL4NyAFEKkDDQMgAkEANgKIOCAAQdAAaiQADwtBz4QBQcw+QfXFAEHM7AAQAAALQcvvAEHMPkGQxgBBzOwAEAAAC0GW/QBBzD5BkcYAQczsABAAAAtBo8IBQcw+QeDGAEHM7AAQAAALswcED38BfgJ9AXwjAEEQayIAJAACQEEAKAKQhwMiAUHkAWoiAhDkAkUNACAAQQhqIAIQMyABIAApAwgiDzcC5AEgASAPNwP4PgsCQAJAIAIQ5AJFDQAgAUGAB2oiAxDkAkUNACAAQQhqIAIgAxBKIAFB9AZqIAApAwgiDzcCAAwBCyAAQQhqQwAAAABDAAAAABAwGiABQfQGaiAAKQMIIg83AgALAkACQCAPp75DAAAAAFwNACAPQiCIp75DAAAAAFsNAQsgAUEAOgCXOAsgAUGAB2ogASkC5AE3AwAgAUEIaiEEQQAhAwNAAkACQCABIANqIgVB7AFqIgYtAABFDQAgBCADQQJ0aiIHQewHaiIIKgIAIRAgBCADaiIJQdoHaiIKQQA6AABDAAAAACERIAlB0AdqIgsgEEMAAAAAXSIMOgAAIAdBgAhqIBA4AgACQCAMDQAgECABKgIYkiERCyAIIBE4AgAgBUHdB2oiCEEAOgAAAkAgEEMAAAAAXUUNAAJAAkAgASoCKCABKwOINCISIAEgA0EDdCIMaiINQbAHaiIOKwMAobZeRQ0AAkACQCACEOQCRQ0AIABBCGogAiANQYgHahBKDAELIABBCGpDAAAAAEMAAAAAEDAaCwJAIABBCGoQSyABKgIsIhAgEJRdRQ0AIAhBAToAAAsgDiABKgIoQwAAAMCUuzkDAAwBCyAOIBI5AwALIAQgDGoiDEGAB2ogASkC5AE3AwAgCUHkB2ogCC0AADoAACAAQQhqQwAAAABDAAAAABAwGiAMQZQIaiAAKQMINwIAIAdBvAhqQQA2AgAMAgsCQAJAIAIQ5AJFDQAgAEEIaiACIAEgA0EDdGpBiAdqEEoMAQsgAEEIakMAAAAAQwAAAAAQMBoLIAdBvAhqIQcgByAHKgIAIABBCGoQSxCXATgCACAEIANBA3RqIglBlAhqIQcgByAHKgIAIAAqAggiEIwgECAQQwAAAABdGxCXATgCACAJQZgIaiEHIAcgByoCACAAKgIMIhCMIBAgEEMAAAAAXRsQlwE4AgAMAQsgBCADaiIHQdAHaiILQQA6AAAgB0HaB2oiCiAEIANBAnRqIglB7AdqIggqAgAiEEMAAAAAYDoAACAIQYCAgPx7NgIAIAlBgAhqIBA4AgAgB0HVB2pBADoAAAsCQCAGLQAADQAgCi0AAA0AIAVB7AdqQQA6AAALAkAgCy0AAEUNACABQQA6AJc4CyADQQFqIgNBBUcNAAsgAEEQaiQAC5UHAgR/A30jAEEgayIAJAACQEEAKAKQhwMiASgCgDVFDQAgASABKgKMNSABQRhqKgIAkzgCjDUCQAJAQQAQ5AJFDQAgAEEYaiABQeQBaiABQYQ1ahBKIABBGGoQSyABQTBqKgIAIgQgBJReRQ0AIAFBADYCjDUMAQsgASoCjDVDAAAAAF9FDQELIAFBADYCjDUgAUEANgKANQsCQAJAIAFB9AFqKgIAIgRDAAAAAFwNACABQfgBaioCAEMAAAAAWw0BCwJAIAEoAqQ1RQ0AIAEtALY1DQELAkAgASgClDVFDQAgAS0AmjUNAQsCQCABKAKANSICDQAgASgC8DQiAkUNAQsgAi0AjQENAAJAIARDAAAAAFsNAAJAIAFB/AFqLQAARQ0AIAFBoAFqLQAARQ0BIAIQqgMgAiACKgKABSIEIAEqAvQBQ83MzD2UkkMAAAA/QwAAIEAQqwMiBTgCgAUgAkELai0AAEEBcQ0CIABBCGogAkEUaiIDQwAAgD8gBSAElSIEkxAyIAAgAUHkAWogAkEMaiIBEEogAEEQaiAAQQhqIAAQrAMgAEEYaiAAQRBqIAMQrQMgAEEQaiABIABBGGoQTSACIABBEGpBABDmAiAAQQhqIAMgBBAyIABBEGogAEEIahAzIAIgACkDEDcCFCAAQQhqIAJBHGogBBAyIABBEGogAEEIahAzIAIgACkDEDcCHAwCCyABQf0Bai0AAA0AIAIQqgMCQCACKAIIIgNBgICACHFFDQADQAJAIAJB5ABqKgIAQwAAAABbDQAgA0GQBHFBEEcNAgsgAigCnAYiAigCCCIDQYCAgAhxDQALCyADQZAEcQ0AIAJB9ANqEKQDIQUgAhCPAyEGIAIgAkHcAGoqAgAgBCAGQwAAoECUIAVDH4UrP5QQURA0lJMQoAMLAkACQCABQfgBaioCACIEQwAAAABbDQAgAUH9AWotAABFDQELIAEqAvQBIgRDAAAAAFsNASABQf0Bai0AAEUNAQsgBEMAAAAAWw0AIAFB/AFqLQAADQAgAhCqAwJAIAIoAggiAUGAgIAIcUUNAANAAkAgAioCYEMAAAAAWw0AIAFBkARxQRBHDQILIAIoApwGIgIoAggiAUGAgIAIcQ0ACwsgAUGQBHENACACQfQDahCjAyEGIAIQjwMhBSACIAIqAlggBCAFIAWSIAZDH4UrP5QQURA0lJMQnwMLIABBIGokAAuMAwEEf0EAIQACQEEAKAKQhwMiASgCxDciAkUNACACLQCKAUUNACACQQpqLQAAQQRxDQAgAUH8AWotAAANAEEAQQEQrgMhAAsgASAAOgD8OQJAAkACQCABKAKkNQ0AIAANAQsgASgC6DkhAAwBCyABQf////8HNgL0OSABIAEoAsQ3IgA2Aug5AkAgASgCyDdFDQAgASgCkDgiAkH/////B0YNACABIAJBf0EBIAFB/QFqLQAAG2pBAWo2Avg5DAELIAFBACABQf0Bai0AAEEBcWs2Avg5CyABQQA2AuQ5IAFC//////f/////ADcC7DkCQCAARQ0AIAEgADYC5DkCQCABKAL0OSICQf////8HRg0AIABBqANqKAIAIgNBf0YNACABIAIgA0EBahCvAzYC7DkLAkAgASgC+DkiAkH/////B0YNACAAQawDaigCACIAQX9GDQAgASACIABBAWoQrwM2AvA5CyABQQA2Aug5IAFC//////f/////ADcC9DkLIAFB/////wc2ApA4CzYAAkACQCABQQBIDQAgACgCACABSg0BC0HF6ABBytAAQdwMQc2KARAAAAsgACgCCCABQQJ0agsJACAAIAEQsAMLpwEBA39BACECQQAoApCHAyIDKAK4NEF/aiEEAkAgAEUNACAEIAAQsQMiAEF/aiAAQX9GGyEECwJAIARBAEgNACADQbg0aiEDA0ACQCADIAQiABDFAigCACIEIAFGDQAgBC0AiwFFDQAgBCgCCCICQYCAgAhxDQAgAkGAhBBxQYCEEEYNACAEELIDIQIMAgsgAEF/aiEEQQAhAiAAQQBKDQALCyACEN8CCyIAAkAgACgCBCABTg0AIAAgACABELMDELQDCyAAIAE2AgALIgACQCAAKAIEIAFODQAgACAAIAEQtQMQtgMLIAAgATYCAAsiAAJAIAAoAgQgAU4NACAA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IAMQ2gQLAkAgBEMAAAAAWw0AQQ8QmwNFDQAgACAEENoECyAFQRBqJAALXQEBfyMAQRBrIgEkACAAQQA2AgggAEIANwIAIABB////+wc2AhQgAEL////79///v/8ANwIMIAEQyAEaIABBIGogAUEIaikDADcCACAAIAEpAwA3AhggAUEQaiQACw0AIAAqAgggACoCAJMLEAAgAEEMaioCACAAKgIEkwt1AgF/AX4jAEEwayICJAAgAiABKQIIIgM3AxAgAiADNwMgIAJBKGogACABIAJBEGoQ0AQgACACKQMoNwIAIAIgASkCCCIDNwMIIAIgAzcDGCACQShqIABBCGogASACQQhqENAEIAAgAikDKDcCCCACQTBqJAALGQAgACABIAIQMBogAEEIaiADIAQQMBogAAsrAQF/IABDAAAAAEMAAAAAQQAoApCHAyIBQRBqKgIAIAFBFGoqAgAQpgMaCyEAIAAgACoCBCABkjgCBCAAQQxqIgAgACoCACABkjgCAAscACAAKgIAIAAqAgheIAAqAgQgAEEMaioCAF5yCzwBAX8CQEEAKAKQhwMiASgCgDUgAEYNACABIAA2AoA1IAFBgICAgAQ2Aow1IAEgAUHkAWopAgA3AoQ1CwsUACABIAIgACAAIAJeGyAAIAFdGwsdACAAIAEqAgAgAioCAJQgASoCBCACKgIElBAwGgsdACAAIAEqAgAgAioCAJUgASoCBCACKgIElRAwGgswAQF/QQAhAgJAQQAoApCHAyAAQQJ0akE0aigCACIAQQBIDQAgACABEKUEIQILIAILCgAgASAAaiABbws3AAJAAkAgAUEASA0AIAAoAgAgAUoNAQtBxegAQcrQAEHcDEHNigEQAAALIAAoAgggAUGoBGxqC0EBAn9BACgCkIcDIgFBuDRqIQIgASgCuDQhAQNAAkAgAUEBTg0AQX8PCyACIAFBf2oiARDFAigCACAARw0ACyABCyMBAX8CQAJAIAAoAqwGIgFFDQAgAS0AiwENAQsgACEBCyABCysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQQJ0EFQhAgJAIAAoAggiA0UNACACIAMgACgCAEECdBDsKxogACgCCBBWCyAAIAE2AgQgACACNgIICwsr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DAwCCyALIAxcDQACQAJAIA4gACoCECILXUUNACAAIA44AhAMAQsgDiALXA0BIA8gCiABQX5xQQJGG0MAAAAAXUUNAQtBASECCyAMQ///f39cDQEgByAAKgIUXUUNASADKAKMOEEBRw0BIAMoAsQ3QQtqLQAAQRBxDQECQAJAIAQNACAGQwAAAABdDQELAkAgBEEBRw0AIAZDAAAAAF4NAQsCQCAEQQJHDQAgDUMAAAAAXQ0BCyAEQQNHDQIgDUMAAAAAXkUNAgsgACAHOAIUC0EBIQILIAIPC0HmgQFBzD5B+8EAQYTKABAAAAs4ACAAIAI2AgQgACABNgIAIAAgAUHMAmooAgA2AgggACADKQIANwIYIABBIGogA0EIaikCADcCAAsOACAAEL0EKQLMATcCAAtCAQJ/IwBBEGsiASQAEIEEIgIgACkCADcCzAEgAUEIaiACQeQBaiIAIAJBzAFqEMMBIAAgASkDCDcCACABQRBqJAALOAECfyMAQRBrIgEkACABQQhqEL0EIgJBzAFqIAJBDGoQSiAAIAFBCGogAkHYAGoQTSABQRBqJAALGQEBfxC9BCIAKgLMASAAKgIMkyAAKgJYkgsjAQF/EL0EIgBB0AFqKgIAIABBEGoqAgCTIABB3ABqKgIAkgtcAQJ/IwBBEGsiASQAIAEQgQQiAkEMaiACQdgAahBKIAFBCGogASAAEE0gAiABKQMINwLMASABQQhqIAJB5AFqIgAgAkHMAWoQwwEgACABKQMINwIAIAFBEGokAAs0AQF/EIEEIgEgASoCDCABKgJYkyAAkiIAOALMASABQeQBaiEBIAEgASoCACAAEJcBOAIACz4BAX8QgQQiAUHQAWogAUEQaioCACABQdwAaioCAJMgAJIiADgCACABQegBaiEBIAEgASoCACAAEJcBOAIACxYBAX8gABC9BCIBQdwBaiABQQxqEEoLVwECf0EAKAKQhwMhARCBBCECAkAgAEMAAAAAXA0AIAFBgCtqKgIAIQALIAJBjAJqIgEgACABKgIAkiIAOAIAIAIgACACKgIMkiACQZACaioCAJI4AswBC1cBAn9BACgCkIcDIQEQgQQhAgJAIABDAAAAAFwNACABQYAraioCACEACyACQYwCaiIBIAEqAgAgAJMiADgCACACIAAgAioCDJIgAkGQAmoqAgCSOALM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ASkDADcCACABQ7gehT5DPQoXP0NI4Xo/QwAAgD8QchogAEGMBGogAikDADcCACAAQYQEaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DzczMPhByGiAAQZwEaiACKQMANwIAIABBlARqIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0MAAIA/EHIaIABBrARqIAIpAwA3AgAgAEGkBGogASkDADcCACABQ4/CdT1DFK4HP0NI4Xo/QwAAgD8QchogAEG8BGogAikDADcCACAAQbQEaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DUriePhByGiAAQcwEaiACKQMANwIAIABBxARqIgcgASkDADcCACABQ7gehT5DPQoXP0NI4Xo/Q83MTD8QchogAEHcBGoiCCACKQMANwIAIABB1ARqIgkgASkDADcCACABQ7gehT5DPQoXP0NI4Xo/QwAAgD8QchogAEHsBGogAikDADcCACAAQeQEaiIKIAEpAwA3AgAgAEH8BGogAykCADcCACAAQfQEaiAEKQIANwIAIAFDzczMPUPNzMw+QwAAQD9DFK5HPxByGiAAQYwFaiACKQMANwIAIABBhAVqIAEpAwA3AgAgAUPNzMw9Q83MzD5DAABAP0MAAIA/EHIaIABBnAVqIAIpAwA3AgAgAEGUBWogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/Q83MTD4QchogAEGsBWogAikDADcCACAAQaQFaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DH4UrPxByGiAAQbwFaiACKQMANwIAIABBtAVqIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0MzM3M/EHIaIABBzAVqIAIpAwA3AgAgAEHEBWogASkDADcCACABIAcgBkPNzEw/ELcGIABB3AVqIAIpAwA3AgAgAEHUBWoiAyABKQMANwIAIABB7AVqIAgpAgA3AgAgAEHkBWogCSkCADcCACABIAogBkOamRk/ELcGIABB/AVqIAIpAwA3AgAgAEH0BWoiBiABKQMANwIAIAEgAyAFQ83MTD8QtwYgAEGMBmogAikDADcCACAAQYQGaiABKQMANwIAIAEgBiAFQ83MzD4QtwYgAEGcBmogAikDADcCACAAQZQGaiABKQMANwIAIAFD9igcP0P2KBw/Q/YoHD9DAACA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ACAAQewFaiAGKQIANwIAIABB5AVqIAcpAgA3AgAgASAIIARDmpkZPxC3BiAAQfwFaiACKQMANwIAIABB9AVqIgQgASkDADcCACABIAUgA0PNzEw/ELcGIABBjAZqIAIpAwA3AgAgAEGEBmogASkDADcCACABIAQgA0PNzMw+ELcGIABBnAZqIAIpAwA3AgAgAEGUBmogASkDADcCACABQwAAgD9DAACAP0MAAIA/QwAAgD8QchogAEGsBmogAikDADcCACAAQaQGaiABKQMANwIAIAFDZmZmP0MzMzM/QwAAAABDAACAPxByGiAAQbwGaiACKQMANwIAIABBtAZqIAEpAwA3AgAgAUNmZmY/QzMzMz9DAAAAAEMAAIA/EHIaIABBzAZqIAIpAwA3AgAgAEHEBmogASkDADcCACABQwAAgD9DmpkZP0MAAAAAQwAAgD8QchogAEHcBmogAikDADcCACAAQdQGaiABKQMANwIAIAFDcT2KPkNxPYo+Q1yPwj5DAACAPxByGiAAQewGaiACKQMANwIAIABB5AZqIAEpAwA3AgAgAUNSuJ4+Q1K4nj5DZmbmPkMAAIA/EHIaIABB/AZqIAIpAwA3AgAgAEH0BmogASkDADcCACABQ7gehT5DuB6FPkMpXI8+QwAAgD8QchogAEGMB2ogAikDADcCACAAQYQHaiABKQMANwIAIAFDAAAAAEMAAAAAQwAAAABDAAAAABByGiAAQZwHaiACKQMANwIAIABBlAdqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0MpXI89EHIaIABBrAdqIAIpAwA3AgAgAEGkB2ogASkDADcCACABQwAAAABDAAAAAEMAAIA/QzMzsz4QchogAEG8B2ogAikDADcCACAAQbQHaiABKQMANwIAIAFDAACAP0MAAIA/QwAAAABDZmZmPxByGiAAQcwHaiACKQMANwIAIABBxAdqIAEpAwA3AgAgAEHcB2ogBikCADcCACAAQdQHaiAHKQIANwIAIAFDAACAP0MAAIA/QwAAgD9DMzMzPxByGiAAQewHaiACKQMANwIAIABB5AdqIAEpAwA3AgAgAUPNzEw/Q83MTD9DzcxMP0PNzEw+EHIaIABB/AdqIAIpAwA3AgAgAEH0B2ogASkDADcCACABQ83MTD5DzcxMPkPNzEw+QzMzsz4QchogAEGMCGogAikDADcCACAAQYQIaiABKQMANwIAIAFBEGokAAvNFQEIfyMAQRBrIgEkAAJAIAANABCZASEACyABQwAAAABDAAAAAEMAAAAAQwAAgD8QchogAEHMAWogAUEIaiICKQMANwIAIAAgASkDADcCxAEgAUOamRk/Q5qZGT9DmpkZP0MAAIA/EHIaIABB3AFqIAIpAwA3AgAgAEHUAWogASkDADcCACABQ9ejcD9D16NwP0PXo3A/QwAAgD8QchogAEHsAWogAikDADcCACAAQeQBaiABKQMANwIAIAFDAAAAAEMAAAAAQwAAAABDAAAAABByGiAAQfwBaiACKQMANwIAIABB9AFqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0NI4Xo/EHIaIABBjAJqIAIpAwA3AgAgAEGEAmogASkDADcCACABQwAAAABDAAAAAEMAAAAAQ5qZmT4QchogAEGcAmogAikDADcCACAAQZQCaiABKQMANwIAIAFDAAAAAEMAAAAAQwAAAABDAAAAABByGiAAQawCaiACKQMANwIAIABBpAJqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0MAAIA/EHIaIABBvAJqIAIpAwA3AgAgAEG0AmogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/Q83MzD4QchogAEHMAmogAikDADcCACAAQcQCaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DH4UrPxByGiAAQdwCaiACKQMANwIAIABB1AJqIAEpAwA3AgAgAUOPwnU/Q4/CdT9Dj8J1P0MAAIA/EHIaIABB7AJqIAIpAwA3AgAgAEHkAmoiAyABKQMANwIAIAFDhetRP0OF61E/Q4XrUT9DAACAPxByGiAAQfwCaiACKQMANwIAIABB9AJqIgQgASkDADcCACABQwAAgD9DAACAP0MAAIA/Q1yPAj8QchogAEGMA2ogAikDADcCACAAQYQDaiABKQMANwIAIAFD9ihcP0P2KFw/Q/YoXD9DAACAPxByGiAAQZwDaiACKQMANwIAIABBlANqIAEpAwA3AgAgAUNI4Xo/Q0jhej9DSOF6P0MUrgc/EHIaIABBrANqIAIpAwA3AgAgAEGkA2ogASkDADcCACABQ9ejMD9D16MwP0PXozA/Q83MTD8QchogAEG8A2ogAikDADcC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CCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEobBBUIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBKGwQ7CsaIAAoAggQVgsgACABNgIEIAAgAjYCCAsLKwACQAJAIAAoAgQiAA0AQQghAAwBCyAAQQJtIABqIQALIAAgASAAIAFKGwsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEEdBBUIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBBHQQ7CsaIAAoAggQVgsgACABNgIEIAAgAjYCCAsLKwACQAJAIAAoAgQiAA0AQQghAAwBCyAAQQJtIABqIQALIAAgASAAIAFKGwtMAQJ/AkAgACgCBCABTg0AIAFBAnQQVCECAkAgACgCCCIDRQ0AIAIgAyAAKAIAQQJ0EOwrGiAAKAIIEFYLIAAgATYCBCAAIAI2AggLC0gAIAAQzwYgAEEMahD6AyAAQRhqENAGIABCADcCNCAAQgA3AiQgAEE8ahDRBiAAQcgAahDSBiAAQdQAahDTBiAAQfgAahDUBgsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFYgAEEANgIICwuEAQEDfyAAQQhqIQFBACECAkAgACgCCEEATA0AA0ACQCACIAAoAgBHDQAgASACENUGIgNCADcCACADQRBqQgA3AgAgA0EIakIANwIACyABIAIQ1QYQzwYgASACENUGQQxqEPoDIAJBAWoiAiABKAIASA0ACwsgAEKAgICAEDcCACABENECCzYAAkACQCABQQBIDQAgACgCACABSg0BC0HF6ABBytAAQdwMQc2KARAAAAsgACgCCCABQRhsaguXAQECfyMAQTBrIgEkACABQQhqEMUGIQIgAUEQaiAAQegAaikCADcDACABIAApAmA3AwggAiAAQfAAaigCADYCECACIABB9ABqKAIANgIUIAIgACgCDDYCGAJAAkAgAioCACACKgIIX0UNACACKgIEIAIqAgxfDQELQcYSQZE+QbwDQYD7ABAAAAsgACACEMYGIAFBMGokAAsyAQF/AkAgACgCACIBRQ0AIAAoAgggAUF/akEobGoiASgCHA0AIAEoAiANACAAENgGCwsvAQF/AkAgACgCACIBQQBKDQBByqoBQcrQAEHyDEHszQAQAAALIAAgAUF/ajYCAAufAQEDfwJAIAAoAgggACgCACIBQX9qQShsaiICKAIcIgNFDQAgAiAAQeAAakEQENsqRQ0AIAAQ1gYPCwJAIAIoAiANAAJAIAMNACABQQJIDQAgAEHgAGogAkFYaiIDQRgQ2yoNACADKAIgDQAgABDYBg8LIAIgACkCYDcCACACQQhqIABB6ABqKQIANwIADwtBr5IBQZE+QeoDQf0oEAAAC6QBAQV/AkAgACgCCCIBIAAoAgAiAkF/aiIDQShsaiIEKAIcIgVFDQAgBCgCECAAQfAAaigCAEYNACAAENYGDwsCQCAEKAIgDQACQCAFDQAgAkECSA0AIABB4ABqIAEgAkF+akEobGoiBEEYENsqDQAgBCgCIA0AIAAQ2AYPCyABIANBKGxqIABB8ABqKAIANgIQDwtBr5IBQZE+QYAEQfOVARAAAAtgAQN/IABBADYCKAJAIAAoAggiASAAKAIAQX9qIgJBKGxqIgMoAhxFDQAgABDWBg8LAkAgAygCIA0AIAEgAkEobGogAEH0AGooAgA2AhQPC0GvkgFBkT5BmARBtSYQAAALnwICAX8FfSMAQRBrIgQkACAEIAEqAgAgASoCBCACKgIAIAIqAgQQciEBAkACQCADDQAgASoCDCEFIAEqAgQhBiABKgIIIQcgASoCACEIDAELIABB7ABqIQIgAEHoAGohAyAAQeQAaioCACEHAkAgASoCACIIIAAqAmAiBV1FDQAgASAFOAIAIAUhCAsgAioCACEFIAMqAgAhCQJAIAEqAgQiBiAHXUUNACABIAc4AgQgByEGCyAJIAEqAggiByAHIAleGyEHIAEqAgwiCSAFXg0AIAkhBQsgASAIIAcQ3QY4AgggASAGIAUQ3QY4AgwgAEE8aiABEN4GIABB6ABqIARBCGopAwA3AgAgACAEKQMANwJgIAAQ2QYgBEEQaiQACwwAIAAgASAAIAFgGwteAQF/AkAgACgCACICIAAoAgRHDQAgACAAIAJBAWoQygYQywYgACgCACECCyAAKAIIIAJBBHRqIgIgASkCADcCACACQQhqIAFBCGopAgA3AgAgACAAKAIAQQFqNgIAC28BA38jAEEgayIBJAAgAUEYaiAAKAIsIgIqAhggAkEcaioCABAwIQIgAUEQaiAAKAIsIgNBIGoqAgAgA0EkaioCABAwIQMgASACKQIANwMIIAEgAykCADcDACAAIAFBCGogAUEAENwGIAFBIGokAAtOAQF/IABBPGoQ4QYgACAAKAI8IgFBBHQgAEHEAGooAgBqQXBqIAAoAixBGGogARsiASkCADcCYCAAQegAaiABQQhqKQIANwIAIAAQ2QYLLwEBfwJAIAAoAgAiAUEASg0AQcqqAUHK0ABB8gxB7M0AEAAACyAAIAFBf2o2AgALPAEBfyMAQRBrIgIkACACIAE2AgwgAEHIAGogAkEMahDjBiAAQfAAaiACKAIMNgIAIAAQ2gYgAkEQaiQAC0wBAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahDMBhDNBiAAKAIAIQILIAAoAgggAkECdGogASgCADYCACAAIAAoAgBBAWo2AgALSQEBfyAAQcgAahDlBgJAAkAgACgCSCIBDQBBACEBDAELIAFBAnQgAEHQAGooAgBqQXxqKAIAIQELIABB8ABqIAE2AgAgABDaBgsvAQF/AkAgACgCACIBQQBKDQBByqoBQcrQAEHyDEHszQAQAAALIAAgAUF/ajYCAAubAQEBfwJAIAAoAiggAmpBgIAESQ0AIAAtACRBCHFFDQAgAEH0AGogACgCGDYCACAAENsGCyAAKAIAQShsIAAoAghqQXRqIgMgAygCACABajYCACAAQRhqIAAoAhgiAyACahDABiAAIABBIGooAgAgA0EUbGo2AjQgAEEMaiAAKAIMIgIgAWoQSCAAIABBFGooAgAgAkEBdGo2AjgLQgEBfyAAKAIAQShsIAAoAghqQXRqIgMgAygCACABazYCACAAQRhqIAAoAhggAmsQ6AYgAEEMaiAAKAIMIAFrEOkGCygAAkAgACgCACABTg0AQbToAEHK0ABB7QxBlc0AEAAACyAAIAE2AgALKAACQCAAKAIAIAFODQBBtOgAQcrQAEHtDEGVzQAQ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IRgLIAAqAqwBIRUgACoCoAEhFCABQShqIABBjAJqKQIANwMAIAEgACkChAI3AyBCACEZIABCADcDOCAAQcAAakIANwMAAkACQCAAKAJUQQFIDQAgCkEASiEJIABBOGohAiAYIBSSIBWTIRVBACEPA0AgByAIIBmnEMcHLAAAIgsQhAYhCkEBIRICQCAALACNBEEASg0AIAsgACwAjwRIIRILIAogEjoAYSAJQQFxIRJBACEJAkAgEkUNAAJAIA8gACwAjwRGDQBBASEJDAELIBUgASoCQCAAKgLUAZOSIRULIAogCigCAEH//794cTYCAAJAAkAgDSkDACAZiKdBAXENACAKIBU4AjQgCiAVOAIgIAogFTgCDCAKIBU4AgggCkEANgIEIApBKGogFTgCACABKgJEIRQgCkEsakH////7BzYCACAKQSRqIBQ4AgAgCkEgaiABQSBqEKUDIApBgICACDYCXCAKQYCAgPwDNgI8DAELAkAgEUUNACADKgLkASIUIAoqAiBgRQ0AIBQgCkEoaioCAF1FDQAgACALOgCABAsgCiAVOAIIIAAgCxDeByEUIAogCioCBCAUEL4HIAoqAhAgACoCnAEQvgcQugciGDgCBCAAKgKwASEWIAogACoCrAEiEyAAKgKkASIUIAoqAggiF5KSOAI0IAogFiATIBUgGJKSkiAUIBSSkiITOAIMIAogEyAUkyAWkzgCOCAKIBc4AiAgCiAYQ2ZmJj+UEOQHOAI8IAEqAkQhFCAKQSxqQf////sHNgIAIApBKGoiEiATOAIAIApBJGogFDgCACAKQSBqIAFBIGoQpQMgCkEBOgBdIAogEioCACAKKgIgXiISOgBcAkACQAJAAkACQCASRQ0AIAIgAikDAEIBIAuthoQ3AwAMAQsgCi0AYkUNAQsgCkEBOgBeDAELIAogCi0AYyIQQQBHOgBeIBBFDQELIAAgACkDQEIBIAuthoQ3A0ALAkACQCAKLQBaDQBBASEQDAELIAAtAKIEQQBHIRALIAogEDoAXwJAIBBFDQAgEg0ECyAKIAooAgBBgIDAAUGAgMAAIBIbciISNgIAAkAgCi0AVkH/AUYNACAKIBJBgICAAnIiEjYCAAsCQCAALQCABCALQf8BcUcNACAKIBJBgICABHI2AgALIAogCioCNCIUOAJEIAogFDgCTCAKIBQ4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DwtBzqkBQbg+QdobQYcnEAAAC0HNsAFBuD5B2xtBhycQAAALaQECfxCBBCEDAkAgAEEATA0AIAJBAXMhBAJAAkAgA0GYA2ooAgAiAkUNAAJAIAIoAhAgAEcNACACKAIEIARGDQILENUICyAAQQFGDQAgASAAIAQQzggLDwtBv6gBQbg+QcIeQcAwEAAACyIAAkAgACgCBCABTg0AIAAgACABENoIENsICyAAIAE2AgAL/gEAIABBDGoQ3AgaIABBFGoQ3QgaIABBHGoQ3ggaIABB1AFqEMgBGiAAQeQBahDIARogAEH0AWoQyAEaIABBhAJqEMgBGiAAQZQCahDIARogAEGkAmoQyAEaIABBtAJqEMgBGiAAQcQCahDIARogAEHUAmoQyAEaIABB5AJqEMgBGiAAQfQCahDIARogAEGEA2oQLhogAEGMA2oQLhogAEGUA2oQLhogAEGcA2oQLhogAEGkA2oQzwEaIABBuANqELICGiAAQcQDahDbARogAEHYA2oQ3wgaIABB5ANqEOAIGiAAQfADahDhCBogAEEAQagEEO0rIgBBfzYCUCAACysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTgECfwJAIAAoAgQgAU4NACABQagEbBBUIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBqARsEOwrGiAAKAIIEFYLIAAgATYCBCAAIAI2AggLCwsAIABCADcCACAACwsAIABCADcCACAACwsAIABCADcCACAACxUAIABCADcCACAAQQhqQQA2AgAgAAsSACAAQQA2AgggAEIANwIAIAALFQAgAEIANwIAIABBCGpBADYCACAAC+cHAwd/A30BfiMAQeAAayIDJAACQAJAEIEEIgQtAI8BDQAgAEUNAUEAKAKQhwMhBQJAIAENACAAIAAQ9StqIQELIANB2ABqIAQqAswBIARB0AFqKgIAIARBhAJqKgIAkhAwIQYgBEG4A2oqAgAhCgJAIAEgAGtB0Q9IDQAgCkMAAAAAYA0AEL0FIQogA0HQAGpDAAAAAEMAAAAAEDAhByADIAMpA1giDTcDSAJAIAUtAJhfDQACQAJAIARBuARqKgIAIA1CIIinviILkyAKlSIMi0MAAABPXUUNACAMqCEIDAELQYCAgIB4IQgLIAhBAUgNAEMA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IAEpAgA3A4gBELsFIQggBUHUKmoiBioCACEJIAUqArAyIQogAyADKQOIATcDICADQZABaiADQSBqIAggCiAJIAmSkhC8BSADQcAAaiADQZgBaiADQZABahDkCCADQfgAaiADQZgBaiADQcAAahCQASEBIANBkAFqIAYqAgAQyQQgAUEAQQAQygRFDQAgABCECSEAIAMgASkDADcDcCADIAEpAwg3A2hBB0MAAIA/EJoBIQYgBUHYKmoiByoCACEJIAMgAykDcDcDGCADIAMpA2g3AxAgA0EYaiADQRBqIAZBASAJEL0BIAEgA0HAAGogBUHcKmoqAgCMIgkgCRAwEMEBIANB4ABqIAEqAgAgASoCCCAAEIYJIAFBDGoqAgAQMCEGIAQoAogFIAFBKEMAAIA/EJoBQwAAAAAgACAHKgIAELMHAkAgAg0AIAMgAEMAAMhClEMK1yM8krs5AwAgA0HAAGpBIEGnwwEgAxBeGiADQcAAaiECCyADQThqIAJBAEEAQwAAgL8QugEgAyoCOCIAQwAAAABeRQ0AIANBMGogBioCACAFQeAqaioCAJIgASoCACABKgIIIACTIAVB6CpqKgIAkxCFCSABKgIEEDAgAUEIaiACQQAgA0E4aiADQShqQwAAAABDAAAAPxAwIAEQuwELIANBoAFqJAAL/gECBX8CfSMAQTBrIgAkAAJAEIEEIgEtAI8BDQBBACgCkIcDIgIqArAyIQUgAEEYaiABQcwBaiIDIABBEGogBSABQfgBaioCACAFIAJB1CpqKgIAIgYgBpKSEIoJIAUQ4wgiBhAwEOQIIABBIGogAyAAQRhqEJABIgNDAACAvxCqBQJAIANBAEEAEMoERQ0AQQBDAACAPxCaASEEIAEoAogFIQEgAEEIaiADIABBGGogAioC0CogAioCsDJDAAAAP5SSIAZDAAAAP5QQMBDkCCAAIAApAwg3AwAgASAAIAQQrQcLQwAAAAAgAioC0CoiBSAFkhDLBAsgAEEwaiQACzkBAX8jAEEQayIAJAACQBCBBC0AjwENACAAQQhqQwAAAABDAAAAABAwQwAAgL8QyQQLIABBEGokAAtZAQJ/IwBBIGsiASQAAkAQgQQiAi0AjwENACABQQhqIAJBzAFqIgIgABDkCCABQRBqIAIgAUEIahCQASECIABDAACAvxDJBCACQQBB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DwsCQCABQStHDQAgAiADKQMAIAQpAwAQtQk3AwALIAFBLUcNAiACIAMpAwAgBCkDABC2CTcDAA8LAkAgAUErRw0AIAIgAyoCACAEKgIAkjgCAAsgAUEtRw0BIAIgAyoCACAEKgIAkzgCAA8LAkAgAUErRw0AIAIgAysDACAEKwMAoDkDAAsgAUEtRw0AIAIgAysDACAEKwMAoTkDAAsPC0HvrwFBoz5B1w5BtsAAEAAAC0oBAX8CQAJAAkAgAUF/Sg0AQYABIQJBgH8gAWsgAEwNAQwCCyABRQ0AQf8AIQJB/wAgAWsgAEgNAQsgASAAaiECCyACQRh0QRh1C0wBAX8CQAJAAkAgAUEBSA0AQYABIQIgAUGAf2ogAEwNAQwCCyABQX9KDQBB/wAhAiABQf8AaiAASA0BCyAAIAFrIQILIAJBGHRBGHULIAEBf0F/IAEgAGoiAiABQf8BcyAASRsgAiABG0H/AXELHAEBf0EAIAAgAWsiAiAAIAFJGyACIAEbQf8BcQtOAQF/AkACQAJAIAFBf0oNAEGAgAIhAkGAgH4gAWsgAEwNAQwCCyABRQ0AQf//ASECQf//ASABayAASA0BCyABIABqIQILIAJBEHRBEHULUAEBfwJAAkACQCABQQFIDQBBgIACIQIgAUGAgH5qIABMDQEMAgsgAUF/Sg0AQf//ASECIAFB//8BaiAASA0BCyAAIAFrIQILIAJBEHRBEHULIgEBf0F/IAEgAGoiAiABQf//A3MgAEkbIAIgARtB//8DcQsdAQF/QQAgACABayICIAAgAUkbIAIgARtB//8DcQtNAQF/AkACQCABQX9KDQBBgICAgHghAkGAgICAeCABayAASg0BC0H/////ByABIABqIgJB/////wcgAWsgAEgbIAIgAUEAShshAgsgAgtNAQF/AkACQCABQQFIDQBBgICAgHghAiABQYCAgIB4ciAASg0BC0H/////ByAAIAFrIgIgAUH/////B2ogAEgbIAIgAUEASBshAgsgAgsbAQF/QX8gASAAaiICIAFBf3MgAEkbIAIgARsLGAEBf0EAIAAgAWsiAiAAIAFJGyACIAEbC2EBAX4CQAJAIAFCf1UNAEKAgICAgICAgIB/IQJCgICAgICAgICAfyABfSAAVQ0BC0L///////////8AIAEgAHwiAkL/////////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QAJAAkACQAJAAkACQAJAAkACQAJAA0ACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCACQYCAgH9qDhADBAwLFBUQEQ4PAQIGCAwLAAsCQCACQYCAgH1qDhAFCgwLFhcSEw4PAAAHCQwLAAsgAhC9CiICQQFIDR8gAyACOwEYAkAgAkEKRw0AIAEtABcNIAsCQAJAIAEtAAxFDQAgASgCBCABKAIIRw0AIAEoAgAiAiAAEL4KTg0AIAAgASACQQFBARC/CiAAIAEoAgBBARDACiAAIAEoAgAgA0EYakEBEMEKDQEMIQsgACABEMIKIAAgASgCACADQRhqQQEQwQpFDSAgASABKAIAQQEQwwoLIAFBADoAFiABIAEoAgBBAWo2AgAMHwsgACABEMQKIAFBADoAFgweCyAAIAEQxQogAUEAOgAWDB0LAkACQCABKAIEIAEoAghGDQAgARDGCgwBCyABKAIAIgBBAUgNACABIABBf2o2AgALIAFBADoAFgwcCwJAAkAgASgCBCABKAIIRg0AIAAgARDHCgwBCyABIAEoAgBBAWo2AgALIAAgARDICiABQQA6ABYMGwsgACABEMgKIAEQyQoCQCABKAIIIgBBAUgNACABIABBf2oiADYCCAsgAUEAOgAWIAEgADYCAAwaCwJAIAEoAgQgASgCCEYNACABEMYKDBoLIAEgACABKAIAEMoKNgIAIAAgARDICgwZCwJAIAEoAgQgASgCCEcNACABEMkKCyABIAAgASgCABDKCiICNgIIIAEgAjYCACAAIAEQyAoMGAsCQCABKAIEIAEoAghGDQAgACABEMcKDBgLIAEgACABKAIAEMsKNgIAIAAgARDICgwXCwJAIAEoAgQgASgCCEcNACABEMkKCyABIAAgASgCABDLCiICNgIIIAEgAjYCACAAIAEQyAoMFgsgARDJCiABIAEoAghBAWo2AgggACABEMgKIAFBADoAFiABIAEoAgg2AgAMFQsgAkGAgIACcSEEAkACQAJAIAJB////fXFBj4CAAUcNACABKAIQIQUMAQsgAS0AFw0BQQEhBQsCQAJAIARFDQAgARDJCgwBCyABKAIEIAEoAghGDQAgACABEMcKCyAAIAEQyAogA0EYaiAAIAEoAgAgAS0AFxDMCiAFQQFIDRUgAyoCGCEJIAEtABZFIQJBACEGIAMo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IAgoAgBBAkgNAANAIAAgAygCACACahDNCiEJIAEgCigCACACakEBdGpB0AxqIAk7AQAgAkEBaiICIAgoAgBIDQALCyAAIAUgBxDACgsCQCAGRQ0AIAAgBSABIARBAXRqQdAMaiAGEMEKGiABQagcaiICIAIoAgAgBmo2AgALIAEgBiAFajYCACABIAEvAZ4cQQFqOwGeHCABIAEvAaAcQQFqOwGgHAsLMwEBfwJAIAAoAgQgACgCCEYNACAAEMULIABBADoAFiAAIAAoAgQiATYCCCAAIAE2AgALCzgAAkAgASgCBCABKAIIRg0AIAEQxQsgACABEMgKIAFBADoAFiABIAEoAggiADYCBCABIAA2AgALC2sBAn8gABC+CiEAAkAgASgCBCICIAEoAggiA0YNAAJAIAIgAEwNACABIAA2AgQgACECCwJAIAMgAEwNACABIAA2AgggACEDCyACIANHDQAgASACNgIACwJAIAEoAgAgAEwNACABIAA2AgALCzEBAX8CQCAAKAIEIAAoAggiAUcNACAAIAAoAgAiATYCCCAAIAE2AgQPCyAAIAE2AgALIwADQAJAIAFBAU4NAEEADwsgACABQX9qIgEQxgtFDQALIAELMwECfyAAKAIEIQICQANAIAEiA0EBaiIBIAJODQEgACABEMYLRQ0ACwsgASACIAMgAkgbC58DAgR/An0jAEEgayIEJAACQAJAIAEQvgogAkcNAAJAIANFDQAgBEEIaiABQQAQzgogACACNgIQIABBADYCDCAAQQA2AgQgACAEKgIYIAQqAhSTOAIIIAAgBCoCDDgCAAwCCyAAQYCAgPwDNgIIIABCADcCAEEAIQNBACEFAkAgAkEBSA0AQQAhAwNAIARBCGogASADIgUQzgogBCgCHCAFaiIDIAJIDQALCyAAIAU2AhQgAEEANgIQIAAgAzYCDAwBC0EAIQMgAEEANgIEIARBCGogAUEAEM4KAkACQCAEKAIcIgUgAkwNAEEAIQYgBSEHDAELA0AgAyEGIAAgBCoCECAAKgIEkjgCBCAEQQhqIAEgBSIDEM4KIAQoAhwiByADaiIFIAJMDQALCyAAIAc2AhAgACADNgIMIAQqAhQhCCAEKgIYIQkgACAGNgIUIAAgCSAIkzgCCCAAIAQqAgg4AgAgAyACTg0AIAIgA2shAkEAIQUDQCAA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aiABQbgCaikCADcCAAsnAAJAIAAgAS0AACACIAMQowkiAEUNACABIAEtAABBAXM6AAALIAAL7wMCBn8DfSMAQfAAayICJABBACEDQQAoApCHAyEEAkAQgQQiBS0AjwENACAAEKIFIQYgAkHoAGogAEEAQQFDAACAvxC6ASACIAEpAgA3A1gQuwUhCBC+BSEJIARB5CpqKgIAIQogAiACKQNYNwMQIAJB4ABqIAJBEGogCCAKIAlDzczsQJSSELwFIAJBMGogBUHMAWoiAyACQdAAaiACKgJgIAIqAmQgAioCbBDjCBAwEOQIIAJBwABqIAMgAkEwahCQASIHQQhqIQNDAAAAACEIAkAgAioCaCIJQwAAAABeRQ0AIAkgBEHoKmoqAgCSIQgLIAJBKGogAyACQSBqIAhDAAAAABAwEOQIIAJBMGogByACQShqEJABIQEgBUGoAmogAkEwakEIaikDADcCACAFQaACaiACKQMwNwIAIARB0DZqENkKAkAgASABQQhqEKUFIgMNACACQShqIAEQ0AMgAkEoaiAEQdQqaioCABDJBCABQQAgBxDKBBoMAQsQxQUCQCACKgJoQwAAAABeRQ0AIAIgAkEYaiAHKgIIIARB6CpqKgIAkiAHKgIEIARB1CpqKgIAkhAwKQIANwMIIAJBCGogAEEAQQEQtQELIAJBKGogBxDQAyAGIAJBKGpBABDNBBoLIAJB8ABqJAAgAwt0AgN/AX0jAEEQayIDJAACQCACQX9KDQAgAUEHEIAKIQILEJkBIQQgA0EIahAuIgVBADYCACAFIAKyIgZDAACAPpIgBiACIAFIGxC+BZQgBEE8aioCACIGIAaSkhCeCTgCBCAAIAUQ/AohAiADQRBqJAAgAguMAQEDfyMAQRBrIgAkAAJAEIEEIgFBC2otAABBAXENAEHaywFBoz5BqTBBwjgQAAALIABBCGogASgCnAYiAUGoAmopAgA3AwAgACABQaACaikCADcDABCZASECEM4EQwAAAABDAACAvxDLBCABIAApAwA3AswBIAAgAkE8aioCABCqBRCnBSAAQRBqJAALoQIBA38jAEEwayIGJABBACEHAkAgACAEIAUQ/QpFDQBBACEFQQAoApCHAyEIIAZBEGoQkgEiACAEEL4FEJQBAkACQAJAIAAQmAFFDQAMAQsQ/gpBACEHDAEL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KgIAIgiTIABBLGoqAgAQMBogBCABKQMQNwLMASAAIAcgCJIgACoCKJI4AiggAUEYaiADQeQraikCADcDACABIANB3CtqKQIANwMQIAEgASoCHEMAAAA/lDgCHEEAIAFBEGoQowFBFSABQwAAAABDAAAAAEMAAAAAQwAAAAAQchCjAUGlE0EAQdAAEJ8JIQNBAhCkAQJAIANFDQBBACECAkAgACgCAEEATA0AQQAhAwNAAkAgACADEIYGIgVBBmotAABBIHENACAFIAIgACAFEIcGIAAoAhQgBSgCAEZBACABQwAAAABDAAAAABAwEKMJGyECCyADQQFqIgMgACgCAEgNAAsLEKEJCyAEIAY3AswBIAFBIGokACACCyIAAkAgACgCBCABTg0AIAAgACABEM0LEM4LCyAAIAE2AgALtQECA38BfSMAQRBrIgMkAEEAKAKQhwMhBCADQQhqIAFBAEEBQwAAgL8QugEgAyADKgIIIARB0CpqIgUqAgCSIAMqAgwgBEHUKmoqAgAiBiAGkpIQMCEBIAUqAgAhBgJAAkAgAkUNACABKgIAIAYgBEHoKmoqAgAgBCoCsDKSkpIhBgwBCyABKgIAIAZDAACAP5KSIQYLIAEgBjgCACAAIAYQvwsQigkgASoCBBAwGiADQRBqJAALNgACQAJAIAFBAEgNACAAKAIAIAFKDQELQcXoAEHK0ABB3AxBzYoBEAAACyAAKAIIIAFBA3RqC6kEAwZ/An0DfiMAQdAAayIBJABBACECQQAoApCHAyIDKALsNCEEIAFByABqIAMqArAyIgdDAAAAwJIgByADQdQqaioCACIIIAiSkhAwGiAEKQLMASEJIAEqAkghByABQcAAaiADQeQraikCADcDACABIANB3CtqKQIANwM4IAEgASoCREMAAAA/lDgCREEAIAFBOGoQowFBFSABQShqQwAAAABDAAAAAEMAAAAAQwAAAAAQchCjASADQYwBaiIDKQIAIQogA0KAgID005mzpj43AgAgAUEoaiAAKgIoIABBMGoqAgAgByAHkiIHkxDjCCIIIABBLGoiBSoCABAwGiAEIAEpAyg3AswBIAEgASkDSCILNwMgIAEgCzcDEEHgnwFBACABQRBqQZAIEPgIIQYgAUEoaiAIIAEqAkiSIAUqAgAQMBogBCABKQMoNwLMASABIAEpA0gi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ayICJAAgAiABKQIANwMIENANIAAgAhCIGCACEIkYEK4TQaQBIAJBCGoQixhBABARIAJBEGokAAsJACAAIAEQkBgLQgEBfyMAQRBrIgIkACACIAE2AgwQ0A0gACACQQhqEJEYIAJBCGoQkhgQ2QxBpQEgAkEMahCUGEEAEBEgAkEQaiQACwsAIAAgASACEJYYC0IBAX8jAEEQayICJAAgAiABNgIMENANIAAgAkEIahCaGCACQQhqEJsYEPoTQaYBIAJBDGoQnRhBABARIAJBEGokAAsLACAAIAEgAhCfGAsPACAAIAEgAiADIAQQoRgLQgEBfyMAQRBrIgIkACACIAE2AgwQ0A0gACACQQhqEKIYIAJBCGoQoxgQpBhBpwEgAkEMahCmGEEAEBEgAkEQaiQACxMAIAAgASACIAMgBCAFIAYQqBgLQgEBfyMAQRBrIgIkACACIAE2AgwQ0A0gACACQQhqEKkYIAJBCGoQqhgQqxhBqAEgAkEMahCtGEEAEBEgAkEQaiQACxEAIAAgASACIAMgBCAFEK8YC0IBAX8jAEEQayICJAAgAiABNgIMENANIAAgAkEIahCwGCACQQhqELEYELIYQakBIAJBDGoQtBhBABARIAJBEGokAAsTACAAIAEgAiADIAQgBSAGELYYC0IBAX8jAEEQayICJAAgAiABNgIMENANIAAgAkEIahC3GCACQQhqELgYELkYQaoBIAJBDGoQuxhBABARIAJBEGokAAsTACAAIAEgAiADIAQgBSAGEL0YC0IBAX8jAEEQayICJAAgAiABNgIMENANIAAgAkEIahC+GCACQQhqEL8YEMAYQasBIAJBDGoQwhhBABARIAJBEGokAAsRACAAIAEgAiADIAQgBRDEGAtCAQF/IwBBEGsiAiQAIAIgATYCDBDQDSAAIAJBCGoQxRggAkEIahDGGBCWFEGsASACQQxqEMgYQQAQESACQRBqJAALEQAgACABIAIgAyAEIAUQyhgLQgEBfyMAQRBrIgIkACACIAE2AgwQ0A0gACACQQhqEMsYIAJBCGoQzBgQzRhBrQEgAkEMahDPGEEAEBEgAkEQaiQACw8AIAAgASACIAMgBBDRGAtCAQF/IwBBEGsiAiQAIAIgATYCDBDQDSAAIAJBCGoQ0hggAkEIahDTGBDUGEGuASACQQxqENYYQQAQESAC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ACAAEIMoCwsAIAAgASACEIQoCzABAX8jAEEQayICJAAgACACQQhqEKwVIAJBCGoQrRUQzxNBpwYgARAFIAJBEGokAAsJACAAIAEQhigLCQAgACABEIcoCwkAIAAgARCIKAsHACAAEIkoCzABAX8jAEEQayICJAAgACACQQhqEK8VIAJBCGoQsBUQ1gxBqAYgARAFIAJBEGokAAsJACAAIAEQiygLMAEBfyMAQRBrIgIkACAAIAJBCGoQshUgAkEIahCzFRD6E0GpBiABEAUgAkEQaiQACzABAX8jAEEQayICJAAgACACQQhqELUVIAJBCGoQjwwQthVBqgYgARAFIAJBEGokAAsHACAAEIwoCwcAIAAQjSgLBwAgABCOKAsJACAAIAEQlygLBQAQmCgLBwAgABCZKAsNACAAIAEgAiADEJooCzABAX8jAEEQayICJAAgACACQQhqELgVIAJBCGoQuRUQuhVBqwYgARAFIAJBEGokAAsLACAAIAEgAhCcKAswAQF/IwBBEGsiAiQAIAAgAkEIahC8FSACQQhqEL0VEL0TQawGIAEQBSACQRBqJAALDwAgACABIAIgAyAEEJ4oCzABAX8jAEEQayICJAAgACACQQhqEL8VIAJBCGoQwBUQwRVBrQYgARAFIAJBEGokAAsLACAAIAEgAhCgKAswAQF/IwBBEGsiAiQAIAAgAkEIahDDFSACQQhqEMQVEPoTQa4GIAEQBSACQRBqJAALBwAgABCiKAsRACAAIAEgAiADIAQgBRCjKAswAQF/IwBBEGsiAiQAIAAgAkEIahDGFSACQQhqEMcVEMgVQa8GIAEQBSACQRBqJAALEQAgACABIAIgAyAEIAUQpigLMAEBfyMAQRBrIgIkACAAIAJBCGoQyhUgAkEIahDLFRD6E0GwBiABEAUgAkEQaiQACzABAX8jAEEQayICJAAgACACQQhqEM0VIAJBCGoQzhUQzxVBsQYgARAFIAJBEGokAAsLACAAIAEgAhCpKAswAQF/IwBBEGsiAiQAIAAgAkEIahDRFSACQQhqENIVEL0TQbIGIAEQBSACQRBqJAALBwAgABCrKAsJACAAIAEQrygLCQAgACABELAoCzABAX8jAEEQayICJAAgACACQQhqENQVIAJBCGoQ1RUQ1hVBswYgARAFIAJBEGokAAsNACAAIAEgAiAD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AgsGAEHsowILJwEBfyMAQRBrIgEkACABEJMFNgIMIAAgAUEMahCnHhogAUEQaiQACzQBAX8jAEEQayICJAAgAkEIaiABEKgeEKkeIQEgABCqHiABEKseEAM2AgAgAkEQaiQAIAALBAAgAAs+AQF/IwBBEGsiAiQAIAIgABD2FTYCDCACQQxqIAEQqB4QqB4oAgAQrB4QrR4gAkEMahD5FSACQRBqJAAgAAsFABCuHgsHACAAEPsVCwQAIAALGQAgACgCACABNgIAIAAgACgCAEEIajYCAAsGAEG0jgILNQEBfyMAQRBrIgIkACACQQhqEIEFIAAgAkEIaiACIAEQmBgiARCXDCABEO8LGiACQRBqJAALNQEBfyMAQRBrIgIkACACQQhqEIQFIAAgAkEIaiACIAEQmBgiARCXDCABEO8LGiACQRBqJAALMQEBfyMAQRBrIgMkACADQQhqIAAQlgwgAyACEJYMIANBCGogASADEI0FIANBEGokAAsGAEGApAILKAEBfyMAQRBrIgIkACACQQhqIAAQlgwgAkEIaiABEIoDIAJBEGokAAsGAEGQpAILbwEBfyMAQRBrIgMkAAJAAkAgAhCFDw0AEKAcQcwAaiACELMcGiADQQhqIAAQlgwgAyABEJYMIANBCGogA0G9BkEAEI4FDAELIANBCGogABCWDCADIAEQlgwgA0EIaiADQQBBABCOBQsgA0EQaiQACwcAIAAQtx4LRQEBfyMAQRBrIgEkACABIAA2AgwgAUEIahCgHEHMAGogASABQQxqELgeIgAQiBogAUEIahDvCxogABDvCxogAUEQaiQACzQBAX8jAEEQayICJAAgAkEIaiABELkeELoeIQEgABC7HiABELweEAM2AgAgAkEQaiQAIAALBAAgAAs+AQF/IwBBEGsiAiQAIAIgABD2FTYCDCACQQxqIAEQuR4QuR4oAgAQvR4Qvh4gAkEMahD5FSACQRBqJAAgAAsFABC/HgsHACAAEPsVCwQAIAALGQAgACgCACABNgIAIAAgACgCAEEIajYCAAsGAEHkiQILBgBBoKQCCyYBAX8jAEEQayIBJAAgAUEIaiAAEJYMIAFBCGoQjwUgAUEQaiQACwYAQbSkAgsGAEG8pAILBgBByKQCCygBAX8jAEEQayICJAAgAkEIaiAAEJYMIAJBCGogARCCBSAC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fyMAQRBrIgEkACAAKAIMIQIgAUEIaiAAELQgIAAQsyAQtyAgAkHYJyABQQhqELkgIAAQuiAaIAFBEGokACAAC2sBAn8jAEEQayICJAAgABC9ICEDIAAgATYCDCACIAFBos4AEIYPIAMgAhCIDxC+ICACEO8LGiACIAMQvCAgAxC7IBC/ICACQQhqIAIQwCAiA0HYJyAAKAIMEKogIAMQ7wsaIAJBEGokACAACwQAIAALKwAgACABNgIIIABBkLECNgIAAkAgARCFDw0AIAAgACgCACgCABEEAAsgAAsSAEEAIABBBGogACgCCBCFDxsLHQAgACABIAIQuyAgAhC8ICADIAQgBSAGIAcQ9QkLQgECfyMAQRBrIgEkACAAKAIMIQIgAUEIaiAAELwgIAAQuyAQvyAgAkHYJyABQQhqEMEgIAAQwiAaIAFBEGokACAAC2sBAn8jAEEQayICJAAgABDFICEDIAAgATYCDCACIAFBos4AEIYPIAMgAhCIDxDGICACEO8LGiACIAMQxCAgAxDDIBDHICACQQhqIAIQyCAiA0HYJyAAKAIMEKogIAMQ7wsaIAJBEGokACAACwQAIAALKwAgACABNgIIIABB+LECNgIAAkAgARCFDw0AIAAgACgCACgCABEEAAsgAAsSAEEAIABBBGogACgCCBCFDxsLHQAgACABIAIQwyAgAhDEICADIAQgBSAGIAcQ9QkLQgECfyMAQRBrIgEkACAAKAIMIQIgAUEIaiAAEMQgIAAQwyAQxyAgAkHYJyABQQhqEMkgIAAQyiAaIAFBEGokACAAC2sBAn8jAEEQayICJAAgABDNICEDIAAgATYCDCACIAFBos4AEIYPIAMgAhCIDxDOICACEO8LGiACIAMQzCAgAxDLIBDPICACQQhqIAIQ0CAiA0HYJyAAKAIMEKogIAMQ7wsaIAJBEGokACAACwQAIAALKwAgACABNgIIIABB3LICNgIAAkAgARCFDw0AIAAgACgCACgCABEEAAsgAAsSAEEAIABBBGogACgCCBCFDxsLHQAgACABIAIQyyAgAhDMICADIAQgBSAGIAcQ9QkLQgECfyMAQRBrIgEkACAAKAIMIQIgAUEIaiAAEMwgIAAQyyAQzyAgAkHYJyABQQhqENEgIAAQ0iAaIAFBEGokACAAC2sBAn8jAEEQayICJAAgABDV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BSAEQQA2AgwgAEEMaiAEQQxqIAMQhiEaAkAgAUUNACAAEIchIAEQiCEhBQsgACAFNgIAIAAgBSACaiICNgIIIAAgAjYCBCAAEIkhIAUgAWo2AgAgBEEQaiQAIAALYgECfyMAQRBrIgIkAAJAIAIgAEEIaiABEIohIgEoAgAgASgCBEYNAANAIAAQhyEgASgCABDjIBCAISABIAEoAgBBAWoiAzYCACADIAEoAgRHDQALCyABEIshGiACQRBqJAALXAEBfyAAEIwhIAAQ9SAgACgCACAAKAIEIAFBBGoiAhCNISAAIAIQjiEgAEEEaiABQQhqEI4hIAAQ8yAgARCJIRCOISABIAEoAgQ2AgAgACAAEKUgEI8hIAAQkCELJgAgABCRIQJAIAAoAgBFDQAgABCHISAAKAIAIAAQkiEQkyELIAALAgALNgEBfwJAIAAoAgQiAiABRg0AA0AgABD1ICACQX9qIgIQ4yAQsyEgAiABRw0ACwsgACABNgIECyoAIAAgABCsISAAEKwhIAAQhCFqIAAQrCEgAWogABCsISAAEKUgahCtIQsHACAAEJQhCyEAIAAgATYCACAAIAEoAgQiATYCBCAAIAEgAmo2AgggAAsJACAAIAEQlSELEQAgACgCACAAKAIENgIEIAALBwAgABCWIQs9AQF/IwBBEGsiASQAIAEgABCXIRCYITYCDCABEJkhNgIIIAFBDGogAUEIahCaISgCACEAIAFBEGokACAACwcAIAAQmyELCQAgACABEJwhCx0AIAAgARDvIBDwIBogAEEEaiACEKYhEKchGiAACwoAIABBDGoQqSELCQAgACABEKghCwoAIABBDGoQqiELKAEBfyAAIAEoAgA2AgAgASgCACEDIAAgATYCCCAAIAMgAmo2AgQgAAsRACAAKAIIIAAoAgA2AgAgAAstACAAIAAQrCEgABCsISAAEIQhaiAAEKwhIAAQpSBqIAAQrCEgABCEIWoQrSELLAEBfyADIAMoAgAgAiABayICayIENgIAAkAgAkEBSA0AIAQgASACEOwrGgsLPgEBfyMAQRBrIgIkACACIAAQriEoAgA2AgwgACABEK4hKAIANgIAIAEgAkEMahCuISgCADYCACACQRBqJAALKgAgACAAEKwhIAAQrCEgABCEIWogABCsISAAEIQhaiAAEKwhIAFqEK0h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riAQ8SEgABDyIQsmACAAEPMhAkAgACgCAEUNACAAEOkhIAAoAgAgABD0IRD1IQsgAAsCAAs2AQF/AkAgACgCBCICIAFGDQADQCAAENghIAJBf2oiAhDOIRCPIiACIAFHDQALCyAAIAE2AgQLKgAgACAAEIgiIAAQiCIgABDnIWogABCIIiABaiAAEIgiIAAQriBqEIkiCwcAIAAQ9iELIQAgACABNgIAIAAgASgCBCIBNgIEIAAgASACajYCCCAACwkAIAAgARD3IQsRACAAKAIAIAAoAgQ2AgQgAAsHACAAEPghCz0BAX8jAEEQayIBJAAgASAAEPkhEPohNgIMIAEQmSE2AgggAUEMaiABQQhqEJohKAIAIQAgAUEQaiQAIAALBwAgABD7IQsdACAAIAEQ7yAQ0yEaIABBBGogAhCCIhCDIhogAAsKACAAQQxqEIUiCwkAIAAgARCEIgsKACAAQQxqEIYiCygBAX8gACABKAIANgIAIAEoAgAhAyAAIAE2AgggACADIAJqNgIEIAALEQAgACgCCCAAKAIANgIAIAALLQAgACAAEIgiIAAQiCIgABDnIWogABCIIiAAEK4gaiAAEIgiIAAQ5yFqEIkiCywBAX8gAyADKAIAIAIgAWsiAmsiBDYCAAJAIAJBAUgNACAEIAEgAhDsKxoLCz4BAX8jAEEQayICJAAgAiAAEIoiKAIANgIMIAAgARCKIigCADYCACABIAJBDGoQiiIoAgA2AgAgAkEQaiQACyoAIAAgABCIIiAAEIgiIAAQ5yFqIAAQiCIgABDnIWogABCIIiABahCJIgsCAAsMACAAIAAoAgQQiyILEAAgABCNIigCACAAKAIAawsLACAAIAEgAhCMIgsEACAACwkAIAFBADoAAAsEACAACwoAIABBCGoQ/SELBwAgABD8IQsQACAAEP8hKAIAIAAoAgBrCwQAQX8LBwAgABD+IQsEACAACwoAIABBCGoQgCILBwAgABCBIgsEACAACwQAIAALDgAgACABEIIiNgIAIAALHgACQCAAEPohIAFPDQBBqN8AEIcWAAsgAUEBEIkWCwoAIABBBGoQhyILBwAgABD2IQsHACAAKAIACwoAIAAoAgAQziELAgALBAAgAAsJACAAIAEQjiILCwAgASACQQEQ8RULCgAgAEEMahCRIgs+AQJ/AkAgACgC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ACAAQQxqEL8lCysBAX8gACABKAIANgIAIAEoAgAhAyAAIAE2AgggACADIAJBAnRqNgIEIAALEQAgACgCCCAAKAIANgIAIAALNgAgACAAEMElIAAQwSUgABCgJUECdGogABDBJSAAENQgQQJ0aiAAEMElIAAQoCVBAnRqEMIlCywBAX8gAyADKAIAIAIgAWsiAmsiBDYCAAJAIAJBAUgNACAEIAEgAhDsKxoLCz4BAX8jAEEQayICJAAgAiAAEMMlKAIANgIMIAAgARDDJSgCADYCACABIAJBDGoQwyUoAgA2AgAgAkEQaiQACzMAIAAgABDBJSAAEMElIAAQoCVBAnRqIAAQwSUgABCgJUECdGogABDBJSABQQJ0ahDCJQsCAAsMACAAIAAoAgQQxCULEwAgABDGJSgCACAAKAIAa0ECdQsLACAAIAEgAhDFJQsEACAACwkAIAFBADYCAAsEACAACwoAIABBCGoQtiULBwAgABC1JQsTACAAELglKAIAIAAoAgBrQQJ1CwgAQf////8DCwcAIAAQtyULBAAgAAsKACAAQQhqELklCwcAIAAQuiULBAAgAAsEACAACw4AIAAgARC7JTYCACAACyEAAkAgABCzJSABTw0AQajfABCHFgALIAFBAnRBBBCJFgsKACAAQQRqEMAlCwcAIAAQryULBwAgACgCAAsKACAAKAIAEIIlCwIACwQAIAALCQAgACABEMclCw4AIAEgAkECdEEEEPEVCwoAIABBDGoQyiULPgECfwJAIAAoAgggAUYNAANAIAAQoiUhAiAAIAAoAghBfGoiAzYCCCACIAMQgiUQyCUgACgCCCABRw0ACwsLCQAgACABEMklCwIACwcAIAAQuiULDAAgACABKQIANwIACykAIAAoAgAgASgCADYCACAAKAIAIAEoAgQ2AgQgACAAKAIAQQhqNgIACwYAQbCzAgsPACAAIAAoAggQjQw4AgQLLQEBfyMAQRBrIgMkABDRJSAAIAEgA0EIaiACEIclEIglEIolEBYgA0EQaiQACyYAAkAgACgCAEUNACAAENYlIAAQkSUgACgCACAAELQlEK4lCyAACzMAAkBBAC0A9IcDQQFxDQBB9IcDEKQrRQ0AQQAQ0iU2AvCHA0H0hwMQrCsLQQAoAvCHAwsqAQJ/IwBBEGsiACQAIABBCGoQ0yUgAEEI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CyABQRBqJAALagEDfyMAQRBrIgEkAEEAIQIgAUEANgIMA0AgACgCFCEDIAFBCGogACACQQJ0akEEahCYDCADIAFBDGogAUEIahCVHiABQQhqEO8LGiABIAEoAgxBAWoiAjYCDCACQQRJDQALIAFBEGokAAsGAEHguAILSwEBfyMAQSBrIgQkACAAEJYPIQAgBEEQaiABELUMIARBCGogAxCWDCAEIAQpAwg3AwAgACAEQRBqIAIgBBDbCiECIARBIGokACACCwoAIAAQlg8Q6woLMwEBfyMAQRBrIgIkACAAEJYPIQAgAiABEJYPNgIAIABBhDYgAhDmCiEAIAJBEGokACAACwYAQfS4AgssAQF/IwBBEGsiAiQAIAIgARCWDzYCACAAQYQ2IAIQ6QohACACQRBqJAAgAAsGAEGAuQILDAAgABCWDyABEO4KCzUBAX8jAEEQayIDJAAgABCWDyEAIAMgAhCWDzYCACAAIAFBhDYgAxDvCiEBIANBEGokACABCwYAQZC5AgsuAQF/IwBBEGsiAyQAIAMgAhCWDzYCACAAIAFBhDYgAxDwCiEAIANBEGokACAACwYAQaC5AgsKACAAEJYPEPEKCwcAIAAQ8goLDAAgABCWDyABEPYKCzQBAX8jAEEQayIDJAAgABCWDyADIAEQjB4iARCNHiACEPcKIQIgARCOHhogA0EQaiQAIAILNwEBfyMAQRBrIgQkACAAEJYPIQAgBEEIaiADEJYMIAAgASACIARBCGoQowkhASAEQRBqJAAgAQsGAEGwuQILTgECfyMAQSBrIgQkACAAEJYPIQAgBEEQaiABEIweIgEQjR4hBSAEQQhqIAMQlgwgACAFIAIgBEEIahD7CiECIAEQjh4aIARBIGokACACC1IBAn8jAEEQayIFJAAQoBwiBkGAAWogAhCzHBogBiADNgKEASAAEJYPIAUgARCVHyIBEJYfQcIGQQAgAyAEEP8KIQMgARCXHxogBUEQaiQAIAMLCQAgASACEKsnC4wBAQN/IwBBIGsiAiQAIAIgADYCHEEAIQMQoBwhBAJAIABBAEgNACAEKAKEASAASA0AIAJBCGogBEGAAWogAkEcahCTGSACQRBqIAJBCGoQlQ8gBEGIAWoiACACQRBqEKIbGiACQRBqEJkrGiACQQhqEO8LGiABIAAQlg82AgBBASED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DAELAkAgAyACIARBAnRqKAIAayIERQ0AIA4gBCAEIAtJGyAEIAcbIAQgDxshBAwBCyAJIQQCQAJAIAEgCSAHIAkgB0sbIghqLQAAIgVFDQADQCAFQf8BcSAGIAhqLQAARw0CIAEgCEEBaiIIai0AACIFDQALIAkhBAsDQCAEIAdNDQYgASAEQX9qIgRqLQAAIAYgBGotAABGDQALIAshBCAPIQcMAgsgCCANayEEC0EAIQcLIAYgBGohBgwACwALQQAhBgsgAkGgCGokACAGCwIACwIACxYAAkAgAA0AQQAPCxCPKiAANgIAQX8L+AoCBH8EfiMAQfAAayIFJAAgBEL///////////8AgyEJAkACQAJAIAFCf3wiCkJ/USACQv///////////wCDIgsgCiABVK18Qn98IgpC////////v///AFYgCkL///////+///8AURsNACADQn98IgpCf1IgCSAKIANUrXxCf3wiCkL///////+///8AVCAKQv///////7///wBRGw0BCwJAIAFQIAtCgICAgICAwP//AFQgC0KAgICAgIDA//8AURsNACACQoCAgICAgCCEIQQgASEDDAILAkAgA1AgCUKAgICAgIDA//8AVCAJQoCAgICAgMD//wBRGw0AIARCgICAgICAIIQhBAwCCwJAIAEgC0KAgICAgIDA//8AhYRCAFINAEKAgICAgIDg//8AIAIgAyABhSAEIAKFQoCAgICAgICAgH+FhFAiBhshBEIAIAEgBhshAwwCCyADIAlCgICAgICAwP//AIWEUA0BAkAgASALhEIAUg0AIAMgCYRCAFINAiADIAGDIQMgBCACgyEEDAILIAMgCYRQRQ0AIAEhAyACIQQMAQsgAyABIAMgAVYgCSALViAJIAtRGyIHGyEJIAQgAiAHGyILQv///////z+DIQogAiAEIAcbIgJCMIinQf//AXEhCAJAIAtCMIinQf//AXEiBg0AIAVB4ABqIAkgCiAJIAogClAiBht5IAZBBnStfKciBkFxahDrKkEQIAZrIQYgBUHoAGopAwAhCiAFKQNgIQkLIAEgAyAHGyEDIAJC////////P4MhBAJAIAgNACAFQdAAaiADIAQgAyAEIARQIgcbeSAHQQZ0rXynIgdBcWoQ6ypBECAHayEIIAVB2ABqKQMAIQQgBSkDUCEDCyAEQgOGIANCPYiEQoCAgICAgIAEhCEEIApCA4YgCUI9iIQhASADQgOGIQMgCyAChSEKAkAgBiAIayIHRQ0AAkAgB0H/AE0NAEIAIQRCASEDDAELIAVBwABqIAMgBEGAASAHaxDrKiAFQTBqIAMgBCAHEPUqIAUpAzAgBSkDQCAFQcAAakEIaikDAIRCAFKthCEDIAVBMGpBCGopAwAhBAsgAUKAgICAgICABIQhDCAJQgOGIQICQAJAIApCf1UNAAJAIAIgA30iASAMIAR9IAIgA1StfSIEhFBFDQBCACEDQgAhBAwDCyAEQv////////8DVg0BIAVBIGogASAEIAEgBCAEUCIHG3kgB0EGdK18p0F0aiIHEOsqIAYgB2shBiAFQShqKQMAIQQgBSkDICEBDAELIAQgDHwgAyACfCIBIANUrXwiBEKAgICAgICACINQDQAgAUIBiCAEQj+GhCABQgGDhCEBIAZBAWohBiAEQgGIIQQLIAtCgICAgICAgICAf4MhAgJAIAZB//8BSA0AIAJCgICAgICAwP//AIQhBEIAIQMMAQtBACEHAkACQCAGQQBMDQAgBiEHDAELIAVBEGogASAEIAZB/wBqEOsqIAUgASAEQQEgBmsQ9SogBSkDACAFKQMQIAVBEGpBCGopAwCEQgBSrYQhASAFQQhqKQMAIQQLIAFCA4ggBEI9hoQhAyAHrUIwhiAEQgOIQv///////z+DhCAChCEEIAGnQQdxIQYCQAJAAkACQAJAEPMqDgMAAQIDCyAEIAMgBkEES618IgEgA1StfCEEAkAgBkEERg0AIAEhAwwDCyAEIAFCAYMiAiABfCIDIAJUrXwhBAwDCyAEIAMgAkIAUiAGQQBHca18IgEgA1StfCEEIAEhAwwBCyAEIAMgAlAgBkEAR3GtfCIBIANUrXwhBCABIQMLIAZFDQELEPQqGgsgACADNwMAIAAgBDcDCCAFQfAAaiQAC1MBAX4CQAJAIANBwABxRQ0AIAEgA0FAaq2GIQJCACEBDAELIANFDQAgAUHAACADa62IIAIgA60iBIaEIQIgASAEhiEBCyAAIAE3AwAgACACNwMIC+ABAgF/An5BASEEAkAgAEIAUiABQv///////////wCDIgVCgICAgICAwP//AFYgBUKAgICAgIDA//8AURsNACACQgBSIANC////////////AIMiBkKAgICAgIDA//8AViAGQoCAgICAgMD//wBRGw0AAkAgAiAAhCAGIAWEhFBFDQBBAA8LAkAgAyABg0IAUw0AQX8hBCAAIAJUIAEgA1MgASADURsNASAAIAKFIAEgA4WEQgBSDwtBfyEEIAAgAlYgASADVSABIANRGw0AIAAgAoUgASADhYRCAFIhBAsgBAvYAQIBfwJ+QX8hBAJAIABCAFIgAUL///////////8AgyIFQoCAgICAgMD//wBWIAVCgICAgICAwP//AFEbDQAgAkIAUiADQv///////////wCDIgZCgICAgICAwP//AFYgBkKAgICAgIDA//8AURsNAAJAIAIgAIQgBiAFhIRQRQ0AQQAPCwJAIAMgAYNCAFMNACAAIAJUIAEgA1MgASADURsNASAAIAKFIAEgA4WEQgBSDwsgACACViABIANVIAEgA1EbDQAgACAChSABIAOFhEIAUiEECyAEC+8QAgV/Dn4jAEHQAmsiBSQAIARC////////P4MhCiACQv///////z+DIQsgBCAChUKAgICAgICAgIB/gyEMIARCMIinQf//AXEhBgJAAkACQCACQjCIp0H//wFxIgdBf2pB/f8BSw0AQQAhCCAGQX9qQf7/AUkNAQsCQCABUCACQv///////////wCDIg1CgICAgICAwP//AFQgDUKAgICAgIDA//8AURsNACACQoCAgICAgCCEIQwMAgsCQCADUCAEQv///////////wCDIgJCgICAgICAwP//AFQgAkKAgICAgIDA//8AURsNACAEQoCAgICAgCCEIQwgAyEBDAILAkAgASANQoCAgICAgMD//wCFhEIAUg0AAkAgAyACQoCAgICAgMD//wCFhFBFDQBCACEBQoCAgICAgOD//wAhDAwDCyAMQoCAgICAgMD//wCEIQxCACEBDAILAkAgAyACQoCAgICAgMD//wCFhEIAUg0AQgAhAQwCCwJAIAEgDYRCAFINAEKAgICAgIDg//8AIAwgAyAChFAbIQxCACEBDAILAkAgAyAChEIAUg0AIAxCgICAgICAwP//AIQhDEIAIQEMAgtBACEIAkAgDUL///////8/Vg0AIAVBwAJqIAEgCyABIAsgC1AiCBt5IAhBBnStfKciCEFxahDrKkEQIAhrIQggBUHIAmopAwAhCyAFKQPAAiEBCyACQv///////z9WDQAgBUGwAmogAyAKIAMgCiAKUCIJG3kgCUEGdK18pyIJQXFqEOsqIAkgCGpBcGohCCAFQbgCaikDACEKIAUpA7ACIQMLIAVBoAJqIANCMYggCkKAgICAgIDAAIQiDkIPhoQiAkIAQoCAgICw5ryC9QAgAn0iBEIAEPcqIAVBkAJqQgAgBUGgAmpBCGopAwB9QgAgBEIAEPcqIAVBgAJqIAUpA5ACQj+IIAVBkAJqQQhqKQMAQgGGhCIEQgAgAkIAEPcqIAVB8AFqIARCAEIAIAVBgAJqQQhqKQMAfUIAEPcqIAVB4AFqIAUpA/ABQj+IIAVB8AFqQQhqKQMAQgGGhCIEQgAgAkIAEPcqIAVB0AFqIARCAEIAIAVB4AFqQQhqKQMAfUIAEPcqIAVBwAFqIAUpA9ABQj+IIAVB0AFqQQhqKQMAQgGGhCIEQgAgAkIAEPcqIAVBsAFqIARCAEIAIAVBwAFqQQhqKQMAfUIAEPcqIAVBoAFqIAJCACAFKQOwAUI/iCAFQbABakEIaikDAEIBhoRCf3wiBEIAEPcqIAVBkAFqIANCD4ZCACAEQgAQ9yogBUHwAGogBEIAQgAgBUGgAWpBCGopAwAgBSkDoAEiCiAFQZABakEIaikDAHwiAiAKVK18IAJCAVatfH1CABD3KiAFQYABakIBIAJ9QgAgBEIAEPcqIAggByAGa2ohBgJAAkAgBSkDcCIPQgGGIhAgBSkDgAFCP4ggBUGAAWpBCGopAwAiEUIBhoR8Ig1CmZN/fCISQiCIIgIgC0KAgICAgIDAAIQiE0IfiEL/////D4MiBH4iFCABQh+IQv////8PgyIKIAVB8ABqQQhqKQMAQgGGIA9CP4iEIBFCP4h8IA0gEFStfCASIA1UrXxCf3wiD0IgiCINfnwiECAUVK0gECAPQv////8PgyIPIAFCP4giFSALQgGGhEL/////D4MiC358IhEgEFStfCAEIA1+fCAPIAR+IhQgCyANfnwiECAUVK1CIIYgEEIgiIR8IBEgEEIghnwiECARVK18IBAgDyABQgGGIhZC/v///w+DIhF+IhcgEkL/////D4MiEiALfnwiFCAXVK0gFCACIAp+fCIXIBRUrXx8IhQgEFStfCAUIBIgBH4iECARIA1+fCIEIA8gCn58Ig0gAiALfnwiD0IgiCAEIBBUrSANIARUrXwgDyANVK18QiCGhHwiBCAUVK18IAQgFyACIBF+IgIgEiAKfnwiCkIgiCAKIAJUrUIghoR8IgIgF1StIAIgD0IghnwgAlStfHwiAiAEVK18IgRC/////////wBWDQAgE0IBhiAVhCETIAVB0ABqIAIgBCADIA4Q9yogAUIxhiAFQdAAakEIaikDAH0gBSkDUCIBQgBSrX0hDSAGQf7/AGohBkIAIAF9IQoMAQsgBUHgAGogAkIBiCAEQj+GhCICIARCAYgiBCADIA4Q9yogAUIwhiAFQeAAakEIaikDAH0gBSkDYCIKQgBSrX0hDSAGQf//AGohBkIAIAp9IQogASEWCwJAIAZB//8BSA0AIAxCgICAgICAwP//AIQhDEIAIQEMAQsCQAJAIAZBAUgNACANQgGGIApCP4iEIQ0gBq1CMIYgBEL///////8/g4QhDyAKQgGGIQQMAQsCQCAGQY9/Sg0AQgAhAQwCCyAFQcAAaiACIARBASAGaxD1KiAFQTBqIBYgEyAGQfAAahDrKiAFQSBqIAMgDiAFKQNAIgIgBUHAAGpBCGopAwAiDxD3KiAFQTBqQQhqKQMAIAVBIGpBCGopAwBCAYYgBSkDICIBQj+IhH0gBSkDMCIEIAFCAYYiAVStfSENIAQgAX0hBAsgBUEQaiADIA5CA0IAEPcqIAUgAyAOQgVCABD3KiAPIAIgAkIBgyIBIAR8IgQgA1YgDSAEIAFUrXwiASAOViABIA5RG618IgMgAlStfCICIAMgAkKAgICAgIDA//8AVCAEIAUpAxBWIAEgBUEQakEIaikDACICViABIAJRG3GtfCICIANUrXwiAyACIANCgICAgICAwP//AFQgBCAFKQMAViABIAVBCGopAwAiBFYgASAEURtxrXwiASACVK18IAyEIQwLIAAgATcDACAAIAw3AwggBUHQAmokAAuOAgICfwN+IwBBEGsiAiQAAkACQCABvSIEQv///////////wCDIgVCgICAgICAgHh8Qv/////////v/wBWDQAgBUI8hiEGIAVCBIhCgICAgICAgIA8fCEFDAELAkAgBUKAgICAgICA+P8AVA0AIARCPIYhBiAEQgSIQoCAgICAgMD//wCEIQUMAQsCQCAFUEUNAEIAIQZCACEFDAELIAIgBUIAIASnZ0EgaiAFQiCIp2cgBUKAgICAEFQbIgNBMWoQ6yogAkEIaikDAEKAgICAgIDAAIVBjPgAIANrrUIwhoQhBSACKQMAIQYLIAAgBjcDACAAIAUgBEKAgICAgICAgIB/g4Q3AwggAkEQaiQAC+EBAgN/An4jAEEQayICJAACQAJAIAG8IgNB/////wdxIgRBgICAfGpB////9wdLDQAgBK1CGYZCgICAgICAgMA/fCEFQgAhBgwBCwJAIARBgICA/AdJDQAgA61CGYZCgICAgICAwP//AIQhBUIAIQYMAQsCQCAEDQBCACEGQgAhBQwBCyACIAStQgAgBGciBEHRAGoQ6yogAkEIaikDAEKAgICAgIDAAIVBif8AIARrrUIwhoQhBSACKQMAIQYLIAAgBjcDACAAIAUgA0GAgICAeHGtQiCGhDcDCCACQRBqJAALjQECAn8CfiMAQRBrIgIkAAJAAkAgAQ0AQgAhBEIAIQUMAQsgAiABIAFBH3UiA2ogA3MiA61CACADZyIDQdEAahDrKiACQQhqKQMAQoCAgICAgMAAhUGegAEgA2utQjCGfCABQYCAgIB4ca1CIIaEIQUgAikDACEECyAAIAQ3AwAgACAFNwMIIAJBEGokAAtyAgF/An4jAEEQayICJAACQAJAIAENAEIAIQNCACEEDAELIAIgAa1CACABZyIBQdEAahDrKiACQQhqKQMAQoCAgICAgMAAhUGegAEgAWutQjCGfCEEIAIpAwAhAwsgACADNwMAIAAgBDcDCCACQRBqJAALBABBAAsEAEEAC1MBAX4CQAJAIANBwABxRQ0AIAIgA0FAaq2IIQFCACECDAELIANFDQAgAkHAACADa62GIAEgA60iBIiEIQEgAiAEiCECCyAAIAE3AwAgACACNwMIC+sLAgV/D34jAEHgAGsiBSQAIAFCIIggAkIghoQhCiADQhGIIARCL4aEIQsgA0IxiCAEQv///////z+DIgxCD4aEIQ0gBCAChUKAgICAgICAgIB/gyEOIAJC////////P4MiD0IgiCEQIAxCEYghESAEQjCIp0H//wFxIQYCQAJAAkAgAkIwiKdB//8BcSIHQX9qQf3/AUsNAEEAIQggBkF/akH+/wFJDQELAkAgAVAgAkL///////////8AgyISQoCAgICAgMD//wBUIBJCgICAgICAwP//AFEbDQAgAkKAgICAgIAghCEODAILAkAgA1AgBEL///////////8AgyICQoCAgICAgMD//wBUIAJCgICAgICAwP//AFEbDQAgBEKAgICAgIAghCEOIAMhAQwCCwJAIAEgEkKAgICAgIDA//8AhYRCAFINAAJAIAMgAoRQRQ0AQoCAgICAgOD//wAhDkIAIQEMAwsgDkKAgICAgIDA//8AhCEOQgAhAQwCCwJAIAMgAkKAgICAgIDA//8AhYRCAFINACABIBKEIQJCACEBAkAgAlBFDQBCgICAgICA4P//ACEODAMLIA5CgICAgICAwP//AIQhDgwCCwJAIAEgEoRCAFINAEIAIQEMAgsCQCADIAKEQgBSDQBCACEBDAILQQAhCAJAIBJC////////P1YNACAFQdAAaiABIA8gASAPIA9QIggbeSAIQQZ0rXynIghBcWoQ6ypBECAIayEIIAUpA1AiAUIgiCAFQdgAaikDACIPQiCGhCEKIA9CIIghEAsgAkL///////8/Vg0AIAVBwABqIAMgDCADIAwgDFAiCRt5IAlBBnStfKciCUFxahDrKiAIIAlrQRBqIQggBSkDQCIDQjGIIAVByABqKQMAIgJCD4aEIQ0gA0IRiCACQi+GhCELIAJCEYghEQsgC0L/////D4MiAiABQv////8PgyIEfiITIANCD4ZCgID+/w+DIgEgCkL/////D4MiA358IgpCIIYiDCABIAR+fCILIAxUrSACIAN+IhQgASAPQv////8PgyIMfnwiEiANQv////8PgyIPIAR+fCINIApCIIggCiATVK1CIIaEfCITIAIgDH4iFSABIBBCgIAEhCIKfnwiECAPIAN+fCIWIBFC/////weDQoCAgIAIhCIBIAR+fCIRQiCGfCIXfCEEIAcgBmogCGpBgYB/aiEGAkACQCAPIAx+IhggAiAKfnwiAiAYVK0gAiABIAN+fCIDIAJUrXwgAyASIBRUrSANIBJUrXx8IgIgA1StfCABIAp+fCABIAx+IgMgDyAKfnwiASADVK1CIIYgAUIgiIR8IAIgAUIghnwiASACVK18IAEgEUIgiCAQIBVUrSAWIBBUrXwgESAWVK18QiCGhHwiAyABVK18IAMgEyANVK0gFyATVK18fCICIANUrXwiAUKAgICAgIDAAINQDQAgBkEBaiEGDAELIAtCP4ghAyABQgGGIAJCP4iEIQEgAkIBhiAEQj+IhCECIAtCAYYhCyADIARCAYaEIQQLAkAgBkH//wFIDQAgDkKAgICAgIDA//8AhCEOQgAhAQwBCwJAAkAgBkEASg0AAkBBASAGayIHQYABSQ0AQgAhAQwDCyAFQTBqIAsgBCAGQf8AaiIGEOsqIAVBIGogAiABIAYQ6yogBUEQaiALIAQgBxD1KiAFIAIgASAHEPUqIAUpAyAgBSkDEIQgBSkDMCAFQTBqQQhqKQMAhEIAUq2EIQsgBUEgakEIaikDACAFQRBqQQhqKQMAhCEEIAVBCGopAwAhASAFKQMAIQIMAQsgBq1CMIYgAUL///////8/g4QhAQsgASAOhCEOAkAgC1AgBEJ/VSAEQoCAgICAgICAgH9RGw0AIA4gAkIBfCIBIAJUrXwhDgwBCwJAIAsgBEKAgICAgICAgIB/hYRCAFENACACIQEMAQsgDiACIAJCAYN8IgEgAlStfCEOCyAAIAE3AwAgACAONwMIIAVB4ABqJAALdQEBfiAAIAQgAX4gAiADfnwgA0IgiCIEIAFCIIgiAn58IANC/////w+DIgMgAUL/////D4MiAX4iBUIgiCADIAJ+fCIDQiCIfCADQv////8PgyAEIAF+fCIDQiCIfDcDCCAAIANCIIYgBUL/////D4OENwMAC0gBAX8jAEEQayIFJAAgBSABIAIgAyAEQoCAgICAgICAgH+FEOoqIAUpAwAhASAAIAVBCGopAwA3AwggACABNwMAIAVBEGokAAvqAwICfwJ+IwBBIGsiAiQAAkACQCABQv///////////wCDIgRCgICAgICAwP9DfCAEQoCAgICAgMCAvH98Wg0AIABCPIggAUIEhoQhBAJAIABC//////////8PgyIAQoGAgICAgICACFQNACAEQoGAgICAgICAwAB8IQUMAgsgBEKAgICAgICAgMAAfCEFIABCgICAgICAgIAIhUIAUg0BIAUgBEIBg3whBQwBCwJAIABQIARCgICAgICAwP//AFQgBEKAgICAgIDA//8AURsNACAAQjyIIAFCBIaEQv////////8Dg0KAgICAgICA/P8AhCEFDAELQoCAgICAgID4/wAhBSAEQv///////7//wwBWDQBCACEFIARCMIinIgNBkfcASQ0AIAJBEGogACABQv///////z+DQoCAgICAgMAAhCIEIANB/4h/ahDrKiACIAAgBEGB+AAgA2sQ9SogAikDACIEQjyIIAJBCGopAwBCBIaEIQUCQCAEQv//////////D4MgAikDECACQRBqQQhqKQMAhEIAUq2EIgRCgYCAgICAgIAIVA0AIAVCAXwhBQwBCyAEQoCAgICAgICACIVCAFINACAFQgGDIAV8IQULIAJBIGokACAFIAFCgICAgICAgICAf4OEvwvEAwIDfwF+IwBBIGsiAiQAAkACQCABQv///////////wCDIgVCgICAgICAwL9AfCAFQoCAgICAgMDAv398Wg0AIAFCGYinIQMCQCAAUCABQv///w+DIgVCgICACFQgBUKAgIAIURsNACADQYGAgIAEaiEEDAILIANBgICAgARqIQQgACAFQoCAgAiFhEIAUg0BIAQgA0EBcWohBAwBCwJAIABQIAVCgICAgICAwP//AFQgBUKAgICAgIDA//8AURsNACABQhmIp0H///8BcUGAgID+B3IhBAwBC0GAgID8ByEEIAVC////////v7/AAFYNAEEAIQQgBUIwiKciA0GR/gBJDQAgAkEQaiAAIAFC////////P4NCgICAgICAwACEIgUgA0H/gX9qEOsqIAIgACAFQYH/ACADaxD1KiACQQhqKQMAIgVCGYinIQQCQCACKQMAIAIpAxAgAkEQakEIaikDAIRCAFKthCIAUCAFQv///w+DIgVCgICACFQgBUKAgIAIURsNACAEQQFqIQQMAQsgACAFQoCAgAiFhEIAUg0AIARBAXEgBGohBAsgAkEgaiQAIAQgAUIgiKdBgICAgHhxcr4LFQBBsJbDAiQCQbCWA0EPakFwcSQBCwcAIwAjAWsLBAAjAQszAQF/IABBASAAGyEBAkADQCABEOArIgANAQJAELMrIgBFDQAgABEHAAwBCwsQJgALIAALBwAgABDhKwsQACAAQYz8AkEIajYCACAACzwBAn8gARD1KyICQQ1qEP4qIgNBADYCCCADIAI2AgQgAyACNgIAIAAgAxCCKyABIAJBAWoQ7Cs2AgAgAAsHACAAQQxqCyEAIAAQgCsaIABBuPwCQQhqNgIAIABBBGogARCBKxogAAsEAEEBCwoAQYLRABCHFgALHwEBf0EKIQECQCAAEOcVRQ0AIAAQ7xVBf2ohAQsgAQsYAAJA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A34jAEGAAWsiBSQAAkACQAJAIAMgBEIAQgAQ7CpFDQAgAyAEEOsrRQ0AIAJCMIinIgZB//8BcSIHQf//AUcNAQsgBUEQaiABIAIgAyAEEPYqIAUgBSkDECIEIAVBEGpBCGopAwAiAyAEIAMQ7iogBUEIaikDACECIAUpAwAhBAwBCwJAIAEgB61CMIYgAkL///////8/g4QiCSADIARCMIinQf//AXEiCK1CMIYgBEL///////8/g4QiChDsKkEASg0AAkAgASAJIAMgChDsKkUNACABIQQMAgsgBUHwAGogASACQgBCABD2KiAFQfgAaikDACECIAUpA3AhBAwBCwJAAkAgB0UNACABIQQMAQsgBUHgAGogASAJQgBCgICAgICAwLvAABD2KiAFQegAaikDACIJQjCIp0GIf2ohByAFKQNgIQQLAkAgCA0AIAVB0ABqIAMgCkIAQoCAgICAgMC7wAAQ9iogBUHYAGopAwAiCkIwiKdBiH9qIQggBSkDUCEDCyAKQv///////z+DQoCAgICAgMAAhCELIAlC////////P4NCgICAgICAwACEIQkCQCAHIAhMDQADQAJAAkAgCSALfSAEIANUrX0iCkIAUw0AAkAgCiAEIAN9IgSEQgBSDQAgBUEgaiABIAJCAEIAEPYqIAVBKGopAwAhAiAFKQMgIQQMBQsgCkIBhiAEQj+IhCEJDAELIAlCAYYgBEI/iIQhCQsgBEIBhiEEIAdBf2oiByAISg0ACyAIIQcLAkACQCAJIAt9IAQgA1StfSIKQgBZDQAgCSEKDAELIAogBCADfSIEhEIAUg0AIAVBMGogASACQgBCABD2KiAFQThqKQMAIQIgBSkDMCEEDAELAkAgCkL///////8/Vg0AA0AgBEI/iCEDIAdBf2ohByAEQgGGIQQgAyAKQgGGhCIKQoCAgICAgMAAVA0ACwsgBkGAgAJxIQgCQCAHQQBKDQAgBUHAAGogBCAKQv///////z+DIAdB+ABqIAhyrUIwhoRCAEKAgICAgIDAwz8Q9iogBUHIAGopAwAhAiAFKQNAIQQMAQsgCkL///////8/gyAHIAhyrUIwhoQhAgsgACAENwMAIAAgAjcDCCAFQYABaiQAC64BAAJAAkAgAUGACEgNACAARAAAAAAAAOB/oiEAAkAgAUH/D04NACABQYF4aiEB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VGFibGVHZXRSb3dJbmRleABHZXRJbmRleABUYWJsZVNldENvbHVtbkluZGV4AFRhYmxlR2V0Q29sdW1uSW5kZXgAQW50aUFsaWFzZWRMaW5lc1VzZVRleABIZXgAUHJpbVdyaXRlSWR4ACMjbWF4AEdldENsaXBSZWN0TWF4AEdldEl0ZW1SZWN0TWF4AEdldFdpbmRvd0NvbnRlbnRSZWdpb25NYXgAR2V0Q29udGVudFJlZ2lvbk1heABJbnB1dFRleHRFeABQbG90RXgAU2VwYXJhdG9yRXgAU2Nyb2xsYmFyRXgAVGFiSXRlbUV4AEJlZ2luVGFibGVFeAAjI1BvcHVwXyUwOHgALSsgICAwWDB4AC0wWCswWCAwWC0weCsweCAweABSZW5kZXJBcnJvdwBnLkN1cnJlbnRXaW5kb3cgPT0gd2luZG93AHdpbmRvdyA9PSBnLk5hdldpbmRvdwBCZWdpblBvcHVwQ29udGV4dFdpbmRvdwBnLk1vdmluZ1dpbmRvdyAmJiBnLk1vdmluZ1dpbmRvdy0+Um9vdFdpbmRvdwBpbm5lcl93aW5kb3cgPT0gZy5DdXJyZW50V2luZG93AG91dGVyX3dpbmRvdyA9PSBpbm5lcl93aW5kb3cgfHwgb3V0ZXJfd2luZG93ID09IGlubmVyX3dpbmRvdy0+UGFyZW50V2luZG93AE5hdkluaXRXaW5kb3cATmF2VXBkYXRlV2luZG93aW5nSGlnaGxpZ2h0V2luZG93AEZvY3VzV2luZG93AENsb3NlUG9wdXBzT3ZlcldpbmRvdwB3aW5kb3cgPT0gdGFibGUtPklubmVyV2luZG93AH5JbUd1aVdpbmRvdwBmbGFncyAmIEltR3VpV2luZG93RmxhZ3NfQ2hpbGRXaW5kb3cAd2luZG93LT5GbGFncyAmIEltR3VpV2luZG93RmxhZ3NfQ2hpbGRXaW5kb3cAZy5OYXZXaW5kb3cgJiYgcmVzdWx0LT5XaW5kb3cAQm9yZGVyU2hhZG93AFRhYmxlTmV4dFJvdwBUYWJsZUhlYWRlcnNSb3cAVGFibGVCZWdpblJvdwAhdGFibGUtPklzSW5zaWRlUm93AFRhYmxlRW5kUm93ACMjcHJldmlldwBkcmF3X2NtZC5DbGlwUmVjdC54IDw9IGRyYXdfY21kLkNsaXBSZWN0LnogJiYgZHJhd19jbWQuQ2xpcFJlY3QueSA8PSBkcmF3X2NtZC5DbGlwUmVjdC53ACMjaHN2ACMjdgBUYWJsZU9wZW5Db250ZXh0TWVudQAjI0NvbnRleHRNZW51AEJlZ2luTWVudQBFbmRNZW51ACVsbHUAJXUAaW1ndWlfbG9nLnR4dAB3aW5kb3dfY29udGV4dAB2b2lkX2NvbnRleHQARGVzdHJveUNvbnRleHQAU2V0Q3VycmVudENvbnRleHQAR2V0Q3VycmVudENvbnRleHQAV3JhcEltR3VpQ29udGV4dABDcmVhdGVDb250ZXh0AFRlbXBJbnB1dFRleHQAQ29uZmlnRHJhZ0NsaWNrVG9JbnB1dFRleHQAQnVsbGV0VGV4dABEYXRhVHlwZUFwcGx5T3BGcm9tVGV4dABMYWJlbFRleHQATG9nVGV4dABTZXRDbGlwYm9hcmRUZXh0AEdldENsaXBib2FyZFRleHQAQWRkVGV4dAAjI1RleHQAd3QAV2FudFRleHRJbnB1dABUYWJCYXJMYXlvdXQAVGFibGVVcGRhdGVMYXlvdXQARGVidWdDaGVja1ZlcnNpb25BbmREYXRhTGF5b3V0AGtlZXBjb3N0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aTo6RW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aSgpOjooYW5vbnltb3VzIGNsYXNzKTo6b3BlcmF0b3IoKShlbXNjcmlwdGVuOjp2YWwpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUZvbnRDb25maWc6OkVtc2NyaXB0ZW5CaW5kaW5nSW5pdGlhbGl6ZXJfSW1Gb250Q29uZmlnKCk6Oihhbm9ueW1vdXMgY2xhc3MpOjpvcGVyYXRvcigpKEltRm9udENvbmZpZyAmLCBlbXNjcmlwdGVuOjp2YWwpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aTo6RW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aSgpOjooYW5vbnltb3VzIGNsYXNzKTo6b3BlcmF0b3IoKSgpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUZvbnRDb25maWc6OkVtc2NyaXB0ZW5CaW5kaW5nSW5pdGlhbGl6ZXJfSW1Gb250Q29uZmlnKCk6Oihhbm9ueW1vdXMgY2xhc3MpOjpvcGVyYXRvcigpKGNvbnN0IEltRm9udENvbmZpZyAmKSBjb25zdABEcmF3TGlzdCA9PSAmRHJhd0xpc3RJbnN0AEdldFdpbmRvd0RyYXdMaXN0AEltRHJhd0xpc3QAR2V0QmFja2dyb3VuZERyYXdMaXN0AEdldEZvcmVncm91bmREcmF3TGlzdAAjIyNOYXZXaW5kb3dpbmdMaXN0AE1vdXNlRG91YmxlQ2xpY2tNYXhEaXN0AGcuTmF2TW92ZVJlcXVlc3QAUGF0aEFyY1RvRmFzdAB1bnNpZ25lZCBzaG9ydABpbnNlcnQARGlzcGxheVN0YXJ0AFNlbGVjdGlvblN0YXJ0AEdldEtleVByZXNzZWRBbW91bnQAdl9pZHggPj0gMCAmJiB2X2lkeCA8IHZhbHVlc19jb3VudAB2MV9pZHggPj0gMCAmJiB2MV9pZHggPCB2YWx1ZXNfY291bnQAVG90YWxWdHhDb3VudABUb3RhbElkeENvdW50AENtZExpc3RzQ291bnQAR2V0Q29sdW1uc0NvdW50AHNldHRpbmdzLT5Db2x1bW5zQ291bnQgPT0gdGFibGUtPkNvbHVtbnNDb3VudCAmJiBzZXR0aW5ncy0+Q29sdW1uc0NvdW50TWF4ID49IHNldHRpbmdzLT5Db2x1bW5zQ291bnQAY29sdW1uX24gPj0gLTEgJiYgY29sdW1uX24gPCB0YWJsZS0+Q29sdW1uc0NvdW50AGNvbHVtbl9uID49IDAgJiYgY29sdW1uX24gPCB0YWJsZS0+Q29sdW1uc0NvdW50AGNvbHVtbl9uID49IDAgJiYgdGFibGUtPkNvbHVtbnNDb3VudABJdGVtc0NvdW50AGNvbHVtbi0+U29ydE9yZGVyIDwgdGFibGUtPlNvcnRTcGVjc0NvdW50AFRhYmxlR2V0Q29sdW1uQ291bnQARWxlbUNvdW50AG4gPCBjb2x1bW4tPlNvcnREaXJlY3Rpb25zQXZhaWxDb3VudABHZXRGcmFtZUNvdW50AGcuRnJhbWVDb3VudEVuZGVkICE9IGcuRnJhbWVDb3VudABDb25maWdEYXRhQ291bnQAaWR4ID49IDAgJiYgaWR4IDwgX0NvdW50AGZyb250AERzdEZvbnQAU2V0Q3VycmVudEZvbnQAR2V0Rm9udABQb3BGb250AEltRm9udABQdXNoRm9udABDb2RlcG9pbnQASW5wdXRUZXh0V2l0aEhpbnQAdW5zaWduZWQgaW50ACMjY3VycmVudABDaGFubmVsc1NldEN1cnJlbnQAVW5pbmRlbnQASW5kZW50AElucHV0SW50AFZTbGlkZXJJbnQARHJhZ0ludABOYXZVcGRhdGVNb3ZlUmVzdWx0AEFkZEZvbnREZWZhdWx0AERlYnVnIyNEZWZhdWx0AElzQnVpbHQAS2V5QWx0AFRhYmxlUm93QmdBbHQAQ2hhbm5lbHNTcGxpdABJc0l0ZW1EZWFjdGl2YXRlZEFmdGVyRWRpdABUZXN0Qml0AFNldEJpdABDbGVhckJpdABOYXZIaWdobGlnaHQATmF2V2luZG93aW5nSGlnaGxpZ2h0AGhlaWdodABUZXhIZWlnaHQAR2V0V2luZG93SGVpZ2h0AEl0ZW1zSGVpZ2h0AEdldFRleHRMaW5lSGVpZ2h0AEdldEZyYW1lSGVpZ2h0AGcuU3R5bGUuV2luZG93TWVudUJ1dHRvblBvc2l0aW9uID09IEltR3VpRGlyX05vbmUgfHwgZy5TdHlsZS5XaW5kb3dNZW51QnV0dG9uUG9zaXRpb24gPT0gSW1HdWlEaXJfTGVmdCB8fCBnLlN0eWxlLldpbmRvd01lbnVCdXR0b25Qb3NpdGlvbiA9PSBJbUd1aURpcl9SaWdodABTdHlsZUNvbG9yc0xpZ2h0AFRhYmxlQm9yZGVyTGlnaHQAS2V5U2hpZnQAcHRyX2Zyb21fb2Zmc2V0AF9PbkNoYW5nZWRWdHhPZmZzZXQASWR4T2Zmc2V0AEltRHJhd1ZlcnRQb3NPZmZzZXQAU2V0Q29sdW1uT2Zmc2V0AEdldENvbHVtbk9mZnNldABHZXREcmFnZ2VkQ29sdW1uT2Zmc2V0AEltRHJhd1ZlcnRDb2xPZmZzZXQAR2x5cGhPZmZzZXQAYnl0ZU9mZnNldABJbURyYXdWZXJ0VVZPZmZzZXQAQnVsbGV0AEJlZ2luRHJhZ0Ryb3BUYXJnZXQARW5kRHJhZ0Ryb3BUYXJnZXQAZy5EcmFnRHJvcFdpdGhpblRhcmdldABnLk5hdldpbmRvd2luZ1RhcmdldABTZXQAR2V0UmVzaXplQm9yZGVyUmVjdABHZXRXaW5kb3dTY3JvbGxiYXJSZWN0AFBvcENsaXBSZWN0AFB1c2hDbGlwUmVjdABfT25DaGFuZ2VkQ2xpcFJlY3QAUHJpbVJlY3QAUGF0aFJlY3QASXNNb3VzZUhvdmVyaW5nUmVjdABBZGRSZWN0AGZsb2F0AElucHV0RmxvYXQAVlNsaWRlckZsb2F0AERyYWdGbG9hdABQb3BCdXR0b25SZXBlYXQAUHVzaEJ1dHRvblJlcGVhdAB1aW50NjRfdABNZXRyaWNzUmVuZGVyV2luZG93cwBNZXRyaWNzQWN0aXZlV2luZG93cwBTZXROZXh0V2luZG93Rm9jdXMAU2V0V2luZG93Rm9jdXMAU2V0SXRlbURlZmF1bHRGb2N1cwBTZXRXaW5kb3dOYW1lRm9jdXMAUG9wQWxsb3dLZXlib2FyZEZvY3VzAFB1c2hBbGxvd0tleWJvYXJkRm9jdXMAX3NldEF0X05hdklucHV0cwBfZ2V0QXRfTmF2SW5wdXRzAEl0ZXJhdGVEcmF3TGlzdHMAVGFibGVCZWdpbkFwcGx5UmVxdWVzdHMASXRlcmF0ZUZvbnRzAFNldE5leHRXaW5kb3dTaXplQ29uc3RyYWludHMAU2NhbGVDbGlwUmVjdHMAX3NldEF0X0NvbG9ycwBfZ2V0QXRfQ29sb3JzAENvbmZpZ01hY09TWEJlaGF2aW9ycwBDbGVhcklucHV0Q2hhcmFjdGVycwBUYWJsZUdjQ29tcGFjdFRyYW5zaWVudEJ1ZmZlcnMARGVJbmRleEFsbEJ1ZmZlcnMAVGFibGVVcGRhdGVCb3JkZXJzAEluc2VydENoYXJzAERlbGV0ZUNoYXJzAERpc3BsYXlQb3MAU2V0TmV4dFdpbmRvd1BvcwBTZXRXaW5kb3dQb3MAR2V0V2luZG93UG9zAEdldEN1cnNvclN0YXJ0UG9zAFNldEN1cnNvclBvcwBHZXRDdXJzb3JQb3MAUG9wVGV4dFdyYXBQb3MAUHVzaFRleHRXcmFwUG9zAFNldEN1cnNvclNjcmVlblBvcwBHZXRDdXJzb3JTY3JlZW5Qb3MAV2FudFNldE1vdXNlUG9zAEdldE1vdXNlUG9zAFNldFdpbmRvd05hbWVQb3MAX2dldEF0X01vdXNlQ2xpY2tlZFBvcwBMb2dCdXR0b25zAFNldENvbG9yRWRpdE9wdGlvbnMAU2V0QWxsb2NhdG9yRnVuY3Rpb25zAFJlbmRlcldpbmRvd0RlY29yYXRpb25zAE1ldHJpY3NBY3RpdmVBbGxvY2F0aW9ucwBjb2x1bW5zAEJlZ2luQ29sdW1ucwBFbmRDb2x1bW5zAHBpeGVscwBTaXplUGl4ZWxzAFRhYmxlU2V0dXBEcmF3Q2hhbm5lbHMAVGFibGVNZXJnZURyYXdDaGFubmVscwBFcXVhbHMAVXBkYXRlV2luZG93UGFyZW50QW5kUm9vdExpbmtzAHVzbWJsa3MAZnNtYmxrcwBoYmxrcwB1b3JkYmxrcwBmb3JkYmxrcwBFcnJvckNoZWNrTmV3RnJhbWVTYW5pdHlDaGVja3MARXJyb3JDaGVja0VuZEZyYW1lU2FuaXR5Q2hlY2tzAEl0ZXJhdGVHbHlwaHMAV2FudFNhdmVJbmlTZXR0aW5ncwBUYWJsZVNhdmVTZXR0aW5ncwBVcGRhdGVTZXR0aW5ncwBUYWJsZUdldEJvdW5kU2V0dGluZ3MAY2FsbGJhY2tfZGF0YS5GbGFncyA9PSBmbGFncwBDaGVja2JveEZsYWdzAFJhc3Rlcml6ZXJGbGFncwBUYWJsZUdldENvbHVtbkZsYWdzAFRhYmxlU2V0dXBDb2x1bW5GbGFncwBDb25maWdGbGFncwBCYWNrZW5kRmxhZ3MAU2NhbGVBbGxTaXplcwBSZXNlcnZlQnl0ZXMAUGxvdExpbmVzAEFudGlBbGlhc2VkTGluZXMAR2x5cGhSYW5nZXMAQ29uZmlnV2luZG93c1Jlc2l6ZUZyb21FZGdlcwBNZXRyaWNzUmVuZGVyVmVydGljZXMATWV0cmljc1JlbmRlckluZGljZXMASXRlcmF0ZURyYXdDbWRzAFRhYmxlR2V0U29ydFNwZWNzAEltR3VpVGFibGVTb3J0U3BlY3MASW1HdWlUYWJsZVNvcnRDb2x1bW5TcGVjcwBGb250RGF0YU93bmVkQnlBdGxhcwBJbUZvbnRBdGxhcwAKJSpzJS4qcwAgJS4qcwAlLipzJSVkJXMAJSVzOiAlcwBpbmRleF9mcm9tX3B0cgBvZmZzZXRfZnJvbV9wdHIAdmVjdG9yAFNlcGFyYXRvcgBNb3VzZURyYXdDdXJzb3IAU2V0TW91c2VDdXJzb3IAR2V0TW91c2VDdXJzb3IAUmVuZGVyTW91c2VDdXJzb3IAQ2lyY2xlU2VnbWVudE1heEVycm9yAEFkZFJlY3RGaWxsZWRNdWx0aUNvbG9yAFRhYmxlU2V0QmdDb2xvcgBQb3BTdHlsZUNvbG9yAFB1c2hTdHlsZUNvbG9yAFNsaWRlckJlaGF2aW9yAEJ1dHRvbkJlaGF2aW9yAERyYWdCZWhhdmlvcgBUcmVlTm9kZUJlaGF2aW9yAGRzdF9jb2x1bW4tPkRpc3BsYXlPcmRlciA9PSBkc3Rfb3JkZXIgLSByZW9yZGVyX2RpcgBMaXN0Qm94Rm9vdGVyAEFkZElucHV0Q2hhcmFjdGVyAEtleVN1cGVyAH5JbUd1aUxpc3RDbGlwcGVyAENvbmZpZ01lbW9yeUNvbXBhY3RUaW1lcgAjI3ByZXZpZXdpbmdfcGlja2VyACMjcGlja2VyAGJ1ZmZlcgBWdHhCdWZmZXIASWR4QnVmZmVyAFRhYkJhclF1ZXVlUmVvcmRlcgBCb3JkZXIAUmVzZXQgb3JkZXIAY29sdW1uLT5JbmRleFdpdGhpbkVuYWJsZWRTZXQgPD0gY29sdW1uLT5EaXNwbGF5T3JkZXIAU29ydE9yZGVyAFJlbmRlcgBUYWJsZUhlYWRlcgBudW1iZXIASW5wdXRTY2FsYXIAVlNsaWRlclNjYWxhcgBEcmFnU2NhbGFyAHVuc2lnbmVkIGNoYXIARXZlbnRDaGFyAEVsbGlwc2lzQ2hhcgBSZW5kZXJDaGFyAFBhdGhDbGVhcgAjI21lbnViYXIAUG9wU3R5bGVWYXIAUHVzaFN0eWxlVmFyAEJlZ2luTWVudUJhcgBCZWdpbk1haW5NZW51QmFyAEVuZE1haW5NZW51QmFyACMjTWFpbk1lbnVCYXIARW5kTWVudUJhcgB3aW5kb3ctPkZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19NZW51QmFyAFByb2dyZXNzQmFyAEJlZ2luVGFiQmFyAEVuZFRhYkJhcgBBbHBoYSBCYXIAR2V0TW91c2VQb3NPbk9wZW5pbmdDdXJyZW50UG9wdXAAQ2xvc2VDdXJyZW50UG9wdXAARmluZEJlc3RXaW5kb3dQb3NGb3JQb3B1cABCZWdpblBvcHVwAE9wZW5Qb3B1cABFbmRQb3B1cAB3aW5kb3ctPkZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19Qb3B1cABCZWdpbkdyb3VwAEVuZEdyb3VwAC4uL2ltZ3VpX2RyYXcuY3BwAC4uL2ltZ3VpX3dpZGdldHMuY3BwAC4uL2ltZ3VpX3RhYmxlcy5jcHAALi4vaW1ndWkuY3BwAENhcHR1cmVNb3VzZUZyb21BcHAAQ2FwdHVyZUtleWJvYXJkRnJvbUFwcABUcmVlUG9wAERhdGFUeXBlQ2xhbXAAU2V0VG9vbHRpcABCZWdpblRvb2x0aXAARW5kVG9vbHRpcABHZXRDdXJyZW50V2luZG93UmVhZCgpLT5GbGFncyAmIEltR3VpV2luZG93RmxhZ3NfVG9vbHRpcABSZXNpemVHcmlwAFN0ZXAAU2V0SXRlbUFsbG93T3ZlcmxhcABfc2V0QXRfS2V5TWFwAF9nZXRBdF9LZXlNYXAARGF0YVR5cGVBcHBseU9wAG1hbGxpbmZvAERhdGFUeXBlR2V0SW5mbwBHZXRTdHlsZVZhckluZm8Ac3RiX3RleHRlZGl0X2Rpc2NhcmRfcmVkbwBCZWdpbkNvbWJvAEVuZENvbWJvAFBhdGhCZXppZXJRdWFkcmF0aWNDdXJ2ZVRvAFBhdGhCZXppZXJDdWJpY0N1cnZlVG8AUGF0aExpbmVUbwBQYXRoQXJjVG8ARm9udE5vAFN0ZXBObwBJc0tleURvd24AX3NldEF0X0tleXNEb3duAF9nZXRBdF9LZXlzRG93bgBJc0FueU1vdXNlRG93bgBJc01vdXNlRG93bgBfc2V0QXRfTW91c2VEb3duAF9nZXRBdF9Nb3VzZURvd24AI1NvdXJjZUV4dGVybgBBcnJvd0J1dHRvbgAjI0NvbG9yQnV0dG9uAFRhYkl0ZW1CdXR0b24AU21hbGxCdXR0b24AVGFiTWluV2lkdGhGb3JDbG9zZUJ1dHRvbgBJbnZpc2libGVCdXR0b24ASW1hZ2VCdXR0b24Ac3RkOjpleGNlcHRpb24AV2luZG93TWVudUJ1dHRvblBvc2l0aW9uAENvbG9yQnV0dG9uUG9zaXRpb24AVGFibGVHZXRDb2x1bW5OZXh0U29ydERpcmVjdGlvbgBUYWJsZVNldENvbHVtblNvcnREaXJlY3Rpb24AVGFibGVHZXRDb2x1bW5BdmFpbFNvcnREaXJlY3Rpb24ASGFzU2VsZWN0aW9uAF9fY3hhX2d1YXJkX2FjcXVpcmUgZGV0ZWN0ZWQgcmVjdXJzaXZlIGluaXRpYWxpemF0aW9uAF9nZXRBdF9LZXlzRG93bkR1cmF0aW9uAF9nZXRBdF9OYXZJbnB1dHNEb3duRHVyYXRpb24AX2dldEF0X01vdXNlRG93bkR1cmF0aW9uAEFkZE5nb24AVGFibGVOZXh0Q29sdW1uAFRhYmxlU2V0dXBDb2x1bW4AIyNtaW4AKChjaGFyKikoc3RhdGUtPnVuZG9fcmVjICsgc3RhdGUtPnJlZG9fcG9pbnQpKSA+PSBidWZfYmVnaW4AR2V0U3BhblB0ckJlZ2luAExvZ0JlZ2luAEdldENsaXBSZWN0TWluAEdldEl0ZW1SZWN0TWluAEdldFdpbmRvd0NvbnRlbnRSZWdpb25NaW4AQnV0dG9uVGV4dEFsaWduAFNlbGVjdGFibGVUZXh0QWxpZ24AV2luZG93VGl0bGVBbGlnbgBJdGVtc0Zyb3plbgBJc1BvcHVwT3BlbgBTZXROZXh0SXRlbU9wZW4ASXNJdGVtVG9nZ2xlZE9wZW4AcG9zIDw9IHRleHRfbGVuAFB1c2hDbGlwUmVjdEZ1bGxTY3JlZW4AcG9zICsgYnl0ZXNfY291bnQgPD0gQnVmVGV4dExlbgBuYW4AU2V0Q2xpcGJvYXJkVGV4dEZuAEdldENsaXBib2FyZFRleHRGbgBXZWlnaHQ9JWYlbgBPcmRlcj0lZCVuAFdpZHRoPSVkJW4AVmlzaWJsZT0lZCVuAENvbHVtbiAlZCVuAFNvcnQ9JWQlYyVuAFVzZXJJRD0weCUwOFglbgBCZWdpblBvcHVwQ29udGV4dEl0ZW0ATmF2U2NvcmVJdGVtAEJlZ2luVGFiSXRlbQBFbmRUYWJJdGVtAFBsb3RIaXN0b2dyYW0AS2V5Q3RybABib29sAEN1cnZlVGVzc2VsbGF0aW9uVG9sAEFudGlBbGlhc2VkRmlsbABTaXplIGFsbCBjb2x1bW5zIHRvIGRlZmF1bHQjIyNTaXplQWxsAFNpemUgYWxsIGNvbHVtbnMgdG8gZml0IyMjU2l6ZUFsbABXaW5kb3dTZXR0aW5nc0hhbmRsZXJfV3JpdGVBbGwAR2V0Q29udGVudFJlZ2lvbkF2YWlsAGJ5dGVzX3Blcl9waXhlbABHZXRGb250VGV4VXZXaGl0ZVBpeGVsAENsb3NlUG9wdXBUb0xldmVsAFNldEN1cnJlbnRDaGFubmVsAE1vdXNlV2hlZWwAZW1zY3JpcHRlbjo6dmFsACMjb3JpZ2luYWwAT3JpZ2luYWwAQmVnaW5Qb3B1cE1vZGFsAENoZWNrTWFyawBTdHlsZUNvbG9yc0RhcmsAbmV4dF9jaHVuawBzaHJpbmsAQ29uZmlnSW5wdXRUZXh0Q3Vyc29yQmxpbmsAT3BlblBvcHVwT25JdGVtQ2xpY2sARmluZEdseXBoTm9GYWxsYmFjawBBZGRDYWxsYmFjawBwb3BfYmFjawBpbWd1aS5pbmkAUG9zPSVpLCVpAFNpemU9JWksJWkARGVmYXVsdCBEZXB0aABsZW5ndGgAYnl0ZUxlbmd0aAB3aWR0aABUZXhXaWR0aABHZXRXaW5kb3dXaWR0aABHZXRXaW5kb3dDb250ZW50UmVnaW9uV2lkdGgAVGFibGVTZXRDb2x1bW5XaWR0aABHZXRDb2x1bW5XaWR0aABUYWJsZVVwZGF0ZUNvbHVtbnNXZWlnaHRGcm9tV2lkdGgAU2V0TmV4dEl0ZW1XaWR0aABQb3BJdGVtV2lkdGgAUHVzaEl0ZW1XaWR0aABDYWxjSXRlbVdpZHRoACNUcmVlUHVzaABMb2dGaW5pc2gASW1Gb250R2x5cGgARmluZEdseXBoAC4uL2ltc3RiX3RleHRlZGl0LmgALi4vaW1ndWlfaW50ZXJuYWwuaAAuLlxpbWd1aS5oAC4uL2ltZ3VpLmgAVGFibGVCb3JkZXJTdHJvbmcAdW5zaWduZWQgbG9uZwBzdGQ6OndzdHJpbmcAYmFzaWNfc3RyaW5nAHN0ZDo6c3RyaW5nAHN0ZDo6dTE2c3RyaW5nAHN0ZDo6dTMyc3RyaW5nAERhdGFUeXBlRm9ybWF0U3RyaW5nAElzV2luZG93QXBwZWFyaW5nAENhbGNMaXN0Q2xpcHBpbmcARm9udEFsbG93VXNlclNjYWxpbmcASXNNb3VzZURyYWdnaW5nAFdpbmRvd1JvdW5kaW5nAFNjcm9sbGJhclJvdW5kaW5nAFBvcHVwUm91bmRpbmcARnJhbWVSb3VuZGluZwBDaGlsZFJvdW5kaW5nAEdyYWJSb3VuZGluZwBUYWJSb3VuZGluZwAhd2luZG93LT5EQy5NZW51QmFyQXBwZW5kaW5nAERpc3BsYXlXaW5kb3dQYWRkaW5nAENlbGxQYWRkaW5nAEFsaWduVGV4dFRvRnJhbWVQYWRkaW5nAFRvdWNoRXh0cmFQYWRkaW5nAERpc3BsYXlTYWZlQXJlYVBhZGRpbmcASW5kZW50U3BhY2luZwBJdGVtSW5uZXJTcGFjaW5nAENvbHVtbnNNaW5TcGFjaW5nAEl0ZW1TcGFjaW5nAEdldFRyZWVOb2RlVG9MYWJlbFNwYWNpbmcAR2V0VGV4dExpbmVIZWlnaHRXaXRoU3BhY2luZwBHZXRGcmFtZUhlaWdodFdpdGhTcGFjaW5nAEdseXBoRXh0cmFTcGFjaW5nAEltRm9udENvbmZpZwAlLjBmIGRlZwBOYXZVcGRhdGVBbnlSZXF1ZXN0RmxhZwBFdmVudEZsYWcAUG9wSXRlbUZsYWcAUHVzaEl0ZW1GbGFnAFdpbmRvd0JnAFRhYmxlUm93QmcAVGFibGVIZWFkZXJCZwBTY3JvbGxiYXJCZwBNZW51QmFyQmcAUG9wdXBCZwBNb2RhbFdpbmRvd0RpbUJnAE5hdldpbmRvd2luZ0RpbUJnAEZyYW1lQmcAVGl0bGVCZwBDaGlsZEJnAFRleHRTZWxlY3RlZEJnACVkOiAlOC40ZwolZDogJTguNGcAQnVmAGluZgAlbGYAc2Fucy1zZXJpZgAgV2VpZ2h0PSUuNGYAVjolMC4zZgBTOiUwLjNmAFI6JTAuM2YASDolMC4zZgBHOiUwLjNmAEI6JTAuM2YAQTolMC4zZgAlczogJS4zZgBIOiAlLjNmLCBTOiAlLjNmLCBWOiAlLjNmAEg6ICUuM2YsIFM6ICUuM2YsIFY6ICUuM2YsIEE6ICUuM2YAKihjb25zdCBmbG9hdCopcF9taW4gPj0gLTMuNDAyODIzNDdlKzM4RiAvIDIuMGYgJiYgKihjb25zdCBmbG9hdCopcF9tYXggPD0gMy40MDI4MjM0N2UrMzhGIC8gMi4wZgAqKGNvbnN0IGRvdWJsZSopcF9taW4gPj0gLTEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4IC8gMi4wZiAmJiAqKGNvbnN0IGRvdWJsZSopcF9tYXggPD0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDggLyAyLjBmAGNlbnRlcl95X3JhdGlvID49IDAuMGYgJiYgY2VudGVyX3lfcmF0aW8gPD0gMS4wZgBjZW50ZXJfeF9yYXRpbyA+PSAwLjBmICYmIGNlbnRlcl94X3JhdGlvIDw9IDEuMGYAY29sdW1uLT5TdHJldGNoV2VpZ2h0ID4gMC4wZgBJdGVtc0hlaWdodCA+IDAuMGYAdmlzaWJsZV93ZWlnaHQgPiAwLjBmICYmIHZpc2libGVfd2lkdGggPiAwLjBmAGNvbHVtbl8wX3dpZHRoID4gMC4wZiAmJiBjb2x1bW5fMV93aWR0aCA+IDAuMGYAdGFiLT5Db250ZW50V2lkdGggPiAwLjBmAHRhYmxlLT5NaW5Db2x1bW5XaWR0aCA+IDAuMGYAc2Nyb2xsYmFyX3NpemUgPiAwLjBmAHNjYWxlID4gMC4wZgBmb250LT5TY2FsZSA+IDAuMGYASW1NYXgoc2l6ZV9jb250ZW50c192LCBzaXplX2F2YWlsX3YpID4gMC4wZgBpbm5lcl93aWR0aCA+PSAwLjBmAHRhYmxlLT5Jbm5lcldpbmRvdy0+V2luZG93UGFkZGluZy54ID09IDAuMGYgJiYgdGFibGUtPklubmVyV2luZG93LT5XaW5kb3dQYWRkaW5nLnkgPT0gMC4wZiAmJiB0YWJsZS0+SW5uZXJXaW5kb3ctPldpbmRvd0JvcmRlclNpemUgPT0gMC4wZgBJdGVtc0hlaWdodCA8PSAwLjBmAHNpemVfYXJnLnggIT0gMC4wZiAmJiBzaXplX2FyZy55ICE9IDAuMGYAUmVmU2NhbGU9JWYAVGFibGVTb3J0U3BlY3NTYW5pdGl6ZQBhcHBseV9uZXdfdGV4dF9sZW5ndGggPD0gYnVmX3NpemUAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQBJbml0aWFsaXplAERpc3BsYXlTaXplAEltRHJhd0lkeFNpemUAU2V0TmV4dFdpbmRvd1NpemUAU2V0V2luZG93U2l6ZQBHZXRXaW5kb3dTaXplAENhbGNUZXh0U2l6ZQBJbURyYXdWZXJ0U2l6ZQBHZXRGb250U2l6ZQBTZXROZXh0V2luZG93Q29udGVudFNpemUAQ3VycmVudFNpemUAR2V0SXRlbVJlY3RTaXplAFdpbmRvd0JvcmRlclNpemUAUG9wdXBCb3JkZXJTaXplAEZyYW1lQm9yZGVyU2l6ZQBDaGlsZEJvcmRlclNpemUAVGFiQm9yZGVyU2l6ZQBTY3JvbGxiYXJTaXplAFdpbmRvd01pblNpemUAR3JhYk1pblNpemUAQnVmU2l6ZQBTZXRXaW5kb3dOYW1lU2l6ZQBJbUd1aVN0eWxlU2l6ZQBEZXNpcmVkU2l6ZQBJbUd1aUlPU2l6ZQBJbVZlYzRTaXplAEltVmVjMlNpemUAZy5XaW5kb3dzRm9jdXNPcmRlci5TaXplID09IGcuV2luZG93cy5TaXplAGNvbHVtbl9pbmRleCA8IGNvbHVtbnMtPkNvbHVtbnMuU2l6ZQAoaW50KWRyYXdfbGlzdC0+X1Z0eEN1cnJlbnRJZHggPT0gZHJhd19saXN0LT5WdHhCdWZmZXIuU2l6ZQBkcmF3X2xpc3QtPlZ0eEJ1ZmZlci5TaXplID09IDAgfHwgZHJhd19saXN0LT5fVnR4V3JpdGVQdHIgPT0gZHJhd19saXN0LT5WdHhCdWZmZXIuRGF0YSArIGRyYXdfbGlzdC0+VnR4QnVmZmVyLlNpemUAZHJhd19saXN0LT5JZHhCdWZmZXIuU2l6ZSA9PSAwIHx8IGRyYXdfbGlzdC0+X0lkeFdyaXRlUHRyID09IGRyYXdfbGlzdC0+SWR4QnVmZmVyLkRhdGEgKyBkcmF3X2xpc3QtPklkeEJ1ZmZlci5TaXplAGcuV2luZG93cy5TaXplID09IGcuV2luZG93c1RlbXBTb3J0QnVmZmVyLlNpemUAZHN0X3RtcCA9PSBnLkRyYXdDaGFubmVsc1RlbXBNZXJnZUJ1ZmZlci5EYXRhICsgZy5EcmF3Q2hhbm5lbHNUZW1wTWVyZ2VCdWZmZXIuU2l6ZQByZW1haW5pbmcgPj0gMCAmJiByZW1haW5pbmcgPCBnLk9wZW5Qb3B1cFN0YWNrLlNpemUAdGFiLT5OYW1lT2Zmc2V0ICE9IC0xICYmIChpbnQpdGFiLT5OYW1lT2Zmc2V0IDwgVGFic05hbWVzLkJ1Zi5TaXplAG9mZiA+PSA0ICYmIG9mZiA8IEJ1Zi5TaXplAHAgPj0gQnVmLkRhdGEgJiYgcCA8IEJ1Zi5EYXRhICsgQnVmLlNpemUAdGV4dF9sZW4gPCBvYmotPlRleHRXLlNpemUAbmV3X3NpemUgPD0gU2l6ZQBpID49IDAgJiYgaSA8IFNpemUAaXQgPj0gRGF0YSAmJiBpdCA8PSBEYXRhICsgU2l6ZQBpdCA+PSBEYXRhICYmIGl0IDwgRGF0YSArIFNpemUAVGFibGVTZXR1cFNjcm9sbEZyZWV6ZQBQcmltVW5yZXNlcnZlAFByaW1SZXNlcnZlAE5hdkFjdGl2ZQBTZXBhcmF0b3JBY3RpdmUASGVhZGVyQWN0aXZlAGcuQWN0aXZlSWQgPT0gaWQgfHwgZy5BY3RpdmVJZCA9PSAwIHx8IGcuRHJhZ0Ryb3BBY3RpdmUAUmVzaXplR3JpcEFjdGl2ZQBCdXR0b25BY3RpdmUASXNBbnlJdGVtQWN0aXZlAElzSXRlbUFjdGl2ZQBGcmFtZUJnQWN0aXZlAFRpdGxlQmdBY3RpdmUAVGFiVW5mb2N1c2VkQWN0aXZlAFNsaWRlckdyYWJBY3RpdmUAU2Nyb2xsYmFyR3JhYkFjdGl2ZQBUYWJBY3RpdmUAcGFyZW50X3dpbmRvdyAmJiBwYXJlbnRfd2luZG93LT5BY3RpdmUAZy5DdXJyZW50V2luZG93LT5Jc0ZhbGxiYWNrV2luZG93ID09IHRydWUAaHVlAENvbXBhcmVXaXRoQ3VycmVudFN0YXRlAEZyYW1lcmF0ZQBJdGVyYXRlR2x5cGhUb0NyZWF0ZQBOYXZVcGRhdGUAUGF0aExpbmVUb01lcmdlRHVwbGljYXRlAEtleVJlcGVhdFJhdGUASW5pU2F2aW5nUmF0ZQBXYW50Q2FwdHVyZU1vdXNlAGcuRHJhZ0Ryb3BXaXRoaW5UYXJnZXQgPT0gZmFsc2UAdGFibGUtPklzVW5mcm96ZW5Sb3dzID09IGZhbHNlAGcuV2l0aGluRW5kQ2hpbGQgPT0gZmFsc2UAdGFibGUtPk1lbW9yeUNvbXBhY3RlZCA9PSBmYWxzZQBnLkxvZ0VuYWJsZWQgPT0gZmFsc2UAdGFibGUgIT0gMEwgJiYgdGFibGUtPklzTGF5b3V0TG9ja2VkID09IGZhbHNlAGVyYXNlAFNldEtleWJvYXJkRm9jdXNIZXJlAERhdGFUeXBlQ29tcGFyZQBnLldpdGhpbkZyYW1lU2NvcGUATG9nU2xpZGVyRGVhZHpvbmUAdGFyZ2V0ICE9IEltR3VpVGFibGVCZ1RhcmdldF9Ob25lAGcuTmF2TW92ZURpciAhPSBJbUd1aURpcl9Ob25lICYmIGcuTmF2TW92ZUNsaXBEaXIgIT0gSW1HdWlEaXJfTm9uZQBzb3J0X2RpcmVjdGlvbiAhPSBJbUd1aVNvcnREaXJlY3Rpb25fTm9uZQBnLk5hdk1vdmVSZXF1ZXN0Rm9yd2FyZCA9PSBJbUd1aU5hdkZvcndhcmRfTm9uZQBBZGRQb2x5bGluZQBJbnB1dFRleHRNdWx0aWxpbmUATmV3TGluZQBTYW1lTGluZQBBZGRMaW5lAFNpemUgY29sdW1uIHRvIGZpdCMjI1NpemVPbmUAR2V0VGltZQBNb3VzZURvdWJsZUNsaWNrVGltZQBEZWx0YVRpbWUAVXBkYXRlTW91c2VNb3ZpbmdXaW5kb3dOZXdGcmFtZQBOYXZFbmRGcmFtZQBCZWdpbkNoaWxkRnJhbWUARW5kQ2hpbGRGcmFtZQBJbmlGaWxlbmFtZQBMb2dGaWxlbmFtZQBGb250TmFtZQBHZXRTdHlsZUNvbG9yTmFtZQBCYWNrZW5kUmVuZGVyZXJOYW1lAFRhYmxlR2V0Q29sdW1uTmFtZQBCYWNrZW5kUGxhdGZvcm1OYW1lAEdldFRhYk5hbWUAR2V0U3R5bGUASW1HdWlTdHlsZQBMb2dUb0ZpbGUATG9nIFRvIEZpbGUAQWRkVHJpYW5nbGUAU2xpZGVyQW5nbGUAQWRkQ2lyY2xlAGRvdWJsZQBJbnB1dERvdWJsZQAhaXNfdmlzaWJsZQBOYXZWaXNpYmxlAElzSXRlbVZpc2libGUAdGFiLT5MYXN0RnJhbWVWaXNpYmxlID49IHRhYl9iYXItPlByZXZGcmFtZVZpc2libGUAdGFibGUtPkZsYWdzICYgSW1HdWlUYWJsZUZsYWdzX1Jlc2l6YWJsZQB0YWJsZS0+RmxhZ3MgJiBJbUd1aVRhYmxlRmxhZ3NfU29ydGFibGUAIyNzZWxlY3RhYmxlAGcuQ3VycmVudFdpbmRvdyA9PSBvdXRlcl93aW5kb3cgJiYgZy5DdXJyZW50VGFibGUgPT0gdGFibGUAdGFibGUtPkZsYWdzICYgSW1HdWlUYWJsZUZsYWdzX1Jlb3JkZXJhYmxlAEJlZ2luVGFibGUARW5kVGFibGUAU2V0V2luZG93Rm9udFNjYWxlAE1vdXNlQ3Vyc29yU2NhbGUARGlzcGxheUZyYW1lYnVmZmVyU2NhbGUARm9udEdsb2JhbFNjYWxlAFBhdGhTdHJva2UAQ2hhbm5lbHNNZXJnZQBTZXRTdGF0ZVN0b3JhZ2UAR2V0U3RhdGVTdG9yYWdlACNpbWFnZQBBZGRJbWFnZQBNZW1GcmVlAGZpbGVuYW1lICYmIG1vZGUATWVyZ2VNb2RlAEJlZ2luRHJhZ0Ryb3BTb3VyY2UARW5kRHJhZ0Ryb3BTb3VyY2UAY29uZCA9PSBJbUd1aUNvbmRfQWx3YXlzIHx8IGNvbmQgPT0gSW1HdWlDb25kX09uY2UAc3RiX3RleHRlZGl0X3JlcGxhY2UATmF2TW92ZVJlcXVlc3RGb3J3YXJkAFdhbnRDYXB0dXJlS2V5Ym9hcmQATG9nVG9DbGlwYm9hcmQATG9nIFRvIENsaXBib2FyZABUYWJJdGVtQmFja2dyb3VuZAAjI0JhY2tncm91bmQAIyNGb3JlZ3JvdW5kACgoY2hhciopKHN0YXRlLT51bmRvX3JlYyArIHN0YXRlLT5yZWRvX3BvaW50ICsgMSkgKyBtb3ZlX3NpemUpIDw9IGJ1Zl9lbmQARGlzcGxheUVuZABHZXRTcGFuUHRyRW5kAFNlbGVjdGlvbkVuZABpdCA+PSBEYXRhICYmIGl0IDwgRGF0YUVuZABwID49IERhdGEgJiYgcCA8IERhdGFFbmQASW1EcmF3Q21kAEFkZERyYXdDbWQASXNNb3VzZURyYWdQYXN0VGhyZXNob2xkAE1vdXNlRHJhZ1RocmVzaG9sZABidXR0b25fZmxhZ3MgJiBJbUd1aUJ1dHRvbkZsYWdzX1ByZXNzZWRPbkRyYWdEcm9wSG9sZAAlbGxkAFRhYmxlU29ydFNwZWNzQnVpbGQAQmVnaW5DaGlsZABFbmRDaGlsZAB2b2lkAEJlZ2luUG9wdXBDb250ZXh0Vm9pZABJc01vdXNlUG9zVmFsaWQAZy5BY3RpdmVJZCA9PSBpZABjb2x1bW5zLT5JRCA9PSBpZABzdGF0ZSAmJiBzdGF0ZS0+SUQgPT0gaWQAaGJsa2hkAGcuSW5pdGlhbGl6ZWQAZy5OYXZNb3ZlUmVxdWVzdEZvcndhcmQgPT0gSW1HdWlOYXZGb3J3YXJkX0ZvcndhcmRRdWV1ZWQAVGV4dFVuZm9ybWF0dGVkAElzSXRlbUVkaXRlZABNYXJrSXRlbUVkaXRlZABJc0l0ZW1EZWFjdGl2YXRlZABJc0l0ZW1BY3RpdmF0ZWQAQ2xlYXJHbHlwaENyZWF0ZWQAVGFiVW5mb2N1c2VkAElzV2luZG93Rm9jdXNlZABJc0FueUl0ZW1Gb2N1c2VkAElzSXRlbUZvY3VzZWQASXNLZXlQcmVzc2VkAFNldE5leHRXaW5kb3dDb2xsYXBzZWQAU2V0V2luZG93Q29sbGFwc2VkAElzV2luZG93Q29sbGFwc2VkAFRpdGxlQmdDb2xsYXBzZWQAU2V0V2luZG93TmFtZUNvbGxhcHNlZABTZXRUYWJJdGVtQ2xvc2VkAElzS2V5UmVsZWFzZWQASXNNb3VzZVJlbGVhc2VkAFRleHRDb2xvcmVkAElzV2luZG93SG92ZXJlZABQbG90TGluZXNIb3ZlcmVkAFNlcGFyYXRvckhvdmVyZWQASGVhZGVySG92ZXJlZABSZXNpemVHcmlwSG92ZXJlZABCdXR0b25Ib3ZlcmVkAElzQW55SXRlbUhvdmVyZWQASXNJdGVtSG92ZXJlZABQbG90SGlzdG9ncmFtSG92ZXJlZABGcmFtZUJnSG92ZXJlZABTY3JvbGxiYXJHcmFiSG92ZXJlZABUYWJIb3ZlcmVkAFRleHRXcmFwcGVkACh3aW5kb3ctPkZsYWdzIHwgZy5OYXZXaW5kb3ctPkZsYWdzKSAmIEltR3VpV2luZG93RmxhZ3NfTmF2RmxhdHRlbmVkAEFkZENvbnZleFBvbHlGaWxsZWQAQWRkUmVjdEZpbGxlZABBZGROZ29uRmlsbGVkAEFkZFRyaWFuZ2xlRmlsbGVkAEFkZENpcmNsZUZpbGxlZABBZGRRdWFkRmlsbGVkAFRleHREaXNhYmxlZABJc0l0ZW1DbGlja2VkAElzTW91c2VDbGlja2VkAElzTW91c2VEb3VibGVDbGlja2VkAEFkZEltYWdlUm91bmRlZAAhZy5Jbml0aWFsaXplZCAmJiAhZy5TZXR0aW5nc0xvYWRlZABBZGRJbWFnZVF1YWQAQWRkUXVhZABBY2NlcHREcmFnRHJvcFBheWxvYWQAU2V0RHJhZ0Ryb3BQYXlsb2FkAEdldERyYWdEcm9wUGF5bG9hZABnLk5hdkFjdGl2YXRlRG93bklkID09IGcuTmF2QWN0aXZhdGVJZABmb250LT5Db250YWluZXJBdGxhcy0+VGV4SUQgPT0gX0NtZEhlYWRlci5UZXh0dXJlSWQAVjolM2QAUzolM2QAUjolM2QASDolM2QARzolM2QAQjolM2QAQTolM2QAIyNNZW51XyUwMmQAIyNUb29sdGlwXyUwMmQAIyNDb21ib18lMDJkAENvbHVtbiAlLTJkACBPcmRlcj0lZAAgV2lkdGg9JWQAIFZpc2libGU9JWQAQ29sbGFwc2VkPSVkADB4JTA4WCwlZAAlczogJWQATWVtQWxsb2MAQWRkQmV6aWVyUXVhZHJhdGljAFN0eWxlQ29sb3JzQ2xhc3NpYwBBZGRCZXppZXJDdWJpYwBHZXRTcGVjACBTb3J0PSVkJWMAcmIAIyNyZ2IAU2xpZGVyR3JhYgBTY3JvbGxiYXJHcmFiAFRhYkJhckNsb3NlVGFiAHJ3YQBSZXNldE1vdXNlRHJhZ0RlbHRhAEdldE1vdXNlRHJhZ0RlbHRhAE1vdXNlRGVsdGEAR2V0RHJhd0RhdGEAQWRkRHJhd0xpc3RUb0RyYXdEYXRhAEltRHJhd0RhdGEARm9udERhdGEAQmFja2VuZFJlbmRlcmVyVXNlckRhdGEAQmFja2VuZFBsYXRmb3JtVXNlckRhdGEAQmFja2VuZExhbmd1YWdlVXNlckRhdGEAQ2xpcGJvYXJkVXNlckRhdGEASW1HdWlJbnB1dFRleHRDYWxsYmFja0RhdGEASW1HdWlTaXplQ2FsbGJhY2tEYXRhAENvbmZpZ0RhdGEAR2V0RHJhd0xpc3RTaGFyZWREYXRhAEJ1ZiA9PSBlZGl0X3N0YXRlLT5UZXh0QS5EYXRhAGNhbGxiYWNrX2RhdGEuQnVmID09IHN0YXRlLT5UZXh0QS5EYXRhAGFyZW5hAGFscGhhAFNldE5leHRXaW5kb3dCZ0FscGhhAFt+XQBbeF0Ab3BlcmF0b3JbXQBbIF0AIyNaAEdldFNjcm9sbE1heFkAU3RhcnRQb3NZAFNldEN1cnNvclBvc1kAR2V0Q3Vyc29yUG9zWQBTZXRTY3JvbGxGcm9tUG9zWQBTZXRTY3JvbGxZAEdldFNjcm9sbFkAU2V0U2Nyb2xsSGVyZVkATG9nVG9UVFkATG9nIFRvIFRUWQAjU0NST0xMWQAjI1kAR2V0U2Nyb2xsTWF4WABTZXRDdXJzb3JQb3NYAEdldEN1cnNvclBvc1gAU2V0U2Nyb2xsRnJvbVBvc1gAU2V0U2Nyb2xsWABHZXRTY3JvbGxYAFNldFNjcm9sbEhlcmVYAEdseXBoTWF4QWR2YW5jZVgAR2x5cGhNaW5BZHZhbmNlWAAjU0NST0xMWABIb3ZlcmVkSWQ6IDB4JTA4WAAlcy8lc18lMDhYACBVc2VySUQ9JTA4WAAlcy8lMDhYACMlMDJYJTAyWCUwMlglMDJYACMlMDJYJTAyWCUwMlgAIyNYACMjVwBPdmVyc2FtcGxlVgBQcmltUmVjdFVWAFByaW1RdWFkVVYAQ29sb3JDb252ZXJ0UkdCdG9IU1YAaW1ndWlfa2V5ID49IDAgJiYgaW1ndWlfa2V5IDwgSW1HdWlLZXlfQ09VTlQAbW91c2VfY3Vyc29yID4gSW1HdWlNb3VzZUN1cnNvcl9Ob25lICYmIG1vdXNlX2N1cnNvciA8IEltR3VpTW91c2VDdXJzb3JfQ09VTlQAaWR4ID49IDAgJiYgaWR4IDwgSW1HdWlTdHlsZVZhcl9DT1VOVABtb3VzZV9idXR0b24gPj0gMCAmJiBtb3VzZV9idXR0b24gPCBJbUd1aU1vdXNlQnV0dG9uX0NPVU5UAGRhdGFfdHlwZSA+PSAwICYmIGRhdGFfdHlwZSA8IEltR3VpRGF0YVR5cGVfQ09VTlQAbiA8IEJJVENPVU5UAFNUQl9URVhURURJVF9JTlNFUlRDSEFSUwBuID49IDAgJiYgbiA8IENIVU5LUyAmJiBDdXJyU3BhbiA9PSBDSFVOS1MAbiA9PSBDdXJyU3BhbiAmJiBuIDwgQ0hVTktTAEdldElPAEltR3VpSU8ASU1HVUlfVkVSU0lPTgBJTUdVSV9DSEVDS1ZFUlNJT04AaGFzX2ZyZWV6ZV92ID09IGZhbHNlIHx8IHRhYmxlLT5CZzJEcmF3Q2hhbm5lbFVuZnJvemVuICE9IFRBQkxFX0RSQVdfQ0hBTk5FTF9CRzJfRlJPWkVOAE5BTgB3aW5kb3ctPkRDLkN1cnJlbnRDb2x1bW5zID09IDBMAGN1cnJfY21kLT5Vc2VyQ2FsbGJhY2sgPT0gMEwAZy5Mb2dGaWxlID09IDBMAGcuTmF2V2luZG93ICE9IDBMAHdpbmRvdyA9PSAwTCB8fCB3aW5kb3ctPlJvb3RXaW5kb3cgIT0gMEwAd2luZG93LT5Sb290V2luZG93Rm9yTmF2LT5QYXJlbnRXaW5kb3cgIT0gMEwAdGV4dCAhPSAwTABnLk5hdldpbmRvd2luZ1RhcmdldCAhPSAwTABjb2x1bW5zICE9IDBMAGNhbGxiYWNrICE9IDBMAEdJbUd1aSAhPSAwTABzdGF0ZSAhPSAwTAB0eXBlICE9IDBMAHRhYmxlICE9IDBMAFBpeGVsU25hcEgAT3ZlcnNhbXBsZUgASU5GAF9DT0w0RgBfQ09MM0YAI1JFU0laRQAjTU9WRQAjQ09MTEFQU0UAI0NMT1NFAFZhbHVlX0QAVGV4SUQAU2V0TmF2SUQAR2V0SUQAU2V0Rm9jdXNJRABDb2x1bW5Vc2VySUQAUG9wSUQAUHVzaElEAFRhYmxlR2V0Q29sdW1uUmVzaXplSUQAUG9wVGV4dHVyZUlEAFB1c2hUZXh0dXJlSUQAX09uQ2hhbmdlZFRleHR1cmVJRABncm91cF9kYXRhLldpbmRvd0lEID09IHdpbmRvdy0+SUQAc2V0dGluZ3MtPklEID09IHdpbmRvdy0+SUQAZWRpdF9zdGF0ZS0+SUQgIT0gMCAmJiBnLkFjdGl2ZUlkID09IGVkaXRfc3RhdGUtPklEAHNldHRpbmdzLT5JRCA9PSB0YWJsZS0+SUQAVHJlZU5vZGVFeF9DAFZhbHVlX0MAVHJlZU5vZGVfQwBHZXRDb2xvclUzMl9DAExpc3RCb3hfQgBUcmVlTm9kZUV4X0IAQWRkVGV4dF9CAExpc3RCb3hIZWFkZXJfQgBDb2xsYXBzaW5nSGVhZGVyX0IAUmFkaW9CdXR0b25fQgBNZW51SXRlbV9CAFRyZWVQdXNoX0IAVmFsdWVfQgBJc1JlY3RWaXNpYmxlX0IAU2VsZWN0YWJsZV9CAFRyZWVOb2RlX0IAR2V0Q29sb3JVMzJfQgBDb2xvckNvbnZlcnRIU1Z0b1JHQgBjYWxsYmFja19kYXRhLkJ1ZlNpemUgPT0gc3RhdGUtPkJ1ZkNhcGFjaXR5QQBDYWxjV29yZFdyYXBQb3NpdGlvbkEAQ2FsY1RleHRTaXplQQBMaXN0Qm94X0EAVHJlZU5vZGVFeF9BAEFkZFRleHRfQQBMaXN0Qm94SGVhZGVyX0EAQ29sbGFwc2luZ0hlYWRlcl9BAFJhZGlvQnV0dG9uX0EATWVudUl0ZW1fQQBUcmVlUHVzaF9BAFZhbHVlX0EASXNSZWN0VmlzaWJsZV9BAFNlbGVjdGFibGVfQQBUcmVlTm9kZV9BAEdldENvbG9yVTMyX0EAZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8ZmxvYXQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQ4X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDhfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQzMl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQzMl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBjaGFyPgBzdGQ6OmJhc2ljX3N0cmluZzx1bnNpZ25lZCBjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaWduZWQgY2hhcj4APFVua25vd24+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGRvdWJsZT4AIyM+ACMjPABHZXRUZXhEYXRhQXNBbHBoYTgAVTgAUzgAQWRkSW5wdXRDaGFyYWN0ZXJzVVRGOAByb3dzID49IDAgJiYgcm93cyA8IDEyOABzb3J0X29yZGVyX2NvdW50IDwgKGludClzaXplb2Yoc29ydF9vcmRlcl9tYXNrKSAqIDgAVTE2AFMxNgAwLi4yNTUASW5wdXRJbnQ0AFNsaWRlckludDQARHJhZ0ludDQAQ29sb3JFZGl0NABJbnB1dEZsb2F0NABTbGlkZXJGbG9hdDQAQ29sb3JDb252ZXJ0VTMyVG9GbG9hdDQARHJhZ0Zsb2F0NABDb2xvclBpY2tlcjQAR2V0U3R5bGVDb2xvclZlYzQASW1WZWM0AFU2NABTNjQAa2V5IDwgNjQAY29sdW1ucyA+PSAwICYmIGNvbHVtbnMgPCA2NABJbnB1dEludDMAU2xpZGVySW50MwBEcmFnSW50MwBDb2xvckVkaXQzAElucHV0RmxvYXQzAFNsaWRlckZsb2F0MwBEcmFnRmxvYXQzAENvbG9yUGlja2VyMwBJbnB1dEludDIAU2xpZGVySW50MgBEcmFnSW50MgBJbnB1dEZsb2F0MgBTbGlkZXJGbG9hdDIARHJhZ0Zsb2F0MgBEcmFnSW50UmFuZ2UyAERyYWdGbG9hdFJhbmdlMgBJbVZlYzIAQ29sb3JDb252ZXJ0RmxvYXQ0VG9VMzIAUzMyACooY29uc3QgSW1VNjQqKXBfbWF4IDw9IElNX1U2NF9NQVggLyAyACooY29uc3QgSW1TNjQqKXBfbWluID49IElNX1M2NF9NSU4gLyAyICYmICooY29uc3QgSW1TNjQqKXBfbWF4IDw9IElNX1M2NF9NQVggLyAyACooY29uc3QgSW1VMzIqKXBfbWF4IDw9IElNX1UzMl9NQVggLyAyACooY29uc3QgSW1TMzIqKXBfbWluID49IElNX1MzMl9NSU4gLyAyICYmICooY29uc3QgSW1TMzIqKXBfbWF4IDw9IElNX1MzMl9NQVggLyAyAFkxAFNwYWNlWDEAVjEAVTEAb2Zmc2V0ID49IC0xAGNvbHVtbl9uID09IC0xAHBheWxvYWQuRGF0YUZyYW1lQ291bnQgIT0gLTEAY29sdW1uX3dpdGhfc21hbGxlc3Rfc29ydF9vcmRlciAhPSAtMQB0YWJsZS0+Q3VycmVudENvbHVtbiAhPSAtMQB0YWJsZS0+TGVmdE1vc3RTdHJldGNoZWRDb2x1bW4gIT0gLTEgJiYgdGFibGUtPlJpZ2h0TW9zdFN0cmV0Y2hlZENvbHVtbiAhPSAtMQByZW9yZGVyX2RpciA9PSAtMSB8fCByZW9yZGVyX2RpciA9PSArMQBkaXIgPT0gLTEgfHwgZGlyID09ICsxAGcuSXRlbUZsYWdzU3RhY2suU2l6ZSA+IDEAd2luZG93LT5JRFN0YWNrLlNpemUgPiAxAGNvbHVtbnNfY291bnQgPj0gMQBuYXZfbGF5ZXIgPT0gMCB8fCBuYXZfbGF5ZXIgPT0gMQBnLk5hdkxheWVyID09IDAgfHwgZy5OYXZMYXllciA9PSAxAGlkeCA8PSAxAFkwAFNwYWNlWDAAVjAAVTAAMS44MABNOjAwMABNOjAuMDAwADAuMDAuLjEuMDAAY29sdW1uX2luZGV4ID4gMABjb2x1bW4tPlNvcnREaXJlY3Rpb25zQXZhaWxDb3VudCA+IDAAZy5DdXJyZW50V2luZG93U3RhY2suU2l6ZSA+IDAAZy5CZWdpblBvcHVwU3RhY2suU2l6ZSA+IDAAZy5Hcm91cFN0YWNrLlNpemUgPiAwAHRhYl9iYXItPkxhc3RUYWJJdGVtSWR4ID49IDAAdGFibGUtPlJpZ2h0TW9zdEVuYWJsZWRDb2x1bW4gPj0gMABhcHBseV9uZXdfdGV4dF9sZW5ndGggPj0gMABidWYgIT0gMEwgJiYgYnVmX3NpemUgPj0gMAB3aW5kb3ctPkJlZ2luQ291bnQgPT0gMAB3aW5kb3ctPkRyYXdMaXN0LT5DbWRCdWZmZXIuU2l6ZSA9PSAxICYmIHdpbmRvdy0+RHJhd0xpc3QtPkNtZEJ1ZmZlclswXS5FbGVtQ291bnQgPT0gMABzcGxpdHRlci0+X0N1cnJlbnQgPT0gMABjb2x1bW5zLT5DdXJyZW50ID09IDAAaWQgPT0gMAB0YWJfYmFyLT5SZW9yZGVyUmVxdWVzdFRhYklkID09IDAAKGZsYWdzICYgSW1HdWlIb3ZlcmVkRmxhZ3NfQWxsb3dXaGVuT3ZlcmxhcHBlZCkgPT0gMAAodGFibGUtPkZsYWdzICYgSW1HdWlUYWJsZUZsYWdzX1Njcm9sbFgpID09IDAAKGZsYWdzICYgKEltR3VpSG92ZXJlZEZsYWdzX1Jvb3RXaW5kb3cgfCBJbUd1aUhvdmVyZWRGbGFnc19DaGlsZFdpbmRvd3MpKSA9PSAwAG1vdmVfZmxhZ3MgIT0gMABzb3VyY2VfaWQgIT0gMABwYXlsb2FkLlNvdXJjZUlkICE9IDAAY2hpbGRfd2luZG93LT5DaGlsZElkICE9IDAAKGZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19Ob1RpdGxlQmFyKSAhPSAwAChwb3B1cC5XaW5kb3ctPkZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19Qb3B1cCkgIT0gMABQcmVzcyBFU0MgdG8gYWJvcnQgcGlja2luZy4AQ29weSBhcy4uAC4uLgAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQArACpVbmtub3duIGl0ZW0qAGcuQWN0aXZlSWQgPT0gY29sdW1ucy0+SUQgKyBJbUd1aUlEKGNvbHVtbl9pbmRleCkAKHgpAHBhcmVudF93aW5kb3cgIT0gMEwgfHwgIShmbGFncyAmIEltR3VpV2luZG93RmxhZ3NfQ2hpbGRXaW5kb3cpAChmbGFncyAmIChJbUd1aUNvbWJvRmxhZ3NfTm9BcnJvd0J1dHRvbiB8IEltR3VpQ29tYm9GbGFnc19Ob1ByZXZpZXcpKSAhPSAoSW1HdWlDb21ib0ZsYWdzX05vQXJyb3dCdXR0b24gfCBJbUd1aUNvbWJvRmxhZ3NfTm9QcmV2aWV3KQB3aW5kb3ctPkRDLk5hdkxheWVyQWN0aXZlTWFza05leHQgJiAoMSA8PCBsYXllcikAKE1haW4gbWVudSBiYXIpAChQb3B1cCkAIWlzX3RhYl9idXR0b24gfHwgISh0YWJfYmFyLT5TZWxlY3RlZFRhYklkID09IHRhYi0+SUQgJiYgaXNfdGFiX2J1dHRvbikAIXBfb3BlbiB8fCAhKGZsYWdzICYgSW1HdWlUYWJJdGVtRmxhZ3NfQnV0dG9uKQAhKHRhYi0+RmxhZ3MgJiBJbUd1aVRhYkl0ZW1GbGFnc19CdXR0b24pAChudWxsKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0Rpc3BsYXlNYXNrKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0lucHV0TWFzaykASW1Jc1Bvd2VyT2ZUd28oZmxhZ3MgJiBJbUd1aUNvbG9yRWRpdEZsYWdzX19QaWNrZXJNYXNrKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0RhdGFUeXBlTWFzaykAKGZsYWdzICYgKEltR3VpVGFiSXRlbUZsYWdzX0xlYWRpbmcgfCBJbUd1aVRhYkl0ZW1GbGFnc19UcmFpbGluZykpICE9IChJbUd1aVRhYkl0ZW1GbGFnc19MZWFkaW5nIHwgSW1HdWlUYWJJdGVtRmxhZ3NfVHJhaWxpbmcpAGNhbGxiYWNrX2RhdGEuQnVmVGV4dExlbiA9PSAoaW50KXN0cmxlbihjYWxsYmFja19kYXRhLkJ1ZikAKCUuM2ZmLCAlLjNmZiwgJS4zZmYsICUuM2ZmKQAjJTAyWCUwMlglMDJYClI6ICVkLCBHOiAlZCwgQjogJWQKKCUuM2YsICUuM2YsICUuM2YpACMlMDJYJTAyWCUwMlglMDJYClI6JWQsIEc6JWQsIEI6JWQsIEE6JWQKKCUuM2YsICUuM2YsICUuM2YsICUuM2YpACEoZmxhZ3MgJiBJbUd1aUlucHV0VGV4dEZsYWdzX011bHRpbGluZSkAY29uZCA9PSAwIHx8IEltSXNQb3dlck9mVHdvKGNvbmQpAChVbnRpdGxlZCkAKCVkLCVkLCVkLCVkKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29tYm9GbGFnc19IZWlnaHRNYXNrXykASW1Jc1Bvd2VyT2ZUd28oZmxhZ3MgJiBJbUd1aVRhYmxlQ29sdW1uRmxhZ3NfV2lkdGhNYXNrXykAY2hhbm5lbF9ubyA8ICg0ICsgNjQgKiAyKQAoZGF0YSAhPSAwTCAmJiBkYXRhX3NpemUgPiAwKSB8fCAoZGF0YSA9PSAwTCAmJiBkYXRhX3NpemUgPT0gMCkAISgoZmxhZ3MgJiBJbUd1aUlucHV0VGV4dEZsYWdzX0NhbGxiYWNrQ29tcGxldGlvbikgJiYgKGZsYWdzICYgSW1HdWlJbnB1dFRleHRGbGFnc19BbGxvd1RhYklucHV0KSkAY2hhbm5lbC0+X0NtZEJ1ZmZlci5TaXplID09IDEgJiYgbWVyZ2VfY2xpcF9yZWN0LkNvbnRhaW5zKEltUmVjdChjaGFubmVsLT5fQ21kQnVmZmVyWzBdLkNsaXBSZWN0KSkASW1Jc1Bvd2VyT2ZUd28oZmxhZ3MgJiAoSW1HdWlTZXBhcmF0b3JGbGFnc19Ib3Jpem9udGFsIHwgSW1HdWlTZXBhcmF0b3JGbGFnc19WZXJ0aWNhbCkpACEoKGZsYWdzICYgSW1HdWlJbnB1dFRleHRGbGFnc19DYWxsYmFja0hpc3RvcnkpICYmIChmbGFncyAmIEltR3VpSW5wdXRUZXh0RmxhZ3NfTXVsdGlsaW5lKSkAY291bnQgPT0gKChpbnQpKHNpemVvZihQb3MpIC8gc2l6ZW9mKCooUG9zKSkpKQB1c2VyX2tleV9pbmRleCA+PSAwICYmIHVzZXJfa2V5X2luZGV4IDwgKChpbnQpKHNpemVvZihnLklPLktleXNEb3duKSAvIHNpemVvZigqKGcuSU8uS2V5c0Rvd24pKSkpAGtleV9pbmRleCA+PSAwICYmIGtleV9pbmRleCA8ICgoaW50KShzaXplb2YoZy5JTy5LZXlzRG93bikgLyBzaXplb2YoKihnLklPLktleXNEb3duKSkpKQBidXR0b24gPj0gMCAmJiBidXR0b24gPCAoKGludCkoc2l6ZW9mKGcuSU8uTW91c2VEb3duKSAvIHNpemVvZigqKGcuSU8uTW91c2VEb3duKSkpKQBnLlNldHRpbmdzV2luZG93cy5lbXB0eSgpAGcuTG9nQnVmZmVyLmVtcHR5KCkAcGFzc3dvcmRfZm9udC0+R2x5cGhzLmVtcHR5KCkgJiYgcGFzc3dvcmRfZm9udC0+SW5kZXhBZHZhbmNlWC5lbXB0eSgpICYmIHBhc3N3b3JkX2ZvbnQtPkluZGV4TG9va3VwLmVtcHR5KCkAaXRlbV9mbGFncyA9PSBnLkl0ZW1GbGFnc1N0YWNrLmJhY2soKQBwID49IGJlZ2luKCkgJiYgcCA8IGVuZCgpACFnLk5hdlNjb3JpbmdSZWN0LklzSW52ZXJ0ZWQoKQBmb250ICYmIGZvbnQtPklzTG9hZGVkKCkAZy5Gb250LT5Jc0xvYWRlZCgpACggKQBuYW1lICE9IDBMICYmIG5hbWVbMF0gIT0gJ1wwJwBvcCA9PSAnKycgfHwgb3AgPT0gJy0nACUuMGYlJQAjIyMAKGtleV9tb2RfZmxhZ3MgPT0gMCB8fCBnLklPLktleU1vZHMgPT0ga2V5X21vZF9mbGFncykgJiYgIk1pc21hdGNoaW5nIGlvLktleUN0cmwvaW8uS2V5U2hpZnQvaW8uS2V5QWx0L2lvLktleVN1cGVyIHZzIGlvLktleU1vZHMiAGlvLktleU1vZHMgPT0gR2V0TWVyZ2VkS2V5TW9kRmxhZ3MoKSAmJiAiTWlzbWF0Y2hpbmcgaW8uS2V5Q3RybC9pby5LZXlTaGlmdC9pby5LZXlBbHQvaW8uS2V5U3VwZXIgdnMgaW8uS2V5TW9kcyIAc3RybGVuKHR5cGUpIDwgKChpbnQpKHNpemVvZihwYXlsb2FkLkRhdGFUeXBlKSAvIHNpemVvZigqKHBheWxvYWQuRGF0YVR5cGUpKSkpICYmICJQYXlsb2FkIHR5cGUgY2FuIGJlIGF0IG1vc3QgMzIgY2hhcmFjdGVycyBsb25nIgBkcmF3X2xpc3QtPl9WdHhDdXJyZW50SWR4IDwgKDEgPDwgMTYpICYmICJUb28gbWFueSB2ZXJ0aWNlcyBpbiBJbURyYXdMaXN0IHVzaW5nIDE2LWJpdCBpbmRpY2VzLiBSZWFkIGNvbW1lbnQgYWJvdmUiAHRhYmxlLT5Db2x1bW5zQ291bnQgPT0gY29sdW1uc19jb3VudCAmJiAiQmVnaW5UYWJsZSgpOiBDYW5ub3QgY2hhbmdlIGNvbHVtbnMgY291bnQgbWlkLWZyYW1lIHdoaWxlIHByZXNlcnZpbmcgc2FtZSBJRCIAKGcuQ3VycmVudFdpbmRvd1N0YWNrLlNpemUgPT0gMSkgJiYgIk1pc21hdGNoZWQgQmVnaW4vQmVnaW5DaGlsZCB2cyBFbmQvRW5kQ2hpbGQgY2FsbHM6IGRpZCB5b3UgY2FsbCBFbmQvRW5kQ2hpbGQgdG9vIG11Y2g/IgBJdGVtc0NvdW50ID09IC0xICYmICJGb3Jnb3QgdG8gY2FsbCBFbmQoKSwgb3IgdG8gU3RlcCgpIHVudGlsIGZhbHNlPyIAKGcuRnJhbWVDb3VudCA9PSAwIHx8IGcuRnJhbWVDb3VudEVuZGVkID09IGcuRnJhbWVDb3VudCkgJiYgIkZvcmdvdCB0byBjYWxsIFJlbmRlcigpIG9yIEVuZEZyYW1lKCkgYXQgdGhlIGVuZCBvZiB0aGUgcHJldmlvdXMgZnJhbWU/IgAoZy5DdXJyZW50V2luZG93U3RhY2suU2l6ZSA9PSAxKSAmJiAiTWlzbWF0Y2hlZCBCZWdpbi9CZWdpbkNoaWxkIHZzIEVuZC9FbmRDaGlsZCBjYWxsczogZGlkIHlvdSBmb3JnZXQgdG8gY2FsbCBFbmQvRW5kQ2hpbGQ/IgAod2luZG93LT5GbGFncyAmIEltR3VpV2luZG93RmxhZ3NfQ2hpbGRXaW5kb3cpICYmICJNaXNtYXRjaGVkIExpc3RCb3hIZWFkZXIvTGlzdEJveEZvb3RlciBjYWxscy4gRGlkIHlvdSB0ZXN0IHRoZSByZXR1cm4gdmFsdWUgb2YgTGlzdEJveEhlYWRlcigpPyIAZy5XaXRoaW5GcmFtZVNjb3BlICYmICJGb3Jnb3QgdG8gY2FsbCBJbUd1aTo6TmV3RnJhbWUoKT8iAGcuRHJhZ0Ryb3BXaXRoaW5Tb3VyY2UgJiYgIk5vdCBhZnRlciBhIEJlZ2luRHJhZ0Ryb3BTb3VyY2UoKT8iAGcuSU8uRm9udHMtPkZvbnRzLlNpemUgPiAwICYmICJGb250IEF0bGFzIG5vdCBidWlsdC4gRGlkIHlvdSBjYWxsIGlvLkZvbnRzLT5HZXRUZXhEYXRhQXNSR0JBMzIoKSAvIEdldFRleERhdGFBc0FscGhhOCgpPyIAZy5JTy5Gb250cy0+Rm9udHNbMF0tPklzTG9hZGVkKCkgJiYgIkZvbnQgQXRsYXMgbm90IGJ1aWx0LiBEaWQgeW91IGNhbGwgaW8uRm9udHMtPkdldFRleERhdGFBc1JHQkEzMigpIC8gR2V0VGV4RGF0YUFzQWxwaGE4KCk/IgBHSW1HdWkgIT0gMEwgJiYgIk5vIGN1cnJlbnQgY29udGV4dC4gRGlkIHlvdSBjYWxsIEltR3VpOjpDcmVhdGVDb250ZXh0KCkgYW5kIEltR3VpOjpTZXRDdXJyZW50Q29udGV4dCgpID8iAF9DdXJyZW50ID09IDAgJiYgX0NvdW50IDw9IDEgJiYgIk5lc3RlZCBjaGFubmVsIHNwbGl0dGluZyBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgdXNlIHNlcGFyYXRlIGluc3RhbmNlcyBvZiBJbURyYXdMaXN0U3BsaXR0ZXIuIgBnLklPLktleU1hcFtJbUd1aUtleV9TcGFjZV0gIT0gLTEgJiYgIkltR3VpS2V5X1NwYWNlIGlzIG5vdCBtYXBwZWQsIHJlcXVpcmVkIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uLiIAaW5pdF93aWR0aF9vcl93ZWlnaHQgPD0gMC4wZiAmJiAiQ2FuIG9ubHkgc3BlY2lmeSB3aWR0aC93ZWlnaHQgaWYgc2l6aW5nIHBvbGljeSBpcyBzZXQgZXhwbGljaXRlbHkgaW4gZWl0aGVyIFRhYmxlIG9yIENvbHVtbi4iADAgJiYgIkNhbm5vdCB1c2UgSXNQb3B1cE9wZW4oKSB3aXRoIGEgc3RyaW5nIGlkIGFuZCBJbUd1aVBvcHVwRmxhZ3NfQW55UG9wdXBMZXZlbC4iAGcuU3R5bGUuV2luZG93TWluU2l6ZS54ID49IDEuMGYgJiYgZy5TdHlsZS5XaW5kb3dNaW5TaXplLnkgPj0gMS4wZiAmJiAiSW52YWxpZCBzdHlsZSBzZXR0aW5nLiIAKGZsYWdzID09IDEgfHwgKGZsYWdzICYgSW1HdWlTbGlkZXJGbGFnc19JbnZhbGlkTWFza18pID09IDApICYmICJJbnZhbGlkIEltR3VpU2xpZGVyRmxhZ3MgZmxhZ3MhIEhhcyB0aGUgJ2Zsb2F0IHBvd2VyJyBhcmd1bWVudCBiZWVuIG1pc3Rha2VubHkgY2FzdCB0byBmbGFncz8gQ2FsbCBmdW5jdGlvbiB3aXRoIEltR3VpU2xpZGVyRmxhZ3NfTG9nYXJpdGhtaWMgZmxhZ3MgaW5zdGVhZC4iAChmbGFncyA9PSAxIHx8IChmbGFncyAmIEltR3VpU2xpZGVyRmxhZ3NfSW52YWxpZE1hc2tfKSA9PSAwKSAmJiAiSW52YWxpZCBJbUd1aVNsaWRlckZsYWdzIGZsYWchICBIYXMgdGhlICdmbG9hdCBwb3dlcicgYXJndW1lbnQgYmVlbiBtaXN0YWtlbmx5IGNhc3QgdG8gZmxhZ3M/IENhbGwgZnVuY3Rpb24gd2l0aCBJbUd1aVNsaWRlckZsYWdzX0xvZ2FyaXRobWljIGZsYWdzIGluc3RlYWQuIgBnLklPLktleU1hcFtuXSA+PSAtMSAmJiBnLklPLktleU1hcFtuXSA8ICgoaW50KShzaXplb2YoZy5JTy5LZXlzRG93bikgLyBzaXplb2YoKihnLklPLktleXNEb3duKSkpKSAmJiAiaW8uS2V5TWFwW10gY29udGFpbnMgYW4gb3V0IG9mIGJvdW5kIHZhbHVlIChuZWVkIHRvIGJlIDAuLjUxMiwgb3IgLTEgZm9yIHVubWFwcGVkIGtleSkiAChmbGFncyAmIEltR3VpVGFibGVDb2x1bW5GbGFnc19TdGF0dXNNYXNrXykgPT0gMCAmJiAiSWxsZWdhbCB0byBwYXNzIFN0YXR1c01hc2sgdmFsdWVzIHRvIFRhYmxlU2V0dXBDb2x1bW4oKSIASXRlbXNIZWlnaHQgPiAwLjBmICYmICJVbmFibGUgdG8gY2FsY3VsYXRlIGl0ZW0gaGVpZ2h0ISBGaXJzdCBpdGVtIGhhc24ndCBtb3ZlZCB0aGUgY3Vyc29yIHZlcnRpY2FsbHkhIgB0YWJsZS0+SXNMYXlvdXRMb2NrZWQgPT0gZmFsc2UgJiYgIk5lZWQgdG8gY2FsbCBUYWJsZVNldHVwQ29sdW1uKCkgYmVmb3JlIGZpcnN0IHJvdyEiAHRhYmxlLT5Jc0xheW91dExvY2tlZCA9PSBmYWxzZSAmJiAiTmVlZCB0byBjYWxsIGNhbGwgVGFibGVTZXR1cENvbHVtbigpIGJlZm9yZSBmaXJzdCByb3chIgBzel9pZHggPT0gc2l6ZW9mKEltRHJhd0lkeCkgJiYgIk1pc21hdGNoZWQgc3RydWN0IGxheW91dCEiAHN6X3ZlcnQgPT0gc2l6ZW9mKEltRHJhd1ZlcnQpICYmICJNaXNtYXRjaGVkIHN0cnVjdCBsYXlvdXQhIgBzel9zdHlsZSA9PSBzaXplb2YoSW1HdWlTdHlsZSkgJiYgIk1pc21hdGNoZWQgc3RydWN0IGxheW91dCEiAHN6X2lvID09IHNpemVvZihJbUd1aUlPKSAmJiAiTWlzbWF0Y2hlZCBzdHJ1Y3QgbGF5b3V0ISIAc3pfdmVjNCA9PSBzaXplb2YoSW1WZWM0KSAmJiAiTWlzbWF0Y2hlZCBzdHJ1Y3QgbGF5b3V0ISIAc3pfdmVjMiA9PSBzaXplb2YoSW1WZWMyKSAmJiAiTWlzbWF0Y2hlZCBzdHJ1Y3QgbGF5b3V0ISIAMCAmJiAiQ2FsbGVkIFB1c2hTdHlsZVZhcigpIGZsb2F0IHZhcmlhbnQgYnV0IHZhcmlhYmxlIGlzIG5vdCBhIGZsb2F0ISIAKHRhYmxlLT5EZWNsQ29sdW1uc0NvdW50IDwgdGFibGUtPkNvbHVtbnNDb3VudCkgJiYgIkNhbGxlZCBUYWJsZVNldHVwQ29sdW1uKCkgdG9vIG1hbnkgdGltZXMhIgAoZy5DdXJyZW50V2luZG93U3RhY2suU2l6ZSA+IDEpICYmICJDYWxsaW5nIEVuZCgpIHRvbyBtYW55IHRpbWVzISIAKGcuR3JvdXBTdGFjay5TaXplID09IDApICYmICJNaXNzaW5nIEVuZEdyb3VwIGNhbGwhIgAob3V0ZXJfd2luZG93LT5EQy5JdGVtV2lkdGhTdGFjay5TaXplID49IHRhYmxlLT5Ib3N0QmFja3VwSXRlbVdpZHRoU3RhY2tTaXplKSAmJiAiVG9vIG1hbnkgUG9wSXRlbVdpZHRoISIAU2l6ZU9mQmVnaW5Qb3B1cFN0YWNrID09IGcuQmVnaW5Qb3B1cFN0YWNrLlNpemUgJiYgIkJlZ2luUG9wdXAvRW5kUG9wdXAgb3IgQmVnaW5NZW51L0VuZE1lbnUgTWlzbWF0Y2ghIgBTaXplT2ZGb250U3RhY2sgPj0gZy5Gb250U3RhY2suU2l6ZSAmJiAiUHVzaEZvbnQvUG9wRm9udCBNaXNtYXRjaCEiAFNpemVPZkNvbG9yU3RhY2sgPj0gZy5Db2xvclN0YWNrLlNpemUgJiYgIlB1c2hTdHlsZUNvbG9yL1BvcFN0eWxlQ29sb3IgTWlzbWF0Y2ghIgBTaXplT2ZTdHlsZVZhclN0YWNrID49IGcuU3R5bGVWYXJTdGFjay5TaXplICYmICJQdXNoU3R5bGVWYXIvUG9wU3R5bGVWYXIgTWlzbWF0Y2ghIgBTaXplT2ZHcm91cFN0YWNrID09IGcuR3JvdXBTdGFjay5TaXplICYmICJCZWdpbkdyb3VwL0VuZEdyb3VwIE1pc21hdGNoISIAU2l6ZU9mSURTdGFjayA9PSB3aW5kb3ctPklEU3RhY2suU2l6ZSAmJiAiUHVzaElEL1BvcElEIG9yIFRyZWVOb2RlL1RyZWVQb3AgTWlzbWF0Y2ghIgBTaXplT2ZGb2N1c1Njb3BlU3RhY2sgPT0gZy5Gb2N1c1Njb3BlU3RhY2suU2l6ZSAmJiAiUHVzaEZvY3VzU2NvcGUvUG9wRm9jdXNTY29wZSBNaXNtYXRjaCEiAGcuU3R5bGUuQWxwaGEgPj0gMC4wZiAmJiBnLlN0eWxlLkFscGhhIDw9IDEuMGYgJiYgIkludmFsaWQgc3R5bGUgc2V0dGluZyEiAGcuU3R5bGUuQ2lyY2xlU2VnbWVudE1heEVycm9yID4gMC4wZiAmJiAiSW52YWxpZCBzdHlsZSBzZXR0aW5nISIAZy5TdHlsZS5DdXJ2ZVRlc3NlbGxhdGlvblRvbCA+IDAuMGYgJiYgIkludmFsaWQgc3R5bGUgc2V0dGluZyEiAHN0cmNtcCh2ZXJzaW9uLCAiMS44MCIpID09IDAgJiYgIk1pc21hdGNoZWQgdmVyc2lvbiBzdHJpbmchIgB0YWJsZSAhPSAwTCAmJiAiT25seSBjYWxsIEVuZFRhYmxlKCkgaWYgQmVnaW5UYWJsZSgpIHJldHVybnMgdHJ1ZSEiAGcuSU8uRGlzcGxheVNpemUueCA+PSAwLjBmICYmIGcuSU8uRGlzcGxheVNpemUueSA+PSAwLjBmICYmICJJbnZhbGlkIERpc3BsYXlTaXplIHZhbHVlISIAKGcuSU8uRGVsdGFUaW1lID4gMC4wZiB8fCBnLkZyYW1lQ291bnQgPT0gMCkgJiYgIk5lZWQgYSBwb3NpdGl2ZSBEZWx0YVRpbWUhIgBjb2x1bW5zX2NvdW50ID4gMCAmJiBjb2x1bW5zX2NvdW50IDw9IDY0ICYmICJPbmx5IDEuLjY0IGNvbHVtbnMgYWxsb3dlZCEiAChpbm5lcl93aW5kb3ctPklEU3RhY2suYmFjaygpID09IHRhYmxlLT5JRCArIHRhYmxlLT5JbnN0YW5jZUN1cnJlbnQpICYmICJNaXNtYXRjaGluZyBQdXNoSUQvUG9wSUQhIgAwICYmICJDYWxsZWQgUHVzaFN0eWxlVmFyKCkgSW1WZWMy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ICAgICAgICAtWFhYWFhYWC0gICAgWCAgICAtICAgICAgICAgICBYICAgICAgICAgICAtWFhYWFhYWCAgICAgICAgICAtICAgICAgICAgIFhYWFhYWFgtICAgICBYWCAgICAgICAgICAuLi0gICAgICAgICAtWC4uLi4uWC0gICBYLlggICAtICAgICAgICAgIFguWCAgICAgICAgICAtWC4uLi4uWCAgICAgICAgICAtICAgICAgICAgIFguLi4uLlgtICAgIFguLlggICAgICAgICAtLS0gICAgICAgICAtWFhYLlhYWC0gIFguLi5YICAtICAgICAgICAgWC4uLlggICAgICAgICAtWC4uLi5YICAgICAgICAgICAtICAgICAgICAgICBYLi4uLlgtICAgIFguLlggICAgICAgICBYICAgICAgICAgICAtICBYLlggIC0gWC4uLi4uWCAtICAgICAgICBYLi4uLi5YICAgICAgICAtWC4uLlggICAgICAgICAgICAtICAgICAgICAgICAgWC4uLlgtICAgIFguLlggICAgICAgICBYWCAgICAgICAgICAtICBYLlggIC1YLi4uLi4uLlgtICAgICAgIFguLi4uLi4uWCAgICAgICAtWC4uWC5YICAgICAgICAgICAtICAgICAgICAgICBYLlguLlgtICAgIFguLlggICAgICAgICBYLlggICAgICAgICAtICBYLlggIC1YWFhYLlhYWFgtICAgICAgIFhYWFguWFhYWCAgICAgICAtWC5YIFguWCAgICAgICAgICAtICAgICAgICAgIFguWCBYLlgtICAgIFguLlhYWCAgICAgICBYLi5YICAgICAgICAtICBYLlggIC0gICBYLlggICAtICAgICAgICAgIFguWCAgICAgICAgICAtWFggICBYLlggICAgICAgICAtICAgICAgICAgWC5YICAgWFgtICAgIFguLlguLlhYWCAgICBYLi4uWCAgICAgICAtICBYLlggIC0gICBYLlggICAtICAgIFhYICAgIFguWCAgICBYWCAgICAtICAgICAgWC5YICAgICAgICAtICAgICAgICBYLlggICAgICAtICAgIFguLlguLlguLlhYICBYLi4uLlggICAgICAtICBYLlggIC0gICBYLlggICAtICAgWC5YICAgIFguWCAgICBYLlggICAtICAgICAgIFguWCAgICAgICAtICAgICAgIFguWCAgICAgICAtICAgIFguLlguLlguLlguWCBYLi4uLi5YICAgICAtICBYLlggIC0gICBYLlggICAtICBYLi5YICAgIFguWCAgICBYLi5YICAtICAgICAgICBYLlggICAgICAtICAgICAgWC5YICAgICAgICAtWFhYIFguLlguLlguLlguLlhYLi4uLi4uWCAgICAtICBYLlggIC0gICBYLlggICAtIFguLi5YWFhYWFguWFhYWFhYLi4uWCAtICAgICAgICAgWC5YICAgWFgtWFggICBYLlggICAgICAgICAtWC4uWFguLi4uLi4uLlguLlhYLi4uLi4uLlggICAtICBYLlggIC0gICBYLlggICAtWC4uLi4uLi4uLi4uLi4uLi4uLi4uLlgtICAgICAgICAgIFguWCBYLlgtWC5YIFguWCAgICAgICAgICAtWC4uLlguLi4uLi4uLi4uLlhYLi4uLi4uLi5YICAtICBYLlggIC0gICBYLlggICAtIFguLi5YWFhYWFguWFhYWFhYLi4uWCAtICAgICAgICAgICBYLlguLlgtWC4uWC5YICAgICAgICAgICAtIFguLi4uLi4uLi4uLi4uLlhYLi4uLi4uLi4uWCAtWFhYLlhYWC0gICBYLlggICAtICBYLi5YICAgIFguWCAgICBYLi5YICAtICAgICAgICAgICAgWC4uLlgtWC4uLlggICAgICAgICAgICAtICBYLi4uLi4uLi4uLi4uLlhYLi4uLi4uLi4uLlgtWC4uLi4uWC0gICBYLlggICAtICAgWC5YICAgIFguWCAgICBYLlggICAtICAgICAgICAgICBYLi4uLlgtWC4uLi5YICAgICAgICAgICAtICBYLi4uLi4uLi4uLi4uLlhYLi4uLi4uWFhYWFgtWFhYWFhYWC0gICBYLlggICAtICAgIFhYICAgIFguWCAgICBYWCAgICAtICAgICAgICAgIFguLi4uLlgtWC4uLi4uWCAgICAgICAgICAtICAgWC4uLi4uLi4uLi4uLlhYLi4uWC4uWCAgICAtLS0tLS0tLS0gICBYLlggICAtICAgICAgICAgIFguWCAgICAgICAgICAtICAgICAgICAgIFhYWFhYWFgtWFhYWFhYWCAgICAgICAgICAtICAgWC4uLi4uLi4uLi4uWCBYLi5YIFguLlggICAtICAgICAgIC1YWFhYLlhYWFgtICAgICAgIFhYWFguWFhYWCAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgIFguLi4uLi4uLi4uWCBYLlggIFguLlggICAtICAgICAgIC1YLi4uLi4uLlgtICAgICAgIFguLi4uLi4uWCAgICAgICAtICAgIFhYICAgICAgICAgICBYWCAgICAtICAgICAgICAgICAtICAgIFguLi4uLi4uLi4uWCBYWCAgICBYLi5YICAtICAgICAgIC0gWC4uLi4uWCAtICAgICAgICBYLi4uLi5YICAgICAgICAtICAgWC5YICAgICAgICAgICBYLlggICAtICAgICAgICAgICAtICAgICBYLi4uLi4uLi5YICAgICAgICBYLi5YICAgICAgICAgIC0gIFguLi5YICAtICAgICAgICAgWC4uLlggICAgICAgICAtICBYLi5YICAgICAgICAgICBYLi5YICAtICAgICAgICAgICAtICAgICBYLi4uLi4uLi5YICAgICAgICAgWFggICAgICAgICAgIC0gICBYLlggICAtICAgICAgICAgIFguWCAgICAgICAgICAtIFguLi5YWFhYWFhYWFhYWFhYLi4uWCAtICAgICAgICAgICAtICAgICBYWFhYWFhYWFhYICAtLS0tLS0tLS0tLS0gICAgICAgIC0gICAgWCAgICAtICAgICAgICAgICBYICAgICAgICAgICAtWC4uLi4uLi4uLi4uLi4uLi4uLi4uLlgtICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFguLi5YWFhYWFhYWFhYWFhYLi4uWCAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtICBYLi5YICAgICAgICAgICBYLi5YICAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg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AAAAgJhG+DwAAABgUcx4OwAAAICDG/A5AAAAQCAlejgAAACAIoLjNgAAAAAd82k1EMIAAAAAAAAAAAAAAAAAABEACgAREREAAAAABQAAAAAAAAkAAAAACwAAAAAAAAAAEQAPChEREQMKBwABAAkLCwAACQYLAAALAAYRAAAAERERAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAABEACgoREREACgAAAgAJCwAAAAkACwAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAwAAAAACQwAAAAAAAwAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAAAAAADQAAAAQNAAAAAAkOAAAAAAAOAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAA8AAAAADwAAAAAJEAAAAAAAEAAAEAAAEgAAABISEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAEhISAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAAAAAAAAAACgAAAAAKAAAAAAkLAAAAAAALAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAADAAAAAAJDAAAAAAADAAADAAAMDEyMzQ1Njc4OUFCQ0RFRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI0DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANF0ngBXnb0qgHBSD///PicKAAAAZAAAAOgDAAAQJwAAoIYBAEBCDwCAlpgAAOH1BRgAAAA1AAAAcQAAAGv////O+///kr///wAAAAAAAAAA/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNMAAAAAML4AAJIDAACTAwAAlAMAAFN0OWV4Y2VwdGlvbgAAAAAQwQAAIL4AAAAAAABcvgAAOQMAAJUDAACWAwAAU3QxMWxvZ2ljX2Vycm9yADjBAABMvgAAML4AAAAAAACQvgAAOQMAAJcDAACWAwAAU3QxMmxlbmd0aF9lcnJvcgAAAAA4wQAAfL4AAFy+AABTdDl0eXBlX2luZm8AAAAAEMEAAJy+AABOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQAAAAA4wQAAtL4AAKy+AABOMTBfX2N4eGFiaXYxMTdfX2NsYXNzX3R5cGVfaW5mb0UAAAA4wQAA5L4AANi+AABOMTBfX2N4eGFiaXYxMTdfX3BiYXNlX3R5cGVfaW5mb0UAAAA4wQAAFL8AANi+AABOMTBfX2N4eGFiaXYxMTlfX3BvaW50ZXJfdHlwZV9pbmZvRQA4wQAARL8AADi/AABOMTBfX2N4eGFiaXYxMjBfX2Z1bmN0aW9uX3R5cGVfaW5mb0UAAAAAOMEAAHS/AADYvgAATjEwX19jeHhhYml2MTI5X19wb2ludGVyX3RvX21lbWJlcl90eXBlX2luZm9FAAAAOMEAAKi/AAA4vwAAAAAAACjAAACYAwAAmQMAAJoDAACbAwAAnAMAAE4xMF9fY3h4YWJpdjEyM19fZnVuZGFtZW50YWxfdHlwZV9pbmZvRQA4wQAAAMAAANi+AAB2AAAA7L8AADTAAABQdgAA8MEAAEDAAAAAAAAAOMAAAERuAADsvwAAVMAAAGIAAADsvwAAYMAAAGMAAADsvwAAbMAAAGgAAADsvwAAeMAAAGEAAADsvwAAhMAAAHMAAADsvwAAkMAAAHQAAADsvwAAnMAAAGkAAADsvwAAqMAAAGoAAADsvwAAtMAAAGwAAADsvwAAwMAAAG0AAADsvwAAzMAAAHgAAADsvwAA2MAAAHkAAADsvwAA5MAAAGYAAADsvwAA8MAAAGQAAADsvwAA/MAAAAAAAAAIvwAAmAMAAJ0DAACaAwAAmwMAAJ4DAACfAwAAoAMAAKEDAAAAAAAAgMEAAJgDAACiAwAAmgMAAJsDAACeAwAAowMAAKQDAAClAwAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAADjBAABYwQAACL8AAAAAAADcwQAAmAMAAKYDAACaAwAAmwMAAJ4DAACnAwAAqAMAAKkDAABOMTBfX2N4eGFiaXYxMjFfX3ZtaV9jbGFzc190eXBlX2luZm9FAAAAOMEAALTBAAAIvwAAAAAAAGi/AACYAwAAqgMAAJoDAACbAwAAqwMAAABBiIQDC4QDCgAAAAsAAAAFAAAAAAAAAAAAAACIAwAAAAAAAAAAAAAAAAAAAAAAAAAAAACJAwAAigMAAPjEAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMMtQAA==';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmMemory = Module['asm']['memory'];
    assert(wasmMemory, "memory not found in wasm exports");
    // This assertion doesn't hold when emscripten is run in --post-link
    // mode.
    // TODO(sbc): Read INITIAL_MEMORY out of the wasm file in post-link mode.
    //assert(wasmMemory.buffer.byteLength === 16777216);
    updateGlobalBufferAndViews(wasmMemory.buffer);

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      var result = WebAssembly.instantiate(binary, info);
      return result;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync().catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + 16) + 16;
    }

  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - 16;
  
      this.set_type = function(type) {
        HEAP32[(((this.ptr)+(4))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAP32[(((this.ptr)+(4))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAP32[(((this.ptr)+(8))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAP32[(((this.ptr)+(8))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[((this.ptr)>>2)] = refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(12))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(12))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(13))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(13))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s NO_DISABLE_EXCEPTION_CATCHING or -s EXCEPTION_CATCHING_ALLOWED=[..] to catch.";
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var SYSCALLS = {mappings:{},buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
  }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes = undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var awaitingDependencies = {};
  
  var registeredTypes = {};
  
  var typeDependencies = {};
  
  var char_0 = 48;
  
  var char_9 = 57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var BindingError = undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  var InternalError = undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  var finalizationGroup = false;
  
  function detachFinalizer(handle) {}
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  var delayFunction = undefined;
  
  var deletionQueue = [];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  var registeredPointers = {};
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  /** @constructor */
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances = {};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module["dynCall_" + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args)
    }
  function getDynCaller(sig, ptr) {
      assert(sig.includes('j'), 'getDynCaller should only be called with i64 sigs')
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError = undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Insert empty slot for context type (argTypes[1]).
              argTypes.splice(1, 0, null);
              classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
              return [];
          });
          return [];
      });
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for (var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
  
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (methodName.startsWith("@@")) {
              methodName = Symbol[methodName.substring(2)];
          }
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }
  function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = embind__requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  var emval_free_list = [];
  
  var emval_handle_array = [{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
      switch (value) {
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.includes('unsigned'));
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }

  function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          var type = types[i];
          args[i] = type['readValueFromPointer'](argv);
          argv += type['argPackAdvance'];
      }
  
      var rv = handle.apply(undefined, args);
      return __emval_register(rv);
    }

  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }
  
  var emval_symbols = {};
  function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  var emval_methodCallers = [];
  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  function __emval_get_property(handle, key) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      return __emval_register(handle[key]);
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function __emval_new_array() {
      return __emval_register([]);
    }

  function __emval_new_cstring(v) {
      return __emval_register(getStringOrSymbol(v));
    }

  function __emval_new_object() {
      return __emval_register({});
    }

  function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

  function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }

  function __emval_strictly_equals(first, second) {
      first = requireHandle(first);
      second = requireHandle(second);
      return first === second;
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function __emval_typeof(handle) {
      handle = requireHandle(handle);
      return __emval_register(typeof handle);
    }

  function _abort() {
      abort();
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        err('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3. Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      // In CAN_ADDRESS_2GB mode, stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate full 4GB Wasm memories, the size will wrap
      // back to 0 bytes in Wasm side for any code that deals with heap sizes, which would require special casing all heap size related code to treat
      // 0 specially.
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  function _fd_close(fd) {
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    }

  function _fd_read(fd, iov, iovcnt, pnum) {
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
  }

  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)] = num
      return 0;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__assert_fail": ___assert_fail,
  "__cxa_allocate_exception": ___cxa_allocate_exception,
  "__cxa_throw": ___cxa_throw,
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_class_property": __embind_register_class_property,
  "_embind_register_constant": __embind_register_constant,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "_emval_as": __emval_as,
  "_emval_call": __emval_call,
  "_emval_call_void_method": __emval_call_void_method,
  "_emval_decref": __emval_decref,
  "_emval_get_method_caller": __emval_get_method_caller,
  "_emval_get_property": __emval_get_property,
  "_emval_incref": __emval_incref,
  "_emval_new_array": __emval_new_array,
  "_emval_new_cstring": __emval_new_cstring,
  "_emval_new_object": __emval_new_object,
  "_emval_run_destructors": __emval_run_destructors,
  "_emval_set_property": __emval_set_property,
  "_emval_strictly_equals": __emval_strictly_equals,
  "_emval_take_value": __emval_take_value,
  "_emval_typeof": __emval_typeof,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "setTempRet0": _setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() { abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() { abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() { abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignMemory")) Module["alignMemory"] = function() { abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() { abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but keepRuntimeAlive() is set (counter=' + runtimeKeepaliveCounter + ') due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)';
      readyPromiseReject(msg);
      err(msg);
    }
  } else {
    exitRuntime();
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();







  return Module.ready
}
);
})();
if (true)
  module.exports = Module;
else {}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,