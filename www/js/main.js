/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/font.ts":
/*!*********************!*\
  !*** ./src/font.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Font: () => (/* binding */ Font),
/* harmony export */   TexturePage: () => (/* binding */ TexturePage)
/* harmony export */ });
/* harmony import */ var _imgui_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imgui_impl */ "./src/imgui_impl.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/index.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const FONT_SPACE = 5;
const FONT_SIZE_EXTEND = 2;
function GetFontName(font) {
    return font.FontStyle + " " + font.FontSize + "px " + font.FontName;
}
class TexturePage {
    constructor(tex_size, font) {
        this.Dirty = false;
        this.Ascent = 0;
        this.Descent = 0;
        let font_size = font.FontSize;
        this.FontName = GetFontName(font);
        this.Scale = _index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.font_scale;
        this.TextureSize = tex_size;
        this.FontSize = font_size;
        this.SpaceX = font.SpaceX;
        this.FontImageSize = Math.ceil((font_size + FONT_SPACE) * this.Scale);
        this.Ascent = font.Ascent;
        this.Descent = font.Descent;
        this.PixelData = new Uint16Array(tex_size * tex_size);
        this.CharsPerRow = Math.floor(tex_size / this.FontImageSize);
        this.MaxCharCount = this.CharsPerRow * this.CharsPerRow;
        this.Current = 0;
        if (!_index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.gl) {
            console.log("ImGui_Impl.gl is not ready");
            return;
        }
        let gl = _index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.gl;
        this.Texure = new _imgui_impl__WEBPACK_IMPORTED_MODULE_0__.Texture();
        this.Texure._srcType = gl.UNSIGNED_SHORT_4_4_4_4;
        if (this.Scale == _index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.canvas_scale) {
            this.Texure._minFilter = gl.NEAREST;
            this.Texure._magFilter = gl.NEAREST;
        }
        this.Texure.Update(this.PixelData, { width: tex_size, height: tex_size });
    }
    Destroy() {
        this.Texure.Destroy();
    }
    Create(glyph, ctx) {
        const image_size = this.FontImageSize;
        const cur = this.Current;
        this.Current++;
        const ix = cur % this.CharsPerRow;
        const iy = Math.floor(cur / this.CharsPerRow);
        const px = ix * (image_size);
        const py = iy * (image_size);
        const text = String.fromCharCode(glyph.Char);
        glyph.TextureID = this.Texure._texture;
        ctx.save();
        ctx.canvas.width = image_size;
        ctx.canvas.height = image_size;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';
        ctx.font = this.FontName;
        ctx.clearRect(0, 0, image_size, image_size);
        ctx.scale(this.Scale, this.Scale);
        let m = ctx.measureText(text);
        ctx.fillText(text, 1, 1);
        //ctx.strokeRect(0,0,image_size-FONT_SPACE, image_size-FONT_SPACE);
        ctx.restore();
        const img_data = ctx.getImageData(0, 0, image_size, image_size);
        const img_data_u32 = new Uint32Array(img_data.data.buffer);
        for (let y = 0; y < image_size; y++) {
            for (let x = 0; x < image_size; x++) {
                this.PixelData[(py + y) * this.TextureSize + px + x] = 0xFFF0 |
                    (((img_data_u32[y * image_size + x] >> 24) & 0xFF) >> 4);
            }
        }
        let w = m.width <= this.FontSize ? m.width : m.actualBoundingBoxRight - m.actualBoundingBoxLeft;
        if (glyph.Char == 0) {
            w = this.FontSize + 1;
        }
        glyph.X0 = 0;
        glyph.Y0 = this.Descent;
        glyph.X1 = w + FONT_SIZE_EXTEND;
        glyph.Y1 = this.FontSize + FONT_SIZE_EXTEND;
        glyph.AdvanceX = (w) + (glyph.Char < 256 ? this.SpaceX[0] : this.SpaceX[1]);
        let uv_scale = 1.0 / (this.TextureSize);
        glyph.U0 = (px) * uv_scale;
        glyph.V0 = (py + this.Ascent * this.Scale) * uv_scale;
        glyph.U1 = (px + glyph.X1 * this.Scale) * uv_scale;
        glyph.V1 = glyph.V0 + (glyph.Y1 * this.Scale) * uv_scale;
        this.Dirty = true;
        return glyph;
    }
    UpdateTexture() {
        this.Dirty = false;
        console.log(this.FontName + " UpdateTexture " + this.Current + "/" + this.MaxCharCount);
        this.Texure.Update(this.PixelData);
    }
    get IsAvailable() { return this.Current < this.MaxCharCount; }
}
class Font {
    constructor() {
        this.texturePage = [];
        this.dirty = false;
        let canvas = document.createElement("canvas");
        canvas.style.backgroundColor = "transparent";
        canvas.style.position = 'absolute';
        canvas.style.top = '0px';
        canvas.style.left = '0px';
        canvas.style.borderWidth = '0';
        canvas.style.borderStyle = 'none';
        canvas.style.pointerEvents = 'none';
        this.canvas = canvas;
        this.ctx = canvas.getContext("2d", { willReadFrequently: true });
    }
    Destroy() {
        this.texturePage.forEach(page => {
            page.Destroy();
        });
        this.texturePage = [];
    }
    Create(glyph, font) {
        let fontname = GetFontName(font);
        let page = null;
        for (let page2 of this.texturePage) {
            if (page2.IsAvailable && page2.FontName == fontname) {
                page = page2;
                break;
            }
        }
        if (!page) {
            page = new TexturePage(512, font);
            this.texturePage.push(page);
        }
        this.canvas.width = font.FontSize;
        this.canvas.height = font.FontSize;
        this.dirty = true;
        return page.Create(glyph, this.ctx);
    }
    UpdateTexture() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.dirty)
                return;
            console.log("Font UpdateTexture begin");
            this.texturePage.forEach(page => {
                if (page.Dirty) {
                    page.UpdateTexture();
                }
            });
            console.log("Font UpdateTexture end");
            this.dirty = false;
        });
    }
}


/***/ }),

/***/ "./src/imgui.ts":
/*!**********************!*\
  !*** ./src/imgui.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ARRAYSIZE: () => (/* binding */ IM_ARRAYSIZE),
/* harmony export */   ASSERT: () => (/* binding */ ASSERT),
/* harmony export */   AcceptDragDropPayload: () => (/* binding */ AcceptDragDropPayload),
/* harmony export */   AlignTextToFramePadding: () => (/* binding */ AlignTextToFramePadding),
/* harmony export */   ArrowButton: () => (/* binding */ ArrowButton),
/* harmony export */   BackendFlags: () => (/* binding */ ImGuiBackendFlags),
/* harmony export */   Begin: () => (/* binding */ Begin),
/* harmony export */   BeginChild: () => (/* binding */ BeginChild),
/* harmony export */   BeginChildFrame: () => (/* binding */ BeginChildFrame),
/* harmony export */   BeginCombo: () => (/* binding */ BeginCombo),
/* harmony export */   BeginDragDropSource: () => (/* binding */ BeginDragDropSource),
/* harmony export */   BeginDragDropTarget: () => (/* binding */ BeginDragDropTarget),
/* harmony export */   BeginGroup: () => (/* binding */ BeginGroup),
/* harmony export */   BeginMainMenuBar: () => (/* binding */ BeginMainMenuBar),
/* harmony export */   BeginMenu: () => (/* binding */ BeginMenu),
/* harmony export */   BeginMenuBar: () => (/* binding */ BeginMenuBar),
/* harmony export */   BeginPopup: () => (/* binding */ BeginPopup),
/* harmony export */   BeginPopupContextItem: () => (/* binding */ BeginPopupContextItem),
/* harmony export */   BeginPopupContextVoid: () => (/* binding */ BeginPopupContextVoid),
/* harmony export */   BeginPopupContextWindow: () => (/* binding */ BeginPopupContextWindow),
/* harmony export */   BeginPopupModal: () => (/* binding */ BeginPopupModal),
/* harmony export */   BeginTabBar: () => (/* binding */ BeginTabBar),
/* harmony export */   BeginTabItem: () => (/* binding */ BeginTabItem),
/* harmony export */   BeginTable: () => (/* binding */ BeginTable),
/* harmony export */   BeginTooltip: () => (/* binding */ BeginTooltip),
/* harmony export */   Bind: () => (/* reexport module object */ _bind_imgui__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   Bullet: () => (/* binding */ Bullet),
/* harmony export */   BulletText: () => (/* binding */ BulletText),
/* harmony export */   Button: () => (/* binding */ Button),
/* harmony export */   ButtonFlags: () => (/* binding */ ImGuiButtonFlags),
/* harmony export */   CHECKVERSION: () => (/* binding */ IMGUI_CHECKVERSION),
/* harmony export */   COL32: () => (/* binding */ IM_COL32),
/* harmony export */   COL32_BLACK: () => (/* binding */ IM_COL32_BLACK),
/* harmony export */   COL32_BLACK_TRANS: () => (/* binding */ IM_COL32_BLACK_TRANS),
/* harmony export */   COL32_WHITE: () => (/* binding */ IM_COL32_WHITE),
/* harmony export */   CalcItemWidth: () => (/* binding */ CalcItemWidth),
/* harmony export */   CalcListClipping: () => (/* binding */ CalcListClipping),
/* harmony export */   CalcTextSize: () => (/* binding */ CalcTextSize),
/* harmony export */   CaptureKeyboardFromApp: () => (/* binding */ CaptureKeyboardFromApp),
/* harmony export */   CaptureMouseFromApp: () => (/* binding */ CaptureMouseFromApp),
/* harmony export */   Checkbox: () => (/* binding */ Checkbox),
/* harmony export */   CheckboxFlags: () => (/* binding */ CheckboxFlags),
/* harmony export */   CloseCurrentPopup: () => (/* binding */ CloseCurrentPopup),
/* harmony export */   Col: () => (/* binding */ ImGuiCol),
/* harmony export */   CollapsingHeader: () => (/* binding */ CollapsingHeader),
/* harmony export */   Color: () => (/* binding */ ImColor),
/* harmony export */   ColorButton: () => (/* binding */ ColorButton),
/* harmony export */   ColorConvertFloat4ToU32: () => (/* binding */ ColorConvertFloat4ToU32),
/* harmony export */   ColorConvertHSVtoRGB: () => (/* binding */ ColorConvertHSVtoRGB),
/* harmony export */   ColorConvertRGBtoHSV: () => (/* binding */ ColorConvertRGBtoHSV),
/* harmony export */   ColorConvertU32ToFloat4: () => (/* binding */ ColorConvertU32ToFloat4),
/* harmony export */   ColorEdit3: () => (/* binding */ ColorEdit3),
/* harmony export */   ColorEdit4: () => (/* binding */ ColorEdit4),
/* harmony export */   ColorEditFlags: () => (/* binding */ ImGuiColorEditFlags),
/* harmony export */   ColorPicker3: () => (/* binding */ ColorPicker3),
/* harmony export */   ColorPicker4: () => (/* binding */ ColorPicker4),
/* harmony export */   Columns: () => (/* binding */ Columns),
/* harmony export */   Combo: () => (/* binding */ Combo),
/* harmony export */   ComboFlags: () => (/* binding */ ImGuiComboFlags),
/* harmony export */   Cond: () => (/* binding */ ImGuiCond),
/* harmony export */   ConfigFlags: () => (/* binding */ ImGuiConfigFlags),
/* harmony export */   CreateContext: () => (/* binding */ CreateContext),
/* harmony export */   CreateFont: () => (/* binding */ CreateFont),
/* harmony export */   DataType: () => (/* binding */ ImGuiDataType),
/* harmony export */   DebugCheckVersionAndDataLayout: () => (/* binding */ DebugCheckVersionAndDataLayout),
/* harmony export */   DestroyContext: () => (/* binding */ DestroyContext),
/* harmony export */   Dir: () => (/* binding */ ImGuiDir),
/* harmony export */   DragDropFlags: () => (/* binding */ ImGuiDragDropFlags),
/* harmony export */   DragFloat: () => (/* binding */ DragFloat),
/* harmony export */   DragFloat2: () => (/* binding */ DragFloat2),
/* harmony export */   DragFloat3: () => (/* binding */ DragFloat3),
/* harmony export */   DragFloat4: () => (/* binding */ DragFloat4),
/* harmony export */   DragFloatRange2: () => (/* binding */ DragFloatRange2),
/* harmony export */   DragInt: () => (/* binding */ DragInt),
/* harmony export */   DragInt2: () => (/* binding */ DragInt2),
/* harmony export */   DragInt3: () => (/* binding */ DragInt3),
/* harmony export */   DragInt4: () => (/* binding */ DragInt4),
/* harmony export */   DragIntRange2: () => (/* binding */ DragIntRange2),
/* harmony export */   DragScalar: () => (/* binding */ DragScalar),
/* harmony export */   DrawCmd: () => (/* binding */ ImDrawCmd),
/* harmony export */   DrawCornerFlags: () => (/* binding */ ImDrawCornerFlags),
/* harmony export */   DrawData: () => (/* binding */ ImDrawData),
/* harmony export */   DrawIdxSize: () => (/* binding */ ImDrawIdxSize),
/* harmony export */   DrawList: () => (/* binding */ ImDrawList),
/* harmony export */   DrawVert: () => (/* binding */ ImDrawVert),
/* harmony export */   DrawVertColOffset: () => (/* binding */ ImDrawVertColOffset),
/* harmony export */   DrawVertPosOffset: () => (/* binding */ ImDrawVertPosOffset),
/* harmony export */   DrawVertSize: () => (/* binding */ ImDrawVertSize),
/* harmony export */   DrawVertUVOffset: () => (/* binding */ ImDrawVertUVOffset),
/* harmony export */   Dummy: () => (/* binding */ Dummy),
/* harmony export */   End: () => (/* binding */ End),
/* harmony export */   EndChild: () => (/* binding */ EndChild),
/* harmony export */   EndChildFrame: () => (/* binding */ EndChildFrame),
/* harmony export */   EndCombo: () => (/* binding */ EndCombo),
/* harmony export */   EndDragDropSource: () => (/* binding */ EndDragDropSource),
/* harmony export */   EndDragDropTarget: () => (/* binding */ EndDragDropTarget),
/* harmony export */   EndFrame: () => (/* binding */ EndFrame),
/* harmony export */   EndGroup: () => (/* binding */ EndGroup),
/* harmony export */   EndMainMenuBar: () => (/* binding */ EndMainMenuBar),
/* harmony export */   EndMenu: () => (/* binding */ EndMenu),
/* harmony export */   EndMenuBar: () => (/* binding */ EndMenuBar),
/* harmony export */   EndPopup: () => (/* binding */ EndPopup),
/* harmony export */   EndTabBar: () => (/* binding */ EndTabBar),
/* harmony export */   EndTabItem: () => (/* binding */ EndTabItem),
/* harmony export */   EndTable: () => (/* binding */ EndTable),
/* harmony export */   EndTooltip: () => (/* binding */ EndTooltip),
/* harmony export */   FLT_MAX: () => (/* binding */ FLT_MAX),
/* harmony export */   FLT_MIN: () => (/* binding */ FLT_MIN),
/* harmony export */   FocusedFlags: () => (/* binding */ ImGuiFocusedFlags),
/* harmony export */   Font: () => (/* binding */ ImFont),
/* harmony export */   FontAtlas: () => (/* binding */ ImFontAtlas),
/* harmony export */   FontAtlasFlags: () => (/* binding */ ImFontAtlasFlags),
/* harmony export */   FontConfig: () => (/* binding */ ImFontConfig),
/* harmony export */   FontGlyph: () => (/* binding */ ImFontGlyph),
/* harmony export */   Font_toString: () => (/* binding */ Font_toString),
/* harmony export */   GetActiveId: () => (/* binding */ GetActiveId),
/* harmony export */   GetActiveIdPreviousFrame: () => (/* binding */ GetActiveIdPreviousFrame),
/* harmony export */   GetActiveWindow: () => (/* binding */ GetActiveWindow),
/* harmony export */   GetBackgroundDrawList: () => (/* binding */ GetBackgroundDrawList),
/* harmony export */   GetClipboardText: () => (/* binding */ GetClipboardText),
/* harmony export */   GetColorU32: () => (/* binding */ GetColorU32),
/* harmony export */   GetColumnIndex: () => (/* binding */ GetColumnIndex),
/* harmony export */   GetColumnOffset: () => (/* binding */ GetColumnOffset),
/* harmony export */   GetColumnWidth: () => (/* binding */ GetColumnWidth),
/* harmony export */   GetColumnsCount: () => (/* binding */ GetColumnsCount),
/* harmony export */   GetContentRegionAvail: () => (/* binding */ GetContentRegionAvail),
/* harmony export */   GetContentRegionMax: () => (/* binding */ GetContentRegionMax),
/* harmony export */   GetCurrentContext: () => (/* binding */ GetCurrentContext),
/* harmony export */   GetCurrentWindow: () => (/* binding */ GetCurrentWindow),
/* harmony export */   GetCursorPos: () => (/* binding */ GetCursorPos),
/* harmony export */   GetCursorPosX: () => (/* binding */ GetCursorPosX),
/* harmony export */   GetCursorPosY: () => (/* binding */ GetCursorPosY),
/* harmony export */   GetCursorScreenPos: () => (/* binding */ GetCursorScreenPos),
/* harmony export */   GetCursorStartPos: () => (/* binding */ GetCursorStartPos),
/* harmony export */   GetDragDropPayload: () => (/* binding */ GetDragDropPayload),
/* harmony export */   GetDrawData: () => (/* binding */ GetDrawData),
/* harmony export */   GetDrawListSharedData: () => (/* binding */ GetDrawListSharedData),
/* harmony export */   GetFont: () => (/* binding */ GetFont),
/* harmony export */   GetFontSize: () => (/* binding */ GetFontSize),
/* harmony export */   GetFontTexUvWhitePixel: () => (/* binding */ GetFontTexUvWhitePixel),
/* harmony export */   GetForegroundDrawList: () => (/* binding */ GetForegroundDrawList),
/* harmony export */   GetFrameCount: () => (/* binding */ GetFrameCount),
/* harmony export */   GetFrameHeight: () => (/* binding */ GetFrameHeight),
/* harmony export */   GetFrameHeightWithSpacing: () => (/* binding */ GetFrameHeightWithSpacing),
/* harmony export */   GetHoveredId: () => (/* binding */ GetHoveredId),
/* harmony export */   GetHoveredIdPreviousFrame: () => (/* binding */ GetHoveredIdPreviousFrame),
/* harmony export */   GetHoveredRootWindow: () => (/* binding */ GetHoveredRootWindow),
/* harmony export */   GetHoveredWindow: () => (/* binding */ GetHoveredWindow),
/* harmony export */   GetID: () => (/* binding */ GetID),
/* harmony export */   GetIO: () => (/* binding */ GetIO),
/* harmony export */   GetInputTextId: () => (/* binding */ GetInputTextId),
/* harmony export */   GetInputTextState: () => (/* binding */ GetInputTextState),
/* harmony export */   GetItemRectMax: () => (/* binding */ GetItemRectMax),
/* harmony export */   GetItemRectMin: () => (/* binding */ GetItemRectMin),
/* harmony export */   GetItemRectSize: () => (/* binding */ GetItemRectSize),
/* harmony export */   GetKeyIndex: () => (/* binding */ GetKeyIndex),
/* harmony export */   GetKeyPressedAmount: () => (/* binding */ GetKeyPressedAmount),
/* harmony export */   GetMouseCursor: () => (/* binding */ GetMouseCursor),
/* harmony export */   GetMouseDragDelta: () => (/* binding */ GetMouseDragDelta),
/* harmony export */   GetMousePos: () => (/* binding */ GetMousePos),
/* harmony export */   GetMousePosOnOpeningCurrentPopup: () => (/* binding */ GetMousePosOnOpeningCurrentPopup),
/* harmony export */   GetScrollMaxX: () => (/* binding */ GetScrollMaxX),
/* harmony export */   GetScrollMaxY: () => (/* binding */ GetScrollMaxY),
/* harmony export */   GetScrollX: () => (/* binding */ GetScrollX),
/* harmony export */   GetScrollY: () => (/* binding */ GetScrollY),
/* harmony export */   GetStyle: () => (/* binding */ GetStyle),
/* harmony export */   GetStyleColorName: () => (/* binding */ GetStyleColorName),
/* harmony export */   GetStyleColorVec4: () => (/* binding */ GetStyleColorVec4),
/* harmony export */   GetTextLineHeight: () => (/* binding */ GetTextLineHeight),
/* harmony export */   GetTextLineHeightWithSpacing: () => (/* binding */ GetTextLineHeightWithSpacing),
/* harmony export */   GetTime: () => (/* binding */ GetTime),
/* harmony export */   GetTreeNodeToLabelSpacing: () => (/* binding */ GetTreeNodeToLabelSpacing),
/* harmony export */   GetVersion: () => (/* binding */ GetVersion),
/* harmony export */   GetWindowContentRegionMax: () => (/* binding */ GetWindowContentRegionMax),
/* harmony export */   GetWindowContentRegionMin: () => (/* binding */ GetWindowContentRegionMin),
/* harmony export */   GetWindowContentRegionWidth: () => (/* binding */ GetWindowContentRegionWidth),
/* harmony export */   GetWindowDrawList: () => (/* binding */ GetWindowDrawList),
/* harmony export */   GetWindowHeight: () => (/* binding */ GetWindowHeight),
/* harmony export */   GetWindowPos: () => (/* binding */ GetWindowPos),
/* harmony export */   GetWindowSize: () => (/* binding */ GetWindowSize),
/* harmony export */   GetWindowWidth: () => (/* binding */ GetWindowWidth),
/* harmony export */   HoveredFlags: () => (/* binding */ ImGuiHoveredFlags),
/* harmony export */   IMGUI_CHECKVERSION: () => (/* binding */ IMGUI_CHECKVERSION),
/* harmony export */   IMGUI_HAS_TABLE: () => (/* binding */ IMGUI_HAS_TABLE),
/* harmony export */   IMGUI_PAYLOAD_TYPE_COLOR_3F: () => (/* binding */ IMGUI_PAYLOAD_TYPE_COLOR_3F),
/* harmony export */   IMGUI_PAYLOAD_TYPE_COLOR_4F: () => (/* binding */ IMGUI_PAYLOAD_TYPE_COLOR_4F),
/* harmony export */   IMGUI_VERSION: () => (/* binding */ IMGUI_VERSION),
/* harmony export */   IMGUI_VERSION_NUM: () => (/* binding */ IMGUI_VERSION_NUM),
/* harmony export */   IM_ARRAYSIZE: () => (/* binding */ IM_ARRAYSIZE),
/* harmony export */   IM_ASSERT: () => (/* binding */ IM_ASSERT),
/* harmony export */   IM_COL32: () => (/* binding */ IM_COL32),
/* harmony export */   IM_COL32_A_MASK: () => (/* binding */ IM_COL32_A_MASK),
/* harmony export */   IM_COL32_A_SHIFT: () => (/* binding */ IM_COL32_A_SHIFT),
/* harmony export */   IM_COL32_BLACK: () => (/* binding */ IM_COL32_BLACK),
/* harmony export */   IM_COL32_BLACK_TRANS: () => (/* binding */ IM_COL32_BLACK_TRANS),
/* harmony export */   IM_COL32_B_SHIFT: () => (/* binding */ IM_COL32_B_SHIFT),
/* harmony export */   IM_COL32_G_SHIFT: () => (/* binding */ IM_COL32_G_SHIFT),
/* harmony export */   IM_COL32_R_SHIFT: () => (/* binding */ IM_COL32_R_SHIFT),
/* harmony export */   IM_COL32_WHITE: () => (/* binding */ IM_COL32_WHITE),
/* harmony export */   IM_DRAWLIST_TEX_LINES_WIDTH_MAX: () => (/* binding */ IM_DRAWLIST_TEX_LINES_WIDTH_MAX),
/* harmony export */   IM_UNICODE_CODEPOINT_MAX: () => (/* binding */ IM_UNICODE_CODEPOINT_MAX),
/* harmony export */   IO: () => (/* binding */ ImGuiIO),
/* harmony export */   ImColor: () => (/* binding */ ImColor),
/* harmony export */   ImDrawCallback_ResetRenderState: () => (/* binding */ ImDrawCallback_ResetRenderState),
/* harmony export */   ImDrawChannel: () => (/* binding */ ImDrawChannel),
/* harmony export */   ImDrawCmd: () => (/* binding */ ImDrawCmd),
/* harmony export */   ImDrawCmdHeader: () => (/* binding */ ImDrawCmdHeader),
/* harmony export */   ImDrawCornerFlags: () => (/* binding */ ImDrawCornerFlags),
/* harmony export */   ImDrawData: () => (/* binding */ ImDrawData),
/* harmony export */   ImDrawIdxSize: () => (/* binding */ ImDrawIdxSize),
/* harmony export */   ImDrawList: () => (/* binding */ ImDrawList),
/* harmony export */   ImDrawListFlags: () => (/* binding */ ImDrawListFlags),
/* harmony export */   ImDrawListSharedData: () => (/* binding */ ImDrawListSharedData),
/* harmony export */   ImDrawVert: () => (/* binding */ ImDrawVert),
/* harmony export */   ImDrawVertColOffset: () => (/* binding */ ImDrawVertColOffset),
/* harmony export */   ImDrawVertPosOffset: () => (/* binding */ ImDrawVertPosOffset),
/* harmony export */   ImDrawVertSize: () => (/* binding */ ImDrawVertSize),
/* harmony export */   ImDrawVertUVOffset: () => (/* binding */ ImDrawVertUVOffset),
/* harmony export */   ImFont: () => (/* binding */ ImFont),
/* harmony export */   ImFontAtlas: () => (/* binding */ ImFontAtlas),
/* harmony export */   ImFontAtlasCustomRect: () => (/* binding */ ImFontAtlasCustomRect),
/* harmony export */   ImFontAtlasFlags: () => (/* binding */ ImFontAtlasFlags),
/* harmony export */   ImFontConfig: () => (/* binding */ ImFontConfig),
/* harmony export */   ImFontGlyph: () => (/* binding */ ImFontGlyph),
/* harmony export */   ImGuiBackendFlags: () => (/* binding */ ImGuiBackendFlags),
/* harmony export */   ImGuiButtonFlags: () => (/* binding */ ImGuiButtonFlags),
/* harmony export */   ImGuiCol: () => (/* binding */ ImGuiCol),
/* harmony export */   ImGuiColorEditFlags: () => (/* binding */ ImGuiColorEditFlags),
/* harmony export */   ImGuiComboFlags: () => (/* binding */ ImGuiComboFlags),
/* harmony export */   ImGuiCond: () => (/* binding */ ImGuiCond),
/* harmony export */   ImGuiConfigFlags: () => (/* binding */ ImGuiConfigFlags),
/* harmony export */   ImGuiContext: () => (/* binding */ ImGuiContext),
/* harmony export */   ImGuiDataType: () => (/* binding */ ImGuiDataType),
/* harmony export */   ImGuiDir: () => (/* binding */ ImGuiDir),
/* harmony export */   ImGuiDragDropFlags: () => (/* binding */ ImGuiDragDropFlags),
/* harmony export */   ImGuiFocusedFlags: () => (/* binding */ ImGuiFocusedFlags),
/* harmony export */   ImGuiHoveredFlags: () => (/* binding */ ImGuiHoveredFlags),
/* harmony export */   ImGuiIO: () => (/* binding */ ImGuiIO),
/* harmony export */   ImGuiInputTextCallbackData: () => (/* binding */ ImGuiInputTextCallbackData),
/* harmony export */   ImGuiInputTextDefaultSize: () => (/* binding */ ImGuiInputTextDefaultSize),
/* harmony export */   ImGuiInputTextFlags: () => (/* binding */ ImGuiInputTextFlags),
/* harmony export */   ImGuiInputTextState: () => (/* binding */ ImGuiInputTextState),
/* harmony export */   ImGuiKey: () => (/* binding */ ImGuiKey),
/* harmony export */   ImGuiKeyModFlags: () => (/* binding */ ImGuiKeyModFlags),
/* harmony export */   ImGuiListClipper: () => (/* binding */ ImGuiListClipper),
/* harmony export */   ImGuiMouseButton: () => (/* binding */ ImGuiMouseButton),
/* harmony export */   ImGuiMouseCursor: () => (/* binding */ ImGuiMouseCursor),
/* harmony export */   ImGuiNavInput: () => (/* binding */ ImGuiNavInput),
/* harmony export */   ImGuiPopupFlags: () => (/* binding */ ImGuiPopupFlags),
/* harmony export */   ImGuiSelectableFlags: () => (/* binding */ ImGuiSelectableFlags),
/* harmony export */   ImGuiSizeCallbackData: () => (/* binding */ ImGuiSizeCallbackData),
/* harmony export */   ImGuiSliderFlags: () => (/* binding */ ImGuiSliderFlags),
/* harmony export */   ImGuiSortDirection: () => (/* binding */ ImGuiSortDirection),
/* harmony export */   ImGuiStorage: () => (/* binding */ ImGuiStorage),
/* harmony export */   ImGuiStyle: () => (/* binding */ ImGuiStyle),
/* harmony export */   ImGuiStyleVar: () => (/* binding */ ImGuiStyleVar),
/* harmony export */   ImGuiTabBarFlags: () => (/* binding */ ImGuiTabBarFlags),
/* harmony export */   ImGuiTabItemFlags: () => (/* binding */ ImGuiTabItemFlags),
/* harmony export */   ImGuiTableBgTarget: () => (/* binding */ ImGuiTableBgTarget),
/* harmony export */   ImGuiTableColumnFlags: () => (/* binding */ ImGuiTableColumnFlags),
/* harmony export */   ImGuiTableColumnSortSpecs: () => (/* binding */ ImGuiTableColumnSortSpecs),
/* harmony export */   ImGuiTableFlags: () => (/* binding */ ImGuiTableFlags),
/* harmony export */   ImGuiTableRowFlags: () => (/* binding */ ImGuiTableRowFlags),
/* harmony export */   ImGuiTableSortSpecs: () => (/* binding */ ImGuiTableSortSpecs),
/* harmony export */   ImGuiTextBuffer: () => (/* binding */ ImGuiTextBuffer),
/* harmony export */   ImGuiTextFilter: () => (/* binding */ ImGuiTextFilter),
/* harmony export */   ImGuiTreeNodeFlags: () => (/* binding */ ImGuiTreeNodeFlags),
/* harmony export */   ImGuiWindow: () => (/* binding */ ImGuiWindow),
/* harmony export */   ImGuiWindowFlags: () => (/* binding */ ImGuiWindowFlags),
/* harmony export */   ImMat2: () => (/* binding */ ImMat2),
/* harmony export */   ImStringBuffer: () => (/* binding */ ImStringBuffer),
/* harmony export */   ImTransform: () => (/* binding */ ImTransform),
/* harmony export */   ImVec2: () => (/* binding */ ImVec2),
/* harmony export */   ImVec4: () => (/* binding */ ImVec4),
/* harmony export */   ImVector: () => (/* binding */ ImVector),
/* harmony export */   Image: () => (/* binding */ Image),
/* harmony export */   ImageButton: () => (/* binding */ ImageButton),
/* harmony export */   Indent: () => (/* binding */ Indent),
/* harmony export */   InputDouble: () => (/* binding */ InputDouble),
/* harmony export */   InputFloat: () => (/* binding */ InputFloat),
/* harmony export */   InputFloat2: () => (/* binding */ InputFloat2),
/* harmony export */   InputFloat3: () => (/* binding */ InputFloat3),
/* harmony export */   InputFloat4: () => (/* binding */ InputFloat4),
/* harmony export */   InputInt: () => (/* binding */ InputInt),
/* harmony export */   InputInt2: () => (/* binding */ InputInt2),
/* harmony export */   InputInt3: () => (/* binding */ InputInt3),
/* harmony export */   InputInt4: () => (/* binding */ InputInt4),
/* harmony export */   InputScalar: () => (/* binding */ InputScalar),
/* harmony export */   InputText: () => (/* binding */ InputText),
/* harmony export */   InputTextCallbackData: () => (/* binding */ ImGuiInputTextCallbackData),
/* harmony export */   InputTextDefaultSize: () => (/* binding */ ImGuiInputTextDefaultSize),
/* harmony export */   InputTextFlags: () => (/* binding */ ImGuiInputTextFlags),
/* harmony export */   InputTextMultiline: () => (/* binding */ InputTextMultiline),
/* harmony export */   InputTextState: () => (/* binding */ ImGuiInputTextState),
/* harmony export */   InputTextWithHint: () => (/* binding */ InputTextWithHint),
/* harmony export */   InvisibleButton: () => (/* binding */ InvisibleButton),
/* harmony export */   IsAnyItemActive: () => (/* binding */ IsAnyItemActive),
/* harmony export */   IsAnyItemFocused: () => (/* binding */ IsAnyItemFocused),
/* harmony export */   IsAnyItemHovered: () => (/* binding */ IsAnyItemHovered),
/* harmony export */   IsAnyMouseDown: () => (/* binding */ IsAnyMouseDown),
/* harmony export */   IsItemActivated: () => (/* binding */ IsItemActivated),
/* harmony export */   IsItemActive: () => (/* binding */ IsItemActive),
/* harmony export */   IsItemClicked: () => (/* binding */ IsItemClicked),
/* harmony export */   IsItemDeactivated: () => (/* binding */ IsItemDeactivated),
/* harmony export */   IsItemDeactivatedAfterEdit: () => (/* binding */ IsItemDeactivatedAfterEdit),
/* harmony export */   IsItemEdited: () => (/* binding */ IsItemEdited),
/* harmony export */   IsItemFocused: () => (/* binding */ IsItemFocused),
/* harmony export */   IsItemHovered: () => (/* binding */ IsItemHovered),
/* harmony export */   IsItemToggledOpen: () => (/* binding */ IsItemToggledOpen),
/* harmony export */   IsItemVisible: () => (/* binding */ IsItemVisible),
/* harmony export */   IsKeyDown: () => (/* binding */ IsKeyDown),
/* harmony export */   IsKeyPressed: () => (/* binding */ IsKeyPressed),
/* harmony export */   IsKeyReleased: () => (/* binding */ IsKeyReleased),
/* harmony export */   IsMouseClicked: () => (/* binding */ IsMouseClicked),
/* harmony export */   IsMouseDoubleClicked: () => (/* binding */ IsMouseDoubleClicked),
/* harmony export */   IsMouseDown: () => (/* binding */ IsMouseDown),
/* harmony export */   IsMouseDragging: () => (/* binding */ IsMouseDragging),
/* harmony export */   IsMouseHoveringRect: () => (/* binding */ IsMouseHoveringRect),
/* harmony export */   IsMousePosValid: () => (/* binding */ IsMousePosValid),
/* harmony export */   IsMouseReleased: () => (/* binding */ IsMouseReleased),
/* harmony export */   IsPopupOpen: () => (/* binding */ IsPopupOpen),
/* harmony export */   IsRectVisible: () => (/* binding */ IsRectVisible),
/* harmony export */   IsWindowAppearing: () => (/* binding */ IsWindowAppearing),
/* harmony export */   IsWindowCollapsed: () => (/* binding */ IsWindowCollapsed),
/* harmony export */   IsWindowFocused: () => (/* binding */ IsWindowFocused),
/* harmony export */   IsWindowHovered: () => (/* binding */ IsWindowHovered),
/* harmony export */   Key: () => (/* binding */ ImGuiKey),
/* harmony export */   KeyModFlags: () => (/* binding */ ImGuiKeyModFlags),
/* harmony export */   LabelText: () => (/* binding */ LabelText),
/* harmony export */   ListBox: () => (/* binding */ ListBox),
/* harmony export */   ListBoxFooter: () => (/* binding */ ListBoxFooter),
/* harmony export */   ListBoxHeader: () => (/* binding */ ListBoxHeader),
/* harmony export */   ListClipper: () => (/* binding */ ImGuiListClipper),
/* harmony export */   LoadIniSettingsFromDisk: () => (/* binding */ LoadIniSettingsFromDisk),
/* harmony export */   LoadIniSettingsFromMemory: () => (/* binding */ LoadIniSettingsFromMemory),
/* harmony export */   LogButtons: () => (/* binding */ LogButtons),
/* harmony export */   LogFinish: () => (/* binding */ LogFinish),
/* harmony export */   LogText: () => (/* binding */ LogText),
/* harmony export */   LogToClipboard: () => (/* binding */ LogToClipboard),
/* harmony export */   LogToFile: () => (/* binding */ LogToFile),
/* harmony export */   LogToTTY: () => (/* binding */ LogToTTY),
/* harmony export */   MemAlloc: () => (/* binding */ MemAlloc),
/* harmony export */   MemFree: () => (/* binding */ MemFree),
/* harmony export */   MenuItem: () => (/* binding */ MenuItem),
/* harmony export */   MouseButton: () => (/* binding */ ImGuiMouseButton),
/* harmony export */   MouseCursor: () => (/* binding */ ImGuiMouseCursor),
/* harmony export */   NavInput: () => (/* binding */ ImGuiNavInput),
/* harmony export */   NewFrame: () => (/* binding */ NewFrame),
/* harmony export */   NewLine: () => (/* binding */ NewLine),
/* harmony export */   NextColumn: () => (/* binding */ NextColumn),
/* harmony export */   OpenPopup: () => (/* binding */ OpenPopup),
/* harmony export */   OpenPopupOnItemClick: () => (/* binding */ OpenPopupOnItemClick),
/* harmony export */   PlotHistogram: () => (/* binding */ PlotHistogram),
/* harmony export */   PlotLines: () => (/* binding */ PlotLines),
/* harmony export */   PopAllowKeyboardFocus: () => (/* binding */ PopAllowKeyboardFocus),
/* harmony export */   PopButtonRepeat: () => (/* binding */ PopButtonRepeat),
/* harmony export */   PopClipRect: () => (/* binding */ PopClipRect),
/* harmony export */   PopFont: () => (/* binding */ PopFont),
/* harmony export */   PopID: () => (/* binding */ PopID),
/* harmony export */   PopItemWidth: () => (/* binding */ PopItemWidth),
/* harmony export */   PopStyleColor: () => (/* binding */ PopStyleColor),
/* harmony export */   PopStyleVar: () => (/* binding */ PopStyleVar),
/* harmony export */   PopTextWrapPos: () => (/* binding */ PopTextWrapPos),
/* harmony export */   PopupFlags: () => (/* binding */ ImGuiPopupFlags),
/* harmony export */   ProgressBar: () => (/* binding */ ProgressBar),
/* harmony export */   PushAllowKeyboardFocus: () => (/* binding */ PushAllowKeyboardFocus),
/* harmony export */   PushButtonRepeat: () => (/* binding */ PushButtonRepeat),
/* harmony export */   PushClipRect: () => (/* binding */ PushClipRect),
/* harmony export */   PushFont: () => (/* binding */ PushFont),
/* harmony export */   PushID: () => (/* binding */ PushID),
/* harmony export */   PushItemWidth: () => (/* binding */ PushItemWidth),
/* harmony export */   PushStyleColor: () => (/* binding */ PushStyleColor),
/* harmony export */   PushStyleVar: () => (/* binding */ PushStyleVar),
/* harmony export */   PushTextWrapPos: () => (/* binding */ PushTextWrapPos),
/* harmony export */   RadioButton: () => (/* binding */ RadioButton),
/* harmony export */   Render: () => (/* binding */ Render),
/* harmony export */   ResetMouseDragDelta: () => (/* binding */ ResetMouseDragDelta),
/* harmony export */   SameLine: () => (/* binding */ SameLine),
/* harmony export */   SaveIniSettingsToDisk: () => (/* binding */ SaveIniSettingsToDisk),
/* harmony export */   SaveIniSettingsToMemory: () => (/* binding */ SaveIniSettingsToMemory),
/* harmony export */   Selectable: () => (/* binding */ Selectable),
/* harmony export */   SelectableFlags: () => (/* binding */ ImGuiSelectableFlags),
/* harmony export */   Separator: () => (/* binding */ Separator),
/* harmony export */   SetActiveId: () => (/* binding */ SetActiveId),
/* harmony export */   SetAllocatorFunctions: () => (/* binding */ SetAllocatorFunctions),
/* harmony export */   SetClipboardText: () => (/* binding */ SetClipboardText),
/* harmony export */   SetColorEditOptions: () => (/* binding */ SetColorEditOptions),
/* harmony export */   SetColumnOffset: () => (/* binding */ SetColumnOffset),
/* harmony export */   SetColumnWidth: () => (/* binding */ SetColumnWidth),
/* harmony export */   SetCurrentContext: () => (/* binding */ SetCurrentContext),
/* harmony export */   SetCursorPos: () => (/* binding */ SetCursorPos),
/* harmony export */   SetCursorPosX: () => (/* binding */ SetCursorPosX),
/* harmony export */   SetCursorPosY: () => (/* binding */ SetCursorPosY),
/* harmony export */   SetCursorScreenPos: () => (/* binding */ SetCursorScreenPos),
/* harmony export */   SetDragDropPayload: () => (/* binding */ SetDragDropPayload),
/* harmony export */   SetItemAllowOverlap: () => (/* binding */ SetItemAllowOverlap),
/* harmony export */   SetItemDefaultFocus: () => (/* binding */ SetItemDefaultFocus),
/* harmony export */   SetKeyboardFocusHere: () => (/* binding */ SetKeyboardFocusHere),
/* harmony export */   SetMouseCursor: () => (/* binding */ SetMouseCursor),
/* harmony export */   SetNextItemOpen: () => (/* binding */ SetNextItemOpen),
/* harmony export */   SetNextItemWidth: () => (/* binding */ SetNextItemWidth),
/* harmony export */   SetNextWindowBgAlpha: () => (/* binding */ SetNextWindowBgAlpha),
/* harmony export */   SetNextWindowCollapsed: () => (/* binding */ SetNextWindowCollapsed),
/* harmony export */   SetNextWindowContentSize: () => (/* binding */ SetNextWindowContentSize),
/* harmony export */   SetNextWindowFocus: () => (/* binding */ SetNextWindowFocus),
/* harmony export */   SetNextWindowPos: () => (/* binding */ SetNextWindowPos),
/* harmony export */   SetNextWindowSize: () => (/* binding */ SetNextWindowSize),
/* harmony export */   SetNextWindowSizeConstraints: () => (/* binding */ SetNextWindowSizeConstraints),
/* harmony export */   SetScrollFromPosX: () => (/* binding */ SetScrollFromPosX),
/* harmony export */   SetScrollFromPosY: () => (/* binding */ SetScrollFromPosY),
/* harmony export */   SetScrollHereX: () => (/* binding */ SetScrollHereX),
/* harmony export */   SetScrollHereY: () => (/* binding */ SetScrollHereY),
/* harmony export */   SetScrollX: () => (/* binding */ SetScrollX),
/* harmony export */   SetScrollY: () => (/* binding */ SetScrollY),
/* harmony export */   SetTabItemClosed: () => (/* binding */ SetTabItemClosed),
/* harmony export */   SetTooltip: () => (/* binding */ SetTooltip),
/* harmony export */   SetWindowCollapsed: () => (/* binding */ SetWindowCollapsed),
/* harmony export */   SetWindowFocus: () => (/* binding */ SetWindowFocus),
/* harmony export */   SetWindowFontScale: () => (/* binding */ SetWindowFontScale),
/* harmony export */   SetWindowPos: () => (/* binding */ SetWindowPos),
/* harmony export */   SetWindowSize: () => (/* binding */ SetWindowSize),
/* harmony export */   ShowAboutWindow: () => (/* binding */ ShowAboutWindow),
/* harmony export */   ShowDemoWindow: () => (/* binding */ ShowDemoWindow),
/* harmony export */   ShowFontSelector: () => (/* binding */ ShowFontSelector),
/* harmony export */   ShowMetricsWindow: () => (/* binding */ ShowMetricsWindow),
/* harmony export */   ShowStyleEditor: () => (/* binding */ ShowStyleEditor),
/* harmony export */   ShowStyleSelector: () => (/* binding */ ShowStyleSelector),
/* harmony export */   ShowUserGuide: () => (/* binding */ ShowUserGuide),
/* harmony export */   SizeCallbackData: () => (/* binding */ ImGuiSizeCallbackData),
/* harmony export */   SliderAngle: () => (/* binding */ SliderAngle),
/* harmony export */   SliderAngle3: () => (/* binding */ SliderAngle3),
/* harmony export */   SliderFlags: () => (/* binding */ ImGuiSliderFlags),
/* harmony export */   SliderFloat: () => (/* binding */ SliderFloat),
/* harmony export */   SliderFloat2: () => (/* binding */ SliderFloat2),
/* harmony export */   SliderFloat3: () => (/* binding */ SliderFloat3),
/* harmony export */   SliderFloat4: () => (/* binding */ SliderFloat4),
/* harmony export */   SliderInt: () => (/* binding */ SliderInt),
/* harmony export */   SliderInt2: () => (/* binding */ SliderInt2),
/* harmony export */   SliderInt3: () => (/* binding */ SliderInt3),
/* harmony export */   SliderInt4: () => (/* binding */ SliderInt4),
/* harmony export */   SliderScalar: () => (/* binding */ SliderScalar),
/* harmony export */   SmallButton: () => (/* binding */ SmallButton),
/* harmony export */   SortDirection: () => (/* binding */ ImGuiSortDirection),
/* harmony export */   Spacing: () => (/* binding */ Spacing),
/* harmony export */   StringBuffer: () => (/* binding */ ImStringBuffer),
/* harmony export */   Style: () => (/* binding */ ImGuiStyle),
/* harmony export */   StyleColorsClassic: () => (/* binding */ StyleColorsClassic),
/* harmony export */   StyleColorsDark: () => (/* binding */ StyleColorsDark),
/* harmony export */   StyleColorsLight: () => (/* binding */ StyleColorsLight),
/* harmony export */   StyleVar: () => (/* binding */ ImGuiStyleVar),
/* harmony export */   TabBarFlags: () => (/* binding */ ImGuiTabBarFlags),
/* harmony export */   TabItemButton: () => (/* binding */ TabItemButton),
/* harmony export */   TabItemFlags: () => (/* binding */ ImGuiTabItemFlags),
/* harmony export */   TableBgTarget: () => (/* binding */ ImGuiTableBgTarget),
/* harmony export */   TableColumnFlags: () => (/* binding */ ImGuiTableColumnFlags),
/* harmony export */   TableColumnSortSpecs: () => (/* binding */ ImGuiTableColumnSortSpecs),
/* harmony export */   TableFlags: () => (/* binding */ ImGuiTableFlags),
/* harmony export */   TableGetColumnCount: () => (/* binding */ TableGetColumnCount),
/* harmony export */   TableGetColumnFlags: () => (/* binding */ TableGetColumnFlags),
/* harmony export */   TableGetColumnIndex: () => (/* binding */ TableGetColumnIndex),
/* harmony export */   TableGetColumnName: () => (/* binding */ TableGetColumnName),
/* harmony export */   TableGetRowIndex: () => (/* binding */ TableGetRowIndex),
/* harmony export */   TableGetSortSpecs: () => (/* binding */ TableGetSortSpecs),
/* harmony export */   TableHeader: () => (/* binding */ TableHeader),
/* harmony export */   TableHeadersRow: () => (/* binding */ TableHeadersRow),
/* harmony export */   TableNextColumn: () => (/* binding */ TableNextColumn),
/* harmony export */   TableNextRow: () => (/* binding */ TableNextRow),
/* harmony export */   TableRowFlags: () => (/* binding */ ImGuiTableRowFlags),
/* harmony export */   TableSetBgColor: () => (/* binding */ TableSetBgColor),
/* harmony export */   TableSetColumnIndex: () => (/* binding */ TableSetColumnIndex),
/* harmony export */   TableSetupColumn: () => (/* binding */ TableSetupColumn),
/* harmony export */   TableSetupScrollFreeze: () => (/* binding */ TableSetupScrollFreeze),
/* harmony export */   TableSortSpecs: () => (/* binding */ ImGuiTableSortSpecs),
/* harmony export */   Text: () => (/* binding */ Text),
/* harmony export */   TextBuffer: () => (/* binding */ ImGuiTextBuffer),
/* harmony export */   TextColored: () => (/* binding */ TextColored),
/* harmony export */   TextDisabled: () => (/* binding */ TextDisabled),
/* harmony export */   TextFilter: () => (/* binding */ ImGuiTextFilter),
/* harmony export */   TextUnformatted: () => (/* binding */ TextUnformatted),
/* harmony export */   TextWrapped: () => (/* binding */ TextWrapped),
/* harmony export */   Transform: () => (/* binding */ ImTransform),
/* harmony export */   TreeNode: () => (/* binding */ TreeNode),
/* harmony export */   TreeNodeEx: () => (/* binding */ TreeNodeEx),
/* harmony export */   TreeNodeFlags: () => (/* binding */ ImGuiTreeNodeFlags),
/* harmony export */   TreePop: () => (/* binding */ TreePop),
/* harmony export */   TreePush: () => (/* binding */ TreePush),
/* harmony export */   UNICODE_CODEPOINT_MAX: () => (/* binding */ IM_UNICODE_CODEPOINT_MAX),
/* harmony export */   Unindent: () => (/* binding */ Unindent),
/* harmony export */   VERSION: () => (/* binding */ IMGUI_VERSION),
/* harmony export */   VERSION_NUM: () => (/* binding */ IMGUI_VERSION_NUM),
/* harmony export */   VSliderFloat: () => (/* binding */ VSliderFloat),
/* harmony export */   VSliderInt: () => (/* binding */ VSliderInt),
/* harmony export */   VSliderScalar: () => (/* binding */ VSliderScalar),
/* harmony export */   Value: () => (/* binding */ Value),
/* harmony export */   Vec2: () => (/* binding */ ImVec2),
/* harmony export */   Vec4: () => (/* binding */ ImVec4),
/* harmony export */   Vec4_toRGBA: () => (/* binding */ Vec4_toRGBA),
/* harmony export */   Vector: () => (/* binding */ ImVector),
/* harmony export */   Window: () => (/* binding */ ImGuiWindow),
/* harmony export */   WindowFlags: () => (/* binding */ ImGuiWindowFlags),
/* harmony export */   bind: () => (/* binding */ bind),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isMobile: () => (/* binding */ isMobile),
/* harmony export */   script_ImFontConfig: () => (/* binding */ script_ImFontConfig),
/* harmony export */   script_ImFontGlyph: () => (/* binding */ script_ImFontGlyph),
/* harmony export */   wListFlags: () => (/* binding */ ImDrawListFlags)
/* harmony export */ });
/* harmony import */ var _bind_imgui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bind-imgui */ "./src/bind-imgui.js");
/* harmony import */ var _bind_imgui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bind_imgui__WEBPACK_IMPORTED_MODULE_0__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


let bind;
let FLT_MIN;
let FLT_MAX;
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
            _bind_imgui__WEBPACK_IMPORTED_MODULE_0___default()(value).then((value) => {
                bind = value;
                FLT_MIN = bind.FLT_MIN;
                FLT_MAX = bind.FLT_MAX;
                resolve();
            });
        });
    });
}

function import_Scalar(sca) {
    if (Array.isArray(sca)) {
        return [sca[0]];
    }
    if (typeof sca === "function") {
        return [sca()];
    }
    return [sca.x];
}
function export_Scalar(tuple, sca) {
    if (Array.isArray(sca)) {
        sca[0] = tuple[0];
        return;
    }
    if (typeof sca === "function") {
        sca(tuple[0]);
        return;
    }
    sca.x = tuple[0];
}
function import_Vector2(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1]];
    }
    return [vec.x, vec.y];
}
function export_Vector2(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
}
function import_Vector3(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1], vec[2]];
    }
    return [vec.x, vec.y, vec.z];
}
function export_Vector3(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        vec[2] = tuple[2];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
    vec.z = tuple[2];
}
function import_Vector4(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1], vec[2], vec[3] || 0];
    }
    return [vec.x, vec.y, vec.z, vec.w];
}
function export_Vector4(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        vec[2] = tuple[2];
        vec[3] = tuple[3];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
    vec.z = tuple[2];
    vec.w = tuple[3];
}
function import_Color3(col) {
    if (Array.isArray(col)) {
        return [col[0], col[1], col[2]];
    }
    if ("r" in col) {
        return [col.r, col.g, col.b];
    }
    return [col.x, col.y, col.z];
}
function export_Color3(tuple, col) {
    if (Array.isArray(col)) {
        col[0] = tuple[0];
        col[1] = tuple[1];
        col[2] = tuple[2];
        return;
    }
    if ("r" in col) {
        col.r = tuple[0];
        col.g = tuple[1];
        col.b = tuple[2];
        return;
    }
    col.x = tuple[0];
    col.y = tuple[1];
    col.z = tuple[2];
}
function import_Color4(col) {
    if (Array.isArray(col)) {
        return [col[0], col[1], col[2], col[3]];
    }
    if ("r" in col) {
        return [col.r, col.g, col.b, col.a];
    }
    return [col.x, col.y, col.z, col.w];
}
function export_Color4(tuple, col) {
    if (Array.isArray(col)) {
        col[0] = tuple[0];
        col[1] = tuple[1];
        col[2] = tuple[2];
        col[3] = tuple[3];
        return;
    }
    if ("r" in col) {
        col.r = tuple[0];
        col.g = tuple[1];
        col.b = tuple[2];
        col.a = tuple[3];
        return;
    }
    col.x = tuple[0];
    col.y = tuple[1];
    col.z = tuple[2];
    col.w = tuple[3];
}
var isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function () {
        return navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function () {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function () {
        return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
    },
    any: function () {
        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
    },
    isPortrait: function () {
        return window.innerHeight > window.innerWidth;
    },
};
//import * as config from "./imconfig";

const IMGUI_VERSION = "1.80"; // bind.IMGUI_VERSION;

const IMGUI_VERSION_NUM = 18000; // bind.IMGUI_VERSION_NUM;
// #define IMGUI_CHECKVERSION()        ImGui::DebugCheckVersionAndDataLayout(IMGUI_VERSION, sizeof(ImGuiIO), sizeof(ImGuiStyle), sizeof(ImVec2), sizeof(ImVec4), sizeof(ImDrawVert))

function IMGUI_CHECKVERSION() { return DebugCheckVersionAndDataLayout(IMGUI_VERSION, bind.ImGuiIOSize, bind.ImGuiStyleSize, bind.ImVec2Size, bind.ImVec4Size, bind.ImDrawVertSize, bind.ImDrawIdxSize); }
const IMGUI_HAS_TABLE = true;
function ASSERT(c) { if (!c) {
    throw new Error();
} }
function IM_ASSERT(c) { if (!c) {
    throw new Error();
} }

function IM_ARRAYSIZE(_ARR) {
    if (_ARR instanceof ImStringBuffer) {
        return _ARR.size;
    }
    else {
        return _ARR.length;
    }
}

class ImStringBuffer {
    constructor(size, buffer = "") {
        this.size = size;
        this.buffer = buffer;
    }
}
// Flags for ImGui::Begin()

var ImGuiWindowFlags;
(function (ImGuiWindowFlags) {
    ImGuiWindowFlags[ImGuiWindowFlags["None"] = 0] = "None";
    ImGuiWindowFlags[ImGuiWindowFlags["NoTitleBar"] = 1] = "NoTitleBar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoResize"] = 2] = "NoResize";
    ImGuiWindowFlags[ImGuiWindowFlags["NoMove"] = 4] = "NoMove";
    ImGuiWindowFlags[ImGuiWindowFlags["NoScrollbar"] = 8] = "NoScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoScrollWithMouse"] = 16] = "NoScrollWithMouse";
    ImGuiWindowFlags[ImGuiWindowFlags["NoCollapse"] = 32] = "NoCollapse";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysAutoResize"] = 64] = "AlwaysAutoResize";
    ImGuiWindowFlags[ImGuiWindowFlags["NoBackground"] = 128] = "NoBackground";
    ImGuiWindowFlags[ImGuiWindowFlags["NoSavedSettings"] = 256] = "NoSavedSettings";
    ImGuiWindowFlags[ImGuiWindowFlags["NoMouseInputs"] = 512] = "NoMouseInputs";
    ImGuiWindowFlags[ImGuiWindowFlags["MenuBar"] = 1024] = "MenuBar";
    ImGuiWindowFlags[ImGuiWindowFlags["HorizontalScrollbar"] = 2048] = "HorizontalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoFocusOnAppearing"] = 4096] = "NoFocusOnAppearing";
    ImGuiWindowFlags[ImGuiWindowFlags["NoBringToFrontOnFocus"] = 8192] = "NoBringToFrontOnFocus";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysVerticalScrollbar"] = 16384] = "AlwaysVerticalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysHorizontalScrollbar"] = 32768] = "AlwaysHorizontalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysUseWindowPadding"] = 65536] = "AlwaysUseWindowPadding";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNavInputs"] = 262144] = "NoNavInputs";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNavFocus"] = 524288] = "NoNavFocus";
    ImGuiWindowFlags[ImGuiWindowFlags["UnsavedDocument"] = 1048576] = "UnsavedDocument";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNav"] = 786432] = "NoNav";
    ImGuiWindowFlags[ImGuiWindowFlags["NoDecoration"] = 43] = "NoDecoration";
    ImGuiWindowFlags[ImGuiWindowFlags["NoInputs"] = 786944] = "NoInputs";
    // [Internal]
    ImGuiWindowFlags[ImGuiWindowFlags["NavFlattened"] = 8388608] = "NavFlattened";
    ImGuiWindowFlags[ImGuiWindowFlags["ChildWindow"] = 16777216] = "ChildWindow";
    ImGuiWindowFlags[ImGuiWindowFlags["Tooltip"] = 33554432] = "Tooltip";
    ImGuiWindowFlags[ImGuiWindowFlags["Popup"] = 67108864] = "Popup";
    ImGuiWindowFlags[ImGuiWindowFlags["Modal"] = 134217728] = "Modal";
    ImGuiWindowFlags[ImGuiWindowFlags["ChildMenu"] = 268435456] = "ChildMenu";
})(ImGuiWindowFlags || (ImGuiWindowFlags = {}));
// Flags for ImGui::InputText()

var ImGuiInputTextFlags;
(function (ImGuiInputTextFlags) {
    ImGuiInputTextFlags[ImGuiInputTextFlags["None"] = 0] = "None";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsDecimal"] = 1] = "CharsDecimal";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsHexadecimal"] = 2] = "CharsHexadecimal";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsUppercase"] = 4] = "CharsUppercase";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsNoBlank"] = 8] = "CharsNoBlank";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AutoSelectAll"] = 16] = "AutoSelectAll";
    ImGuiInputTextFlags[ImGuiInputTextFlags["EnterReturnsTrue"] = 32] = "EnterReturnsTrue";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackCompletion"] = 64] = "CallbackCompletion";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackHistory"] = 128] = "CallbackHistory";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackAlways"] = 256] = "CallbackAlways";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackCharFilter"] = 512] = "CallbackCharFilter";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AllowTabInput"] = 1024] = "AllowTabInput";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CtrlEnterForNewLine"] = 2048] = "CtrlEnterForNewLine";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoHorizontalScroll"] = 4096] = "NoHorizontalScroll";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AlwaysInsertMode"] = 8192] = "AlwaysInsertMode";
    ImGuiInputTextFlags[ImGuiInputTextFlags["ReadOnly"] = 16384] = "ReadOnly";
    ImGuiInputTextFlags[ImGuiInputTextFlags["Password"] = 32768] = "Password";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoUndoRedo"] = 65536] = "NoUndoRedo";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsScientific"] = 131072] = "CharsScientific";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackResize"] = 262144] = "CallbackResize";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackEdit"] = 524288] = "CallbackEdit";
    // [Internal]
    ImGuiInputTextFlags[ImGuiInputTextFlags["Multiline"] = 1048576] = "Multiline";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoMarkEdited"] = 2097152] = "NoMarkEdited";
})(ImGuiInputTextFlags || (ImGuiInputTextFlags = {}));
// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()

var ImGuiTreeNodeFlags;
(function (ImGuiTreeNodeFlags) {
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["None"] = 0] = "None";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Selected"] = 1] = "Selected";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Framed"] = 2] = "Framed";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["AllowItemOverlap"] = 4] = "AllowItemOverlap";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NoTreePushOnOpen"] = 8] = "NoTreePushOnOpen";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NoAutoOpenOnLog"] = 16] = "NoAutoOpenOnLog";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["DefaultOpen"] = 32] = "DefaultOpen";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["OpenOnDoubleClick"] = 64] = "OpenOnDoubleClick";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["OpenOnArrow"] = 128] = "OpenOnArrow";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Leaf"] = 256] = "Leaf";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Bullet"] = 512] = "Bullet";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["FramePadding"] = 1024] = "FramePadding";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["SpanAvailWidth"] = 2048] = "SpanAvailWidth";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["SpanFullWidth"] = 4096] = "SpanFullWidth";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NavLeftJumpsBackHere"] = 8192] = "NavLeftJumpsBackHere";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["CollapsingHeader"] = 26] = "CollapsingHeader";
})(ImGuiTreeNodeFlags || (ImGuiTreeNodeFlags = {}));

var ImGuiPopupFlags;
(function (ImGuiPopupFlags) {
    ImGuiPopupFlags[ImGuiPopupFlags["None"] = 0] = "None";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonLeft"] = 0] = "MouseButtonLeft";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonRight"] = 1] = "MouseButtonRight";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonMiddle"] = 2] = "MouseButtonMiddle";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonMask_"] = 31] = "MouseButtonMask_";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonDefault_"] = 1] = "MouseButtonDefault_";
    ImGuiPopupFlags[ImGuiPopupFlags["NoOpenOverExistingPopup"] = 32] = "NoOpenOverExistingPopup";
    ImGuiPopupFlags[ImGuiPopupFlags["NoOpenOverItems"] = 64] = "NoOpenOverItems";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopupId"] = 128] = "AnyPopupId";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopupLevel"] = 256] = "AnyPopupLevel";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopup"] = 384] = "AnyPopup";
})(ImGuiPopupFlags || (ImGuiPopupFlags = {}));
// Flags for ImGui::Selectable()

var ImGuiSelectableFlags;
(function (ImGuiSelectableFlags) {
    ImGuiSelectableFlags[ImGuiSelectableFlags["None"] = 0] = "None";
    ImGuiSelectableFlags[ImGuiSelectableFlags["DontClosePopups"] = 1] = "DontClosePopups";
    ImGuiSelectableFlags[ImGuiSelectableFlags["SpanAllColumns"] = 2] = "SpanAllColumns";
    ImGuiSelectableFlags[ImGuiSelectableFlags["AllowDoubleClick"] = 4] = "AllowDoubleClick";
    ImGuiSelectableFlags[ImGuiSelectableFlags["Disabled"] = 8] = "Disabled";
    ImGuiSelectableFlags[ImGuiSelectableFlags["AllowItemOverlap"] = 16] = "AllowItemOverlap"; // (WIP) Hit testing to allow subsequent widgets to overlap this one
})(ImGuiSelectableFlags || (ImGuiSelectableFlags = {}));
// Flags for ImGui::BeginCombo()

var ImGuiComboFlags;
(function (ImGuiComboFlags) {
    ImGuiComboFlags[ImGuiComboFlags["None"] = 0] = "None";
    ImGuiComboFlags[ImGuiComboFlags["PopupAlignLeft"] = 1] = "PopupAlignLeft";
    ImGuiComboFlags[ImGuiComboFlags["HeightSmall"] = 2] = "HeightSmall";
    ImGuiComboFlags[ImGuiComboFlags["HeightRegular"] = 4] = "HeightRegular";
    ImGuiComboFlags[ImGuiComboFlags["HeightLarge"] = 8] = "HeightLarge";
    ImGuiComboFlags[ImGuiComboFlags["HeightLargest"] = 16] = "HeightLargest";
    ImGuiComboFlags[ImGuiComboFlags["NoArrowButton"] = 32] = "NoArrowButton";
    ImGuiComboFlags[ImGuiComboFlags["NoPreview"] = 64] = "NoPreview";
    ImGuiComboFlags[ImGuiComboFlags["HeightMask_"] = 30] = "HeightMask_";
})(ImGuiComboFlags || (ImGuiComboFlags = {}));
// Flags for ImGui::BeginTabBar()

var ImGuiTabBarFlags;
(function (ImGuiTabBarFlags) {
    ImGuiTabBarFlags[ImGuiTabBarFlags["None"] = 0] = "None";
    ImGuiTabBarFlags[ImGuiTabBarFlags["Reorderable"] = 1] = "Reorderable";
    ImGuiTabBarFlags[ImGuiTabBarFlags["AutoSelectNewTabs"] = 2] = "AutoSelectNewTabs";
    ImGuiTabBarFlags[ImGuiTabBarFlags["TabListPopupButton"] = 4] = "TabListPopupButton";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoCloseWithMiddleMouseButton"] = 8] = "NoCloseWithMiddleMouseButton";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoTabListScrollingButtons"] = 16] = "NoTabListScrollingButtons";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoTooltip"] = 32] = "NoTooltip";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyResizeDown"] = 64] = "FittingPolicyResizeDown";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyScroll"] = 128] = "FittingPolicyScroll";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyMask_"] = 192] = "FittingPolicyMask_";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyDefault_"] = 64] = "FittingPolicyDefault_";
})(ImGuiTabBarFlags || (ImGuiTabBarFlags = {}));
;
// Flags for ImGui::BeginTabItem()

var ImGuiTabItemFlags;
(function (ImGuiTabItemFlags) {
    ImGuiTabItemFlags[ImGuiTabItemFlags["None"] = 0] = "None";
    ImGuiTabItemFlags[ImGuiTabItemFlags["UnsavedDocument"] = 1] = "UnsavedDocument";
    ImGuiTabItemFlags[ImGuiTabItemFlags["SetSelected"] = 2] = "SetSelected";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoCloseWithMiddleMouseButton"] = 4] = "NoCloseWithMiddleMouseButton";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoPushId"] = 8] = "NoPushId";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoTooltip"] = 16] = "NoTooltip";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoReorder"] = 32] = "NoReorder";
    ImGuiTabItemFlags[ImGuiTabItemFlags["Leading"] = 64] = "Leading";
    ImGuiTabItemFlags[ImGuiTabItemFlags["Trailing"] = 128] = "Trailing"; // Enforce the tab position to the right of the tab bar (before the scrolling buttons)
})(ImGuiTabItemFlags || (ImGuiTabItemFlags = {}));

var ImGuiTableFlags;
(function (ImGuiTableFlags) {
    // Features
    ImGuiTableFlags[ImGuiTableFlags["None"] = 0] = "None";
    ImGuiTableFlags[ImGuiTableFlags["Resizable"] = 1] = "Resizable";
    ImGuiTableFlags[ImGuiTableFlags["Reorderable"] = 2] = "Reorderable";
    ImGuiTableFlags[ImGuiTableFlags["Hideable"] = 4] = "Hideable";
    ImGuiTableFlags[ImGuiTableFlags["Sortable"] = 8] = "Sortable";
    ImGuiTableFlags[ImGuiTableFlags["NoSavedSettings"] = 16] = "NoSavedSettings";
    ImGuiTableFlags[ImGuiTableFlags["ContextMenuInBody"] = 32] = "ContextMenuInBody";
    // Decorations
    ImGuiTableFlags[ImGuiTableFlags["RowBg"] = 64] = "RowBg";
    ImGuiTableFlags[ImGuiTableFlags["BordersInnerH"] = 128] = "BordersInnerH";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuterH"] = 256] = "BordersOuterH";
    ImGuiTableFlags[ImGuiTableFlags["BordersInnerV"] = 512] = "BordersInnerV";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuterV"] = 1024] = "BordersOuterV";
    ImGuiTableFlags[ImGuiTableFlags["BordersH"] = 384] = "BordersH";
    ImGuiTableFlags[ImGuiTableFlags["BordersV"] = 1536] = "BordersV";
    ImGuiTableFlags[ImGuiTableFlags["BordersInner"] = 640] = "BordersInner";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuter"] = 1280] = "BordersOuter";
    ImGuiTableFlags[ImGuiTableFlags["Borders"] = 1920] = "Borders";
    ImGuiTableFlags[ImGuiTableFlags["NoBordersInBody"] = 2048] = "NoBordersInBody";
    ImGuiTableFlags[ImGuiTableFlags["NoBordersInBodyUntilResize"] = 4096] = "NoBordersInBodyUntilResize";
    // Sizing Policy (read above for defaults)
    ImGuiTableFlags[ImGuiTableFlags["SizingFixedFit"] = 8192] = "SizingFixedFit";
    ImGuiTableFlags[ImGuiTableFlags["SizingFixedSame"] = 16384] = "SizingFixedSame";
    ImGuiTableFlags[ImGuiTableFlags["SizingStretchProp"] = 24576] = "SizingStretchProp";
    ImGuiTableFlags[ImGuiTableFlags["SizingStretchSame"] = 32768] = "SizingStretchSame";
    // Sizing Extra Options
    ImGuiTableFlags[ImGuiTableFlags["NoHostExtendX"] = 65536] = "NoHostExtendX";
    ImGuiTableFlags[ImGuiTableFlags["NoHostExtendY"] = 131072] = "NoHostExtendY";
    ImGuiTableFlags[ImGuiTableFlags["NoKeepColumnsVisible"] = 262144] = "NoKeepColumnsVisible";
    ImGuiTableFlags[ImGuiTableFlags["PreciseWidths"] = 524288] = "PreciseWidths";
    // Clipping
    ImGuiTableFlags[ImGuiTableFlags["NoClip"] = 1048576] = "NoClip";
    // Padding
    ImGuiTableFlags[ImGuiTableFlags["PadOuterX"] = 2097152] = "PadOuterX";
    ImGuiTableFlags[ImGuiTableFlags["NoPadOuterX"] = 4194304] = "NoPadOuterX";
    ImGuiTableFlags[ImGuiTableFlags["NoPadInnerX"] = 8388608] = "NoPadInnerX";
    // Scrolling
    ImGuiTableFlags[ImGuiTableFlags["ScrollX"] = 16777216] = "ScrollX";
    ImGuiTableFlags[ImGuiTableFlags["ScrollY"] = 33554432] = "ScrollY";
    // Sorting
    ImGuiTableFlags[ImGuiTableFlags["SortMulti"] = 67108864] = "SortMulti";
    ImGuiTableFlags[ImGuiTableFlags["SortTristate"] = 134217728] = "SortTristate";
    // [Internal] Combinations and masks
    ImGuiTableFlags[ImGuiTableFlags["SizingMask_"] = 57344] = "SizingMask_";
})(ImGuiTableFlags || (ImGuiTableFlags = {}));
// Flags for ImGui::TableSetupColumn()

var ImGuiTableColumnFlags;
(function (ImGuiTableColumnFlags) {
    // Input configuration flags
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["None"] = 0] = "None";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["DefaultHide"] = 1] = "DefaultHide";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["DefaultSort"] = 2] = "DefaultSort";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthStretch"] = 4] = "WidthStretch";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthFixed"] = 8] = "WidthFixed";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoResize"] = 16] = "NoResize";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoReorder"] = 32] = "NoReorder";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoHide"] = 64] = "NoHide";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoClip"] = 128] = "NoClip";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSort"] = 256] = "NoSort";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSortAscending"] = 512] = "NoSortAscending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSortDescending"] = 1024] = "NoSortDescending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoHeaderWidth"] = 2048] = "NoHeaderWidth";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["PreferSortAscending"] = 4096] = "PreferSortAscending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["PreferSortDescending"] = 8192] = "PreferSortDescending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentEnable"] = 16384] = "IndentEnable";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentDisable"] = 32768] = "IndentDisable";
    // Output status flags, read-only via TableGetColumnFlags()
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsEnabled"] = 1048576] = "IsEnabled";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsVisible"] = 2097152] = "IsVisible";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsSorted"] = 4194304] = "IsSorted";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsHovered"] = 8388608] = "IsHovered";
    // [Internal] Combinations and masks
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthMask_"] = 12] = "WidthMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentMask_"] = 49152] = "IndentMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["StatusMask_"] = 15728640] = "StatusMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoDirectResize_"] = 1073741824] = "NoDirectResize_"; // [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
})(ImGuiTableColumnFlags || (ImGuiTableColumnFlags = {}));
// Flags for ImGui::TableNextRow()

var ImGuiTableRowFlags;
(function (ImGuiTableRowFlags) {
    ImGuiTableRowFlags[ImGuiTableRowFlags["None"] = 0] = "None";
    ImGuiTableRowFlags[ImGuiTableRowFlags["Headers"] = 1] = "Headers"; // Identify header row (set default background color + width of its contents accounted different for auto column width)
})(ImGuiTableRowFlags || (ImGuiTableRowFlags = {}));
// Enum for ImGui::TableSetBgColor()
// Background colors are rendering in 3 layers:
//  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.
//  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.
//  - Layer 2: draw with CellBg color if set.
// The purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color.
// When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.
// If you set the color of RowBg0 target, your color will override the existing RowBg0 color.
// If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.

var ImGuiTableBgTarget;
(function (ImGuiTableBgTarget) {
    ImGuiTableBgTarget[ImGuiTableBgTarget["None"] = 0] = "None";
    ImGuiTableBgTarget[ImGuiTableBgTarget["RowBg0"] = 1] = "RowBg0";
    ImGuiTableBgTarget[ImGuiTableBgTarget["RowBg1"] = 2] = "RowBg1";
    ImGuiTableBgTarget[ImGuiTableBgTarget["CellBg"] = 3] = "CellBg"; // Set cell background color (top-most color)
})(ImGuiTableBgTarget || (ImGuiTableBgTarget = {}));
// Flags for ImGui::IsWindowFocused()

var ImGuiFocusedFlags;
(function (ImGuiFocusedFlags) {
    ImGuiFocusedFlags[ImGuiFocusedFlags["None"] = 0] = "None";
    ImGuiFocusedFlags[ImGuiFocusedFlags["ChildWindows"] = 1] = "ChildWindows";
    ImGuiFocusedFlags[ImGuiFocusedFlags["RootWindow"] = 2] = "RootWindow";
    ImGuiFocusedFlags[ImGuiFocusedFlags["AnyWindow"] = 4] = "AnyWindow";
    ImGuiFocusedFlags[ImGuiFocusedFlags["RootAndChildWindows"] = 3] = "RootAndChildWindows";
})(ImGuiFocusedFlags || (ImGuiFocusedFlags = {}));
// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()

var ImGuiHoveredFlags;
(function (ImGuiHoveredFlags) {
    ImGuiHoveredFlags[ImGuiHoveredFlags["None"] = 0] = "None";
    ImGuiHoveredFlags[ImGuiHoveredFlags["ChildWindows"] = 1] = "ChildWindows";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RootWindow"] = 2] = "RootWindow";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AnyWindow"] = 4] = "AnyWindow";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenBlockedByPopup"] = 8] = "AllowWhenBlockedByPopup";
    //AllowWhenBlockedByModal     = 1 << 4,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenBlockedByActiveItem"] = 32] = "AllowWhenBlockedByActiveItem";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenOverlapped"] = 64] = "AllowWhenOverlapped";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenDisabled"] = 128] = "AllowWhenDisabled";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RectOnly"] = 104] = "RectOnly";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RootAndChildWindows"] = 3] = "RootAndChildWindows";
})(ImGuiHoveredFlags || (ImGuiHoveredFlags = {}));
// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()

var ImGuiDragDropFlags;
(function (ImGuiDragDropFlags) {
    // BeginDragDropSource() flags
    ImGuiDragDropFlags[ImGuiDragDropFlags["None"] = 0] = "None";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoPreviewTooltip"] = 1] = "SourceNoPreviewTooltip";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoDisableHover"] = 2] = "SourceNoDisableHover";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoHoldToOpenOthers"] = 4] = "SourceNoHoldToOpenOthers";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceAllowNullID"] = 8] = "SourceAllowNullID";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceExtern"] = 16] = "SourceExtern";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceAutoExpirePayload"] = 32] = "SourceAutoExpirePayload";
    // AcceptDragDropPayload() flags
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptBeforeDelivery"] = 1024] = "AcceptBeforeDelivery";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptNoDrawDefaultRect"] = 2048] = "AcceptNoDrawDefaultRect";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptNoPreviewTooltip"] = 4096] = "AcceptNoPreviewTooltip";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptPeekOnly"] = 3072] = "AcceptPeekOnly";
})(ImGuiDragDropFlags || (ImGuiDragDropFlags = {}));
// Standard Drag and Drop payload types. You can define you own payload types using 12-characters long strings. Types starting with '_' are defined by Dear ImGui.
const IMGUI_PAYLOAD_TYPE_COLOR_3F = "_COL3F"; // float[3]     // Standard type for colors, without alpha. User code may use this type.
const IMGUI_PAYLOAD_TYPE_COLOR_4F = "_COL4F"; // float[4]     // Standard type for colors. User code may use this type.
// A primary data type

var ImGuiDataType;
(function (ImGuiDataType) {
    ImGuiDataType[ImGuiDataType["S8"] = 0] = "S8";
    ImGuiDataType[ImGuiDataType["U8"] = 1] = "U8";
    ImGuiDataType[ImGuiDataType["S16"] = 2] = "S16";
    ImGuiDataType[ImGuiDataType["U16"] = 3] = "U16";
    ImGuiDataType[ImGuiDataType["S32"] = 4] = "S32";
    ImGuiDataType[ImGuiDataType["U32"] = 5] = "U32";
    ImGuiDataType[ImGuiDataType["S64"] = 6] = "S64";
    ImGuiDataType[ImGuiDataType["U64"] = 7] = "U64";
    ImGuiDataType[ImGuiDataType["Float"] = 8] = "Float";
    ImGuiDataType[ImGuiDataType["Double"] = 9] = "Double";
    ImGuiDataType[ImGuiDataType["COUNT"] = 10] = "COUNT";
})(ImGuiDataType || (ImGuiDataType = {}));
// A cardinal direction

var ImGuiDir;
(function (ImGuiDir) {
    ImGuiDir[ImGuiDir["None"] = -1] = "None";
    ImGuiDir[ImGuiDir["Left"] = 0] = "Left";
    ImGuiDir[ImGuiDir["Right"] = 1] = "Right";
    ImGuiDir[ImGuiDir["Up"] = 2] = "Up";
    ImGuiDir[ImGuiDir["Down"] = 3] = "Down";
    ImGuiDir[ImGuiDir["COUNT"] = 4] = "COUNT";
})(ImGuiDir || (ImGuiDir = {}));
// A sorting direction

var ImGuiSortDirection;
(function (ImGuiSortDirection) {
    ImGuiSortDirection[ImGuiSortDirection["None"] = 0] = "None";
    ImGuiSortDirection[ImGuiSortDirection["Ascending"] = 1] = "Ascending";
    ImGuiSortDirection[ImGuiSortDirection["Descending"] = 2] = "Descending"; // Descending = 9->0, Z->A etc.
})(ImGuiSortDirection || (ImGuiSortDirection = {}));
// User fill ImGuiIO.KeyMap[] array with indices into the ImGuiIO.KeysDown[512] array

var ImGuiKey;
(function (ImGuiKey) {
    ImGuiKey[ImGuiKey["Tab"] = 0] = "Tab";
    ImGuiKey[ImGuiKey["LeftArrow"] = 1] = "LeftArrow";
    ImGuiKey[ImGuiKey["RightArrow"] = 2] = "RightArrow";
    ImGuiKey[ImGuiKey["UpArrow"] = 3] = "UpArrow";
    ImGuiKey[ImGuiKey["DownArrow"] = 4] = "DownArrow";
    ImGuiKey[ImGuiKey["PageUp"] = 5] = "PageUp";
    ImGuiKey[ImGuiKey["PageDown"] = 6] = "PageDown";
    ImGuiKey[ImGuiKey["Home"] = 7] = "Home";
    ImGuiKey[ImGuiKey["End"] = 8] = "End";
    ImGuiKey[ImGuiKey["Insert"] = 9] = "Insert";
    ImGuiKey[ImGuiKey["Delete"] = 10] = "Delete";
    ImGuiKey[ImGuiKey["Backspace"] = 11] = "Backspace";
    ImGuiKey[ImGuiKey["Space"] = 12] = "Space";
    ImGuiKey[ImGuiKey["Enter"] = 13] = "Enter";
    ImGuiKey[ImGuiKey["Escape"] = 14] = "Escape";
    ImGuiKey[ImGuiKey["KeyPadEnter"] = 15] = "KeyPadEnter";
    ImGuiKey[ImGuiKey["A"] = 16] = "A";
    ImGuiKey[ImGuiKey["C"] = 17] = "C";
    ImGuiKey[ImGuiKey["V"] = 18] = "V";
    ImGuiKey[ImGuiKey["X"] = 19] = "X";
    ImGuiKey[ImGuiKey["Y"] = 20] = "Y";
    ImGuiKey[ImGuiKey["Z"] = 21] = "Z";
    ImGuiKey[ImGuiKey["COUNT"] = 22] = "COUNT";
})(ImGuiKey || (ImGuiKey = {}));
// To test io.KeyMods (which is a combination of individual fields io.KeyCtrl, io.KeyShift, io.KeyAlt set by user/backend)

var ImGuiKeyModFlags;
(function (ImGuiKeyModFlags) {
    ImGuiKeyModFlags[ImGuiKeyModFlags["None"] = 0] = "None";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Ctrl"] = 1] = "Ctrl";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Shift"] = 2] = "Shift";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Alt"] = 4] = "Alt";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Super"] = 8] = "Super";
})(ImGuiKeyModFlags || (ImGuiKeyModFlags = {}));
// [BETA] Gamepad/Keyboard directional navigation
// Keyboard: Set io.ConfigFlags |= EnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.KeyDown[] + io.KeyMap[] arrays.
// Gamepad:  Set io.ConfigFlags |= EnableGamepad to enable. Fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().
// Read instructions in imgui.cpp for more details.

var ImGuiNavInput;
(function (ImGuiNavInput) {
    // Gamepad Mapping
    ImGuiNavInput[ImGuiNavInput["Activate"] = 0] = "Activate";
    ImGuiNavInput[ImGuiNavInput["Cancel"] = 1] = "Cancel";
    ImGuiNavInput[ImGuiNavInput["Input"] = 2] = "Input";
    ImGuiNavInput[ImGuiNavInput["Menu"] = 3] = "Menu";
    ImGuiNavInput[ImGuiNavInput["DpadLeft"] = 4] = "DpadLeft";
    ImGuiNavInput[ImGuiNavInput["DpadRight"] = 5] = "DpadRight";
    ImGuiNavInput[ImGuiNavInput["DpadUp"] = 6] = "DpadUp";
    ImGuiNavInput[ImGuiNavInput["DpadDown"] = 7] = "DpadDown";
    ImGuiNavInput[ImGuiNavInput["LStickLeft"] = 8] = "LStickLeft";
    ImGuiNavInput[ImGuiNavInput["LStickRight"] = 9] = "LStickRight";
    ImGuiNavInput[ImGuiNavInput["LStickUp"] = 10] = "LStickUp";
    ImGuiNavInput[ImGuiNavInput["LStickDown"] = 11] = "LStickDown";
    ImGuiNavInput[ImGuiNavInput["FocusPrev"] = 12] = "FocusPrev";
    ImGuiNavInput[ImGuiNavInput["FocusNext"] = 13] = "FocusNext";
    ImGuiNavInput[ImGuiNavInput["TweakSlow"] = 14] = "TweakSlow";
    ImGuiNavInput[ImGuiNavInput["TweakFast"] = 15] = "TweakFast";
    // [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.
    // Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) may be directly reading from io.KeyDown[] instead of io.NavInputs[].
    ImGuiNavInput[ImGuiNavInput["KeyMenu_"] = 16] = "KeyMenu_";
    ImGuiNavInput[ImGuiNavInput["KeyLeft_"] = 17] = "KeyLeft_";
    ImGuiNavInput[ImGuiNavInput["KeyRight_"] = 18] = "KeyRight_";
    ImGuiNavInput[ImGuiNavInput["KeyUp_"] = 19] = "KeyUp_";
    ImGuiNavInput[ImGuiNavInput["KeyDown_"] = 20] = "KeyDown_";
    ImGuiNavInput[ImGuiNavInput["COUNT"] = 21] = "COUNT";
    ImGuiNavInput[ImGuiNavInput["InternalStart_"] = 16] = "InternalStart_";
})(ImGuiNavInput || (ImGuiNavInput = {}));
// [BETA] Gamepad/Keyboard directional navigation flags, stored in io.ConfigFlags

var ImGuiConfigFlags;
(function (ImGuiConfigFlags) {
    ImGuiConfigFlags[ImGuiConfigFlags["None"] = 0] = "None";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableKeyboard"] = 1] = "NavEnableKeyboard";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableGamepad"] = 2] = "NavEnableGamepad";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableSetMousePos"] = 4] = "NavEnableSetMousePos";
    ImGuiConfigFlags[ImGuiConfigFlags["NavNoCaptureKeyboard"] = 8] = "NavNoCaptureKeyboard";
    ImGuiConfigFlags[ImGuiConfigFlags["NoMouse"] = 16] = "NoMouse";
    ImGuiConfigFlags[ImGuiConfigFlags["NoMouseCursorChange"] = 32] = "NoMouseCursorChange";
    ImGuiConfigFlags[ImGuiConfigFlags["IsSRGB"] = 1048576] = "IsSRGB";
    ImGuiConfigFlags[ImGuiConfigFlags["IsTouchScreen"] = 2097152] = "IsTouchScreen"; // Application is using a touch screen instead of a mouse.
})(ImGuiConfigFlags || (ImGuiConfigFlags = {}));
// Enumeration for PushStyleColor() / PopStyleColor()

var ImGuiCol;
(function (ImGuiCol) {
    ImGuiCol[ImGuiCol["Text"] = 0] = "Text";
    ImGuiCol[ImGuiCol["TextDisabled"] = 1] = "TextDisabled";
    ImGuiCol[ImGuiCol["WindowBg"] = 2] = "WindowBg";
    ImGuiCol[ImGuiCol["ChildBg"] = 3] = "ChildBg";
    ImGuiCol[ImGuiCol["PopupBg"] = 4] = "PopupBg";
    ImGuiCol[ImGuiCol["Border"] = 5] = "Border";
    ImGuiCol[ImGuiCol["BorderShadow"] = 6] = "BorderShadow";
    ImGuiCol[ImGuiCol["FrameBg"] = 7] = "FrameBg";
    ImGuiCol[ImGuiCol["FrameBgHovered"] = 8] = "FrameBgHovered";
    ImGuiCol[ImGuiCol["FrameBgActive"] = 9] = "FrameBgActive";
    ImGuiCol[ImGuiCol["TitleBg"] = 10] = "TitleBg";
    ImGuiCol[ImGuiCol["TitleBgActive"] = 11] = "TitleBgActive";
    ImGuiCol[ImGuiCol["TitleBgCollapsed"] = 12] = "TitleBgCollapsed";
    ImGuiCol[ImGuiCol["MenuBarBg"] = 13] = "MenuBarBg";
    ImGuiCol[ImGuiCol["ScrollbarBg"] = 14] = "ScrollbarBg";
    ImGuiCol[ImGuiCol["ScrollbarGrab"] = 15] = "ScrollbarGrab";
    ImGuiCol[ImGuiCol["ScrollbarGrabHovered"] = 16] = "ScrollbarGrabHovered";
    ImGuiCol[ImGuiCol["ScrollbarGrabActive"] = 17] = "ScrollbarGrabActive";
    ImGuiCol[ImGuiCol["CheckMark"] = 18] = "CheckMark";
    ImGuiCol[ImGuiCol["SliderGrab"] = 19] = "SliderGrab";
    ImGuiCol[ImGuiCol["SliderGrabActive"] = 20] = "SliderGrabActive";
    ImGuiCol[ImGuiCol["Button"] = 21] = "Button";
    ImGuiCol[ImGuiCol["ButtonHovered"] = 22] = "ButtonHovered";
    ImGuiCol[ImGuiCol["ButtonActive"] = 23] = "ButtonActive";
    ImGuiCol[ImGuiCol["Header"] = 24] = "Header";
    ImGuiCol[ImGuiCol["HeaderHovered"] = 25] = "HeaderHovered";
    ImGuiCol[ImGuiCol["HeaderActive"] = 26] = "HeaderActive";
    ImGuiCol[ImGuiCol["Separator"] = 27] = "Separator";
    ImGuiCol[ImGuiCol["SeparatorHovered"] = 28] = "SeparatorHovered";
    ImGuiCol[ImGuiCol["SeparatorActive"] = 29] = "SeparatorActive";
    ImGuiCol[ImGuiCol["ResizeGrip"] = 30] = "ResizeGrip";
    ImGuiCol[ImGuiCol["ResizeGripHovered"] = 31] = "ResizeGripHovered";
    ImGuiCol[ImGuiCol["ResizeGripActive"] = 32] = "ResizeGripActive";
    ImGuiCol[ImGuiCol["Tab"] = 33] = "Tab";
    ImGuiCol[ImGuiCol["TabHovered"] = 34] = "TabHovered";
    ImGuiCol[ImGuiCol["TabActive"] = 35] = "TabActive";
    ImGuiCol[ImGuiCol["TabUnfocused"] = 36] = "TabUnfocused";
    ImGuiCol[ImGuiCol["TabUnfocusedActive"] = 37] = "TabUnfocusedActive";
    ImGuiCol[ImGuiCol["PlotLines"] = 38] = "PlotLines";
    ImGuiCol[ImGuiCol["PlotLinesHovered"] = 39] = "PlotLinesHovered";
    ImGuiCol[ImGuiCol["PlotHistogram"] = 40] = "PlotHistogram";
    ImGuiCol[ImGuiCol["PlotHistogramHovered"] = 41] = "PlotHistogramHovered";
    ImGuiCol[ImGuiCol["TableHeaderBg"] = 42] = "TableHeaderBg";
    ImGuiCol[ImGuiCol["TableBorderStrong"] = 43] = "TableBorderStrong";
    ImGuiCol[ImGuiCol["TableBorderLight"] = 44] = "TableBorderLight";
    ImGuiCol[ImGuiCol["TableRowBg"] = 45] = "TableRowBg";
    ImGuiCol[ImGuiCol["TableRowBgAlt"] = 46] = "TableRowBgAlt";
    ImGuiCol[ImGuiCol["TextSelectedBg"] = 47] = "TextSelectedBg";
    ImGuiCol[ImGuiCol["DragDropTarget"] = 48] = "DragDropTarget";
    ImGuiCol[ImGuiCol["NavHighlight"] = 49] = "NavHighlight";
    ImGuiCol[ImGuiCol["NavWindowingHighlight"] = 50] = "NavWindowingHighlight";
    ImGuiCol[ImGuiCol["NavWindowingDimBg"] = 51] = "NavWindowingDimBg";
    ImGuiCol[ImGuiCol["ModalWindowDimBg"] = 52] = "ModalWindowDimBg";
    ImGuiCol[ImGuiCol["COUNT"] = 53] = "COUNT";
})(ImGuiCol || (ImGuiCol = {}));
// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.
// NB: the enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code. During initialization, feel free to just poke into ImGuiStyle directly.
// NB: if changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.

var ImGuiStyleVar;
(function (ImGuiStyleVar) {
    // Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
    ImGuiStyleVar[ImGuiStyleVar["Alpha"] = 0] = "Alpha";
    ImGuiStyleVar[ImGuiStyleVar["WindowPadding"] = 1] = "WindowPadding";
    ImGuiStyleVar[ImGuiStyleVar["WindowRounding"] = 2] = "WindowRounding";
    ImGuiStyleVar[ImGuiStyleVar["WindowBorderSize"] = 3] = "WindowBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["WindowMinSize"] = 4] = "WindowMinSize";
    ImGuiStyleVar[ImGuiStyleVar["WindowTitleAlign"] = 5] = "WindowTitleAlign";
    ImGuiStyleVar[ImGuiStyleVar["ChildRounding"] = 6] = "ChildRounding";
    ImGuiStyleVar[ImGuiStyleVar["ChildBorderSize"] = 7] = "ChildBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["PopupRounding"] = 8] = "PopupRounding";
    ImGuiStyleVar[ImGuiStyleVar["PopupBorderSize"] = 9] = "PopupBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["FramePadding"] = 10] = "FramePadding";
    ImGuiStyleVar[ImGuiStyleVar["FrameRounding"] = 11] = "FrameRounding";
    ImGuiStyleVar[ImGuiStyleVar["FrameBorderSize"] = 12] = "FrameBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["ItemSpacing"] = 13] = "ItemSpacing";
    ImGuiStyleVar[ImGuiStyleVar["ItemInnerSpacing"] = 14] = "ItemInnerSpacing";
    ImGuiStyleVar[ImGuiStyleVar["IndentSpacing"] = 15] = "IndentSpacing";
    ImGuiStyleVar[ImGuiStyleVar["CellPadding"] = 16] = "CellPadding";
    ImGuiStyleVar[ImGuiStyleVar["ScrollbarSize"] = 17] = "ScrollbarSize";
    ImGuiStyleVar[ImGuiStyleVar["ScrollbarRounding"] = 18] = "ScrollbarRounding";
    ImGuiStyleVar[ImGuiStyleVar["GrabMinSize"] = 19] = "GrabMinSize";
    ImGuiStyleVar[ImGuiStyleVar["GrabRounding"] = 20] = "GrabRounding";
    ImGuiStyleVar[ImGuiStyleVar["TabRounding"] = 21] = "TabRounding";
    ImGuiStyleVar[ImGuiStyleVar["ButtonTextAlign"] = 22] = "ButtonTextAlign";
    ImGuiStyleVar[ImGuiStyleVar["SelectableTextAlign"] = 23] = "SelectableTextAlign";
    ImGuiStyleVar[ImGuiStyleVar["COUNT"] = 24] = "COUNT";
})(ImGuiStyleVar || (ImGuiStyleVar = {}));
// Back-end capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom back-end.

var ImGuiBackendFlags;
(function (ImGuiBackendFlags) {
    ImGuiBackendFlags[ImGuiBackendFlags["None"] = 0] = "None";
    ImGuiBackendFlags[ImGuiBackendFlags["HasGamepad"] = 1] = "HasGamepad";
    ImGuiBackendFlags[ImGuiBackendFlags["HasMouseCursors"] = 2] = "HasMouseCursors";
    ImGuiBackendFlags[ImGuiBackendFlags["HasSetMousePos"] = 4] = "HasSetMousePos";
    ImGuiBackendFlags[ImGuiBackendFlags["RendererHasVtxOffset"] = 8] = "RendererHasVtxOffset";
})(ImGuiBackendFlags || (ImGuiBackendFlags = {}));
// Flags for InvisibleButton() [extended in imgui_internal.h]

var ImGuiButtonFlags;
(function (ImGuiButtonFlags) {
    ImGuiButtonFlags[ImGuiButtonFlags["None"] = 0] = "None";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonLeft"] = 1] = "MouseButtonLeft";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonRight"] = 2] = "MouseButtonRight";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonMiddle"] = 4] = "MouseButtonMiddle";
    // [Internal]
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonMask_"] = 7] = "MouseButtonMask_";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonDefault_"] = 1] = "MouseButtonDefault_";
})(ImGuiButtonFlags || (ImGuiButtonFlags = {}));
// Enumeration for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()

var ImGuiColorEditFlags;
(function (ImGuiColorEditFlags) {
    ImGuiColorEditFlags[ImGuiColorEditFlags["None"] = 0] = "None";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoAlpha"] = 2] = "NoAlpha";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoPicker"] = 4] = "NoPicker";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoOptions"] = 8] = "NoOptions";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoSmallPreview"] = 16] = "NoSmallPreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoInputs"] = 32] = "NoInputs";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoTooltip"] = 64] = "NoTooltip";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoLabel"] = 128] = "NoLabel";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoSidePreview"] = 256] = "NoSidePreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoDragDrop"] = 512] = "NoDragDrop";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoBorder"] = 1024] = "NoBorder";
    // User Options (right-click on widget to change some of them). You can set application defaults using SetColorEditOptions(). The idea is that you probably don't want to override them in most of your calls, let the user choose and/or call SetColorEditOptions() during startup.
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaBar"] = 65536] = "AlphaBar";
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaPreview"] = 131072] = "AlphaPreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaPreviewHalf"] = 262144] = "AlphaPreviewHalf";
    ImGuiColorEditFlags[ImGuiColorEditFlags["HDR"] = 524288] = "HDR";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayRGB"] = 1048576] = "DisplayRGB";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayHSV"] = 2097152] = "DisplayHSV";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayHex"] = 4194304] = "DisplayHex";
    ImGuiColorEditFlags[ImGuiColorEditFlags["Uint8"] = 8388608] = "Uint8";
    ImGuiColorEditFlags[ImGuiColorEditFlags["Float"] = 16777216] = "Float";
    ImGuiColorEditFlags[ImGuiColorEditFlags["PickerHueBar"] = 33554432] = "PickerHueBar";
    ImGuiColorEditFlags[ImGuiColorEditFlags["PickerHueWheel"] = 67108864] = "PickerHueWheel";
    ImGuiColorEditFlags[ImGuiColorEditFlags["InputRGB"] = 134217728] = "InputRGB";
    ImGuiColorEditFlags[ImGuiColorEditFlags["InputHSV"] = 268435456] = "InputHSV";
    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
    ImGuiColorEditFlags[ImGuiColorEditFlags["_OptionsDefault"] = 177209344] = "_OptionsDefault";
    // [Internal] Masks
    ImGuiColorEditFlags[ImGuiColorEditFlags["_DisplayMask"] = 7340032] = "_DisplayMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_DataTypeMask"] = 25165824] = "_DataTypeMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_PickerMask"] = 100663296] = "_PickerMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_InputMask"] = 402653184] = "_InputMask";
})(ImGuiColorEditFlags || (ImGuiColorEditFlags = {}));
// Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
// We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.

var ImGuiSliderFlags;
(function (ImGuiSliderFlags) {
    ImGuiSliderFlags[ImGuiSliderFlags["None"] = 0] = "None";
    ImGuiSliderFlags[ImGuiSliderFlags["AlwaysClamp"] = 16] = "AlwaysClamp";
    ImGuiSliderFlags[ImGuiSliderFlags["Logarithmic"] = 32] = "Logarithmic";
    ImGuiSliderFlags[ImGuiSliderFlags["NoRoundToFormat"] = 64] = "NoRoundToFormat";
    ImGuiSliderFlags[ImGuiSliderFlags["NoInput"] = 128] = "NoInput";
    ImGuiSliderFlags[ImGuiSliderFlags["InvalidMask_"] = 1879048207] = "InvalidMask_"; // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
})(ImGuiSliderFlags || (ImGuiSliderFlags = {}));
// Identify a mouse button.
// Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.

var ImGuiMouseButton;
(function (ImGuiMouseButton) {
    ImGuiMouseButton[ImGuiMouseButton["Left"] = 0] = "Left";
    ImGuiMouseButton[ImGuiMouseButton["Right"] = 1] = "Right";
    ImGuiMouseButton[ImGuiMouseButton["Middle"] = 2] = "Middle";
    ImGuiMouseButton[ImGuiMouseButton["COUNT"] = 5] = "COUNT";
})(ImGuiMouseButton || (ImGuiMouseButton = {}));
// Enumeration for GetMouseCursor()

var ImGuiMouseCursor;
(function (ImGuiMouseCursor) {
    ImGuiMouseCursor[ImGuiMouseCursor["None"] = -1] = "None";
    ImGuiMouseCursor[ImGuiMouseCursor["Arrow"] = 0] = "Arrow";
    ImGuiMouseCursor[ImGuiMouseCursor["TextInput"] = 1] = "TextInput";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeAll"] = 2] = "ResizeAll";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNS"] = 3] = "ResizeNS";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeEW"] = 4] = "ResizeEW";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNESW"] = 5] = "ResizeNESW";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNWSE"] = 6] = "ResizeNWSE";
    ImGuiMouseCursor[ImGuiMouseCursor["Hand"] = 7] = "Hand";
    ImGuiMouseCursor[ImGuiMouseCursor["NotAllowed"] = 8] = "NotAllowed";
    ImGuiMouseCursor[ImGuiMouseCursor["COUNT"] = 9] = "COUNT";
})(ImGuiMouseCursor || (ImGuiMouseCursor = {}));
// Condition for ImGui::SetWindow***(), SetNextWindow***(), SetNextTreeNode***() functions
// All those functions treat 0 as a shortcut to Always. From the point of view of the user use this as an enum (don't combine multiple values into flags).

var ImGuiCond;
(function (ImGuiCond) {
    ImGuiCond[ImGuiCond["None"] = 0] = "None";
    ImGuiCond[ImGuiCond["Always"] = 1] = "Always";
    ImGuiCond[ImGuiCond["Once"] = 2] = "Once";
    ImGuiCond[ImGuiCond["FirstUseEver"] = 4] = "FirstUseEver";
    ImGuiCond[ImGuiCond["Appearing"] = 8] = "Appearing";
})(ImGuiCond || (ImGuiCond = {}));

var ImDrawCornerFlags;
(function (ImDrawCornerFlags) {
    ImDrawCornerFlags[ImDrawCornerFlags["None"] = 0] = "None";
    ImDrawCornerFlags[ImDrawCornerFlags["TopLeft"] = 1] = "TopLeft";
    ImDrawCornerFlags[ImDrawCornerFlags["TopRight"] = 2] = "TopRight";
    ImDrawCornerFlags[ImDrawCornerFlags["BotLeft"] = 4] = "BotLeft";
    ImDrawCornerFlags[ImDrawCornerFlags["BotRight"] = 8] = "BotRight";
    ImDrawCornerFlags[ImDrawCornerFlags["Top"] = 3] = "Top";
    ImDrawCornerFlags[ImDrawCornerFlags["Bot"] = 12] = "Bot";
    ImDrawCornerFlags[ImDrawCornerFlags["Left"] = 5] = "Left";
    ImDrawCornerFlags[ImDrawCornerFlags["Right"] = 10] = "Right";
    ImDrawCornerFlags[ImDrawCornerFlags["All"] = 15] = "All";
})(ImDrawCornerFlags || (ImDrawCornerFlags = {}));

var ImDrawListFlags;
(function (ImDrawListFlags) {
    ImDrawListFlags[ImDrawListFlags["None"] = 0] = "None";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedLines"] = 1] = "AntiAliasedLines";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedLinesUseTex"] = 2] = "AntiAliasedLinesUseTex";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedFill"] = 4] = "AntiAliasedFill";
    ImDrawListFlags[ImDrawListFlags["AllowVtxOffset"] = 8] = "AllowVtxOffset"; // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.
})(ImDrawListFlags || (ImDrawListFlags = {}));

class ImVec2 {
    constructor(x = 0.0, y = 0.0) {
        this.x = x;
        this.y = y;
    }
    Set(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    Copy(other) {
        this.x = other.x;
        this.y = other.y;
        return this;
    }
    Equals(other) {
        if (this.x !== other.x) {
            return false;
        }
        if (this.y !== other.y) {
            return false;
        }
        return true;
    }
}
ImVec2.ZERO = new ImVec2(0.0, 0.0);
ImVec2.UNIT = new ImVec2(1.0, 1.0);
ImVec2.UNIT_X = new ImVec2(1.0, 0.0);
ImVec2.UNIT_Y = new ImVec2(0.0, 1.0);

class ImVec4 {
    constructor(x = 0.0, y = 0.0, z = 0.0, w = 1.0) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    Set(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    Copy(other) {
        this.x = other.x;
        this.y = other.y;
        this.z = other.z;
        this.w = other.w;
        return this;
    }
    Equals(other) {
        if (this.x !== other.x) {
            return false;
        }
        if (this.y !== other.y) {
            return false;
        }
        if (this.z !== other.z) {
            return false;
        }
        if (this.w !== other.w) {
            return false;
        }
        return true;
    }
}
ImVec4.ZERO = new ImVec4(0.0, 0.0, 0.0, 0.0);
ImVec4.UNIT = new ImVec4(1.0, 1.0, 1.0, 1.0);
ImVec4.UNIT_X = new ImVec4(1.0, 0.0, 0.0, 0.0);
ImVec4.UNIT_Y = new ImVec4(0.0, 1.0, 0.0, 0.0);
ImVec4.UNIT_Z = new ImVec4(0.0, 0.0, 1.0, 0.0);
ImVec4.UNIT_W = new ImVec4(0.0, 0.0, 0.0, 1.0);
ImVec4.BLACK = new ImVec4(0.0, 0.0, 0.0, 1.0);
ImVec4.WHITE = new ImVec4(1.0, 1.0, 1.0, 1.0);
class ImMat2 {
    constructor(m11 = 1.0, m12 = 0.0, m21 = 0.0, m22 = 1.0) {
        this.m11 = m11;
        this.m12 = m12;
        this.m21 = m21;
        this.m22 = m22;
    }
    //constructor(public readonly native: Bind.reference_ImMat2) {}
    Set(m11, m12, m21, m22) {
        this.m11 = m11;
        this.m12 = m12;
        this.m21 = m21;
        this.m22 = m22;
        return this;
    }
    Copy(other) {
        this.m11 = other.m11;
        this.m12 = other.m12;
        this.m21 = other.m21;
        this.m22 = other.m22;
        return this;
    }
    Equals(other) {
        if (this.m11 !== other.m11) {
            return false;
        }
        if (this.m12 !== other.m12) {
            return false;
        }
        if (this.m21 !== other.m21) {
            return false;
        }
        if (this.m22 !== other.m22) {
            return false;
        }
        return true;
    }
    Identity() {
        this.m11 = 1;
        this.m12 = 0;
        this.m21 = 0;
        this.m22 = 1;
    }
    Transpose() {
        return new ImMat2(this.m11, this.m21, this.m12, this.m22);
    }
    SetRotate(radius) {
        const c = Math.cos(radius), s = Math.sin(radius);
        this.m11 = c;
        this.m12 = -s;
        this.m21 = s;
        this.m22 = c;
        return this;
    }
    Multiply(other) {
        const m11 = this.m11 * other.m11 + this.m12 * other.m21;
        const m12 = this.m11 * other.m12 + this.m12 * other.m22;
        const m21 = this.m21 * other.m11 + this.m22 * other.m21;
        const m22 = this.m21 * other.m12 + this.m22 * other.m22;
        return new ImMat2(m11, m12, m21, m22);
    }
    Transform(p) {
        return new ImVec2(this.m11 * p.x + this.m12 * p.y, this.m21 * p.x + this.m22 * p.y);
    }
    TransposeTo(target) {
        target.m11 = this.m11;
        target.m12 = this.m21;
        target.m21 = this.m12;
        target.m22 = this.m22;
    }
    MultiplyTo(other, target) {
        target.m11 = this.m11 * other.m11 + this.m12 * other.m21;
        target.m12 = this.m11 * other.m12 + this.m12 * other.m22;
        target.m21 = this.m21 * other.m11 + this.m22 * other.m21;
        target.m22 = this.m21 * other.m12 + this.m22 * other.m22;
    }
    TransformTo(p, target) {
        let px = p.x;
        let py = p.y;
        target.x = this.m11 * px + this.m12 * py;
        target.y = this.m21 * px + this.m22 * py;
    }
}
ImMat2.IDENTITY = new ImMat2(1.0, 0.0, 0.0, 1.0);

class ImTransform {
    constructor(rotate = new ImMat2, translate = new ImVec2(0, 0), scale = 1) {
        this.rotate = rotate;
        this.translate = translate;
        this.scale = scale;
    }
    Identity() {
        this.rotate.Identity();
        this.translate.Set(0, 0);
        this.scale = 1;
    }
    Multiply(m) {
        let tm = new ImTransform;
        tm.scale = this.scale * m.scale;
        tm.rotate = this.rotate.Multiply(m.rotate);
        let t = this.rotate.Transform(m.translate);
        tm.translate.x = this.translate.x + t.x * this.scale;
        tm.translate.y = this.translate.y + t.y * this.scale;
        return tm;
    }
    Transform(point) {
        let p = this.rotate.Transform(point);
        p.x = p.x * this.scale + this.translate.x;
        p.y = p.y * this.scale + this.translate.y;
        return p;
    }
    Invert() {
        let tm = new ImTransform;
        tm.rotate = this.rotate.Transpose();
        tm.scale = 1.0 / this.scale;
        let t = new ImVec2(-this.translate.x, -this.translate.y);
        t = tm.rotate.Transform(t);
        tm.translate.x = t.x * tm.scale;
        tm.translate.y = t.y * tm.scale;
        return tm;
    }
    MultiplyTo(other, target) {
        target.scale = this.scale * other.scale;
        this.rotate.MultiplyTo(other.rotate, target.rotate);
        this.rotate.TransformTo(other.translate, target.translate);
        target.translate.x = this.translate.x + target.translate.x * this.scale;
        target.translate.y = this.translate.y + target.translate.y * this.scale;
    }
    TransformTo(point, target) {
        this.rotate.TransformTo(point, target);
        target.x = target.x * this.scale + this.translate.x;
        target.y = target.y * this.scale + this.translate.y;
    }
    InvertTo(target) {
        this.rotate.TransposeTo(target.rotate);
        target.scale = 1.0 / this.scale;
        target.translate.Set(-this.translate.x, -this.translate.y);
        this.rotate.TransformTo(target.translate, target.translate);
        target.translate.x = target.translate.x * this.scale;
        target.translate.y = target.translate.y * this.scale;
    }
}
//-----------------------------------------------------------------------------
// Helpers
//-----------------------------------------------------------------------------
// Lightweight std::vector<> like class to avoid dragging dependencies (also: windows implementation of STL with debug enabled is absurdly slow, so let's bypass it so our code runs fast in debug).
// Our implementation does NOT call C++ constructors/destructors. This is intentional and we do not require it. Do not use this class as a straight std::vector replacement in your code!

class ImVector extends Array {
    constructor() {
        super(...arguments);
        this.Data = this;
        // public:
        // int                         Size;
        // int                         Capacity;
        // T*                          Data;
        // typedef T                   value_type;
        // typedef value_type*         iterator;
        // typedef const value_type*   const_iterator;
        // inline ImVector()           { Size = Capacity = 0; Data = NULL; }
        // inline ~ImVector()          { if (Data) ImGui::MemFree(Data); }
        // inline bool                 empty() const                   { return Size == 0; }
        // inline int                  size() const                    { return Size; }
        // inline int                  capacity() const                { return Capacity; }
        // inline value_type&          operator[](int i)               { IM_ASSERT(i < Size); return Data[i]; }
        // inline const value_type&    operator[](int i) const         { IM_ASSERT(i < Size); return Data[i]; }
        // inline void                 clear()                         { if (Data) { Size = Capacity = 0; ImGui::MemFree(Data); Data = NULL; } }
        // inline iterator             begin()                         { return Data; }
        // inline const_iterator       begin() const                   { return Data; }
        // inline iterator             end()                           { return Data + Size; }
        // inline const_iterator       end() const                     { return Data + Size; }
        // inline value_type&          front()                         { IM_ASSERT(Size > 0); return Data[0]; }
        // inline const value_type&    front() const                   { IM_ASSERT(Size > 0); return Data[0]; }
        // inline value_type&          back()                          { IM_ASSERT(Size > 0); return Data[Size - 1]; }
        // inline const value_type&    back() const                    { IM_ASSERT(Size > 0); return Data[Size - 1]; }
        // inline void                 swap(ImVector<T>& rhs)          { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; value_type* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }
        // inline int                  _grow_capacity(int size) const  { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > size ? new_capacity : size; }
        // inline void                 resize(int new_size)            { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }
        // inline void                 resize(int new_size, const T& v){ if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) Data[n] = v; Size = new_size; }
        // inline void                 reserve(int new_capacity)
        // {
        //     if (new_capacity <= Capacity)
        //         return;
        //     T* new_data = (value_type*)ImGui::MemAlloc((size_t)new_capacity * sizeof(T));
        //     if (Data)
        //         memcpy(new_data, Data, (size_t)Size * sizeof(T));
        //     ImGui::MemFree(Data);
        //     Data = new_data;
        //     Capacity = new_capacity;
        // }
        // inline void                 push_back(const value_type& v)  { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); Data[Size++] = v; }
        // inline void                 pop_back()                      { IM_ASSERT(Size > 0); Size--; }
        // inline void                 push_front(const value_type& v) { if (Size == 0) push_back(v); else insert(Data, v); }
        // inline iterator             erase(const_iterator it)                        { IM_ASSERT(it >= Data && it < Data+Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(value_type)); Size--; return Data + off; }
        // inline iterator             erase(const_iterator it, const_iterator it_last){ IM_ASSERT(it >= Data && it < Data+Size && it_last > it && it_last <= Data+Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - count) * sizeof(value_type)); Size -= (int)count; return Data + off; }
        // inline iterator             erase_unsorted(const_iterator it)               { IM_ASSERT(it >= Data && it < Data+Size);  const ptrdiff_t off = it - Data; if (it < Data+Size-1) memcpy(Data + off, Data + Size - 1, sizeof(value_type)); Size--; return Data + off; }
        // inline iterator             insert(const_iterator it, const value_type& v)  { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(value_type)); Data[off] = v; Size++; return Data + off; }
        // inline bool                 contains(const value_type& v) const             { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }
    }
    get Size() { return this.length; }
    empty() { return this.length === 0; }
    clear() { this.length = 0; }
    pop_back() { return this.pop(); }
    push_back(value) { this.push(value); }
    front() { IM_ASSERT(this.Size > 0); return this.Data[0]; }
    back() { IM_ASSERT(this.Size > 0); return this.Data[this.Size - 1]; }
    size() { return this.Size; }
    resize(new_size, v) {
        if (v) {
            for (let index = this.length; index < new_size; ++index) {
                this[index] = v(index);
            }
        }
        else {
            this.length = new_size;
        }
    }
    contains(value) {
        return this.includes(value);
    }
    find_erase_unsorted(value) {
        const index = this.indexOf(value);
        if (index !== -1) {
            this.splice(index, 1);
        }
    }
}
// Helper: Unicode defines
// #define IM_UNICODE_CODEPOINT_INVALID 0xFFFD     // Invalid Unicode code point (standard value).
// #ifdef IMGUI_USE_WCHAR32
// #define IM_UNICODE_CODEPOINT_MAX     0x10FFFF   // Maximum Unicode code point supported by this build.
// #else
// #define IM_UNICODE_CODEPOINT_MAX     0xFFFF     // Maximum Unicode code point supported by this build.
// #endif

const IM_UNICODE_CODEPOINT_MAX = 0xFFFF; // Maximum Unicode code point supported by this build.
// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"

class ImGuiTextFilter {
    // IMGUI_API           ImGuiTextFilter(const char* default_filter = "");
    constructor(default_filter = "") {
        // [Internal]
        // struct TextRange
        // {
        //     const char* b;
        //     const char* e;
        //     TextRange() { b = e = NULL; }
        //     TextRange(const char* _b, const char* _e) { b = _b; e = _e; }
        //     const char* begin() const { return b; }
        //     const char* end() const { return e; }
        //     bool empty() const { return b == e; }
        //     char front() const { return *b; }
        //     static bool is_blank(char c) { return c == ' ' || c == '\t'; }
        //     void trim_blanks() { while (b < e && is_blank(*b)) b++; while (e > b && is_blank(*(e-1))) e--; }
        //     IMGUI_API void split(char separator, ImVector<TextRange>& out);
        // };
        // char                InputBuf[256];
        this.InputBuf = new ImStringBuffer(256);
        // ImVector<TextRange> Filters;
        // int                 CountGrep;
        this.CountGrep = 0;
        if (default_filter) {
            // ImStrncpy(InputBuf, default_filter, IM_ARRAYSIZE(InputBuf));
            this.InputBuf.buffer = default_filter;
            this.Build();
        }
        else {
            // InputBuf[0] = 0;
            this.InputBuf.buffer = "";
            this.CountGrep = 0;
        }
    }
    // IMGUI_API bool      Draw(const char* label = "Filter (inc,-exc)", float width = 0.0f);    // Helper calling InputText+Build
    Draw(label = "Filter (inc,-exc)", width = 0.0) {
        if (width !== 0.0)
            bind.PushItemWidth(width);
        const value_changed = InputText(label, this.InputBuf, IM_ARRAYSIZE(this.InputBuf));
        if (width !== 0.0)
            bind.PopItemWidth();
        if (value_changed)
            this.Build();
        return value_changed;
    }
    // IMGUI_API bool      PassFilter(const char* text, const char* text_end = NULL) const;
    PassFilter(text, text_end = null) {
        // if (Filters.empty())
        //     return true;
        // if (text == NULL)
        //     text = "";
        // for (int i = 0; i != Filters.Size; i++)
        // {
        //     const TextRange& f = Filters[i];
        //     if (f.empty())
        //         continue;
        //     if (f.front() == '-')
        //     {
        //         // Subtract
        //         if (ImStristr(text, text_end, f.begin()+1, f.end()) != NULL)
        //             return false;
        //     }
        //     else
        //     {
        //         // Grep
        //         if (ImStristr(text, text_end, f.begin(), f.end()) != NULL)
        //             return true;
        //     }
        // }
        // Implicit * grep
        if (this.CountGrep === 0)
            return true;
        return false;
    }
    // IMGUI_API void      Build();
    Build() {
        // Filters.resize(0);
        // TextRange input_range(InputBuf, InputBuf+strlen(InputBuf));
        // input_range.split(',', Filters);
        this.CountGrep = 0;
        // for (int i = 0; i != Filters.Size; i++)
        // {
        //     Filters[i].trim_blanks();
        //     if (Filters[i].empty())
        //         continue;
        //     if (Filters[i].front() != '-')
        //         CountGrep += 1;
        // }
    }
    // void                Clear() { InputBuf[0] = 0; Build(); }
    Clear() { this.InputBuf.buffer = ""; this.Build(); }
    // bool                IsActive() const { return !Filters.empty(); }
    IsActive() { return false; }
}
// Helper: Text buffer for logging/accumulating text

class ImGuiTextBuffer {
    constructor() {
        // ImVector<char>      Buf;
        this.Buf = "";
        // ImGuiTextBuffer()   { Buf.push_back(0); }
        // inline char         operator[](int i) { return Buf.Data[i]; }
        // const char*         begin() const { return &Buf.front(); }
        // const char*         end() const { return &Buf.back(); }      // Buf is zero-terminated, so end() will point on the zero-terminator
        // int                 size() const { return Buf.Size - 1; }
        // bool                empty() { return Buf.Size <= 1; }
        // void                clear() { Buf.clear(); Buf.push_back(0); }
        // void                reserve(int capacity) { Buf.reserve(capacity); }
        // const char*         c_str() const { return Buf.Data; }
        // IMGUI_API void      appendf(const char* fmt, ...) IM_FMTARGS(2);
        // IMGUI_API void      appendfv(const char* fmt, va_list args) IM_FMTLIST(2);
    }
    begin() { return this.Buf; }
    size() { return this.Buf.length; }
    clear() { this.Buf = ""; }
    append(text) { this.Buf += text; }
}
// Helper: Simple Key->value storage
// Typically you don't have to worry about this since a storage is held within each Window.
// We use it to e.g. store collapse state for a tree (Int 0/1), store color edit options.
// This is optimized for efficient reading (dichotomy into a contiguous buffer), rare writing (typically tied to user interactions)
// You can use it as custom user storage for temporary values. Declare your own storage if, for example:
// - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).
// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)
// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.
class ImGuiStorage {
}
// Helpers macros to generate 32-bits encoded colors
const IM_COL32_R_SHIFT = 0;
const IM_COL32_G_SHIFT = 8;
const IM_COL32_B_SHIFT = 16;
const IM_COL32_A_SHIFT = 24;
const IM_COL32_A_MASK = 0xFF000000;

function IM_COL32(R, G, B, A = 255) {
    return ((A << IM_COL32_A_SHIFT) | (B << IM_COL32_B_SHIFT) | (G << IM_COL32_G_SHIFT) | (R << IM_COL32_R_SHIFT)) >>> 0;
}
const IM_COL32_WHITE = IM_COL32(255, 255, 255, 255);
 // Opaque white = 0xFFFFFFFF
const IM_COL32_BLACK = IM_COL32(0, 0, 0, 255);
 // Opaque black
const IM_COL32_BLACK_TRANS = IM_COL32(0, 0, 0, 0);
 // Transparent black = 0x00000000
// ImColor() helper to implicity converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)
// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.
// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.
// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.

class ImColor {
    constructor(r = 0.0, g = 0.0, b = 0.0, a = 1.0) {
        // ImVec4              Value;
        this.Value = new ImVec4();
        if (typeof (r) === "number") {
            if (r > 255 && g === 0.0 && b === 0.0 && a === 1.0) {
                this.Value.x = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_R_SHIFT) & 0xFF) / 255));
                this.Value.y = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_G_SHIFT) & 0xFF) / 255));
                this.Value.z = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_B_SHIFT) & 0xFF) / 255));
                this.Value.w = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_A_SHIFT) & 0xFF) / 255));
            }
            else if (r <= 1.0 && g <= 1.0 && b <= 1.0 && a <= 1.0) {
                this.Value.x = Math.max(0.0, r);
                this.Value.y = Math.max(0.0, g);
                this.Value.z = Math.max(0.0, b);
                this.Value.w = Math.max(0.0, a);
            }
            else {
                this.Value.x = Math.max(0.0, Math.min(1.0, r / 255));
                this.Value.y = Math.max(0.0, Math.min(1.0, g / 255));
                this.Value.z = Math.max(0.0, Math.min(1.0, b / 255));
                if (a <= 1.0) {
                    this.Value.w = Math.max(0.0, a);
                }
                else {
                    this.Value.w = Math.max(0.0, Math.min(1.0, a / 255));
                }
            }
        }
        else {
            this.Value.Copy(r);
        }
    }
    // inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }
    toImU32() { return ColorConvertFloat4ToU32(this.Value); }
    // inline operator ImVec4() const                                  { return Value; }
    toImVec4() { return this.Value; }
    // FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.
    // inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }
    SetHSV(h, s, v, a = 1.0) {
        const ref_r = [this.Value.x];
        const ref_g = [this.Value.y];
        const ref_b = [this.Value.z];
        ColorConvertHSVtoRGB(h, s, v, ref_r, ref_g, ref_b);
        this.Value.x = ref_r[0];
        this.Value.y = ref_g[0];
        this.Value.z = ref_b[0];
        this.Value.w = a;
    }
    // static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }
    static HSV(h, s, v, a = 1.0) {
        const color = new ImColor();
        color.SetHSV(h, s, v, a);
        return color;
    }
}

const ImGuiInputTextDefaultSize = 128;
// Shared state of InputText(), passed to callback when a ImGuiInputTextFlags_Callback* flag is used and the corresponding callback is triggered.

class ImGuiInputTextCallbackData {
    constructor(native, UserData = null) {
        this.native = native;
        this.UserData = UserData;
    }
    // ImGuiInputTextFlags EventFlag;      // One of ImGuiInputTextFlags_Callback* // Read-only
    get EventFlag() { return this.native.EventFlag; }
    // ImGuiInputTextFlags Flags;          // What user passed to InputText()      // Read-only
    get Flags() { return this.native.Flags; }
    // void*               UserData;       // What user passed to InputText()      // Read-only
    // public get UserData(): any { return this.native.UserData; }
    // CharFilter event:
    // ImWchar             EventChar;      // Character input                      // Read-write (replace character or set to zero)
    get EventChar() { return this.native.EventChar; }
    set EventChar(value) { this.native.EventChar = value; }
    // Completion,History,Always events:
    // If you modify the buffer contents make sure you update 'BufTextLen' and set 'BufDirty' to true.
    // ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only
    get EventKey() { return this.native.EventKey; }
    // char*               Buf;            // Current text buffer                  // Read-write (pointed data only, can't replace the actual pointer)
    get Buf() { return this.native.Buf; }
    set Buf(value) { this.native.Buf = value; }
    // int                 BufTextLen;     // Current text length in bytes         // Read-write
    get BufTextLen() { return this.native.BufTextLen; }
    set BufTextLen(value) { this.native.BufTextLen = value; }
    // int                 BufSize;        // Maximum text length in bytes         // Read-only
    get BufSize() { return this.native.BufSize; }
    // bool                BufDirty;       // Set if you modify Buf/BufTextLen!!   // Write
    set BufDirty(value) { this.native.BufDirty = value; }
    // int                 CursorPos;      //                                      // Read-write
    get CursorPos() { return this.native.CursorPos; }
    set CursorPos(value) { this.native.CursorPos = value; }
    // int                 SelectionStart; //                                      // Read-write (== to SelectionEnd when no selection)
    get SelectionStart() { return this.native.SelectionStart; }
    set SelectionStart(value) { this.native.SelectionStart = value; }
    // int                 SelectionEnd;   //                                      // Read-write
    get SelectionEnd() { return this.native.SelectionEnd; }
    set SelectionEnd(value) { this.native.SelectionEnd = value; }
    // NB: Helper functions for text manipulation. Calling those function loses selection.
    // IMGUI_API void    DeleteChars(int pos, int bytes_count);
    DeleteChars(pos, bytes_count) { return this.native.DeleteChars(pos, bytes_count); }
    // IMGUI_API void    InsertChars(int pos, const char* text, const char* text_end = NULL);
    InsertChars(pos, text, text_end = null) { return this.native.InsertChars(pos, text_end !== null ? text.substring(0, text_end) : text); }
    // void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen; }
    SelectAll() { this.native.SelectAll(); }
    // void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }
    ClearSelection() { this.native.ClearSelection(); }
    // bool              HasSelection() const { return SelectionStart != SelectionEnd; }
    HasSelection() { return this.native.HasSelection(); }
}
// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().
// NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.

class ImGuiSizeCallbackData {
    constructor(native, UserData) {
        this.native = native;
        this.UserData = UserData;
    }
    get Pos() { return this.native.Pos; }
    get CurrentSize() { return this.native.CurrentSize; }
    get DesiredSize() { return this.native.DesiredSize; }
}
// Sorting specification for one column of a table (sizeof == 12 bytes)

class ImGuiTableColumnSortSpecs {
    constructor(native) {
        this.native = native;
    }
    get ColumnUserID() { return this.native.ColumnUserID; }
    get ColumnIndex() { return this.native.ColumnIndex; }
    get SortOrder() { return this.native.SortOrder; }
    get SortDirection() { return this.native.SortDirection; }
}
// Sorting specifications for a table (often handling sort specs for a single column, occasionally more)
// Obtained by calling TableGetSortSpecs().
// When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.
// Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!

class ImGuiTableSortSpecs {
    constructor(native) {
        this.native = native;
        this._Specs = Array.from({ length: this.SpecsCount }).map((_, i) => {
            return new ImGuiTableColumnSortSpecs(this.native.GetSpec(i));
        });
    }
    get Specs() { return this._Specs; }
    get SpecsCount() { return this.native.SpecsCount; }
    get SpecsDirty() { return this.native.SpecsDirty; }
    set SpecsDirty(value) { this.native.SpecsDirty = value; }
}

class ImGuiListClipper {
    constructor() {
        this._native = null;
    }
    get native() {
        return this._native || (this._native = new bind.ImGuiListClipper());
    }
    get DisplayStart() { return this.native.DisplayStart; }
    get DisplayEnd() { return this.native.DisplayEnd; }
    get ItemsCount() { return this.native.ItemsCount; }
    get StepNo() { return this.native.StepNo; }
    get ItemsFrozen() { return this.native.ItemsFrozen; }
    get ItemsHeight() { return this.native.ItemsHeight; }
    get StartPosY() { return this.native.StartPosY; }
    // items_count:  Use -1 to ignore (you can call Begin later). Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step).
    // items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().
    // If you don't specify an items_height, you NEED to call Step(). If you specify items_height you may call the old Begin()/End() api directly, but prefer calling Step().
    // ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, items_height); } // NB: Begin() initialize every fields (as we allow user to call Begin/End multiple times on a same instance if they want).
    // ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount == -1); }      // Assert if user forgot to call End() or Step() until false.
    delete() {
        if (this._native !== null) {
            this._native.delete();
            this._native = null;
        }
    }
    // IMGUI_API void Begin(int items_count, float items_height = -1.0f);  // Automatically called by constructor if you passed 'items_count' or by Step() in Step 1.
    Begin(items_count, items_height = -1.0) {
        this.native.Begin(items_count, items_height);
    }
    // IMGUI_API void End();                                               // Automatically called on the last call of Step() that returns false.
    End() {
        this.native.End();
        this.delete();
    }
    // IMGUI_API bool Step();                                              // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.
    Step() {
        const busy = this.native.Step();
        if (!busy) {
            this.delete();
        }
        return busy;
    }
}
//-----------------------------------------------------------------------------
// Draw List
// Hold a series of drawing commands. The user provides a renderer for ImDrawData which essentially contains an array of ImDrawList.
//-----------------------------------------------------------------------------
// The maximum line width to bake anti-aliased textures for. Build atlas with ImFontAtlasFlags_NoBakedLines to disable baking.
const IM_DRAWLIST_TEX_LINES_WIDTH_MAX = 63;
// Special Draw callback value to request renderer back-end to reset the graphics/render state.
// The renderer back-end needs to handle this special value, otherwise it will crash trying to call a function at this address.
// This is useful for example if you submitted callbacks which you know have altered the render state and you want it to be restored.
// It is not done by default because they are many perfectly useful way of altering render state for imgui contents (e.g. changing shader/blending settings before an Image call).
const ImDrawCallback_ResetRenderState = -1;
// Typically, 1 command = 1 GPU draw call (unless command is a callback)
// Pre 1.71 back-ends will typically ignore the VtxOffset/IdxOffset fields. When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset'
// is enabled, those fields allow us to render meshes larger than 64K vertices while keeping 16-bits indices.

class ImDrawCmd {
    constructor(native) {
        this.native = native;
    }
    // unsigned int    ElemCount;              // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
    get ElemCount() { return this.native.ElemCount; }
    // ImVec4          ClipRect;               // Clipping rectangle (x1, y1, x2, y2)
    get ClipRect() { return this.native.ClipRect; }
    // ImTextureID     TextureId;              // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.
    get TextureId() {
        return ImGuiContext.getTexture(this.native.TextureId);
    }
    // unsigned int    VtxOffset;              // Start offset in vertex buffer. Pre-1.71 or without ImGuiBackendFlags_RendererHasVtxOffset: always 0. With ImGuiBackendFlags_RendererHasVtxOffset: may be >0 to support meshes larger than 64K vertices with 16-bits indices.
    get VtxOffset() { return this.native.VtxOffset; }
    // unsigned int    IdxOffset;              // Start offset in index buffer. Always equal to sum of ElemCount drawn so far.
    get IdxOffset() { return this.native.IdxOffset; }
    // ImDrawCallback  UserCallback;           // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
    get UserCallback() {
        if (this.native.UserCallback) {
            const _callback = (parent_list, cmd) => {
                this.native.UserCallback(parent_list.native, cmd.native);
            };
            return _callback;
        }
        return null;
    }
    // void*           UserCallbackData;       // The draw callback code can access this.
    get UserCallbackData() { return this.native.UserCallbackData; }
}
// Vertex index
// (to allow large meshes with 16-bits indices: set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset in the renderer back-end)
// (to use 32-bits indices: override with '#define ImDrawIdx unsigned int' in imconfig.h)
// #ifndef ImDrawIdx
// typedef unsigned short ImDrawIdx;
// #endif

const ImDrawIdxSize = 4; // bind.ImDrawIdxSize;
// Vertex layout
// #ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT

const ImDrawVertSize = 20; // bind.ImDrawVertSize;

const ImDrawVertPosOffset = 0; // bind.ImDrawVertPosOffset;

const ImDrawVertUVOffset = 8; // bind.ImDrawVertUVOffset;

const ImDrawVertColOffset = 16; // bind.ImDrawVertColOffset;

class ImDrawVert {
    constructor(buffer, byteOffset = 0) {
        this.pos = new Float32Array(buffer, byteOffset + bind.ImDrawVertPosOffset, 2);
        this.uv = new Float32Array(buffer, byteOffset + bind.ImDrawVertUVOffset, 2);
        this.col = new Uint32Array(buffer, byteOffset + bind.ImDrawVertColOffset, 1);
    }
}
// #else
// You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h
// The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.
// The type has to be described within the macro (you can either declare the struct or use a typedef)
// NOTE: IMGUI DOESN'T CLEAR THE STRUCTURE AND DOESN'T CALL A CONSTRUCTOR SO ANY CUSTOM FIELD WILL BE UNINITIALIZED. IF YOU ADD EXTRA FIELDS (SUCH AS A 'Z' COORDINATES) YOU WILL NEED TO CLEAR THEM DURING RENDER OR TO IGNORE THEM.
// IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT;
// #endif
// [Internal] For use by ImDrawList
class ImDrawCmdHeader {
}
// Draw channels are used by the Columns API to "split" the render list into different channels while building, so items of each column can be batched together.
// You can also use them to simulate drawing layers and submit primitives in a different order than how they will be rendered.
class ImDrawChannel {
}
class ImDrawListSharedData {
    constructor(native) {
        this.native = native;
    }
}
// Draw command list
// This is the low-level list of polygons that ImGui functions are filling. At the end of the frame, all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.
// Each ImGui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to access the current window draw list and draw custom primitives.
// You can interleave normal ImGui:: calls and adding primitives to the current draw list.
// All positions are generally in pixel coordinates (top-left at (0,0), bottom-right at io.DisplaySize), however you are totally free to apply whatever transformation matrix to want to the data (if you apply such transformation you'll want to apply it to ClipRect as well)
// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.

class ImDrawList {
    constructor(native) {
        this.native = native;
    }
    IterateDrawCmds(callback) {
        this.native.IterateDrawCmds((draw_cmd, ElemStart) => {
            callback(new ImDrawCmd(draw_cmd), ElemStart);
        });
    }
    // This is what you have to render
    // ImVector<ImDrawCmd>     CmdBuffer;          // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.
    // ImVector<ImDrawIdx>     IdxBuffer;          // Index buffer. Each command consume ImDrawCmd::ElemCount of those
    get IdxBuffer() { return this.native.IdxBuffer; }
    // ImVector<ImDrawVert>    VtxBuffer;          // Vertex buffer.
    get VtxBuffer() { return this.native.VtxBuffer; }
    // ImDrawListFlags         Flags;              // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.
    get Flags() { return this.native.Flags; }
    set Flags(value) { this.native.Flags = value; }
    // [Internal, used while building lists]
    // unsigned int            _VtxCurrentIdx;     // [Internal] == VtxBuffer.Size
    // const ImDrawListSharedData* _Data;          // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)
    // const char*             _OwnerName;         // Pointer to owner window's name for debugging
    // ImDrawVert*             _VtxWritePtr;       // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    // ImDrawIdx*              _IdxWritePtr;       // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    // ImVector<ImVec4>        _ClipRectStack;     // [Internal]
    // ImVector<ImTextureID>   _TextureIdStack;    // [Internal]
    // ImVector<ImVec2>        _Path;              // [Internal] current path building
    // int                     _ChannelsCurrent;   // [Internal] current channel number (0)
    // int                     _ChannelsCount;     // [Internal] number of active channels (1+)
    // ImVector<ImDrawChannel> _Channels;          // [Internal] draw channels for columns API (not resized down so _ChannelsCount may be smaller than _Channels.Size)
    // ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL; Clear(); }
    // ~ImDrawList() { ClearFreeMemory(); }
    // IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
    PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect = false) {
        this.native.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
    }
    // IMGUI_API void  PushClipRectFullScreen();
    PushClipRectFullScreen() { this.native.PushClipRectFullScreen(); }
    // IMGUI_API void  PopClipRect();
    PopClipRect() { this.native.PopClipRect(); }
    // IMGUI_API void  PushTextureID(ImTextureID texture_id);
    PushTextureID(texture_id) {
        this.native.PushTextureID(ImGuiContext.setTexture(texture_id));
    }
    // IMGUI_API void  PopTextureID();
    PopTextureID() { this.native.PopTextureID(); }
    // inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }
    GetClipRectMin(out = new ImVec2()) {
        return this.native.GetClipRectMin(out);
    }
    // inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }
    GetClipRectMax(out = new ImVec2()) {
        return this.native.GetClipRectMax(out);
    }
    // Primitives
    // IMGUI_API void  AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness = 1.0f);
    AddLine(a, b, col, thickness = 1.0) {
        this.native.AddLine(a, b, col, thickness);
    }
    // IMGUI_API void  AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All, float thickness = 1.0f);   // a: upper-left, b: lower-right, rounding_corners_flags: 4-bits corresponding to which corner to round
    AddRect(a, b, col, rounding = 0.0, rounding_corners_flags = ImDrawCornerFlags.All, thickness = 1.0) {
        this.native.AddRect(a, b, col, rounding, rounding_corners_flags, thickness);
    }
    // IMGUI_API void  AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);                     // a: upper-left, b: lower-right
    AddRectFilled(a, b, col, rounding = 0.0, rounding_corners_flags = ImDrawCornerFlags.All) {
        this.native.AddRectFilled(a, b, col, rounding, rounding_corners_flags);
    }
    // IMGUI_API void  AddRectFilledMultiColor(const ImVec2& a, const ImVec2& b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
    AddRectFilledMultiColor(a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left) {
        this.native.AddRectFilledMultiColor(a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
    }
    // IMGUI_API void  AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness = 1.0f);
    AddQuad(a, b, c, d, col, thickness = 1.0) {
        this.native.AddQuad(a, b, c, d, col, thickness);
    }
    // IMGUI_API void  AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col);
    AddQuadFilled(a, b, c, d, col) {
        this.native.AddQuadFilled(a, b, c, d, col);
    }
    // IMGUI_API void  AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness = 1.0f);
    AddTriangle(a, b, c, col, thickness = 1.0) {
        this.native.AddTriangle(a, b, c, col, thickness);
    }
    // IMGUI_API void  AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col);
    AddTriangleFilled(a, b, c, col) {
        this.native.AddTriangleFilled(a, b, c, col);
    }
    // IMGUI_API void  AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12, float thickness = 1.0f);
    AddCircle(centre, radius, col, num_segments = 12, thickness = 1.0) {
        this.native.AddCircle(centre, radius, col, num_segments, thickness);
    }
    // IMGUI_API void  AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12);
    AddCircleFilled(centre, radius, col, num_segments = 12) {
        this.native.AddCircleFilled(centre, radius, col, num_segments);
    }
    // IMGUI_API void  AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness = 1.0f);
    AddNgon(centre, radius, col, num_segments, thickness = 1.0) {
        this.native.AddNgon(centre, radius, col, num_segments, thickness);
    }
    // IMGUI_API void  AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments);
    AddNgonFilled(centre, radius, col, num_segments) {
        this.native.AddNgonFilled(centre, radius, col, num_segments);
    }
    AddText(...args) {
        if (args[0] instanceof ImFont) {
            const font = args[0];
            const font_size = args[1];
            const pos = args[2];
            const col = args[3];
            const text_begin = args[4];
            const text_end = args[5] || null;
            const wrap_width = args[6] ? args[6] : 0.0;
            const cpu_fine_clip_rect = args[7] || null;
            this.native.AddText_B(font.native, font_size, pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin, wrap_width, cpu_fine_clip_rect);
        }
        else {
            const pos = args[0];
            const col = args[1];
            const text_begin = args[2];
            const text_end = args[3] || null;
            this.native.AddText_A(pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin);
        }
    }
    // IMGUI_API void  AddPolyline(const ImVec2* points, const int num_points, ImU32 col, bool closed, float thickness);
    AddPolyline(points, num_points, col, closed, thickness) {
        this.native.AddPolyline(points, num_points, col, closed, thickness);
    }
    // IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, const int num_points, ImU32 col);
    AddConvexPolyFilled(points, num_points, col) {
        this.native.AddConvexPolyFilled(points, num_points, col);
    }
    // IMGUI_API void  AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0); // Cubic Bezier (4 control points)
    AddBezierCubic(p1, p2, p3, p4, col, thickness = 1.0, num_segments = 0) {
        this.native.AddBezierCubic(p1, p2, p3, p4, col, thickness, num_segments);
    }
    // IMGUI_API void  AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness, int num_segments = 0);               // Quadratic Bezier (3 control points)
    AddBezierQuadratic(p1, p2, p3, col, thickness = 1.0, num_segments = 0) {
        this.native.AddBezierQuadratic(p1, p2, p3, col, thickness, num_segments);
    }
    // IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,1), ImU32 col = 0xFFFFFFFF);
    AddImage(user_texture_id, a, b, uv_a = ImVec2.ZERO, uv_b = ImVec2.UNIT, col = 0xFFFFFFFF) {
        this.native.AddImage(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col);
    }
    // IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,0), const ImVec2& uv_c = ImVec2(1,1), const ImVec2& uv_d = ImVec2(0,1), ImU32 col = 0xFFFFFFFF);
    AddImageQuad(user_texture_id, a, b, c, d, uv_a = ImVec2.ZERO, uv_b = ImVec2.UNIT_X, uv_c = ImVec2.UNIT, uv_d = ImVec2.UNIT_Y, col = 0xFFFFFFFF) {
        this.native.AddImageQuad(ImGuiContext.setTexture(user_texture_id), a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
    }
    // IMGUI_API void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col, float rounding, int rounding_corners = ImDrawCornerFlags_All);
    AddImageRounded(user_texture_id, a, b, uv_a, uv_b, col, rounding, rounding_corners = ImDrawCornerFlags.All) {
        this.native.AddImageRounded(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col, rounding, rounding_corners);
    }
    // Stateful path API, add points then finish with PathFill() or PathStroke()
    // inline    void  PathClear()                                                 { _Path.resize(0); }
    PathClear() { this.native.PathClear(); }
    // inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }
    PathLineTo(pos) { this.native.PathLineTo(pos); }
    // inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path[_Path.Size-1], &pos, 8) != 0) _Path.push_back(pos); }
    PathLineToMergeDuplicate(pos) { this.native.PathLineToMergeDuplicate(pos); }
    // inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); PathClear(); }
    PathFillConvex(col) { this.native.PathFillConvex(col); }
    // inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness); PathClear(); }
    PathStroke(col, closed, thickness = 1.0) { this.native.PathStroke(col, closed, thickness); }
    // IMGUI_API void  PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments = 10);
    PathArcTo(centre, radius, a_min, a_max, num_segments = 10) { this.native.PathArcTo(centre, radius, a_min, a_max, num_segments); }
    // IMGUI_API void  PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12);                                // Use precomputed angles for a 12 steps circle
    PathArcToFast(centre, radius, a_min_of_12, a_max_of_12) { this.native.PathArcToFast(centre, radius, a_min_of_12, a_max_of_12); }
    // IMGUI_API void  PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0);  // Cubic Bezier (4 control points)
    PathBezierCubicCurveTo(p2, p3, p4, num_segments = 0) { this.native.PathBezierCubicCurveTo(p2, p3, p4, num_segments); }
    // IMGUI_API void  PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments = 0);                // Quadratic Bezier (3 control points)
    PathBezierQuadraticCurveTo(p2, p3, num_segments = 0) { this.native.PathBezierQuadraticCurveTo(p2, p3, num_segments); }
    // IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);
    PathRect(rect_min, rect_max, rounding = 0.0, rounding_corners_flags = ImDrawCornerFlags.All) { this.native.PathRect(rect_min, rect_max, rounding, rounding_corners_flags); }
    // Channels
    // - Use to simulate layers. By switching channels to can render out-of-order (e.g. submit foreground primitives before background primitives)
    // - Use to minimize draw calls (e.g. if going back-and-forth between multiple non-overlapping clipping rectangles, prefer to append into separate channels then merge at the end)
    // IMGUI_API void  ChannelsSplit(int channels_count);
    ChannelsSplit(channels_count) { this.native.ChannelsSplit(channels_count); }
    // IMGUI_API void  ChannelsMerge();
    ChannelsMerge() { this.native.ChannelsMerge(); }
    // IMGUI_API void  ChannelsSetCurrent(int channel_index);
    ChannelsSetCurrent(channel_index) { this.native.ChannelsSetCurrent(channel_index); }
    // Advanced
    // IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.
    AddCallback(callback, callback_data) {
        const _callback = (parent_list, draw_cmd) => {
            callback(new ImDrawList(parent_list), new ImDrawCmd(draw_cmd));
        };
        this.native.AddCallback(_callback, callback_data);
    }
    // IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
    AddDrawCmd() { this.native.AddDrawCmd(); }
    // Internal helpers
    // NB: all primitives needs to be reserved via PrimReserve() beforehand!
    // IMGUI_API void  PrimReserve(int idx_count, int vtx_count);
    PrimReserve(idx_count, vtx_count) { this.native.PrimReserve(idx_count, vtx_count); }
    // IMGUI_API void  PrimUnreserve(int idx_count, int vtx_count);
    PrimUnreserve(idx_count, vtx_count) { this.native.PrimUnreserve(idx_count, vtx_count); }
    // IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)
    PrimRect(a, b, col) { this.native.PrimRect(a, b, col); }
    // IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
    PrimRectUV(a, b, uv_a, uv_b, col) { this.native.PrimRectUV(a, b, uv_a, uv_b, col); }
    // IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);
    PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col) { this.native.PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col); }
    // inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }
    PrimWriteVtx(pos, uv, col) { this.native.PrimWriteVtx(pos, uv, col); }
    // inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr = idx; _IdxWritePtr++; }
    PrimWriteIdx(idx) { this.native.PrimWriteIdx(idx); }
    // inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }
    PrimVtx(pos, uv, col) { this.native.PrimVtx(pos, uv, col); }
    AddRectFilledMultiColorRound(a, b, col_lt, col_rt, col_lb, col_rb, rounding, rounding_corners_flags) {
        this.native.AddRectFilledMultiColorRound(a, b, col_lt, col_rt, col_lb, col_rb, rounding, rounding_corners_flags);
    }
    GetVertexSize() { return this.native.GetVertexSize(); }
    Transform(tm, start, end) {
        if (!end)
            end = 0;
        this.native.Transform(tm, start, end);
    }
}
// All draw data to render an ImGui frame

class ImDrawData {
    constructor(native) {
        this.native = native;
    }
    IterateDrawLists(callback) {
        this.native.IterateDrawLists((draw_list) => {
            callback(new ImDrawList(draw_list));
        });
    }
    // bool            Valid;                  // Only valid after Render() is called and before the next NewFrame() is called.
    get Valid() { return this.native.Valid; }
    // ImDrawList**    CmdLists;
    // int             CmdListsCount;
    get CmdListsCount() { return this.native.CmdListsCount; }
    // int             TotalIdxCount;          // For convenience, sum of all cmd_lists idx_buffer.Size
    get TotalIdxCount() { return this.native.TotalIdxCount; }
    // int             TotalVtxCount;          // For convenience, sum of all cmd_lists vtx_buffer.Size
    get TotalVtxCount() { return this.native.TotalVtxCount; }
    // ImVec2          DisplayPos;             // Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)
    get DisplayPos() { return this.native.DisplayPos; }
    // ImVec2          DisplaySize;            // Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)
    get DisplaySize() { return this.native.DisplaySize; }
    // ImVec2          FramebufferScale;       // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.
    get FramebufferScale() { return this.native.FramebufferScale; }
    // Functions
    // ImDrawData() { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; }
    // IMGUI_API void DeIndexAllBuffers();               // For backward compatibility or convenience: convert all buffers from indexed to de-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
    DeIndexAllBuffers() { this.native.DeIndexAllBuffers(); }
    // IMGUI_API void ScaleClipRects(const ImVec2& fb_scale);  // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.
    ScaleClipRects(fb_scale) {
        this.native.ScaleClipRects(fb_scale);
    }
}
class script_ImFontConfig {
    constructor() {
        // void*           FontData;                   //          // TTF/OTF data
        // int             FontDataSize;               //          // TTF/OTF data size
        this.FontData = null;
        // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
        this.FontDataOwnedByAtlas = true;
        // int             FontNo;                     // 0        // Index of font within TTF/OTF file
        this.FontNo = 0;
        // float           SizePixels;                 //          // Size in pixels for rasterizer.
        this.SizePixels = 0;
        // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
        this.OversampleH = 3;
        this.OversampleV = 1;
        // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
        this.PixelSnapH = false;
        // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
        this.GlyphExtraSpacing = new ImVec2(0, 0);
        // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.
        this.GlyphOffset = new ImVec2(0, 0);
        // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
        this.GlyphRanges = null;
        // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
        this.GlyphMinAdvanceX = 0;
        // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs
        this.GlyphMaxAdvanceX = Number.MAX_VALUE;
        // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
        this.MergeMode = false;
        // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.
        this.RasterizerFlags = 0;
        // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
        this.RasterizerMultiply = 1.0;
        // ImWchar         EllipsisChar;           // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.
        this.EllipsisChar = -1;
        // [Internal]
        // char            Name[32];                               // Name (strictly to ease debugging)
        this.Name = "";
        // ImFont*         DstFont;
        this.DstFont = null;
        // IMGUI_API ImFontConfig();
    }
}

class ImFontConfig {
    constructor(internal = new script_ImFontConfig()) {
        this.internal = internal;
    }
    // void*           FontData;                   //          // TTF/OTF data
    // int             FontDataSize;               //          // TTF/OTF data size
    get FontData() { return this.internal.FontData; }
    // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
    get FontDataOwnedByAtlas() { return this.internal.FontDataOwnedByAtlas; }
    // int             FontNo;                     // 0        // Index of font within TTF/OTF file
    get FontNo() { return this.internal.FontNo; }
    // float           SizePixels;                 //          // Size in pixels for rasterizer.
    get SizePixels() { return this.internal.SizePixels; }
    // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
    get OversampleH() { return this.internal.OversampleH; }
    get OversampleV() { return this.internal.OversampleV; }
    // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
    get PixelSnapH() { return this.internal.PixelSnapH; }
    // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
    get GlyphExtraSpacing() { return this.internal.GlyphExtraSpacing; }
    // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.
    get GlyphOffset() { return this.internal.GlyphOffset; }
    // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
    get GlyphRanges() { return this.internal.GlyphRanges; }
    // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
    get GlyphMinAdvanceX() { return this.internal.GlyphMinAdvanceX; }
    // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs
    get GlyphMaxAdvanceX() { return this.internal.GlyphMaxAdvanceX; }
    // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
    get MergeMode() { return this.internal.MergeMode; }
    // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.
    get RasterizerFlags() { return this.internal.RasterizerFlags; }
    // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
    get RasterizerMultiply() { return this.internal.RasterizerMultiply; }
    // [Internal]
    // char            Name[32];                               // Name (strictly to ease debugging)
    get Name() { return this.internal.Name; }
    set Name(value) { this.internal.Name = value; }
    // ImFont*         DstFont;
    get DstFont() {
        const font = this.internal.DstFont;
        return font && new ImFont(font);
    }
}
// struct ImFontGlyph
class script_ImFontGlyph {
    constructor() {
        // unsigned int    Codepoint : 31;     // 0x0000..0xFFFF
        this.Codepoint = 0;
        // unsigned int    Visible : 1;        // Flag to allow early out when rendering
        this.Visible = false;
        // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
        this.AdvanceX = 0.0;
        // float           X0, Y0, X1, Y1;     // Glyph corners
        this.X0 = 0.0;
        this.Y0 = 0.0;
        this.X1 = 1.0;
        this.Y1 = 1.0;
        // float           U0, V0, U1, V1;     // Texture coordinates
        this.U0 = 0.0;
        this.V0 = 0.0;
        this.U1 = 1.0;
        this.V1 = 1.0;
        this.TexID = null;
        this.Char = 0;
    }
}

class ImFontGlyph {
    constructor(internal = new script_ImFontGlyph()) {
        this.internal = internal;
    }
    // unsigned int    Codepoint : 31;     // 0x0000..0xFFFF
    get Codepoint() { return this.internal.Codepoint; }
    // unsigned int    Visible : 1;        // Flag to allow early out when rendering
    get Visible() { return this.internal.Visible; }
    // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
    get AdvanceX() { return this.internal.AdvanceX; }
    ;
    set AdvanceX(v) { this.internal.AdvanceX = v; }
    // float           X0, Y0, X1, Y1;     // Glyph corners
    get X0() { return this.internal.X0; }
    ;
    set X0(v) { this.internal.X0 = v; }
    get Y0() { return this.internal.Y0; }
    ;
    set Y0(v) { this.internal.Y0 = v; }
    get X1() { return this.internal.X1; }
    ;
    set X1(v) { this.internal.X1 = v; }
    get Y1() { return this.internal.Y1; }
    ;
    set Y1(v) { this.internal.Y1 = v; }
    // float           U0, V0, U1, V1;     // Texture coordinates
    get U0() { return this.internal.U0; }
    ;
    set U0(v) { this.internal.U0 = v; }
    get V0() { return this.internal.V0; }
    ;
    set V0(v) { this.internal.V0 = v; }
    get U1() { return this.internal.U1; }
    ;
    set U1(v) { this.internal.U1 = v; }
    get V1() { return this.internal.V1; }
    ;
    set V1(v) { this.internal.V1 = v; }
    get TexID() { return this.internal.TexID; }
    get TextureID() { return ImGuiContext.getTexture(this.internal.TexID); }
    ;
    set TextureID(v) { this.internal.TexID = ImGuiContext.setTexture(v); }
    get Char() { return this.internal.Char; }
    ;
}
// See ImFontAtlas::AddCustomRectXXX functions.
class ImFontAtlasCustomRect {
}

var ImFontAtlasFlags;
(function (ImFontAtlasFlags) {
    ImFontAtlasFlags[ImFontAtlasFlags["None"] = 0] = "None";
    ImFontAtlasFlags[ImFontAtlasFlags["NoPowerOfTwoHeight"] = 1] = "NoPowerOfTwoHeight";
    ImFontAtlasFlags[ImFontAtlasFlags["NoMouseCursors"] = 2] = "NoMouseCursors";
    ImFontAtlasFlags[ImFontAtlasFlags["NoBakedLines"] = 4] = "NoBakedLines";
})(ImFontAtlasFlags || (ImFontAtlasFlags = {}));
// Load and rasterize multiple TTF/OTF fonts into a same texture.
// Sharing a texture for multiple fonts allows us to reduce the number of draw calls during rendering.
// We also add custom graphic data into the texture that serves for ImGui.
//  1. (Optional) Call AddFont*** functions. If you don't call any, the default font will be loaded for you.
//  2. Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.
//  3. Upload the pixels data into a texture within your graphics system.
//  4. Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture. This value will be passed back to you during rendering to identify the texture.
// IMPORTANT: If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the ImFont is build (when calling GetTextData*** or Build()). We only copy the pointer, not the data.

class ImFontAtlas {
    constructor(native) {
        this.native = native;
        this._Fonts = null;
    }
    // IMGUI_API ImFontAtlas();
    // IMGUI_API ~ImFontAtlas();
    // IMGUI_API ImFont*           AddFont(const ImFontConfig* font_cfg);
    // IMGUI_API ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL);
    AddFontDefault(font_cfg = null) {
        return new ImFont(this.native.AddFontDefault(font_cfg));
    }
    // IMGUI_API ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);
    // IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after Build(). Set font_cfg->FontDataOwnedByAtlas to false to keep ownership.
    AddFontFromMemoryTTF(data, size_pixels, font_cfg = null, glyph_ranges = null) {
        return new ImFont(this.native.AddFontFromMemoryTTF(new Uint8Array(data), size_pixels, font_cfg && font_cfg.internal, glyph_ranges));
    }
    // IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
    // IMGUI_API ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
    // IMGUI_API void              ClearTexData();             // Clear the CPU-side texture data. Saves RAM once the texture has been copied to graphics memory.
    ClearTexData() { this.native.ClearTexData(); }
    // IMGUI_API void              ClearInputData();           // Clear the input TTF data (inc sizes, glyph ranges)
    ClearInputData() { this.native.ClearInputData(); }
    // IMGUI_API void              ClearFonts();               // Clear the ImGui-side font data (glyphs storage, UV coordinates)
    ClearFonts() { this.native.ClearFonts(); }
    // IMGUI_API void              Clear();                    // Clear all
    Clear() { this.native.Clear(); }
    // Build atlas, retrieve pixel data.
    // User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().
    // RGBA32 format is provided for convenience and compatibility, but note that unless you use CustomRect to draw color data, the RGB pixels emitted from Fonts will all be white (~75% of waste).
    // Pitch = Width * BytesPerPixels
    // IMGUI_API bool              Build();                    // Build pixels data. This is called automatically for you by the GetTexData*** functions.
    Build() { return this.native.Build(); }
    // IMGUI_API bool              IsBuilt()                   { return Fonts.Size > 0 && (TexPixelsAlpha8 != NULL || TexPixelsRGBA32 != NULL); }
    IsBuilt() { return this.native.IsBuilt(); }
    // IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel
    GetTexDataAsAlpha8() {
        return this.native.GetTexDataAsAlpha8();
    }
    // IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel
    GetTexDataAsRGBA32() {
        return this.native.GetTexDataAsRGBA32();
    }
    // void                        SetTexID(ImTextureID id)    { TexID = id; }
    SetTexID(id) { this.TexID = id; }
    //-------------------------------------------
    // Glyph Ranges
    //-------------------------------------------
    // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)
    // NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8"Hello world" syntax. See FAQ for details.
    // IMGUI_API const ImWchar*    GetGlyphRangesDefault();    // Basic Latin, Extended Latin
    GetGlyphRangesDefault() { return this.native.GetGlyphRangesDefault(); }
    // IMGUI_API const ImWchar*    GetGlyphRangesKorean();     // Default + Korean characters
    GetGlyphRangesKorean() { return this.native.GetGlyphRangesKorean(); }
    // IMGUI_API const ImWchar*    GetGlyphRangesJapanese();   // Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs
    GetGlyphRangesJapanese() { return this.native.GetGlyphRangesJapanese(); }
    // IMGUI_API const ImWchar*    GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
    GetGlyphRangesChineseFull() { return this.native.GetGlyphRangesChineseFull(); }
    // IMGUI_API const ImWchar*    GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
    GetGlyphRangesChineseSimplifiedCommon() { return this.native.GetGlyphRangesChineseSimplifiedCommon(); }
    // IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();   // Default + about 400 Cyrillic characters
    GetGlyphRangesCyrillic() { return this.native.GetGlyphRangesCyrillic(); }
    // IMGUI_API const ImWchar*    GetGlyphRangesThai();       // Default + Thai characters
    GetGlyphRangesThai() { return this.native.GetGlyphRangesThai(); }
    // IMGUI_API const ImWchar*    GetGlyphRangesVietnamese();       // Default + Vietnamese characters
    GetGlyphRangesVietnamese() { return this.native.GetGlyphRangesVietnamese(); }
    // Helpers to build glyph ranges from text data. Feed your application strings/characters to it then call BuildRanges().
    // struct GlyphRangesBuilder
    // {
    //     ImVector<unsigned char> UsedChars;  // Store 1-bit per Unicode code point (0=unused, 1=used)
    //     GlyphRangesBuilder()                { UsedChars.resize(0x10000 / 8); memset(UsedChars.Data, 0, 0x10000 / 8); }
    //     bool           GetBit(int n) const  { return (UsedChars[n >> 3] & (1 << (n & 7))) != 0; }
    //     void           SetBit(int n)        { UsedChars[n >> 3] |= 1 << (n & 7); }  // Set bit 'c' in the array
    //     void           AddChar(ImWchar c)   { SetBit(c); }                          // Add character
    //     IMGUI_API void AddText(const char* text, const char* text_end = NULL);      // Add string (each character of the UTF-8 string are added)
    //     IMGUI_API void AddRanges(const ImWchar* ranges);                            // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault) to force add all of ASCII/Latin+Ext
    //     IMGUI_API void BuildRanges(ImVector<ImWchar>* out_ranges);                  // Output new ranges
    // };
    //-------------------------------------------
    // Custom Rectangles/Glyphs API
    //-------------------------------------------
    // You can request arbitrary rectangles to be packed into the atlas, for your own purposes. After calling Build(), you can query the rectangle position and render your pixels.
    // You can also request your rectangles to be mapped as font glyph (given a font + Unicode point), so you can render e.g. custom colorful icons and use them as regular glyphs.
    // struct CustomRect
    // {
    //     unsigned int    ID;             // Input    // User ID. Use <0x10000 to map into a font glyph, >=0x10000 for other/internal/custom texture data.
    //     unsigned short  Width, Height;  // Input    // Desired rectangle dimension
    //     unsigned short  X, Y;           // Output   // Packed position in Atlas
    //     float           GlyphAdvanceX;  // Input    // For custom font glyphs only (ID<0x10000): glyph xadvance
    //     ImVec2          GlyphOffset;    // Input    // For custom font glyphs only (ID<0x10000): glyph display offset
    //     ImFont*         Font;           // Input    // For custom font glyphs only (ID<0x10000): target font
    //     CustomRect()            { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0,0); Font = NULL; }
    //     bool IsPacked() const   { return X != 0xFFFF; }
    // };
    // IMGUI_API int       AddCustomRectRegular(unsigned int id, int width, int height);                                                                   // Id needs to be >= 0x10000. Id >= 0x80000000 are reserved for ImGui and ImDrawList
    // IMGUI_API int       AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0,0));   // Id needs to be < 0x10000 to register a rectangle to map into a specific font.
    // IMGUI_API void      CalcCustomRectUV(const CustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max);
    // const CustomRect*   GetCustomRectByIndex(int index) const { if (index < 0) return NULL; return &CustomRects[index]; }
    //-------------------------------------------
    // Members
    //-------------------------------------------
    // bool                        Locked;             // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.
    get Locked() { return this.native.Locked; }
    set Locked(value) { this.native.Locked = value; }
    // ImFontAtlasFlags            Flags;              // Build flags (see ImFontAtlasFlags_)
    get Flags() { return this.native.Flags; }
    set Flags(value) { this.native.Flags = value; }
    // ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
    get TexID() {
        return ImGuiContext.getTexture(this.native.TexID);
    }
    set TexID(value) {
        this.native.TexID = ImGuiContext.setTexture(value);
    }
    // int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
    get TexDesiredWidth() { return this.native.TexDesiredWidth; }
    set TexDesiredWidth(value) { this.native.TexDesiredWidth = value; }
    // int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1.
    get TexGlyphPadding() { return this.native.TexGlyphPadding; }
    set TexGlyphPadding(value) { this.native.TexGlyphPadding = value; }
    // [Internal]
    // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
    // unsigned char*              TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
    // unsigned int*               TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
    // int                         TexWidth;           // Texture width calculated during Build().
    get TexWidth() { return this.native.TexWidth; }
    // int                         TexHeight;          // Texture height calculated during Build().
    get TexHeight() { return this.native.TexHeight; }
    // ImVec2                      TexUvScale;         // = (1.0f/TexWidth, 1.0f/TexHeight)
    get TexUvScale() { return this.native.TexUvScale; }
    // ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel
    get TexUvWhitePixel() { return this.native.TexUvWhitePixel; }
    // ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
    get Fonts_() {
        const fonts = new ImVector();
        this.native.IterateFonts((font) => {
            fonts.push(new ImFont(font));
        });
        return fonts;
    }
    get Fonts() {
        if (this._Fonts == null) {
            this._Fonts = this.Fonts_;
        }
        return this._Fonts;
    }
    // ImVector<CustomRect>        CustomRects;        // Rectangles for packing custom texture data into the atlas.
    // ImVector<ImFontConfig>      ConfigData;         // Internal data
    // int                         CustomRectIds[1];   // Identifiers of custom texture rectangle used by ImFontAtlas/ImDrawList
    get CurrentFont() {
        return new ImFont(this.native.CurrentFont);
    }
}

class ImFont {
    constructor(native) {
        this.native = native;
    }
    setFont(config) {
        this.native.FontName = config.name;
        this.native.FontSize = config.fontsize;
        this.native.Ascent = config.ascent ? config.ascent : 0;
        this.native.Descent = config.descent ? config.descent : 0;
    }
    // Members: Hot ~62/78 bytes
    // float                       FontSize;           // <user set>   // Height of characters, set during loading (don't change after loading)
    get FontStyle() { return this.native.FontStyle; }
    set FontStyle(v) { this.native.FontStyle = v; }
    get FontName() { return this.native.FontName; }
    set FontName(v) { this.native.FontName = v; }
    get FontSize() { return this.native.FontSize; }
    set FontSize(v) { this.native.FontSize = v; }
    get SpaceX() { return [this.native.SpaceX0, this.native.SpaceX1]; }
    set SpaceX(v) { this.native.SpaceX0 = v[0]; this.native.SpaceX1 = v[1]; }
    // float                       Scale;              // = 1.f        // Base font scale, multiplied by the per-window font scale which you can adjust with SetFontScale()
    get Scale() { return this.native.Scale; }
    set Scale(value) { this.native.Scale = value; }
    // ImVector<ImFontGlyph>       Glyphs;             //              // All glyphs.
    get Glyphs() {
        const glyphs = new ImVector();
        this.native.IterateGlyphs((glyph) => {
            glyphs.push(new ImFontGlyph(glyph)); // TODO: wrap native
        });
        return glyphs;
    }
    // ImVector<float>             IndexAdvanceX;      //              // Sparse. Glyphs->AdvanceX in a directly indexable way (more cache-friendly, for CalcTextSize functions which are often bottleneck in large UI).
    // get IndexAdvanceX(): any { return this.native.IndexAdvanceX; }
    // ImVector<unsigned short>    IndexLookup;        //              // Sparse. Index glyphs by Unicode code-point.
    // get IndexLookup(): any { return this.native.IndexLookup; }
    // const ImFontGlyph*          FallbackGlyph;      // == FindGlyph(FontFallbackChar)
    get FallbackGlyph() {
        const glyph = this.native.FallbackGlyph;
        return glyph && new ImFontGlyph(glyph);
    }
    set FallbackGlyph(value) {
        this.native.FallbackGlyph = value && value.internal;
    }
    // float                       FallbackAdvanceX;   // == FallbackGlyph->AdvanceX
    get FallbackAdvanceX() { return this.native.FallbackAdvanceX; }
    // ImWchar                     FallbackChar;       // = '?'        // Replacement glyph if one isn't found. Only set via SetFallbackChar()
    get FallbackChar() { return this.native.FallbackChar; }
    // ImWchar                     EllipsisChar;       // 2     // out // = -1       // Character used for ellipsis rendering.
    get EllipsisChar() { return this.native.EllipsisChar; }
    // Members: Cold ~18/26 bytes
    // short                       ConfigDataCount;    // ~ 1          // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
    get ConfigDataCount() { return this.native.ConfigDataCount; }
    // ImFontConfig*               ConfigData;         //              // Pointer within ContainerAtlas->ConfigData
    get ConfigData() {
        return new ImFontConfig(this.native.ConfigData);
    }
    // ImFontAtlas*                ContainerAtlas;     //              // What we has been loaded into
    get ContainerAtlas() { return null; }
    // float                       Ascent, Descent;    //              // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
    get Ascent() { return this.native.Ascent; }
    set Ascent(v) { this.native.Ascent = v; }
    get Descent() { return this.native.Descent; }
    set Descent(v) { this.native.Descent = v; }
    // int                         MetricsTotalSurface;//              // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)
    get MetricsTotalSurface() { return this.native.MetricsTotalSurface; }
    // Methods
    // IMGUI_API ImFont();
    // IMGUI_API ~ImFont();
    // IMGUI_API void              ClearOutputData();
    ClearOutputData() { return this.native.ClearOutputData(); }
    // IMGUI_API void              BuildLookupTable();
    BuildLookupTable() { return this.native.BuildLookupTable(); }
    // IMGUI_API const ImFontGlyph*FindGlyph(ImWchar c) const;
    FindGlyph(c) {
        const glyph = this.native.FindGlyph(c);
        return glyph && new ImFontGlyph(glyph);
    }
    // IMGUI_API const ImFontGlyph*FindGlyphNoFallback(ImWchar c) const;
    FindGlyphNoFallback(c) {
        const glyph = this.native.FindGlyphNoFallback(c);
        return glyph && new ImFontGlyph(glyph);
    }
    // IMGUI_API void              SetFallbackChar(ImWchar c);
    SetFallbackChar(c) { return this.native.SetFallbackChar(c); }
    // float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }
    GetCharAdvance(c) { return this.native.GetCharAdvance(c); }
    // bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }
    IsLoaded() { return this.native.IsLoaded(); }
    // const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }
    GetDebugName() { return this.native.GetDebugName(); }
    // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
    // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
    // IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8
    CalcTextSizeA(size, max_width, wrap_width, text_begin, text_end = null, remaining = null, isready = null) {
        return this.native.CalcTextSizeA(size, max_width, wrap_width, text_end !== null ? text_begin.substring(0, text_end) : text_begin, remaining, isready, new ImVec2());
    }
    // IMGUI_API const char*       CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;
    CalcWordWrapPositionA(scale, text, text_end = null, wrap_width) {
        return this.native.CalcWordWrapPositionA(scale, text_end !== null ? text.substring(0, text_end) : text, wrap_width);
    }
    // IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, unsigned short c) const;
    RenderChar(draw_list, size, pos, col, c) {
        this.native.RenderChar(draw_list.native, size, pos, col, c);
    }
    // IMGUI_API void              RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;
    RenderText(draw_list, size, pos, col, clip_rect, text_begin, text_end = null, wrap_width = 0.0, cpu_fine_clip = false) {
        this.native.RenderText(draw_list.native, size, pos, col, clip_rect, text_begin, wrap_width, cpu_fine_clip);
    }
    // [Internal]
    // IMGUI_API void              GrowIndex(int new_size);
    // IMGUI_API void              AddGlyph(ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
    // IMGUI_API void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true); // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.
    // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // typedef ImFontGlyph Glyph; // OBSOLETE 1.52+
    // #endif
    // IMGUI_API bool              IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last);
    IsGlyphRangeUnused(c_begin, c_last) { return false; } // TODO
    get GlyphToCreate() {
        let glyph = this.native.GlyphToCreate();
        return glyph ? new ImFontGlyph(glyph) : null;
    }
    get IterateGlyphToCreate() {
        const glyphs = [];
        this.native.IterateGlyphToCreate((glyph) => {
            glyphs.push(new ImFontGlyph(glyph));
        });
        return glyphs;
    }
    GlyphCreated(glyph) {
        this.native.GlyphCreated(glyph.internal);
    }
    ClearGlyphCreated() {
        this.native.ClearGlyphCreated();
    }
    CreateGlyph(text) {
        this.native.CreateGlyph(text);
    }
    AddFontRange(start, end) {
        this.native.AddFontRange(start, end);
    }
    ClearFontRange() {
        this.native.ClearFontRange();
    }
    MergeFont(font) {
        this.native.MergeFont(font.native);
    }
    ClearSubFont() {
        this.native.ClearSubFont();
    }
    InRange(c) {
        return this.native.InRange(c);
    }
}
// a script version of Bind.ImGuiStyle with matching interface
class script_ImGuiStyle {
    _getAt_Colors(index) { return this.Colors[index]; }
    _setAt_Colors(index, color) { this.Colors[index].Copy(color); return true; }
    constructor() {
        this.Alpha = 1.0;
        this.WindowPadding = new ImVec2(8, 8);
        this.WindowRounding = 7.0;
        this.WindowBorderSize = 0.0;
        this.WindowMinSize = new ImVec2(32, 32);
        this.WindowTitleAlign = new ImVec2(0.0, 0.5);
        this.WindowMenuButtonPosition = ImGuiDir.Left;
        this.ChildRounding = 0.0;
        this.ChildBorderSize = 1.0;
        this.PopupRounding = 0.0;
        this.PopupBorderSize = 1.0;
        this.FramePadding = new ImVec2(4, 3);
        this.FrameRounding = 0.0;
        this.FrameBorderSize = 0.0;
        this.ItemSpacing = new ImVec2(8, 4);
        this.ItemInnerSpacing = new ImVec2(4, 4);
        this.CellPadding = new ImVec2(4, 2);
        this.TouchExtraPadding = new ImVec2(0, 0);
        this.IndentSpacing = 21.0;
        this.ColumnsMinSpacing = 6.0;
        this.ScrollbarSize = 16.0;
        this.ScrollbarRounding = 9.0;
        this.GrabMinSize = 10.0;
        this.GrabRounding = 0.0;
        this.LogSliderDeadzone = 4.0;
        this.TabRounding = 0.0;
        this.TabBorderSize = 0.0;
        this.TabMinWidthForCloseButton = 0.0;
        this.ColorButtonPosition = ImGuiDir.Right;
        this.ButtonTextAlign = new ImVec2(0.5, 0.5);
        this.SelectableTextAlign = new ImVec2(0.0, 0.0);
        this.DisplayWindowPadding = new ImVec2(22, 22);
        this.DisplaySafeAreaPadding = new ImVec2(4, 4);
        this.MouseCursorScale = 1;
        this.AntiAliasedLines = true;
        this.AntiAliasedLinesUseTex = true;
        this.AntiAliasedFill = true;
        this.CurveTessellationTol = 1.25;
        this.CircleSegmentMaxError = 1.60;
        this.Colors = [];
        for (let i = 0; i < ImGuiCol.COUNT; ++i) {
            this.Colors[i] = new ImVec4();
        }
        const _this = new ImGuiStyle(this);
        const native = new bind.ImGuiStyle();
        const _that = new ImGuiStyle(native);
        _that.Copy(_this);
        bind.StyleColorsClassic(native);
        _this.Copy(_that);
        native.delete();
    }
    ScaleAllSizes(scale_factor) {
        const _this = new ImGuiStyle(this);
        const native = new bind.ImGuiStyle();
        const _that = new ImGuiStyle(native);
        _that.Copy(_this);
        native.ScaleAllSizes(scale_factor);
        _this.Copy(_that);
        native.delete();
    }
}

class ImGuiStyle {
    constructor(internal = new script_ImGuiStyle()) {
        this.internal = internal;
        this.Colors = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return ImGuiCol.COUNT;
                }
                return this.internal._getAt_Colors(Number(key));
            },
            set: (target, key, value) => {
                return this.internal._setAt_Colors(Number(key), value);
            },
        });
    }
    get Alpha() { return this.internal.Alpha; }
    set Alpha(value) { this.internal.Alpha = value; }
    get WindowPadding() { return this.internal.WindowPadding; }
    get WindowRounding() { return this.internal.WindowRounding; }
    set WindowRounding(value) { this.internal.WindowRounding = value; }
    get WindowBorderSize() { return this.internal.WindowBorderSize; }
    set WindowBorderSize(value) { this.internal.WindowBorderSize = value; }
    get WindowMinSize() { return this.internal.WindowMinSize; }
    get WindowTitleAlign() { return this.internal.WindowTitleAlign; }
    get WindowMenuButtonPosition() { return this.internal.WindowMenuButtonPosition; }
    set WindowMenuButtonPosition(value) { this.internal.WindowMenuButtonPosition = value; }
    get ChildRounding() { return this.internal.ChildRounding; }
    set ChildRounding(value) { this.internal.ChildRounding = value; }
    get ChildBorderSize() { return this.internal.ChildBorderSize; }
    set ChildBorderSize(value) { this.internal.ChildBorderSize = value; }
    get PopupRounding() { return this.internal.PopupRounding; }
    set PopupRounding(value) { this.internal.PopupRounding = value; }
    get PopupBorderSize() { return this.internal.PopupBorderSize; }
    set PopupBorderSize(value) { this.internal.PopupBorderSize = value; }
    get FramePadding() { return this.internal.FramePadding; }
    get FrameRounding() { return this.internal.FrameRounding; }
    set FrameRounding(value) { this.internal.FrameRounding = value; }
    get FrameBorderSize() { return this.internal.FrameBorderSize; }
    set FrameBorderSize(value) { this.internal.FrameBorderSize = value; }
    get ItemSpacing() { return this.internal.ItemSpacing; }
    get ItemInnerSpacing() { return this.internal.ItemInnerSpacing; }
    get CellPadding() { return this.internal.CellPadding; }
    get TouchExtraPadding() { return this.internal.TouchExtraPadding; }
    get IndentSpacing() { return this.internal.IndentSpacing; }
    set IndentSpacing(value) { this.internal.IndentSpacing = value; }
    get ColumnsMinSpacing() { return this.internal.ColumnsMinSpacing; }
    set ColumnsMinSpacing(value) { this.internal.ColumnsMinSpacing = value; }
    get ScrollbarSize() { return this.internal.ScrollbarSize; }
    set ScrollbarSize(value) { this.internal.ScrollbarSize = value; }
    get ScrollbarRounding() { return this.internal.ScrollbarRounding; }
    set ScrollbarRounding(value) { this.internal.ScrollbarRounding = value; }
    get GrabMinSize() { return this.internal.GrabMinSize; }
    set GrabMinSize(value) { this.internal.GrabMinSize = value; }
    get GrabRounding() { return this.internal.GrabRounding; }
    set GrabRounding(value) { this.internal.GrabRounding = value; }
    get LogSliderDeadzone() { return this.internal.LogSliderDeadzone; }
    set LogSliderDeadzone(value) { this.internal.LogSliderDeadzone = value; }
    get TabRounding() { return this.internal.TabRounding; }
    set TabRounding(value) { this.internal.TabRounding = value; }
    get TabBorderSize() { return this.internal.TabBorderSize; }
    set TabBorderSize(value) { this.internal.TabBorderSize = value; }
    get TabMinWidthForCloseButton() { return this.internal.TabMinWidthForCloseButton; }
    set TabMinWidthForCloseButton(value) { this.internal.TabMinWidthForCloseButton = value; }
    get ColorButtonPosition() { return this.internal.ColorButtonPosition; }
    set ColorButtonPosition(value) { this.internal.ColorButtonPosition = value; }
    get ButtonTextAlign() { return this.internal.ButtonTextAlign; }
    get SelectableTextAlign() { return this.internal.SelectableTextAlign; }
    get DisplayWindowPadding() { return this.internal.DisplayWindowPadding; }
    get DisplaySafeAreaPadding() { return this.internal.DisplaySafeAreaPadding; }
    get MouseCursorScale() { return this.internal.MouseCursorScale; }
    set MouseCursorScale(value) { this.internal.MouseCursorScale = value; }
    get AntiAliasedLines() { return this.internal.AntiAliasedLines; }
    set AntiAliasedLines(value) { this.internal.AntiAliasedLines = value; }
    get AntiAliasedLinesUseTex() { return this.internal.AntiAliasedLinesUseTex; }
    set AntiAliasedLinesUseTex(value) { this.internal.AntiAliasedLinesUseTex = value; }
    get AntiAliasedFill() { return this.internal.AntiAliasedFill; }
    set AntiAliasedFill(value) { this.internal.AntiAliasedFill = value; }
    get CurveTessellationTol() { return this.internal.CurveTessellationTol; }
    set CurveTessellationTol(value) { this.internal.CurveTessellationTol = value; }
    get CircleSegmentMaxError() { return this.internal.CircleSegmentMaxError; }
    set CircleSegmentMaxError(value) { this.internal.CircleSegmentMaxError = value; }
    Copy(other) {
        this.Alpha = other.Alpha;
        this.WindowPadding.Copy(other.WindowPadding);
        this.WindowRounding = other.WindowRounding;
        this.WindowBorderSize = other.WindowBorderSize;
        this.WindowMinSize.Copy(other.WindowMinSize);
        this.WindowTitleAlign.Copy(other.WindowTitleAlign);
        this.WindowMenuButtonPosition = other.WindowMenuButtonPosition;
        this.ChildRounding = other.ChildRounding;
        this.ChildBorderSize = other.ChildBorderSize;
        this.PopupRounding = other.PopupRounding;
        this.PopupBorderSize = other.PopupBorderSize;
        this.FramePadding.Copy(other.FramePadding);
        this.FrameRounding = other.FrameRounding;
        this.FrameBorderSize = other.FrameBorderSize;
        this.ItemSpacing.Copy(other.ItemSpacing);
        this.ItemInnerSpacing.Copy(other.ItemInnerSpacing);
        this.CellPadding.Copy(other.CellPadding);
        this.TouchExtraPadding.Copy(other.TouchExtraPadding);
        this.IndentSpacing = other.IndentSpacing;
        this.ColumnsMinSpacing = other.ColumnsMinSpacing;
        this.ScrollbarSize = other.ScrollbarSize;
        this.ScrollbarRounding = other.ScrollbarRounding;
        this.GrabMinSize = other.GrabMinSize;
        this.GrabRounding = other.GrabRounding;
        this.LogSliderDeadzone = other.LogSliderDeadzone;
        this.TabRounding = other.TabRounding;
        this.TabBorderSize = other.TabBorderSize;
        this.TabMinWidthForCloseButton = other.TabMinWidthForCloseButton;
        this.ColorButtonPosition = other.ColorButtonPosition;
        this.ButtonTextAlign.Copy(other.ButtonTextAlign);
        this.DisplayWindowPadding.Copy(other.DisplayWindowPadding);
        this.DisplaySafeAreaPadding.Copy(other.DisplaySafeAreaPadding);
        this.MouseCursorScale = other.MouseCursorScale;
        this.AntiAliasedLines = other.AntiAliasedLines;
        this.AntiAliasedLinesUseTex = other.AntiAliasedLinesUseTex;
        this.AntiAliasedFill = other.AntiAliasedFill;
        this.CurveTessellationTol = other.CurveTessellationTol;
        this.CircleSegmentMaxError = other.CircleSegmentMaxError;
        for (let i = 0; i < ImGuiCol.COUNT; ++i) {
            this.Colors[i].Copy(other.Colors[i]);
        }
        return this;
    }
    ScaleAllSizes(scale_factor) { this.internal.ScaleAllSizes(scale_factor); }
}
// This is where your app communicate with Dear ImGui. Access via ImGui::GetIO().
// Read 'Programmer guide' section in .cpp file for general usage.

class ImGuiIO {
    constructor(native) {
        this.native = native;
        // int           KeyMap[ImGuiKey_COUNT];   // <unset>              // Map of indices into the KeysDown[512] entries array
        this.KeyMap = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return ImGuiKey.COUNT;
                }
                return this.native._getAt_KeyMap(Number(key));
            },
            set: (target, key, value) => {
                return this.native._setAt_KeyMap(Number(key), value);
            },
        });
        // bool        MouseDown[5];               // Mouse buttons: left, right, middle + extras. ImGui itself mostly only uses left button (BeginPopupContext** are using right button). Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
        this.MouseDown = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return 5;
                }
                return this.native._getAt_MouseDown(Number(key));
            },
            set: (target, key, value) => {
                return this.native._setAt_MouseDown(Number(key), value);
            },
        });
        // bool        KeysDown[512];              // Keyboard keys that are pressed (in whatever storage order you naturally have access to keyboard data)
        this.KeysDown = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return 512;
                }
                return this.native._getAt_KeysDown(Number(key));
            },
            set: (target, key, value) => {
                return this.native._setAt_KeysDown(Number(key), value);
            },
        });
        // float       NavInputs[ImGuiNavInput_COUNT]; // Gamepad inputs (keyboard keys will be auto-mapped and be written here by ImGui::NewFrame)
        this.NavInputs = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return ImGuiNavInput.COUNT;
                }
                return this.native._getAt_NavInputs(Number(key));
            },
            set: (target, key, value) => {
                return this.native._setAt_NavInputs(Number(key), value);
            },
        });
        //------------------------------------------------------------------
        // [Internal] ImGui will maintain those fields. Forward compatibility not guaranteed!
        //------------------------------------------------------------------
        // ImGuiKeyModFlags KeyMods;                   // Key mods flags (same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags), updated by NewFrame()
        // ImVec2      MousePosPrev;               // Previous mouse position temporary storage (nb: not for public use, set to MousePos in NewFrame())
        // ImVec2      MouseClickedPos[5];         // Position at time of clicking
        this.MouseClickedPos = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return 5;
                }
                return this.native._getAt_MouseClickedPos(Number(key));
            },
        });
        // float       MouseClickedTime[5];        // Time of last click (used to figure out double-click)
        // bool        MouseClicked[5];            // Mouse button went from !Down to Down
        // bool        MouseDoubleClicked[5];      // Has mouse button been double-clicked?
        // bool        MouseReleased[5];           // Mouse button went from Down to !Down
        // bool        MouseDownOwned[5];          // Track if button was clicked inside a window. We don't request mouse capture from the application if click started outside ImGui bounds.
        // float       MouseDownDuration[5];       // Duration the mouse button has been down (0.0f == just clicked)
        this.MouseDownDuration = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return 5;
                }
                return this.native._getAt_MouseDownDuration(Number(key));
            },
        });
        // float       MouseDownDurationPrev[5];   // Previous time the mouse button has been down
        // ImVec2      MouseDragMaxDistanceAbs[5]; // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point
        // float       MouseDragMaxDistanceSqr[5]; // Squared maximum distance of how much mouse has traveled from the clicking point
        // float       KeysDownDuration[512];      // Duration the keyboard key has been down (0.0f == just pressed)
        this.KeysDownDuration = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return 512;
                }
                return this.native._getAt_KeysDownDuration(Number(key));
            },
        });
        // float       KeysDownDurationPrev[512];  // Previous duration the key has been down
        // float       NavInputsDownDuration[ImGuiNavInput_COUNT];
        this.NavInputsDownDuration = new Proxy([], {
            get: (target, key) => {
                if (key === "length") {
                    return ImGuiNavInput.COUNT;
                }
                return this.native._getAt_NavInputsDownDuration(Number(key));
            },
        });
    }
    //------------------------------------------------------------------
    // Settings (fill once)                 // Default value:
    //------------------------------------------------------------------
    // ImGuiConfigFlags   ConfigFlags;         // = 0                  // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
    get ConfigFlags() { return this.native.ConfigFlags; }
    set ConfigFlags(value) { this.native.ConfigFlags = value; }
    // ImGuiBackendFlags  BackendFlags;        // = 0                  // Set ImGuiBackendFlags_ enum. Set by imgui_impl_xxx files or custom back-end to communicate features supported by the back-end.
    get BackendFlags() { return this.native.BackendFlags; }
    set BackendFlags(value) { this.native.BackendFlags = value; }
    // ImVec2        DisplaySize;              // <unset>              // Display size, in pixels. For clamping windows positions.
    get DisplaySize() { return this.native.DisplaySize; }
    // float         DeltaTime;                // = 1.0f/60.0f         // Time elapsed since last frame, in seconds.
    get DeltaTime() { return this.native.DeltaTime; }
    set DeltaTime(value) { this.native.DeltaTime = value; }
    // float         IniSavingRate;            // = 5.0f               // Maximum time between saving positions/sizes to .ini file, in seconds.
    get IniSavingRate() { return this.native.IniSavingRate; }
    set IniSavingRate(value) { this.native.IniSavingRate = value; }
    // const char*   IniFilename;              // = "imgui.ini"        // Path to .ini file. NULL to disable .ini saving.
    get IniFilename() { return this.native.IniFilename; }
    set IniFilename(value) { this.native.IniFilename = value; }
    // const char*   LogFilename;              // = "imgui_log.txt"    // Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
    get LogFilename() { return this.native.LogFilename; }
    set LogFilename(value) { this.native.LogFilename = value; }
    // float         MouseDoubleClickTime;     // = 0.30f              // Time for a double-click, in seconds.
    get MouseDoubleClickTime() { return this.native.MouseDoubleClickTime; }
    set MouseDoubleClickTime(value) { this.native.MouseDoubleClickTime = value; }
    // float         MouseDoubleClickMaxDist;  // = 6.0f               // Distance threshold to stay in to validate a double-click, in pixels.
    get MouseDoubleClickMaxDist() { return this.native.MouseDoubleClickMaxDist; }
    set MouseDoubleClickMaxDist(value) { this.native.MouseDoubleClickMaxDist = value; }
    // float         MouseDragThreshold;       // = 6.0f               // Distance threshold before considering we are dragging
    get MouseDragThreshold() { return this.native.MouseDragThreshold; }
    set MouseDragThreshold(value) { this.native.MouseDragThreshold = value; }
    // float         KeyRepeatDelay;           // = 0.250f             // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).
    get KeyRepeatDelay() { return this.native.KeyRepeatDelay; }
    set KeyRepeatDelay(value) { this.native.KeyRepeatDelay = value; }
    // float         KeyRepeatRate;            // = 0.050f             // When holding a key/button, rate at which it repeats, in seconds.
    get KeyRepeatRate() { return this.native.KeyRepeatRate; }
    set KeyRepeatRate(value) { this.native.KeyRepeatRate = value; }
    // void*         UserData;                 // = NULL               // Store your own data for retrieval by callbacks.
    get UserData() { return this.native.UserData; }
    set UserData(value) { this.native.UserData = value; }
    // ImFontAtlas*  Fonts;                    // <auto>               // Load and assemble one or more fonts into a single tightly packed texture. Output to Fonts array.
    get Fonts() { return new ImFontAtlas(this.native.Fonts); }
    // float         FontGlobalScale;          // = 1.0f               // Global scale all fonts
    get FontGlobalScale() { return this.native.FontGlobalScale; }
    set FontGlobalScale(value) { this.native.FontGlobalScale = value; }
    // bool          FontAllowUserScaling;     // = false              // Allow user scaling text of individual window with CTRL+Wheel.
    get FontAllowUserScaling() { return this.native.FontAllowUserScaling; }
    set FontAllowUserScaling(value) { this.native.FontAllowUserScaling = value; }
    // ImFont*       FontDefault;              // = NULL               // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].
    get FontDefault() {
        const font = this.native.FontDefault;
        return (font === null) ? null : new ImFont(font);
    }
    set FontDefault(value) {
        this.native.FontDefault = value && value.native;
    }
    // ImVec2        DisplayFramebufferScale;  // = (1.0f,1.0f)        // For retina display or other situations where window coordinates are different from framebuffer coordinates. User storage only, presently not used by ImGui.
    get DisplayFramebufferScale() { return this.native.DisplayFramebufferScale; }
    // Miscellaneous configuration options
    // bool          OptMacOSXBehaviors;       // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl
    get ConfigMacOSXBehaviors() { return this.native.ConfigMacOSXBehaviors; }
    set ConfigMacOSXBehaviors(value) { this.native.ConfigMacOSXBehaviors = value; }
    // bool          ConfigInputTextCursorBlink;   // = true               // Enable blinking cursor, for users who consider it annoying.
    get ConfigInputTextCursorBlink() { return this.native.ConfigInputTextCursorBlink; }
    set ConfigInputTextCursorBlink(value) { this.native.ConfigInputTextCursorBlink = value; }
    // bool        ConfigDragClickToInputText;     // = false          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.
    get ConfigDragClickToInputText() { return this.native.ConfigDragClickToInputText; }
    set ConfigDragClickToInputText(value) { this.native.ConfigDragClickToInputText = value; }
    // bool          ConfigWindowsResizeFromEdges; // = false          // [BETA] Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be the ImGuiWindowFlags_ResizeFromAnySide flag)
    get ConfigWindowsResizeFromEdges() { return this.native.ConfigWindowsResizeFromEdges; }
    set ConfigWindowsResizeFromEdges(value) { this.native.ConfigWindowsResizeFromEdges = value; }
    // bool        ConfigWindowsMoveFromTitleBarOnly;// = false        // [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected.
    get ConfigWindowsMoveFromTitleBarOnly() { return this.native.ConfigWindowsMoveFromTitleBarOnly; }
    set ConfigWindowsMoveFromTitleBarOnly(value) { this.native.ConfigWindowsMoveFromTitleBarOnly = value; }
    // float       ConfigMemoryCompactTimer;       // = 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.
    get ConfigMemoryCompactTimer() { return this.native.ConfigMemoryCompactTimer; }
    set ConfigMemoryCompactTimer(value) { this.native.ConfigMemoryCompactTimer = value; }
    //------------------------------------------------------------------
    // Settings (User Functions)
    //------------------------------------------------------------------
    // Optional: Platform/Renderer back-end name (informational only! will be displayed in About Window) + User data for back-end/wrappers to store their own stuff.
    // const char* BackendPlatformName;            // = NULL
    get BackendPlatformName() { return this.native.BackendPlatformName; }
    set BackendPlatformName(value) { this.native.BackendPlatformName = value; }
    // const char* BackendRendererName;            // = NULL
    get BackendRendererName() { return this.native.BackendRendererName; }
    set BackendRendererName(value) { this.native.BackendRendererName = value; }
    // void*       BackendPlatformUserData;        // = NULL
    get BackendPlatformUserData() { return this.native.BackendPlatformUserData; }
    set BackendPlatformUserData(value) { this.native.BackendPlatformUserData = value; }
    // void*       BackendRendererUserData;        // = NULL
    get BackendRendererUserData() { return this.native.BackendRendererUserData; }
    set BackendRendererUserData(value) { this.native.BackendRendererUserData = value; }
    // void*       BackendLanguageUserData;        // = NULL
    get BackendLanguageUserData() { return this.native.BackendLanguageUserData; }
    set BackendLanguageUserData(value) { this.native.BackendLanguageUserData = value; }
    // Optional: access OS clipboard
    // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
    // const char* (*GetClipboardTextFn)(void* user_data);
    get GetClipboardTextFn() { return this.native.GetClipboardTextFn; }
    set GetClipboardTextFn(value) { this.native.GetClipboardTextFn = value; }
    // void        (*SetClipboardTextFn)(void* user_data, const char* text);
    get SetClipboardTextFn() { return this.native.SetClipboardTextFn; }
    set SetClipboardTextFn(value) { this.native.SetClipboardTextFn = value; }
    // void*       ClipboardUserData;
    get ClipboardUserData() { return this.native.ClipboardUserData; }
    set ClipboardUserData(value) { this.native.ClipboardUserData = value; }
    // Optional: override memory allocations. MemFreeFn() may be called with a NULL pointer.
    // (default to posix malloc/free)
    // void*       (*MemAllocFn)(size_t sz);
    // void        (*MemFreeFn)(void* ptr);
    // Optional: notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME in Windows)
    // (default to use native imm32 api on Windows)
    // void        (*ImeSetInputScreenPosFn)(int x, int y);
    // void*       ImeWindowHandle;            // (Windows) Set this to your HWND to get automatic IME cursor positioning.
    //------------------------------------------------------------------
    // Input - Fill before calling NewFrame()
    //------------------------------------------------------------------
    // ImVec2      MousePos;                   // Mouse position, in pixels. Set to ImVec2(-FLT_MAX,-FLT_MAX) if mouse is unavailable (on another screen, etc.)
    get MousePos() { return this.native.MousePos; }
    // float       MouseWheel;                 // Mouse wheel: 1 unit scrolls about 5 lines text.
    get MouseWheel() { return this.native.MouseWheel; }
    set MouseWheel(value) { this.native.MouseWheel = value; }
    // float       MouseWheelH;                    // Mouse wheel (Horizontal). Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends.
    get MouseWheelH() { return this.native.MouseWheelH; }
    set MouseWheelH(value) { this.native.MouseWheelH = value; }
    // bool        MouseDrawCursor;            // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor).
    get MouseDrawCursor() { return this.native.MouseDrawCursor; }
    set MouseDrawCursor(value) { this.native.MouseDrawCursor = value; }
    // bool        KeyCtrl;                    // Keyboard modifier pressed: Control
    get KeyCtrl() { return this.native.KeyCtrl; }
    set KeyCtrl(value) { this.native.KeyCtrl = value; }
    // bool        KeyShift;                   // Keyboard modifier pressed: Shift
    get KeyShift() { return this.native.KeyShift; }
    set KeyShift(value) { this.native.KeyShift = value; }
    // bool        KeyAlt;                     // Keyboard modifier pressed: Alt
    get KeyAlt() { return this.native.KeyAlt; }
    set KeyAlt(value) { this.native.KeyAlt = value; }
    // bool        KeySuper;                   // Keyboard modifier pressed: Cmd/Super/Windows
    get KeySuper() { return this.native.KeySuper; }
    set KeySuper(value) { this.native.KeySuper = value; }
    // Functions
    // IMGUI_API void AddInputCharacter(ImWchar c);                        // Add new character into InputCharacters[]
    AddInputCharacter(c) { this.native.AddInputCharacter(c); }
    // IMGUI_API void  AddInputCharacterUTF16(ImWchar16 c);        // Queue new character input from an UTF-16 character, it can be a surrogate
    AddInputCharacterUTF16(c) { this.native.AddInputCharacterUTF16(c); }
    // IMGUI_API void AddInputCharactersUTF8(const char* utf8_chars);      // Add new characters into InputCharacters[] from an UTF-8 string
    AddInputCharactersUTF8(utf8_chars) { this.native.AddInputCharactersUTF8(utf8_chars); }
    // inline void    ClearInputCharacters() { InputCharacters[0] = 0; }   // Clear the text input buffer manually
    ClearInputCharacters() { this.native.ClearInputCharacters(); }
    //------------------------------------------------------------------
    // Output - Retrieve after calling NewFrame()
    //------------------------------------------------------------------
    // bool        WantCaptureMouse;           // When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application. This is set by ImGui when it wants to use your mouse (e.g. unclicked mouse is hovering a window, or a widget is active).
    get WantCaptureMouse() { return this.native.WantCaptureMouse; }
    set WantCaptureMouse(value) { this.native.WantCaptureMouse = value; }
    // bool        WantCaptureKeyboard;        // When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application. This is set by ImGui when it wants to use your keyboard inputs.
    get WantCaptureKeyboard() { return this.native.WantCaptureKeyboard; }
    set WantCaptureKeyboard(value) { this.native.WantCaptureKeyboard = value; }
    // bool        WantTextInput;              // Mobile/console: when io.WantTextInput is true, you may display an on-screen keyboard. This is set by ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).
    get WantTextInput() { return this.native.WantTextInput; }
    set WantTextInput(value) { this.native.WantTextInput = value; }
    // bool        WantSetMousePos;              // [BETA-NAV] MousePos has been altered, back-end should reposition mouse on next frame. Set only when 'NavMovesMouse=true'.
    get WantSetMousePos() { return this.native.WantSetMousePos; }
    set WantSetMousePos(value) { this.native.WantSetMousePos = value; }
    // bool        WantSaveIniSettings;        // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. IMPORTANT: You need to clear io.WantSaveIniSettings yourself.
    get WantSaveIniSettings() { return this.native.WantSaveIniSettings; }
    set WantSaveIniSettings(value) { this.native.WantSaveIniSettings = value; }
    // bool        NavActive;                  // Directional navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.
    get NavActive() { return this.native.NavActive; }
    set NavActive(value) { this.native.NavActive = value; }
    // bool        NavVisible;                 // Directional navigation is visible and allowed (will handle ImGuiKey_NavXXX events).
    get NavVisible() { return this.native.NavVisible; }
    set NavVisible(value) { this.native.NavVisible = value; }
    // float       Framerate;                  // Application framerate estimation, in frame per second. Solely for convenience. Rolling average estimation based on IO.DeltaTime over 120 frames
    get Framerate() { return this.native.Framerate; }
    // int         MetricsRenderVertices;      // Vertices output during last call to Render()
    get MetricsRenderVertices() { return this.native.MetricsRenderVertices; }
    // int         MetricsRenderIndices;       // Indices output during last call to Render() = number of triangles * 3
    get MetricsRenderIndices() { return this.native.MetricsRenderIndices; }
    // int         MetricsRenderWindows;       // Number of visible windows
    get MetricsRenderWindows() { return this.native.MetricsRenderWindows; }
    // int         MetricsActiveWindows;       // Number of visible root windows (exclude child windows)
    get MetricsActiveWindows() { return this.native.MetricsActiveWindows; }
    // int         MetricsActiveAllocations;   // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.
    get MetricsActiveAllocations() { return this.native.MetricsActiveAllocations; }
    // ImVec2      MouseDelta;                 // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.
    get MouseDelta() { return this.native.MouseDelta; }
}
// Context creation and access
// Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between imgui contexts.
// None of those functions is reliant on the current context.
// IMGUI_API ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);
// IMGUI_API void          DestroyContext(ImGuiContext* ctx = NULL);   // NULL = destroy current context
// IMGUI_API ImGuiContext* GetCurrentContext();
// IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);
class ImGuiContext {
    static getTexture(index) {
        if (ImGuiContext.current_ctx === null) {
            throw new Error();
        }
        return ImGuiContext.current_ctx._getTexture(index);
    }
    static setTexture(texture) {
        if (ImGuiContext.current_ctx === null) {
            throw new Error();
        }
        return ImGuiContext.current_ctx._setTexture(texture);
    }
    constructor(native) {
        this.native = native;
    }
    _getTexture(index) {
        return ImGuiContext.textures[index] || null;
    }
    _setTexture(texture) {
        let index = ImGuiContext.textures.indexOf(texture);
        if (index === -1) {
            for (let i = 0; i < ImGuiContext.textures.length; ++i) {
                if (ImGuiContext.textures[i] === null) {
                    ImGuiContext.textures[i] = texture;
                    return i;
                }
            }
            index = ImGuiContext.textures.length;
            ImGuiContext.textures.push(texture);
        }
        return index;
    }
}
ImGuiContext.current_ctx = null;
ImGuiContext.textures = [];
function CreateContext(shared_font_atlas = null) {
    const ctx = new ImGuiContext(bind.CreateContext(shared_font_atlas !== null ? shared_font_atlas.native : null));
    if (ImGuiContext.current_ctx === null) {
        ImGuiContext.current_ctx = ctx;
    }
    return ctx;
}
function DestroyContext(ctx = null) {
    if (ctx === null) {
        ctx = ImGuiContext.current_ctx;
        ImGuiContext.current_ctx = null;
    }
    bind.DestroyContext((ctx === null) ? null : ctx.native);
}
function GetCurrentContext() {
    // const ctx_native: Bind.ImGuiContext | null = bind.GetCurrentContext();
    return ImGuiContext.current_ctx;
}
function SetCurrentContext(ctx) {
    bind.SetCurrentContext((ctx === null) ? null : ctx.native);
    ImGuiContext.current_ctx = ctx;
}
// Main
// IMGUI_API ImGuiIO&      GetIO();                                    // access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)
// IMGUI_API ImGuiStyle&   GetStyle();                                 // access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!
// IMGUI_API void          NewFrame();                                 // start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().
// IMGUI_API void          EndFrame();                                 // ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!
// IMGUI_API void          Render();                                   // ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().
// IMGUI_API ImDrawData*   GetDrawData();                              // valid after Render() and until the next call to NewFrame(). this is what you have to render.
function GetIO() { return new ImGuiIO(bind.GetIO()); }
function GetStyle() { return new ImGuiStyle(bind.GetStyle()); }
function NewFrame() { bind.NewFrame(); }
function EndFrame() { bind.EndFrame(); }
function Render() { bind.Render(); }
function GetDrawData() {
    const draw_data = bind.GetDrawData();
    return (draw_data === null) ? null : new ImDrawData(draw_data);
}
// Demo, Debug, Information
// IMGUI_API void          ShowDemoWindow(bool* p_open = NULL);        // create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
// IMGUI_API void          ShowMetricsWindow(bool* p_open = NULL);     // create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
// IMGUI_API void          ShowAboutWindow(bool* p_open = NULL);       // create About window. display Dear ImGui version, credits and build/system information.
// IMGUI_API void          ShowStyleEditor(ImGuiStyle* ref = NULL);    // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)
// IMGUI_API bool          ShowStyleSelector(const char* label);       // add style selector block (not a window), essentially a combo listing the default styles.
// IMGUI_API void          ShowFontSelector(const char* label);        // add font selector block (not a window), essentially a combo listing the loaded fonts.
// IMGUI_API void          ShowUserGuide();                            // add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).
// IMGUI_API const char*   GetVersion();                               // get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)
function ShowDemoWindow(p_open = null) { bind.ShowDemoWindow(p_open); }
function ShowMetricsWindow(p_open = null) {
    if (p_open === null) {
        bind.ShowMetricsWindow(null);
    }
    else if (Array.isArray(p_open)) {
        bind.ShowMetricsWindow(p_open);
    }
    else {
        const ref_open = [p_open()];
        bind.ShowMetricsWindow(ref_open);
        p_open(ref_open[0]);
    }
}
function ShowAboutWindow(p_open = null) {
    if (p_open === null) {
        bind.ShowAboutWindow(null);
    }
    else if (Array.isArray(p_open)) {
        bind.ShowAboutWindow(p_open);
    }
    else {
        const ref_open = [p_open()];
        bind.ShowAboutWindow(ref_open);
        p_open(ref_open[0]);
    }
}
function ShowStyleEditor(ref = null) {
    if (ref === null) {
        bind.ShowStyleEditor(null);
    }
    else if (ref.internal instanceof bind.ImGuiStyle) {
        bind.ShowStyleEditor(ref.internal);
    }
    else {
        const native = new bind.ImGuiStyle();
        const wrap = new ImGuiStyle(native);
        wrap.Copy(ref);
        bind.ShowStyleEditor(native);
        ref.Copy(wrap);
        native.delete();
    }
}
function ShowStyleSelector(label) { return bind.ShowStyleSelector(label); }
function ShowFontSelector(label) { bind.ShowFontSelector(label); }
function ShowUserGuide() { bind.ShowUserGuide(); }
function GetVersion() { return bind.GetVersion(); }
// Styles
// IMGUI_API void          StyleColorsDark(ImGuiStyle* dst = NULL);    // new, recommended style (default)
// IMGUI_API void          StyleColorsLight(ImGuiStyle* dst = NULL);   // best used with borders and a custom, thicker font
// IMGUI_API void          StyleColorsClassic(ImGuiStyle* dst = NULL); // classic imgui style
function StyleColorsDark(dst = null) {
    if (dst === null) {
        bind.StyleColorsDark(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsDark(dst.internal);
    }
    else {
        const native = new bind.ImGuiStyle();
        const wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsDark(native);
        dst.Copy(wrap);
        native.delete();
    }
}
function StyleColorsLight(dst = null) {
    if (dst === null) {
        bind.StyleColorsLight(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsLight(dst.internal);
    }
    else {
        const native = new bind.ImGuiStyle();
        const wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsLight(native);
        dst.Copy(wrap);
        native.delete();
    }
}
function StyleColorsClassic(dst = null) {
    if (dst === null) {
        bind.StyleColorsClassic(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsClassic(dst.internal);
    }
    else {
        const native = new bind.ImGuiStyle();
        const wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsClassic(native);
        dst.Copy(wrap);
        native.delete();
    }
}
// Windows
// - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
// - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,
//   which clicking will set the boolean to false when clicked.
// - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.
//   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().
// - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
//   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
//   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
//    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
//    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
// - Note that the bottom of window stack always contains a window called "Debug".
// IMGUI_API bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);
// IMGUI_API void          End();
function Begin(name, open = null, flags = 0) {
    if (open === null) {
        return bind.Begin(name, null, flags);
    }
    else if (Array.isArray(open)) {
        return bind.Begin(name, open, flags);
    }
    else {
        const ref_open = [open()];
        const opened = bind.Begin(name, ref_open, flags);
        open(ref_open[0]);
        return opened;
    }
}
function End() { bind.End(); }
// Child Windows
// - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
// - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).
// - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
//   Always call a matching EndChild() for each BeginChild() call, regardless of its return value.
//   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
//    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
//    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
// IMGUI_API bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);
// IMGUI_API bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);
// IMGUI_API void          EndChild();
function BeginChild(id, size = ImVec2.ZERO, border = false, flags = 0) {
    return bind.BeginChild(id, size, border, flags);
}
function EndChild() { bind.EndChild(); }
// Windows Utilities
// - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
// IMGUI_API bool          IsWindowAppearing();
// IMGUI_API bool          IsWindowCollapsed();
// IMGUI_API bool          IsWindowFocused(ImGuiFocusedFlags flags=0); // is current window focused? or its root/child, depending on flags. see flags for options.
// IMGUI_API bool          IsWindowHovered(ImGuiHoveredFlags flags=0); // is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!
// IMGUI_API ImDrawList*   GetWindowDrawList();                        // get draw list associated to the current window, to append your own drawing primitives
// IMGUI_API ImVec2        GetWindowPos();                             // get current window position in screen space (useful if you want to do your own drawing via the DrawList API)
// IMGUI_API ImVec2        GetWindowSize();                            // get current window size
// IMGUI_API float         GetWindowWidth();                           // get current window width (shortcut for GetWindowSize().x)
// IMGUI_API float         GetWindowHeight();                          // get current window height (shortcut for GetWindowSize().y)
function IsWindowAppearing() { return bind.IsWindowAppearing(); }
function IsWindowCollapsed() { return bind.IsWindowCollapsed(); }
function IsWindowFocused(flags = 0) { return bind.IsWindowFocused(flags); }
function IsWindowHovered(flags = 0) { return bind.IsWindowHovered(flags); }
function GetWindowDrawList() { return new ImDrawList(bind.GetWindowDrawList()); }
function GetWindowPos(out = new ImVec2()) { return bind.GetWindowPos(out); }
function GetWindowSize(out = new ImVec2()) { return bind.GetWindowSize(out); }
function GetWindowWidth() { return bind.GetWindowWidth(); }
function GetWindowHeight() { return bind.GetWindowHeight(); }
// Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin).
// IMGUI_API void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0, 0)); // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
// IMGUI_API void          SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0);                  // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
// IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.
// IMGUI_API void          SetNextWindowContentSize(const ImVec2& size);                               // set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()
// IMGUI_API void          SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                 // set next window collapsed state. call before Begin()
// IMGUI_API void          SetNextWindowFocus();                                                       // set next window to be focused / top-most. call before Begin()
// IMGUI_API void          SetNextWindowBgAlpha(float alpha);                                          // set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.
// IMGUI_API void          SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0);                        // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.
// IMGUI_API void          SetWindowSize(const ImVec2& size, ImGuiCond cond = 0);                      // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.
// IMGUI_API void          SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                     // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().
// IMGUI_API void          SetWindowFocus();                                                           // (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().
// IMGUI_API void          SetWindowFontScale(float scale);                                            // set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().
// IMGUI_API void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0);      // set named window position.
// IMGUI_API void          SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0);    // set named window size. set axis to 0.0f to force an auto-fit on this axis.
// IMGUI_API void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0);   // set named window collapsed state
// IMGUI_API void          SetWindowFocus(const char* name);                                           // set named window to be focused / top-most. use NULL to remove focus.
function SetNextWindowPos(pos, cond = 0, pivot = ImVec2.ZERO) { bind.SetNextWindowPos(pos, cond, pivot); }
function SetNextWindowSize(pos, cond = 0) { bind.SetNextWindowSize(pos, cond); }
function SetNextWindowSizeConstraints(size_min, size_max, custom_callback = null, custom_callback_data = null) {
    if (custom_callback) {
        bind.SetNextWindowSizeConstraints(size_min, size_max, (data) => {
            custom_callback(new ImGuiSizeCallbackData(data, custom_callback_data));
        }, null);
    }
    else {
        bind.SetNextWindowSizeConstraints(size_min, size_max, null, null);
    }
}
function SetNextWindowContentSize(size) { bind.SetNextWindowContentSize(size); }
function SetNextWindowCollapsed(collapsed, cond = 0) { bind.SetNextWindowCollapsed(collapsed, cond); }
function SetNextWindowFocus() { bind.SetNextWindowFocus(); }
function SetNextWindowBgAlpha(alpha) { bind.SetNextWindowBgAlpha(alpha); }
function SetWindowPos(name_or_pos, pos_or_cond = 0, cond = 0) {
    if (typeof (name_or_pos) === "string") {
        bind.SetWindowNamePos(name_or_pos, pos_or_cond, cond);
        return;
    }
    else {
        bind.SetWindowPos(name_or_pos, pos_or_cond);
    }
}
function SetWindowSize(name_or_size, size_or_cond = 0, cond = 0) {
    if (typeof (name_or_size) === "string") {
        bind.SetWindowNamePos(name_or_size, size_or_cond, cond);
    }
    else {
        bind.SetWindowSize(name_or_size, size_or_cond);
    }
}
function SetWindowCollapsed(name_or_collapsed, collapsed_or_cond = 0, cond = 0) {
    if (typeof (name_or_collapsed) === "string") {
        bind.SetWindowNameCollapsed(name_or_collapsed, collapsed_or_cond, cond);
    }
    else {
        bind.SetWindowCollapsed(name_or_collapsed, collapsed_or_cond);
    }
}
function SetWindowFocus(name) {
    if (typeof (name) === "string") {
        bind.SetWindowNameFocus(name);
    }
    else {
        bind.SetWindowFocus();
    }
}
function SetWindowFontScale(scale) { bind.SetWindowFontScale(scale); }
// Content region
// - Retrieve available space from a given point. GetContentRegionAvail() is frequently useful.
// - Those functions are bound to be redesigned (they are confusing, incomplete and the Min/Max return values are in local window coordinates which increases confusion)
// IMGUI_API ImVec2        GetContentRegionAvail();                                        // == GetContentRegionMax() - GetCursorPos()
// IMGUI_API ImVec2        GetContentRegionMax();                                          // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates
// IMGUI_API ImVec2        GetWindowContentRegionMin();                                    // content boundaries min (roughly (0,0)-Scroll), in window coordinates
// IMGUI_API ImVec2        GetWindowContentRegionMax();                                    // content boundaries max (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates
// IMGUI_API float         GetWindowContentRegionWidth();                                  //
function GetContentRegionAvail(out = new ImVec2()) { return bind.GetContentRegionAvail(out); }
function GetContentRegionMax(out = new ImVec2()) { return bind.GetContentRegionMax(out); }
function GetWindowContentRegionMin(out = new ImVec2()) { return bind.GetWindowContentRegionMin(out); }
function GetWindowContentRegionMax(out = new ImVec2()) { return bind.GetWindowContentRegionMax(out); }
function GetWindowContentRegionWidth() { return bind.GetWindowContentRegionWidth(); }
// Windows Scrolling
// IMGUI_API float         GetScrollX();                                                   // get scrolling amount [0 .. GetScrollMaxX()]
// IMGUI_API float         GetScrollY();                                                   // get scrolling amount [0 .. GetScrollMaxY()]
// IMGUI_API void          SetScrollX(float scroll_x);                                     // set scrolling amount [0 .. GetScrollMaxX()]
// IMGUI_API void          SetScrollY(float scroll_y);                                     // set scrolling amount [0 .. GetScrollMaxY()]
// IMGUI_API float         GetScrollMaxX();                                                // get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
// IMGUI_API float         GetScrollMaxY();                                                // get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
// IMGUI_API void          SetScrollHereX(float center_x_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
// IMGUI_API void          SetScrollHereY(float center_y_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
// IMGUI_API void          SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
// IMGUI_API void          SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
function GetScrollX() { return bind.GetScrollX(); }
function GetScrollY() { return bind.GetScrollY(); }
function SetScrollX(scroll_x) { bind.SetScrollX(scroll_x); }
function SetScrollY(scroll_y) { bind.SetScrollY(scroll_y); }
function GetScrollMaxX() { return bind.GetScrollMaxX(); }
function GetScrollMaxY() { return bind.GetScrollMaxY(); }
function SetScrollHereX(center_x_ratio = 0.5) { bind.SetScrollHereX(center_x_ratio); }
function SetScrollHereY(center_y_ratio = 0.5) { bind.SetScrollHereY(center_y_ratio); }
function SetScrollFromPosX(pos_x, center_x_ratio = 0.5) { bind.SetScrollFromPosX(pos_x, center_x_ratio); }
function SetScrollFromPosY(pos_y, center_y_ratio = 0.5) { bind.SetScrollFromPosY(pos_y, center_y_ratio); }
// Parameters stacks (shared)
// IMGUI_API void          PushFont(ImFont* font);                                         // use NULL as a shortcut to push default font
// IMGUI_API void          PopFont();
// IMGUI_API void          PushStyleColor(ImGuiCol idx, ImU32 col);                        // modify a style color. always use this if you modify the style after NewFrame().
// IMGUI_API void          PushStyleColor(ImGuiCol idx, const ImVec4& col);
// IMGUI_API void          PopStyleColor(int count = 1);
// IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, float val);                     // modify a style float variable. always use this if you modify the style after NewFrame().
// IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val);             // modify a style ImVec2 variable. always use this if you modify the style after NewFrame().
// IMGUI_API void          PopStyleVar(int count = 1);
// IMGUI_API void          PushAllowKeyboardFocus(bool allow_keyboard_focus);              // allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets
// IMGUI_API void          PopAllowKeyboardFocus();
// IMGUI_API void          PushButtonRepeat(bool repeat);                                  // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.
// IMGUI_API void          PopButtonRepeat();
function PushFont(font) { bind.PushFont(font ? font.native : null); }
function PopFont() { bind.PopFont(); }
function PushStyleColor(idx, col) {
    if (col instanceof ImColor) {
        bind.PushStyleColor(idx, col.Value);
    }
    else {
        bind.PushStyleColor(idx, col);
    }
}
function PopStyleColor(count = 1) { bind.PopStyleColor(count); }
function PushStyleVar(idx, val) { bind.PushStyleVar(idx, val); }
function PopStyleVar(count = 1) { bind.PopStyleVar(count); }
function PushAllowKeyboardFocus(allow_keyboard_focus) { bind.PushAllowKeyboardFocus(allow_keyboard_focus); }
function PopAllowKeyboardFocus() { bind.PopAllowKeyboardFocus(); }
function PushButtonRepeat(repeat) { bind.PushButtonRepeat(repeat); }
function PopButtonRepeat() { bind.PopButtonRepeat(); }
// Parameters stacks (current window)
// IMGUI_API void          PushItemWidth(float item_width);                                // push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side). 0.0f = default to ~2/3 of windows width,
// IMGUI_API void          PopItemWidth();
// IMGUI_API void          SetNextItemWidth(float item_width);                             // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)
// IMGUI_API float         CalcItemWidth();                                                // width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.
// IMGUI_API void          PushTextWrapPos(float wrap_local_pos_x = 0.0f);                 // push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
// IMGUI_API void          PopTextWrapPos();
function PushItemWidth(item_width) { bind.PushItemWidth(item_width); }
function PopItemWidth() { bind.PopItemWidth(); }
function SetNextItemWidth(item_width) { bind.SetNextItemWidth(item_width); } // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side)
function CalcItemWidth() { return bind.CalcItemWidth(); }
function PushTextWrapPos(wrap_pos_x = 0.0) { bind.PushTextWrapPos(wrap_pos_x); }
function PopTextWrapPos() { bind.PopTextWrapPos(); }
// Style read access
// IMGUI_API ImFont*       GetFont();                                                      // get current font
// IMGUI_API float         GetFontSize();                                                  // get current font size (= height in pixels) of current font with current scale applied
// IMGUI_API ImVec2        GetFontTexUvWhitePixel();                                       // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API
// IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);              // retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API ImU32         GetColorU32(const ImVec4& col);                                 // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API ImU32         GetColorU32(ImU32 col);                                         // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API const ImVec4& GetStyleColorVec4(ImGuiCol idx);                                // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.
function GetFont() { return new ImFont(bind.GetFont()); }
function GetFontSize() { return bind.GetFontSize(); }
function GetFontTexUvWhitePixel(out = new ImVec2()) { return bind.GetFontTexUvWhitePixel(out); }
function GetColorU32(...args) {
    if (args.length === 1) {
        if (typeof (args[0]) === "number") {
            if (0 <= args[0] && args[0] < ImGuiCol.COUNT) {
                const idx = args[0];
                return bind.GetColorU32_A(idx, 1.0);
            }
            else {
                const col = args[0];
                return bind.GetColorU32_C(col);
            }
        }
        else {
            const col = args[0];
            return bind.GetColorU32_B(col);
        }
    }
    else {
        const idx = args[0];
        const alpha_mul = args[1];
        return bind.GetColorU32_A(idx, alpha_mul);
    }
}
function GetStyleColorVec4(idx) { return bind.GetStyleColorVec4(idx); }
// Cursor / Layout
// - By "cursor" we mean the current output position.
// - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.
// - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.
// - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:
//    Window-local coordinates:   SameLine(), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), GetContentRegionMax(), GetWindowContentRegion*(), PushTextWrapPos()
//    Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions.
// IMGUI_API void          Separator();                                                    // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
// IMGUI_API void          SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f);  // call between widgets or groups to layout them horizontally. X position given in window coordinates.
// IMGUI_API void          NewLine();                                                      // undo a SameLine() or force a new line when in an horizontal-layout context.
// IMGUI_API void          Spacing();                                                      // add vertical spacing.
// IMGUI_API void          Dummy(const ImVec2& size);                                      // add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
// IMGUI_API void          Indent(float indent_w = 0.0f);                                  // move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0
// IMGUI_API void          Unindent(float indent_w = 0.0f);                                // move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0
// IMGUI_API void          BeginGroup();                                                   // lock horizontal starting position
// IMGUI_API void          EndGroup();                                                     // unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
// IMGUI_API ImVec2        GetCursorPos();                                                 // cursor position in window coordinates (relative to window position)
// IMGUI_API float         GetCursorPosX();                                                //   (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion* etc.
// IMGUI_API float         GetCursorPosY();                                                //    other functions such as GetCursorScreenPos or everything in ImDrawList::
// IMGUI_API void          SetCursorPos(const ImVec2& local_pos);                          //    are using the main, absolute coordinate system.
// IMGUI_API void          SetCursorPosX(float local_x);                                   //    GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)
// IMGUI_API void          SetCursorPosY(float local_y);                                   //
// IMGUI_API ImVec2        GetCursorStartPos();                                            // initial cursor position in window coordinates
// IMGUI_API ImVec2        GetCursorScreenPos();                                           // cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
// IMGUI_API void          SetCursorScreenPos(const ImVec2& pos);                          // cursor position in absolute screen coordinates [0..io.DisplaySize]
// IMGUI_API void          AlignTextToFramePadding();                                      // vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
// IMGUI_API float         GetTextLineHeight();                                            // ~ FontSize
// IMGUI_API float         GetTextLineHeightWithSpacing();                                 // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
// IMGUI_API float         GetFrameHeight();                                               // ~ FontSize + style.FramePadding.y * 2
// IMGUI_API float         GetFrameHeightWithSpacing();                                    // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
function Separator() { bind.Separator(); }
function SameLine(pos_x = 0.0, spacing_w = -1.0) { bind.SameLine(pos_x, spacing_w); }
function NewLine() { bind.NewLine(); }
function Spacing() { bind.Spacing(); }
function Dummy(size) { bind.Dummy(size); }
function Indent(indent_w = 0.0) { bind.Indent(indent_w); }
function Unindent(indent_w = 0.0) { bind.Unindent(indent_w); }
function BeginGroup() { bind.BeginGroup(); }
function EndGroup() { bind.EndGroup(); }
function GetCursorPos(out = new ImVec2()) { return bind.GetCursorPos(out); }
function GetCursorPosX() { return bind.GetCursorPosX(); }
function GetCursorPosY() { return bind.GetCursorPosY(); }
function SetCursorPos(local_pos) { bind.SetCursorPos(local_pos); }
function SetCursorPosX(x) { bind.SetCursorPosX(x); }
function SetCursorPosY(y) { bind.SetCursorPosY(y); }
function GetCursorStartPos(out = new ImVec2()) { return bind.GetCursorStartPos(out); }
function GetCursorScreenPos(out = new ImVec2()) { return bind.GetCursorScreenPos(out); }
function SetCursorScreenPos(pos) { bind.SetCursorScreenPos(pos); }
function AlignTextToFramePadding() { bind.AlignTextToFramePadding(); }
function GetTextLineHeight() { return bind.GetTextLineHeight(); }
function GetTextLineHeightWithSpacing() { return bind.GetTextLineHeightWithSpacing(); }
function GetFrameHeight() { return bind.GetFrameHeight(); }
function GetFrameHeightWithSpacing() { return bind.GetFrameHeightWithSpacing(); }
// ID stack/scopes
// - Read the FAQ for more details about how ID are handled in dear imgui. If you are creating widgets in a loop you most
//   likely want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.
// - The resulting ID are hashes of the entire stack.
// - You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.
// - In this header file we use the "label"/"name" terminology to denote a string that will be displayed and used as an ID,
//   whereas "str_id" denote a string that is only used as an ID and not normally displayed.
// IMGUI_API void          PushID(const char* str_id);                                     // push string into the ID stack (will hash string).
// IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);       // push string into the ID stack (will hash string).
// IMGUI_API void          PushID(const void* ptr_id);                                     // push pointer into the ID stack (will hash pointer).
// IMGUI_API void          PushID(int int_id);                                             // push integer into the ID stack (will hash integer).
// IMGUI_API void          PopID();                                                        // pop from the ID stack.
// IMGUI_API ImGuiID       GetID(const char* str_id);                                      // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
// IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);
// IMGUI_API ImGuiID       GetID(const void* ptr_id);
function PushID(id) { bind.PushID(id); }
function PopID() { bind.PopID(); }
function GetID(id) { return bind.GetID(id); }
// Widgets: Text
// IMGUI_API void          TextUnformatted(const char* text, const char* text_end = NULL); // raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.
// IMGUI_API void          Text(const char* fmt, ...)                                      IM_FMTARGS(1); // formatted text
// IMGUI_API void          TextV(const char* fmt, va_list args)                            IM_FMTLIST(1);
// IMGUI_API void          TextColored(const ImVec4& col, const char* fmt, ...)            IM_FMTARGS(2); // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();
// IMGUI_API void          TextColoredV(const ImVec4& col, const char* fmt, va_list args)  IM_FMTLIST(2);
// IMGUI_API void          TextDisabled(const char* fmt, ...)                              IM_FMTARGS(1); // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();
// IMGUI_API void          TextDisabledV(const char* fmt, va_list args)                    IM_FMTLIST(1);
// IMGUI_API void          TextWrapped(const char* fmt, ...)                               IM_FMTARGS(1); // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().
// IMGUI_API void          TextWrappedV(const char* fmt, va_list args)                     IM_FMTLIST(1);
// IMGUI_API void          LabelText(const char* label, const char* fmt, ...)              IM_FMTARGS(2); // display text+label aligned the same way as value+label widgets
// IMGUI_API void          LabelTextV(const char* label, const char* fmt, va_list args)    IM_FMTLIST(2);
// IMGUI_API void          BulletText(const char* fmt, ...)                                IM_FMTARGS(1); // shortcut for Bullet()+Text()
// IMGUI_API void          BulletTextV(const char* fmt, va_list args)                      IM_FMTLIST(1);
function TextUnformatted(text, text_end = null) { bind.TextUnformatted(text_end !== null ? text.substring(0, text_end) : text); }
function Text(text) { bind.Text(text); }
function TextColored(col, text) { bind.TextColored((col instanceof ImColor) ? col.Value : col, text); }
function TextDisabled(text) { bind.TextDisabled(text); }
function TextWrapped(text) { bind.TextWrapped(text); }
function LabelText(label, text) { bind.LabelText(label, text); }
function BulletText(text) { bind.BulletText(text); }
// Widgets: Main
// - Most widgets return true when the value has been changed or when pressed/selected
// - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state.
// IMGUI_API bool          Button(const char* label, const ImVec2& size = ImVec2(0, 0));   // button
// IMGUI_API bool          SmallButton(const char* label);                                 // button with FramePadding=(0,0) to easily embed within text
// IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0); // flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
// IMGUI_API bool          ArrowButton(const char* str_id, ImGuiDir dir);                  // square button with an arrow shape
// IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& tint_col = ImVec4(1,1,1,1), const ImVec4& border_col = ImVec4(0,0,0,0));
// IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0),  const ImVec2& uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1));    // <0 frame_padding uses default frame padding settings. 0 for no padding
// IMGUI_API bool          Checkbox(const char* label, bool* v);
// IMGUI_API bool          CheckboxFlags(const char* label, int* flags, int flags_value);
// IMGUI_API bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value);
// IMGUI_API bool          RadioButton(const char* label, bool active);                    // use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
// IMGUI_API bool          RadioButton(const char* label, int* v, int v_button);           // shortcut to handle the above pattern when value is an integer
// IMGUI_API void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN, 0), const char* overlay = NULL);
// IMGUI_API void          Bullet();                                                       // draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses
function Button(label, size = ImVec2.ZERO) { return bind.Button(label, size); }
function SmallButton(label) { return bind.SmallButton(label); }
function ArrowButton(str_id, dir) { return bind.ArrowButton(str_id, dir); }
function InvisibleButton(str_id, size, flags = 0) { return bind.InvisibleButton(str_id, size, flags); }
function Image(user_texture_id, size, uv0 = ImVec2.ZERO, uv1 = ImVec2.UNIT, tint_col = ImVec4.WHITE, border_col = ImVec4.ZERO) {
    bind.Image(ImGuiContext.setTexture(user_texture_id), size, uv0, uv1, tint_col, border_col);
}
function ImageButton(user_texture_id, size = new ImVec2(Number.MIN_SAFE_INTEGER, 0), uv0 = ImVec2.ZERO, uv1 = ImVec2.UNIT, frame_padding = -1, bg_col = ImVec4.ZERO, tint_col = ImVec4.WHITE) {
    return bind.ImageButton(ImGuiContext.setTexture(user_texture_id), size, uv0, uv1, frame_padding, bg_col, tint_col);
}
function Checkbox(label, v) {
    if (Array.isArray(v)) {
        return bind.Checkbox(label, v);
    }
    else {
        const ref_v = [v()];
        const ret = bind.Checkbox(label, ref_v);
        v(ref_v[0]);
        return ret;
    }
}
function CheckboxFlags(label, flags, flags_value) {
    if (Array.isArray(flags)) {
        return bind.CheckboxFlags(label, flags, flags_value);
    }
    else {
        const ref_flags = [flags()];
        const ret = bind.CheckboxFlags(label, ref_flags, flags_value);
        flags(ref_flags[0]);
        return ret;
    }
}
function RadioButton(label, ...args) {
    if (typeof (args[0]) === "boolean") {
        const active = args[0];
        return bind.RadioButton_A(label, active);
    }
    else {
        const v = args[0];
        const v_button = args[1];
        const _v = Array.isArray(v) ? v : [v()];
        const ret = bind.RadioButton_B(label, _v, v_button);
        if (!Array.isArray(v)) {
            v(_v[0]);
        }
        return ret;
    }
}
function ProgressBar(fraction, size_arg = new ImVec2(-1, 0), overlay = null) {
    bind.ProgressBar(fraction, size_arg, overlay);
}
function Bullet() { bind.Bullet(); }
// Widgets: Combo Box
// - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
// - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose.
// IMGUI_API bool          BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0);
// IMGUI_API void          EndCombo(); // only call EndCombo() if BeginCombo() returns true!
// IMGUI_API bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);
// IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1);      // Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"
// IMGUI_API bool          Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items = -1);
function BeginCombo(label, preview_value = null, flags = 0) { return bind.BeginCombo(label, preview_value, flags); }
function EndCombo() { bind.EndCombo(); }
function Combo(label, current_item, ...args) {
    let ret = false;
    const _current_item = Array.isArray(current_item) ? current_item : [current_item()];
    if (Array.isArray(args[0])) {
        const items = args[0];
        const items_count = typeof (args[1]) === "number" ? args[1] : items.length;
        const popup_max_height_in_items = typeof (args[2]) === "number" ? args[2] : -1;
        const items_getter = (data, idx, out_text) => { out_text[0] = items[idx]; return true; };
        ret = bind.Combo(label, _current_item, items_getter, null, items_count, popup_max_height_in_items);
    }
    else if (typeof (args[0]) === "string") {
        const items_separated_by_zeros = args[0];
        const popup_max_height_in_items = typeof (args[1]) === "number" ? args[1] : -1;
        const items = items_separated_by_zeros.replace(/^\0+|\0+$/g, "").split("\0");
        const items_count = items.length;
        const items_getter = (data, idx, out_text) => { out_text[0] = items[idx]; return true; };
        ret = bind.Combo(label, _current_item, items_getter, null, items_count, popup_max_height_in_items);
    }
    else {
        const items_getter = args[0];
        const data = args[1];
        const items_count = args[2];
        const popup_max_height_in_items = typeof (args[3]) === "number" ? args[3] : -1;
        ret = bind.Combo(label, _current_item, items_getter, data, items_count, popup_max_height_in_items);
    }
    if (!Array.isArray(current_item)) {
        current_item(_current_item[0]);
    }
    return ret;
}
// Widgets: Drag Sliders
// - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).
// - Use v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits.
// - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.
// - We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
// - Legacy: Pre-1.78 there are DragXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
// IMGUI_API bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);     // If v_min >= v_max we have no bound
// IMGUI_API bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);  // If v_min >= v_max we have no bound
// IMGUI_API bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0);
function DragFloat(label, v, v_speed = 1.0, v_min = 0.0, v_max = 0.0, display_format = "%.3f", flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.DragFloat(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Scalar(_v, v);
    return ret;
}
function DragFloat2(label, v, v_speed = 1.0, v_min = 0.0, v_max = 0.0, display_format = "%.3f", flags = 0) {
    const _v = import_Vector2(v);
    const ret = bind.DragFloat2(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector2(_v, v);
    return ret;
}
function DragFloat3(label, v, v_speed = 1.0, v_min = 0.0, v_max = 0.0, display_format = "%.3f", flags = 0) {
    const _v = import_Vector3(v);
    const ret = bind.DragFloat3(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector3(_v, v);
    return ret;
}
function DragFloat4(label, v, v_speed = 1.0, v_min = 0.0, v_max = 0.0, display_format = "%.3f", flags = 0) {
    const _v = import_Vector4(v);
    const ret = bind.DragFloat4(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector4(_v, v);
    return ret;
}
function DragFloatRange2(label, v_current_min, v_current_max, v_speed = 1.0, v_min = 0.0, v_max = 0.0, display_format = "%.3f", display_format_max = null, flags = 0) {
    const _v_current_min = import_Scalar(v_current_min);
    const _v_current_max = import_Scalar(v_current_max);
    const ret = bind.DragFloatRange2(label, _v_current_min, _v_current_max, v_speed, v_min, v_max, display_format, display_format_max, flags);
    export_Scalar(_v_current_min, v_current_min);
    export_Scalar(_v_current_max, v_current_max);
    return ret;
}
function DragInt(label, v, v_speed = 1.0, v_min = 0, v_max = 0, format = "%d", flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.DragInt(label, _v, v_speed, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function DragInt2(label, v, v_speed = 1.0, v_min = 0, v_max = 0, format = "%d", flags = 0) {
    const _v = import_Vector2(v);
    const ret = bind.DragInt2(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function DragInt3(label, v, v_speed = 1.0, v_min = 0, v_max = 0, format = "%d", flags = 0) {
    const _v = import_Vector3(v);
    const ret = bind.DragInt3(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function DragInt4(label, v, v_speed = 1.0, v_min = 0, v_max = 0, format = "%d", flags = 0) {
    const _v = import_Vector4(v);
    const ret = bind.DragInt4(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function DragIntRange2(label, v_current_min, v_current_max, v_speed = 1.0, v_min = 0, v_max = 0, format = "%d", format_max = null, flags = 0) {
    const _v_current_min = import_Scalar(v_current_min);
    const _v_current_max = import_Scalar(v_current_max);
    const ret = bind.DragIntRange2(label, _v_current_min, _v_current_max, v_speed, v_min, v_max, format, format_max, flags);
    export_Scalar(_v_current_min, v_current_min);
    export_Scalar(_v_current_max, v_current_max);
    return ret;
}
function DragScalar(label, v, v_speed, v_min = null, v_max = null, format = null, flags = 0) {
    if (v instanceof Int8Array) {
        return bind.DragScalar(label, ImGuiDataType.S8, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.DragScalar(label, ImGuiDataType.U8, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.DragScalar(label, ImGuiDataType.S16, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.DragScalar(label, ImGuiDataType.U16, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.DragScalar(label, ImGuiDataType.S32, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.DragScalar(label, ImGuiDataType.U32, v, v_speed, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.DragScalar(label, ImGuiDataType.S64, v, v_speed, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.DragScalar(label, ImGuiDataType.U64, v, v_speed, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.DragScalar(label, ImGuiDataType.Float, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.DragScalar(label, ImGuiDataType.Double, v, v_speed, v_min, v_max, format, flags);
    }
    throw new Error();
}
// Widgets: Regular Sliders
// - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Legacy: Pre-1.78 there are SliderXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
// IMGUI_API bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);     // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.
// IMGUI_API bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = "%.0f deg", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
function SliderFloat(label, v, v_min, v_max, format = "%.3f", flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.SliderFloat(label, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function SliderFloat2(label, v, v_min, v_max, format = "%.3f", flags = 0) {
    const _v = import_Vector2(v);
    const ret = bind.SliderFloat2(label, _v, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function SliderFloat3(label, v, v_min, v_max, format = "%.3f", flags = 0) {
    const _v = import_Vector3(v);
    const ret = bind.SliderFloat3(label, _v, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function SliderFloat4(label, v, v_min, v_max, format = "%.3f", flags = 0) {
    const _v = import_Vector4(v);
    const ret = bind.SliderFloat4(label, _v, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function SliderAngle(label, v_rad, v_degrees_min = -360.0, v_degrees_max = +360.0, format = "%.0f deg", flags = 0) {
    const _v_rad = import_Scalar(v_rad);
    const ret = bind.SliderAngle(label, _v_rad, v_degrees_min, v_degrees_max, format, flags);
    export_Scalar(_v_rad, v_rad);
    return ret;
}
function SliderAngle3(label, v_rad, v_degrees_min = -360.0, v_degrees_max = +360.0, format = "%.0f deg", flags = 0) {
    const _v_rad = import_Vector3(v_rad);
    _v_rad[0] = Math.floor(_v_rad[0] * 180 / Math.PI);
    _v_rad[1] = Math.floor(_v_rad[1] * 180 / Math.PI);
    _v_rad[2] = Math.floor(_v_rad[2] * 180 / Math.PI);
    const ret = bind.SliderInt3(label, _v_rad, v_degrees_min, v_degrees_max, format, flags);
    _v_rad[0] = _v_rad[0] * Math.PI / 180;
    _v_rad[1] = _v_rad[1] * Math.PI / 180;
    _v_rad[2] = _v_rad[2] * Math.PI / 180;
    export_Vector3(_v_rad, v_rad);
    return ret;
}
function SliderInt(label, v, v_min, v_max, format = "%d", flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.SliderInt(label, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function SliderInt2(label, v, v_min, v_max, format = "%d", flags = 0) {
    const _v = import_Vector2(v);
    const ret = bind.SliderInt2(label, _v, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function SliderInt3(label, v, v_min, v_max, format = "%d", flags = 0) {
    const _v = import_Vector3(v);
    const ret = bind.SliderInt3(label, _v, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function SliderInt4(label, v, v_min, v_max, format = "%d", flags = 0) {
    const _v = import_Vector4(v);
    const ret = bind.SliderInt4(label, _v, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function SliderScalar(label, v, v_min, v_max, format = null, flags = 0) {
    if (v instanceof Int8Array) {
        return bind.SliderScalar(label, ImGuiDataType.S8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.SliderScalar(label, ImGuiDataType.U8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.SliderScalar(label, ImGuiDataType.S16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.SliderScalar(label, ImGuiDataType.U16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.SliderScalar(label, ImGuiDataType.S32, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.SliderScalar(label, ImGuiDataType.U32, v, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.SliderScalar(label, ImGuiDataType.S64, v, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.SliderScalar(label, ImGuiDataType.U64, v, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.SliderScalar(label, ImGuiDataType.Float, v, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.SliderScalar(label, ImGuiDataType.Double, v, v_min, v_max, format, flags);
    }
    throw new Error();
}
function VSliderFloat(label, size, v, v_min, v_max, format = "%.3f", flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.VSliderFloat(label, size, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function VSliderInt(label, size, v, v_min, v_max, format = "%d", flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.VSliderInt(label, size, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function VSliderScalar(label, size, data_type, v, v_min, v_max, format = null, flags = 0) {
    if (v instanceof Int8Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S32, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U32, v, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.S64, v, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.U64, v, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.Float, v, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.Double, v, v_min, v_max, format, flags);
    }
    throw new Error();
}
// Widgets: Input with Keyboard
// - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.
// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
// IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat2(const char* label, float v[2], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat3(const char* label, float v[3], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat4(const char* label, float v[4], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
function InputText(label, buf, buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize, flags = 0, callback = null, user_data = null) {
    let ret = false;
    let text;
    const _callback = callback && ((data) => callback(new ImGuiInputTextCallbackData(data, user_data))) || null;
    if (Array.isArray(buf)) {
        return bind.InputText(label, buf, buf_size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        const ref_buf = [buf.buffer];
        const _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputText(label, ref_buf, _buf_size, flags, _callback, null);
        buf.buffer = ref_buf[0];
    }
    else {
        const ref_buf = [buf()];
        text = buf();
        ret = bind.InputText(label, ref_buf, buf_size + 1, flags, _callback, null);
        buf(ref_buf[0]);
    }
    return ret;
}
function InputTextMultiline(label, buf, buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize, size = ImVec2.ZERO, flags = 0, callback = null, user_data = null) {
    let ret = false;
    let text;
    const _callback = callback && ((data) => callback(new ImGuiInputTextCallbackData(data, user_data))) || null;
    if (Array.isArray(buf)) {
        return bind.InputTextMultiline(label, buf, buf_size, size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        const ref_buf = [buf.buffer];
        const _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputTextMultiline(label, ref_buf, _buf_size, size, flags, _callback, null);
        buf.buffer = ref_buf[0];
    }
    else {
        const ref_buf = [buf()];
        text = buf();
        ret = bind.InputTextMultiline(label, ref_buf, buf_size, size, flags, _callback, null);
        buf(ref_buf[0]);
    }
    return ret;
}
function InputTextWithHint(label, hint, buf, buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize, flags = 0, callback = null, user_data = null) {
    let ret = false;
    let text;
    const _callback = callback && ((data) => callback(new ImGuiInputTextCallbackData(data, user_data))) || null;
    if (Array.isArray(buf)) {
        return bind.InputTextWithHint(label, hint, buf, buf_size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        const ref_buf = [buf.buffer];
        const _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputTextWithHint(label, hint, ref_buf, _buf_size, flags, _callback, null);
        buf.buffer = ref_buf[0];
    }
    else {
        const ref_buf = [buf()];
        text = buf();
        ret = bind.InputTextWithHint(label, hint, ref_buf, buf_size, flags, _callback, null);
        buf(ref_buf[0]);
    }
    return ret;
}
function InputFloat(label, v, step = 0.0, step_fast = 0.0, format = "%.3f", flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.InputFloat(label, _v, step, step_fast, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputFloat2(label, v, format = "%.3f", flags = 0) {
    const _v = import_Vector2(v);
    const ret = bind.InputFloat2(label, _v, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function InputFloat3(label, v, format = "%.3f", flags = 0) {
    const _v = import_Vector3(v);
    const ret = bind.InputFloat3(label, _v, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function InputFloat4(label, v, format = "%.3f", flags = 0) {
    const _v = import_Vector4(v);
    const ret = bind.InputFloat4(label, _v, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function InputInt(label, v, step = 1, step_fast = 100, flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.InputInt(label, _v, step, step_fast, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputInt2(label, v, flags = 0) {
    const _v = import_Vector2(v);
    const ret = bind.InputInt2(label, _v, flags);
    export_Vector2(_v, v);
    return ret;
}
function InputInt3(label, v, flags = 0) {
    const _v = import_Vector3(v);
    const ret = bind.InputInt3(label, _v, flags);
    export_Vector3(_v, v);
    return ret;
}
function InputInt4(label, v, flags = 0) {
    const _v = import_Vector4(v);
    const ret = bind.InputInt4(label, _v, flags);
    export_Vector4(_v, v);
    return ret;
}
function InputDouble(label, v, step = 0.0, step_fast = 0.0, format = "%.6f", flags = 0) {
    const _v = import_Scalar(v);
    const ret = bind.InputDouble(label, _v, step, step_fast, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputScalar(label, v, step = null, step_fast = null, format = null, flags = 0) {
    if (v instanceof Int8Array) {
        return bind.InputScalar(label, ImGuiDataType.S8, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.InputScalar(label, ImGuiDataType.U8, v, step, step_fast, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.InputScalar(label, ImGuiDataType.S16, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.InputScalar(label, ImGuiDataType.U16, v, step, step_fast, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.InputScalar(label, ImGuiDataType.S32, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.InputScalar(label, ImGuiDataType.U32, v, step, step_fast, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.InputScalar(label, ImGuiDataType.S64, v, step, step_fast, format, flags); }
    // if (v instanceof Uint64Array) { return bind.InputScalar(label, ImGuiDataType.U64, v, step, step_fast, format, flags); }
    if (v instanceof Float32Array) {
        return bind.InputScalar(label, ImGuiDataType.Float, v, step, step_fast, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.InputScalar(label, ImGuiDataType.Double, v, step, step_fast, format, flags);
    }
    throw new Error();
}
// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)
// - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.
// - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x
// IMGUI_API bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL);
// IMGUI_API bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0, 0)); // display a color square/button, hover for details, return true when pressed.
// IMGUI_API void          SetColorEditOptions(ImGuiColorEditFlags flags);                     // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.
function ColorEdit3(label, col, flags = 0) {
    const _col = import_Color3(col);
    const ret = bind.ColorEdit3(label, _col, flags);
    export_Color3(_col, col);
    return ret;
}
function ColorEdit4(label, col, flags = 0) {
    const _col = import_Color4(col);
    const ret = bind.ColorEdit4(label, _col, flags);
    export_Color4(_col, col);
    return ret;
}
function ColorPicker3(label, col, flags = 0) {
    const _col = import_Color3(col);
    const ret = bind.ColorPicker3(label, _col, flags);
    export_Color3(_col, col);
    return ret;
}
function ColorPicker4(label, col, flags = 0, ref_col = null) {
    const _col = import_Color4(col);
    const _ref_col = ref_col ? import_Color4(ref_col) : null;
    const ret = bind.ColorPicker4(label, _col, flags, _ref_col);
    export_Color4(_col, col);
    if (_ref_col && ref_col) {
        export_Color4(_ref_col, ref_col);
    }
    return ret;
}
function ColorButton(desc_id, col, flags = 0, size = ImVec2.ZERO) {
    return bind.ColorButton(desc_id, col, flags, size);
}
function SetColorEditOptions(flags) {
    bind.SetColorEditOptions(flags);
}
function TreeNode(...args) {
    if (typeof (args[0]) === "string") {
        if (args.length === 1) {
            const label = args[0];
            return bind.TreeNode_A(label);
        }
        else {
            const str_id = args[0];
            const fmt = args[1];
            return bind.TreeNode_B(str_id, fmt);
        }
    }
    else {
        const ptr_id = args[0];
        const fmt = args[1];
        return bind.TreeNode_C(ptr_id, fmt);
    }
}
function TreeNodeEx(...args) {
    if (typeof (args[0]) === "string") {
        if (args.length < 3) {
            const label = args[0];
            const flags = args[1] || 0;
            return bind.TreeNodeEx_A(label, flags);
        }
        else {
            const str_id = args[0];
            const flags = args[1];
            const fmt = args[2];
            return bind.TreeNodeEx_B(str_id, flags, fmt);
        }
    }
    else {
        const ptr_id = args[0];
        const flags = args[1];
        const fmt = args[2];
        return bind.TreeNodeEx_C(ptr_id, flags, fmt);
    }
}
function TreePush(...args) {
    if (typeof (args[0]) === "string") {
        const str_id = args[0];
        bind.TreePush_A(str_id);
    }
    else {
        const ptr_id = args[0];
        bind.TreePush_B(ptr_id);
    }
}
function TreePop() { bind.TreePop(); }
function GetTreeNodeToLabelSpacing() { return bind.GetTreeNodeToLabelSpacing(); }
function CollapsingHeader(label, ...args) {
    if (args.length === 0) {
        return bind.CollapsingHeader_A(label, 0);
    }
    else {
        if (typeof (args[0]) === "number") {
            const flags = args[0];
            return bind.CollapsingHeader_A(label, flags);
        }
        else {
            const p_open = args[0];
            const flags = args[1] || 0;
            const ref_open = Array.isArray(p_open) ? p_open : [p_open()];
            const ret = bind.CollapsingHeader_B(label, ref_open, flags);
            if (!Array.isArray(p_open)) {
                p_open(ref_open[0]);
            }
            return ret;
        }
    }
}
function SetNextItemOpen(is_open, cond = 0) {
    bind.SetNextItemOpen(is_open, cond);
}
function Selectable(label, ...args) {
    if (args.length === 0) {
        return bind.Selectable_A(label, false, 0, ImVec2.ZERO);
    }
    else {
        if (typeof (args[0]) === "boolean") {
            const selected = args[0];
            const flags = args[1] || 0;
            const size = args[2] || ImVec2.ZERO;
            return bind.Selectable_A(label, selected, flags, size);
        }
        else {
            const p_selected = args[0];
            const flags = args[1] || 0;
            const size = args[2] || ImVec2.ZERO;
            const ref_selected = Array.isArray(p_selected) ? p_selected : [p_selected()];
            const ret = bind.Selectable_B(label, ref_selected, flags, size);
            if (!Array.isArray(p_selected)) {
                p_selected(ref_selected[0]);
            }
            return ret;
        }
    }
}
function ListBox(label, current_item, ...args) {
    let ret = false;
    const _current_item = Array.isArray(current_item) ? current_item : [current_item()];
    if (Array.isArray(args[0])) {
        const items = args[0];
        const items_count = typeof (args[1]) === "number" ? args[1] : items.length;
        const height_in_items = typeof (args[2]) === "number" ? args[2] : -1;
        ret = bind.ListBox_A(label, _current_item, items, items_count, height_in_items);
    }
    else {
        const items_getter = args[0];
        const data = args[1];
        const items_count = args[2];
        const height_in_items = typeof (args[3]) === "number" ? args[3] : -1;
        ret = bind.ListBox_B(label, _current_item, items_getter, data, items_count, height_in_items);
    }
    if (!Array.isArray(current_item)) {
        current_item(_current_item[0]);
    }
    return ret;
}
function ListBoxHeader(label, ...args) {
    if (typeof (args[0]) === "object") {
        const size = args[0];
        return bind.ListBoxHeader_A(label, size);
    }
    else {
        const items_count = args[0];
        const height_in_items = typeof (args[1]) === "number" ? args[1] : -1;
        return bind.ListBoxHeader_B(label, items_count, height_in_items);
    }
}
function ListBoxFooter() { bind.ListBoxFooter(); }
function PlotLines(label, ...args) {
    if (Array.isArray(args[0])) {
        const values = args[0];
        const values_getter = (data, idx) => values[idx * stride];
        const values_count = typeof (args[1]) === "number" ? args[1] : values.length;
        const values_offset = typeof (args[2]) === "number" ? args[2] : 0;
        const overlay_text = typeof (args[3]) === "string" ? args[3] : null;
        const scale_min = typeof (args[4]) === "number" ? args[4] : Number.MAX_VALUE;
        const scale_max = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        const graph_size = args[6] || ImVec2.ZERO;
        const stride = typeof (args[7]) === "number" ? args[7] : 1;
        bind.PlotLines(label, values_getter, null, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
    else {
        const values_getter = args[0];
        const data = args[1];
        const values_count = args[2];
        const values_offset = typeof (args[3]) === "number" ? args[3] : 0;
        const overlay_text = typeof (args[4]) === "string" ? args[4] : null;
        const scale_min = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        const scale_max = typeof (args[6]) === "number" ? args[6] : Number.MAX_VALUE;
        const graph_size = args[7] || ImVec2.ZERO;
        bind.PlotLines(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
}
function PlotHistogram(label, ...args) {
    if (Array.isArray(args[0])) {
        const values = args[0];
        const values_getter = (data, idx) => values[idx * stride];
        const values_count = typeof (args[1]) === "number" ? args[1] : values.length;
        const values_offset = typeof (args[2]) === "number" ? args[2] : 0;
        const overlay_text = typeof (args[3]) === "string" ? args[3] : null;
        const scale_min = typeof (args[4]) === "number" ? args[4] : Number.MAX_VALUE;
        const scale_max = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        const graph_size = args[6] || ImVec2.ZERO;
        const stride = typeof (args[7]) === "number" ? args[7] : 1;
        bind.PlotHistogram(label, values_getter, null, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
    else {
        const values_getter = args[0];
        const data = args[1];
        const values_count = args[2];
        const values_offset = typeof (args[3]) === "number" ? args[3] : 0;
        const overlay_text = typeof (args[4]) === "string" ? args[4] : null;
        const scale_min = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        const scale_max = typeof (args[6]) === "number" ? args[6] : Number.MAX_VALUE;
        const graph_size = args[7] || ImVec2.ZERO;
        bind.PlotHistogram(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
}
function Value(prefix, ...args) {
    if (typeof (args[0]) === "boolean") {
        bind.Value_A(prefix, args[0]);
    }
    else if (typeof (args[0]) === "number") {
        if (Number.isInteger(args[0])) {
            bind.Value_B(prefix, args[0]);
        }
        else {
            bind.Value_D(prefix, args[0], typeof (args[1]) === "string" ? args[1] : null);
        }
    }
    else {
        bind.Text(prefix + String(args[0]));
    }
}
// Widgets: Menus
// - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.
// - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.
// - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.
// IMGUI_API bool          BeginMenuBar();                                                     // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
// IMGUI_API void          EndMenuBar();                                                       // only call EndMenuBar() if BeginMenuBar() returns true!
// IMGUI_API bool          BeginMainMenuBar();                                                 // create and append to a full screen menu-bar.
// IMGUI_API void          EndMainMenuBar();                                                   // only call EndMainMenuBar() if BeginMainMenuBar() returns true!
// IMGUI_API bool          BeginMenu(const char* label, bool enabled = true);                  // create a sub-menu entry. only call EndMenu() if this returns true!
// IMGUI_API void          EndMenu();                                                          // only call EndMenu() if BeginMenu() returns true!
// IMGUI_API bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true);  // return true when activated. shortcuts are displayed for convenience but not processed by ImGui at the moment
// IMGUI_API bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true);              // return true when activated + toggle (*p_selected) if p_selected != NULL
function BeginMenuBar() { return bind.BeginMenuBar(); }
function EndMenuBar() { bind.EndMenuBar(); }
function BeginMainMenuBar() { return bind.BeginMainMenuBar(); }
function EndMainMenuBar() { bind.EndMainMenuBar(); }
function BeginMenu(label, enabled = true) { return bind.BeginMenu(label, enabled); }
function EndMenu() { bind.EndMenu(); }
function MenuItem(label, ...args) {
    if (args.length === 0) {
        return bind.MenuItem_A(label, null, false, true);
    }
    else if (args.length === 1) {
        const shortcut = args[0];
        return bind.MenuItem_A(label, shortcut, false, true);
    }
    else {
        const shortcut = args[0];
        if (typeof (args[1]) === "boolean") {
            const selected = args[1];
            const enabled = typeof (args[2]) === "boolean" ? args[2] : true;
            return bind.MenuItem_A(label, shortcut, selected, enabled);
        }
        else {
            const p_selected = args[1];
            const enabled = typeof (args[2]) === "boolean" ? args[2] : true;
            const ref_selected = Array.isArray(p_selected) ? p_selected : [p_selected()];
            const ret = bind.MenuItem_B(label, shortcut, ref_selected, enabled);
            if (!Array.isArray(p_selected)) {
                p_selected(ref_selected[0]);
            }
            return ret;
        }
    }
}
// Tooltips
// - Tooltip are windows following the mouse. They do not take focus away.
// IMGUI_API void          BeginTooltip();                                                     // begin/append a tooltip window. to create full-featured tooltip (with any kind of items).
// IMGUI_API void          EndTooltip();
// IMGUI_API void          SetTooltip(const char* fmt, ...) IM_FMTARGS(1);                     // set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip().
// IMGUI_API void          SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1);
function BeginTooltip() { bind.BeginTooltip(); }
function EndTooltip() { bind.EndTooltip(); }
function SetTooltip(fmt) { bind.SetTooltip(fmt); }
// Popups, Modals
//  - They block normal mouse hovering detection (and therefore most mouse interactions) behind them.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.
//  - The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.
//  - You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().
//  - IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.
//    This is sometimes leading to confusing mistakes. May rework this in the future.
// Popups: begin/end functions
//  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards. ImGuiWindowFlags are forwarded to the window.
//  - BeginPopupModal(): block every interactions behind the window, cannot be closed by user, add a dimming background, has a title bar.
// IMGUI_API bool          BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0);                         // return true if the popup is open, and you can start outputting to it.
// IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0); // return true if the modal is open, and you can start outputting to it.
// IMGUI_API void          EndPopup();                                                                         // only call EndPopup() if BeginPopupXXX() returns true!
function BeginPopup(str_id, flags = 0) { return bind.BeginPopup(str_id, flags); }
function BeginPopupModal(str_id, p_open = null, flags = 0) {
    if (Array.isArray(p_open)) {
        return bind.BeginPopupModal(str_id, p_open, flags);
    }
    else if (typeof (p_open) === "function") {
        const _p_open = [p_open()];
        const ret = bind.BeginPopupModal(str_id, _p_open, flags);
        p_open(_p_open[0]);
        return ret;
    }
    else {
        return bind.BeginPopupModal(str_id, null, flags);
    }
}
function EndPopup() { bind.EndPopup(); }
// Popups: open/close functions
//  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.
//  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).
//  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().
// IMGUI_API void          OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags = 0);                     // call to mark popup as open (don't call every frame!).
// IMGUI_API void          OpenPopupOnItemClick(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);   // helper to open popup when clicked on last item. return true when just opened. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
// IMGUI_API void          CloseCurrentPopup();                                                                // manually close the popup we have begin-ed into.
function OpenPopup(str_id, popup_flags = 0) { bind.OpenPopup(str_id, popup_flags); }
function OpenPopupOnItemClick(str_id = null, popup_flags = 1) { bind.OpenPopupOnItemClick(str_id, popup_flags); }
function CloseCurrentPopup() { bind.CloseCurrentPopup(); }
// Popups: open+begin combined functions helpers
//  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.
//  - They are convenient to easily create context menus, hence the name.
//  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.
//  - IMPORTANT: we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight.
// IMGUI_API bool          BeginPopupContextItem(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked on last item. if you can pass a NULL str_id only if the previous item had an id. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
// IMGUI_API bool          BeginPopupContextWindow(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);// open+begin popup when clicked on current window.
// IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked in void (where there are no windows).
function BeginPopupContextItem(str_id = null, popup_flags = 1) { return bind.BeginPopupContextItem(str_id, popup_flags); }
function BeginPopupContextWindow(str_id = null, popup_flags = 1) { return bind.BeginPopupContextWindow(str_id, popup_flags); }
function BeginPopupContextVoid(str_id = null, popup_flags = 1) { return bind.BeginPopupContextVoid(str_id, popup_flags); }
// Popups: test function
//  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open.
// IMGUI_API bool          IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0);                         // return true if the popup is open.
function IsPopupOpen(str_id, flags = 0) { return bind.IsPopupOpen(str_id, flags); }
// Tables
// [BETA API] API may evolve slightly! If you use this, please update to the next version when it comes out!
// - Full-featured replacement for old Columns API.
// - See Demo->Tables for demo code.
// - See top of imgui_tables.cpp for general commentary.
// - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.
// The typical call flow is:
// - 1. Call BeginTable().
// - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.
// - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.
// - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.
// - 5. Populate contents:
//    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.
//    - If you are using tables as a sort of grid, where every columns is holding the same type of contents,
//      you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().
//      TableNextColumn() will automatically wrap-around into the next row if needed.
//    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!
//    - Summary of possible call flow:
//        --------------------------------------------------------------------------------------------------------
//        TableNextRow() -> TableSetColumnIndex(0) -> Text("Hello 0") -> TableSetColumnIndex(1) -> Text("Hello 1")  // OK
//        TableNextRow() -> TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK
//                          TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!
//        TableNextRow()                           -> Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!
//        --------------------------------------------------------------------------------------------------------
// - 5. Call EndTable()
// IMGUI_API bool          BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f);
// IMGUI_API void          EndTable();                                 // only call EndTable() if BeginTable() returns true!
// IMGUI_API void          TableNextRow(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f); // append into the first cell of a new row.
// IMGUI_API bool          TableNextColumn();                          // append into the next column (or first column of next row if currently in last column). Return true when column is visible.
// IMGUI_API bool          TableSetColumnIndex(int column_n);          // append into the specified column. Return true when column is visible.
function BeginTable(str_id, column, flags = 0, outer_size = ImVec2.ZERO, inner_width = 0.0) { return bind.BeginTable(str_id, column, flags, outer_size, inner_width); }
function EndTable() { bind.EndTable(); }
function TableNextRow(row_flags = 0, min_row_height = 0.0) { bind.TableNextRow(row_flags, min_row_height); }
function TableNextColumn() { return bind.TableNextColumn(); }
function TableSetColumnIndex(column_n) { return bind.TableSetColumnIndex(column_n); }
// Tables: Headers & Columns declaration
// - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.
// - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.
//   Headers are required to perform: reordering, sorting, and opening the context menu.
//   The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.
// - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in
//   some advanced use cases (e.g. adding custom widgets in header row).
// - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
// IMGUI_API void          TableSetupColumn(const char* label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImU32 user_id = 0);
// IMGUI_API void          TableSetupScrollFreeze(int cols, int rows); // lock columns/rows so they stay visible when scrolled.
// IMGUI_API void          TableHeadersRow();                          // submit all headers cells based on data provided to TableSetupColumn() + submit context menu
// IMGUI_API void          TableHeader(const char* label);             // submit one header cell manually (rarely used)
function TableSetupColumn(label, flags = 0, init_width_or_weight = 0.0, user_id = 0) { bind.TableSetupColumn(label, flags, init_width_or_weight, user_id); }
function TableSetupScrollFreeze(cols, rows) { bind.TableSetupScrollFreeze(cols, rows); }
function TableHeadersRow() { bind.TableHeadersRow(); }
function TableHeader(label) { bind.TableHeader(label); }
// Tables: Sorting
// - Call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting.
// - When 'SpecsDirty == true' you should sort your data. It will be true when sorting specs have changed
//   since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting, else you may
//   wastefully sort your data every frame!
// - Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().
// IMGUI_API ImGuiTableSortSpecs* TableGetSortSpecs();                        // get latest sort specs for the table (NULL if not sorting).
function TableGetSortSpecs() {
    const sort_specs = bind.TableGetSortSpecs();
    return (sort_specs === null) ? null : new ImGuiTableSortSpecs(sort_specs);
}
// Tables: Miscellaneous functions
// - Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index.
// IMGUI_API int                   TableGetColumnCount();                      // return number of columns (value passed to BeginTable)
// IMGUI_API int                   TableGetColumnIndex();                      // return current column index.
// IMGUI_API int                   TableGetRowIndex();                         // return current row index.
// IMGUI_API const char*           TableGetColumnName(int column_n = -1);      // return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
// IMGUI_API ImGuiTableColumnFlags TableGetColumnFlags(int column_n = -1);     // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
// IMGUI_API void                  TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1);  // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
function TableGetColumnCount() { return bind.TableGetColumnCount(); }
function TableGetColumnIndex() { return bind.TableGetColumnIndex(); }
function TableGetRowIndex() { return bind.TableGetRowIndex(); }
function TableGetColumnName(column_n = -1) { return bind.TableGetColumnName(column_n); }
function TableGetColumnFlags(column_n = -1) { return bind.TableGetColumnFlags(column_n); }
function TableSetBgColor(target, color, column_n = -1) { bind.TableSetBgColor(target, color, column_n); }
// Legacy Columns API (2020: prefer using Tables!)
// - You can also use SameLine(pos_x) to mimic simplified columns.
// IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);
// IMGUI_API void          NextColumn();                                                       // next column, defaults to current row or next row if the current row is finished
// IMGUI_API int           GetColumnIndex();                                                   // get current column index
// IMGUI_API float         GetColumnWidth(int column_index = -1);                              // get column width (in pixels). pass -1 to use current column
// IMGUI_API void          SetColumnWidth(int column_index, float width);                      // set column width (in pixels). pass -1 to use current column
// IMGUI_API float         GetColumnOffset(int column_index = -1);                             // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
// IMGUI_API void          SetColumnOffset(int column_index, float offset_x);                  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
// IMGUI_API int           GetColumnsCount();
function Columns(count = 1, id = null, border = true) { bind.Columns(count, id, border); }
function NextColumn() { bind.NextColumn(); }
function GetColumnIndex() { return bind.GetColumnIndex(); }
function GetColumnWidth(column_index = -1) { return bind.GetColumnWidth(column_index); }
function SetColumnWidth(column_index, width) { bind.SetColumnWidth(column_index, width); }
function GetColumnOffset(column_index = -1) { return bind.GetColumnOffset(column_index); }
function SetColumnOffset(column_index, offset_x) { bind.SetColumnOffset(column_index, offset_x); }
function GetColumnsCount() { return bind.GetColumnsCount(); }
// Tab Bars, Tabs
// IMGUI_API bool          BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0);        // create and append into a TabBar
// IMGUI_API void          EndTabBar();                                                        // only call EndTabBar() if BeginTabBar() returns true!
// IMGUI_API bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0); // create a Tab. Returns true if the Tab is selected.
// IMGUI_API void          EndTabItem();                                                       // only call EndTabItem() if BeginTabItem() returns true!
// IMGUI_API bool          TabItemButton(const char* label, ImGuiTabItemFlags flags = 0);      // create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
// IMGUI_API void          SetTabItemClosed(const char* tab_or_docked_window_label);           // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.
function BeginTabBar(str_id, flags = 0) { return bind.BeginTabBar(str_id, flags); }
function EndTabBar() { bind.EndTabBar(); }
function BeginTabItem(label, p_open = null, flags = 0) {
    if (p_open === null) {
        return bind.BeginTabItem(label, null, flags);
    }
    else if (Array.isArray(p_open)) {
        return bind.BeginTabItem(label, p_open, flags);
    }
    else {
        const ref_open = [p_open()];
        const ret = bind.BeginTabItem(label, ref_open, flags);
        p_open(ref_open[0]);
        return ret;
    }
}
function EndTabItem() { bind.EndTabItem(); }
function TabItemButton(label, flags = 0) { return bind.TabItemButton(label, flags); }
function SetTabItemClosed(tab_or_docked_window_label) { bind.SetTabItemClosed(tab_or_docked_window_label); }
// Logging/Capture
// - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.
// IMGUI_API void          LogToTTY(int auto_open_depth = -1);                                 // start logging to tty (stdout)
// IMGUI_API void          LogToFile(int auto_open_depth = -1, const char* filename = NULL);   // start logging to file
// IMGUI_API void          LogToClipboard(int auto_open_depth = -1);                           // start logging to OS clipboard
// IMGUI_API void          LogFinish();                                                        // stop logging (close file, etc.)
// IMGUI_API void          LogButtons();                                                       // helper to display buttons for logging to tty/file/clipboard
// IMGUI_API void          LogText(const char* fmt, ...) IM_FMTARGS(1);                        // pass text data straight to log (without being displayed)
function LogToTTY(max_depth = -1) { bind.LogToTTY(max_depth); }
function LogToFile(max_depth = -1, filename = null) { bind.LogToFile(max_depth, filename); }
function LogToClipboard(max_depth = -1) { bind.LogToClipboard(max_depth); }
function LogFinish() { bind.LogFinish(); }
function LogButtons() { bind.LogButtons(); }
function LogText(fmt) { bind.LogText(fmt); }
// Drag and Drop
// - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback "..." tooltip as replacement)
// IMGUI_API bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0);                                      // call when the current item is active. If this return true, you can call SetDragDropPayload() + EndDragDropSource()
// IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0);  // type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.
// IMGUI_API void          EndDragDropSource();                                                                    // only call EndDragDropSource() if BeginDragDropSource() returns true!
// IMGUI_API bool                  BeginDragDropTarget();                                                          // call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
// IMGUI_API const ImGuiPayload*   AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0);          // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
// IMGUI_API void                  EndDragDropTarget();                                                            // only call EndDragDropTarget() if BeginDragDropTarget() returns true!
// IMGUI_API const ImGuiPayload*   GetDragDropPayload();                                                           // peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type.
const _ImGui_DragDropPayload_data = {};
function BeginDragDropSource(flags = 0) {
    return bind.BeginDragDropSource(flags);
}
function SetDragDropPayload(type, data, cond = 0) {
    _ImGui_DragDropPayload_data[type] = data;
    return bind.SetDragDropPayload(type, data, 0, cond);
}
function EndDragDropSource() {
    bind.EndDragDropSource();
}
function BeginDragDropTarget() {
    return bind.BeginDragDropTarget();
}
function AcceptDragDropPayload(type, flags = 0) {
    const data = _ImGui_DragDropPayload_data[type];
    return bind.AcceptDragDropPayload(type, flags) ? { Data: data } : null;
}
function EndDragDropTarget() {
    bind.EndDragDropTarget();
}
function GetDragDropPayload() {
    return bind.GetDragDropPayload();
}
// Clipping
// - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
// IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);
// IMGUI_API void          PopClipRect();
function PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect) {
    bind.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
}
function PopClipRect() {
    bind.PopClipRect();
}
// Focus, Activation
// - Prefer using "SetItemDefaultFocus()" over "if (IsWindowAppearing()) SetScrollHereY()" when applicable to signify "this is the default item"
// IMGUI_API void          SetItemDefaultFocus();                                              // make last item the default focused item of a window.
// IMGUI_API void          SetKeyboardFocusHere(int offset = 0);                               // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
function SetItemDefaultFocus() { bind.SetItemDefaultFocus(); }
function SetKeyboardFocusHere(offset = 0) { bind.SetKeyboardFocusHere(offset); }
// Item/Widgets Utilities
// - Most of the functions are referring to the last/previous item we submitted.
// - See Demo Window under "Widgets->Querying Status" for an interactive visualization of most of those functions.
// IMGUI_API bool          IsItemHovered(ImGuiHoveredFlags flags = 0);                         // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
// IMGUI_API bool          IsItemActive();                                                     // is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
// IMGUI_API bool          IsItemFocused();                                                    // is the last item focused for keyboard/gamepad navigation?
// IMGUI_API bool          IsItemClicked(ImGuiMouseButton mouse_button = 0);                   // is the last item clicked? (e.g. button/node just clicked on) == IsMouseClicked(mouse_button) && IsItemHovered()
// IMGUI_API bool          IsItemVisible();                                                    // is the last item visible? (items may be out of sight because of clipping/scrolling)
// IMGUI_API bool          IsItemEdited();                                                     // did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
// IMGUI_API bool          IsItemActivated();                                                  // was the last item just made active (item was previously inactive).
// IMGUI_API bool          IsItemDeactivated();                                                // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.
// IMGUI_API bool          IsItemDeactivatedAfterEdit();                                       // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
// IMGUI_API bool          IsItemToggledOpen();                                                // was the last item open state toggled? set by TreeNode().
// IMGUI_API bool          IsAnyItemHovered();                                                 // is any item hovered?
// IMGUI_API bool          IsAnyItemActive();                                                  // is any item active?
// IMGUI_API bool          IsAnyItemFocused();                                                 // is any item focused?
// IMGUI_API ImVec2        GetItemRectMin();                                                   // get upper-left bounding rectangle of the last item (screen space)
// IMGUI_API ImVec2        GetItemRectMax();                                                   // get lower-right bounding rectangle of the last item (screen space)
// IMGUI_API ImVec2        GetItemRectSize();                                                  // get size of last item
// IMGUI_API void          SetItemAllowOverlap();                                              // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.
function IsItemHovered(flags = 0) { return bind.IsItemHovered(flags); }
function IsItemActive() { return bind.IsItemActive(); }
function IsItemFocused() { return bind.IsItemFocused(); }
function IsItemClicked(mouse_button = 0) { return bind.IsItemClicked(mouse_button); }
function IsItemVisible() { return bind.IsItemVisible(); }
function IsItemEdited() { return bind.IsItemEdited(); }
function IsItemActivated() { return bind.IsItemActivated(); }
function IsItemDeactivated() { return bind.IsItemDeactivated(); }
function IsItemDeactivatedAfterEdit() { return bind.IsItemDeactivatedAfterEdit(); }
function IsItemToggledOpen() { return bind.IsItemToggledOpen(); }
function IsAnyItemHovered() { return bind.IsAnyItemHovered(); }
function IsAnyItemActive() { return bind.IsAnyItemActive(); }
function IsAnyItemFocused() { return bind.IsAnyItemFocused(); }
function GetItemRectMin(out = new ImVec2()) { return bind.GetItemRectMin(out); }
function GetItemRectMax(out = new ImVec2()) { return bind.GetItemRectMax(out); }
function GetItemRectSize(out = new ImVec2()) { return bind.GetItemRectSize(out); }
function SetItemAllowOverlap() { bind.SetItemAllowOverlap(); }
function IsRectVisible(...args) {
    if (args.length === 1) {
        const size = args[0];
        return bind.IsRectVisible_A(size);
    }
    else {
        const rect_min = args[0];
        const rect_max = args[1];
        return bind.IsRectVisible_B(rect_min, rect_max);
    }
}
function GetTime() { return bind.GetTime(); }
function GetFrameCount() { return bind.GetFrameCount(); }
function GetBackgroundDrawList() {
    return new ImDrawList(bind.GetBackgroundDrawList());
}
function GetForegroundDrawList() {
    return new ImDrawList(bind.GetForegroundDrawList());
}
function GetDrawListSharedData() {
    return new ImDrawListSharedData(bind.GetDrawListSharedData());
}
function GetStyleColorName(idx) { return bind.GetStyleColorName(idx); }
// IMGUI_API void          SetStateStorage(ImGuiStorage* tree);
// IMGUI_API ImGuiStorage* GetStateStorage();
function CalcListClipping(items_count, items_height, out_items_display_start, out_items_display_end) {
    return bind.CalcListClipping(items_count, items_height, out_items_display_start, out_items_display_end);
}
function BeginChildFrame(id, size, flags = 0) { return bind.BeginChildFrame(id, size, flags); }
function EndChildFrame() { bind.EndChildFrame(); }
// Text Utilities
// IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);
function CalcTextSize(text, text_end = null, hide_text_after_double_hash = false, wrap_width = -1, out = new ImVec2()) {
    return bind.CalcTextSize(text_end !== null ? text.substring(0, text_end) : text, hide_text_after_double_hash, wrap_width, out);
}
// Color Utilities
// IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);
// IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);
// IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);
// IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);
function ColorConvertU32ToFloat4(in_, out = new ImVec4()) { return bind.ColorConvertU32ToFloat4(in_, out); }
function ColorConvertFloat4ToU32(in_) { return bind.ColorConvertFloat4ToU32(in_); }
function ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v) { bind.ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v); }
function ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b) { bind.ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b); }
// Inputs Utilities: Keyboard
// - For 'int user_key_index' you can use your own indices/enums according to how your backend/engine stored them in io.KeysDown[].
// - We don't know the meaning of those value. You can use GetKeyIndex() to map a ImGuiKey_ value into the user index.
// IMGUI_API int           GetKeyIndex(ImGuiKey imgui_key);                                    // map ImGuiKey_* values into user's key index. == io.KeyMap[key]
// IMGUI_API bool          IsKeyDown(int user_key_index);                                      // is key being held. == io.KeysDown[user_key_index].
// IMGUI_API bool          IsKeyPressed(int user_key_index, bool repeat = true);               // was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
// IMGUI_API bool          IsKeyReleased(int user_key_index);                                  // was key released (went from Down to !Down)?
// IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate); // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
// IMGUI_API void          CaptureKeyboardFromApp(bool want_capture_keyboard_value = true);    // attention: misleading name! manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard_value"; after the next NewFrame() call.
function GetKeyIndex(imgui_key) { return bind.GetKeyIndex(imgui_key); }
function IsKeyDown(user_key_index) { return bind.IsKeyDown(user_key_index); }
function IsKeyPressed(user_key_index, repeat = true) { return bind.IsKeyPressed(user_key_index, repeat); }
function IsKeyReleased(user_key_index) { return bind.IsKeyReleased(user_key_index); }
function GetKeyPressedAmount(user_key_index, repeat_delay, rate) { return bind.GetKeyPressedAmount(user_key_index, repeat_delay, rate); }
function CaptureKeyboardFromApp(capture = true) { return bind.CaptureKeyboardFromApp(capture); }
// Inputs Utilities: Mouse
// - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.
// - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.
// - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')
// IMGUI_API bool          IsMouseDown(ImGuiMouseButton button);                               // is mouse button held?
// IMGUI_API bool          IsMouseClicked(ImGuiMouseButton button, bool repeat = false);       // did mouse button clicked? (went from !Down to Down)
// IMGUI_API bool          IsMouseReleased(ImGuiMouseButton button);                           // did mouse button released? (went from Down to !Down)
// IMGUI_API bool          IsMouseDoubleClicked(ImGuiMouseButton button);                      // did mouse button double-clicked? (note that a double-click will also report IsMouseClicked() == true)
// IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
// IMGUI_API bool          IsMousePosValid(const ImVec2* mouse_pos = NULL);                    // by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
// IMGUI_API bool          IsAnyMouseDown();                                                   // is any mouse button held?
// IMGUI_API ImVec2        GetMousePos();                                                      // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
// IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();                                 // retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)
// IMGUI_API bool          IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f);         // is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
// IMGUI_API ImVec2        GetMouseDragDelta(ImGuiMouseButton button = 0, float lock_threshold = -1.0f);   // return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
// IMGUI_API void          ResetMouseDragDelta(ImGuiMouseButton button = 0);                   //
// IMGUI_API ImGuiMouseCursor GetMouseCursor();                                                // get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
// IMGUI_API void          SetMouseCursor(ImGuiMouseCursor cursor_type);                       // set desired cursor type
// IMGUI_API void          CaptureMouseFromApp(bool want_capture_mouse_value = true);          // attention: misleading name! manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse_value;" after the next NewFrame() call.
function IsMouseDown(button) { return bind.IsMouseDown(button); }
function IsMouseClicked(button, repeat = false) { return bind.IsMouseClicked(button, repeat); }
function IsMouseDoubleClicked(button) { return bind.IsMouseDoubleClicked(button); }
function IsMouseReleased(button) { return bind.IsMouseReleased(button); }
function IsMouseHoveringRect(r_min, r_max, clip = true) { return bind.IsMouseHoveringRect(r_min, r_max, clip); }
function IsMousePosValid(mouse_pos = null) { return bind.IsMousePosValid(mouse_pos); }
function IsAnyMouseDown() { return bind.IsAnyMouseDown(); }
function GetMousePos(out = new ImVec2()) { return bind.GetMousePos(out); }
function GetMousePosOnOpeningCurrentPopup(out = new ImVec2()) { return bind.GetMousePosOnOpeningCurrentPopup(out); }
function IsMouseDragging(button = 0, lock_threshold = -1.0) { return bind.IsMouseDragging(button, lock_threshold); }
function GetMouseDragDelta(button = 0, lock_threshold = -1.0, out = new ImVec2()) { return bind.GetMouseDragDelta(button, lock_threshold, out); }
function ResetMouseDragDelta(button = 0) { bind.ResetMouseDragDelta(button); }
function GetMouseCursor() { return bind.GetMouseCursor(); }
function SetMouseCursor(type) { bind.SetMouseCursor(type); }
function CaptureMouseFromApp(capture = true) { bind.CaptureMouseFromApp(capture); }
// Clipboard Utilities
// - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
// IMGUI_API const char*   GetClipboardText();
// IMGUI_API void          SetClipboardText(const char* text);
function GetClipboardText() { return bind.GetClipboardText(); }
function SetClipboardText(text) { bind.SetClipboardText(text); }
// Settings/.Ini Utilities
// - The disk functions are automatically called if io.IniFilename != NULL (default is "imgui.ini").
// - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.
// IMGUI_API void          LoadIniSettingsFromDisk(const char* ini_filename);                  // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
// IMGUI_API void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0); // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
// IMGUI_API void          SaveIniSettingsToDisk(const char* ini_filename);                    // this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
// IMGUI_API const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL);               // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
function LoadIniSettingsFromDisk(ini_filename) { throw new Error(); } // TODO
function LoadIniSettingsFromMemory(ini_data, ini_size = 0) { bind.LoadIniSettingsFromMemory(ini_data); }
function SaveIniSettingsToDisk(ini_filename) { throw new Error(); } // TODO
function SaveIniSettingsToMemory(out_ini_size = null) { return bind.SaveIniSettingsToMemory(); }
// Debug Utilities
// IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
function DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_draw_vert, sz_draw_idx) {
    return bind.DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_draw_vert, sz_draw_idx);
}
// Memory Allocators
// - All those functions are not reliant on the current context.
// - If you reload the contents of imgui.cpp at runtime, you may need to call SetCurrentContext() + SetAllocatorFunctions() again because we use global storage for those.
// IMGUI_API void          SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_func)(void* ptr, void* user_data), void* user_data = NULL);
// IMGUI_API void*         MemAlloc(size_t size);
// IMGUI_API void          MemFree(void* ptr);
function SetAllocatorFunctions(alloc_func, free_func, user_data = null) {
    bind.SetAllocatorFunctions(alloc_func, free_func, user_data);
}
function MemAlloc(sz) { bind.MemAlloc(sz); }
function MemFree(ptr) { bind.MemFree(ptr); }

class ImGuiWindow {
    constructor(native) {
        this.native = native;
    }
    get ID() { return this.native.ID; }
    get Flags() { return this.native.Flags; }
    set Flags(f) { this.native.Flags = f; }
    get Pos() { return this.native.Pos; }
    set Pos(v) { this.native.Pos.Set(v.x, v.y); }
    get Size() { return this.native.Size; }
    set Size(v) { this.native.Size.Set(v.x, v.y); }
    get SizeFull() { return this.native.SizeFull; }
    set SizeFull(v) { this.native.SizeFull.Set(v.x, v.y); }
    get ContentSize() { return this.native.ContentSize; }
    set ContentSize(v) { this.native.ContentSize.Set(v.x, v.y); }
    get ContentSizeIdeal() { return this.native.ContentSizeIdeal; }
    set ContentSizeIdeal(v) { this.native.ContentSizeIdeal.Set(v.x, v.y); }
    get ContentSizeExplicit() { return this.native.ContentSizeExplicit; }
    set ContentSizeExplicit(v) { this.native.ContentSizeExplicit.Set(v.x, v.y); }
    get WindowPadding() { return this.native.WindowPadding; }
    set WindowPadding(v) { this.native.WindowPadding.Set(v.x, v.y); }
    get WindowRounding() { return this.native.WindowRounding; }
    set WindowRounding(v) { this.native.WindowRounding = v; }
    get WindowBorderSize() { return this.native.WindowBorderSize; }
    set WindowBorderSize(v) { this.native.WindowBorderSize = v; }
    get Scroll() { return this.native.Scroll; }
    set Scroll(v) { this.native.Scroll.Set(v.x, v.y); }
    get ScrollMax() { return this.native.ScrollMax; }
    set ScrollMax(v) { this.native.ScrollMax.Set(v.x, v.y); }
    get ScrollTarget() { return this.native.ScrollTarget; }
    set ScrollTarget(v) { this.native.ScrollTarget.Set(v.x, v.y); }
    get ScrollTargetCenterRatio() { return this.native.ScrollTargetCenterRatio; }
    set ScrollTargetCenterRatio(v) { this.native.ScrollTargetCenterRatio.Set(v.x, v.y); }
    get ScrollTargetEdgeSnapDist() { return this.native.ScrollTargetEdgeSnapDist; }
    set ScrollTargetEdgeSnapDist(v) { this.native.ScrollTargetEdgeSnapDist.Set(v.x, v.y); }
    get ScrollbarSizes() { return this.native.ScrollbarSizes; }
    set ScrollbarSizes(v) { this.native.ScrollbarSizes.Set(v.x, v.y); }
    get ScrollbarX() { return this.native.ScrollbarX; }
    get ScrollbarY() { return this.native.ScrollbarY; }
    get Active() { return this.native.Active; }
    get WasActive() { return this.native.WasActive; }
    get ItemWidthDefault() { return this.native.ItemWidthDefault; }
    set ItemWidthDefault(v) { this.native.ItemWidthDefault = v; }
    get ParentWindow() { return this.native.ParentWindow ? new ImGuiWindow(this.native.ParentWindow) : null; }
    get RootWindow() { return this.native.RootWindow ? new ImGuiWindow(this.native.RootWindow) : null; }
    get RootWindowForTitleBarHighlight() { return this.native.RootWindowForTitleBarHighlight ? new ImGuiWindow(this.native.RootWindowForTitleBarHighlight) : null; }
    get RootWindowForNav() { return this.native.RootWindowForNav ? new ImGuiWindow(this.native.RootWindowForNav) : null; }
}

class ImGuiInputTextState {
    constructor(native) {
        this.native = native;
    }
    get ID() { return this.native.ID; }
    get Flags() { return this.native.Flags; }
    get FrameBB() { return this.native.FrameBB; }
    get Text() { return this.native.Text; }
    set Text(t) { this.native.Text = t; }
}
function GetCurrentWindow() { return new ImGuiWindow(bind.GetCurrentWindow()); }
function GetHoveredWindow() { return bind.GetHoveredWindow() ? new ImGuiWindow(bind.GetHoveredWindow()) : null; }
function GetHoveredRootWindow() { return bind.GetHoveredRootWindow() ? new ImGuiWindow(bind.GetHoveredRootWindow()) : null; }
function GetActiveWindow() { return bind.GetActiveWindow() ? new ImGuiWindow(bind.GetActiveWindow()) : null; }
function GetHoveredId() { return bind.GetHoveredId(); }
function GetHoveredIdPreviousFrame() { return bind.GetHoveredIdPreviousFrame(); }
function GetActiveId() { return bind.GetActiveId(); }
function GetActiveIdPreviousFrame() { return bind.GetActiveIdPreviousFrame(); }
function SetActiveId(id) { return bind.SetActiveId(id); }
function GetInputTextState(id) { return new ImGuiInputTextState(bind.GetInputTextState(id)); }
function GetInputTextId() { return bind.GetInputTextId(); }
function Vec4_toRGBA(col) {
    return "rgba(" + col.x * 255 + "," + col.y * 255 + "," + col.z * 255 + "," + col.w * 255 + ")";
}
function Font_toString(font) {
    return font.FontStyle + " " + font.FontSize + "px " + font.FontName;
}
function CreateFont(name, size, style) {
    const io = GetIO();
    let font = io.Fonts.AddFontDefault();
    font.FontStyle = style;
    font.FontName = name;
    font.FontSize = size;
    return font;
}


/***/ }),

/***/ "./src/imgui_impl.ts":
/*!***************************!*\
  !*** ./src/imgui_impl.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClearBuffer: () => (/* binding */ ClearBuffer),
/* harmony export */   CreateDeviceObjects: () => (/* binding */ CreateDeviceObjects),
/* harmony export */   CreateFontsTexture: () => (/* binding */ CreateFontsTexture),
/* harmony export */   DestroyDeviceObjects: () => (/* binding */ DestroyDeviceObjects),
/* harmony export */   DestroyFontsTexture: () => (/* binding */ DestroyFontsTexture),
/* harmony export */   FrameBufferObject: () => (/* binding */ FrameBufferObject),
/* harmony export */   ITouch: () => (/* binding */ ITouch),
/* harmony export */   Init: () => (/* binding */ Init),
/* harmony export */   NewFrame: () => (/* binding */ NewFrame),
/* harmony export */   RenderDrawData: () => (/* binding */ RenderDrawData),
/* harmony export */   Shader: () => (/* binding */ Shader),
/* harmony export */   Shutdown: () => (/* binding */ Shutdown),
/* harmony export */   Texture: () => (/* binding */ Texture),
/* harmony export */   TextureCache: () => (/* binding */ TextureCache),
/* harmony export */   add_key_event: () => (/* binding */ add_key_event),
/* harmony export */   add_pointer_event: () => (/* binding */ add_pointer_event),
/* harmony export */   any_pointerdown: () => (/* binding */ any_pointerdown),
/* harmony export */   canvas: () => (/* binding */ canvas),
/* harmony export */   canvas_scale: () => (/* binding */ canvas_scale),
/* harmony export */   ctx: () => (/* binding */ ctx),
/* harmony export */   dom_font: () => (/* binding */ dom_font),
/* harmony export */   font_scale: () => (/* binding */ font_scale),
/* harmony export */   gl: () => (/* binding */ gl),
/* harmony export */   is_contextlost: () => (/* binding */ is_contextlost),
/* harmony export */   multi_touch: () => (/* binding */ multi_touch),
/* harmony export */   remove_key_event: () => (/* binding */ remove_key_event),
/* harmony export */   remove_pointer_event: () => (/* binding */ remove_pointer_event),
/* harmony export */   scroll_acc: () => (/* binding */ scroll_acc),
/* harmony export */   setCanvasScale: () => (/* binding */ setCanvasScale),
/* harmony export */   setFontScale: () => (/* binding */ setFontScale)
/* harmony export */ });
/* harmony import */ var _font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font */ "./src/font.ts");
/* harmony import */ var _imgui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imgui */ "./src/imgui.ts");
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./input */ "./src/input.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



let clipboard_text = "";
let canvas = null;
let canvas_scale = _imgui__WEBPACK_IMPORTED_MODULE_1__.isMobile.any() ? 1 : window.devicePixelRatio;
let font_scale = Math.max(window.devicePixelRatio, 1.5);
function setCanvasScale(scale) {
    canvas_scale = scale;
}
function setFontScale(scale) {
    font_scale = scale;
}
let gl = null;
let g_ShaderHandle = null;
let g_VertHandle = null;
let g_FragHandle = null;
let g_AttribLocationTex = null;
let g_AttribLocationProjMtx = null;
let g_AttribLocationPosition = -1;
let g_AttribLocationUV = -1;
let g_AttribLocationColor = -1;
let g_VboHandle = null;
let g_ElementsHandle = null;
let g_FontTexture = null;
const enable_vao = true;
let g_vao;
let has_videoframe = typeof VideoFrame !== "undefined";
let ctx = null;
let prev_time = 0;
function document_on_copy(event) {
    if (event.clipboardData) {
        event.clipboardData.setData("text/plain", clipboard_text);
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function document_on_cut(event) {
    if (event.clipboardData) {
        event.clipboardData.setData("text/plain", clipboard_text);
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function document_on_paste(event) {
    if (event.clipboardData) {
        clipboard_text = event.clipboardData.getData("text/plain");
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function window_on_resize() {
    if (canvas !== null) {
        canvas.width = canvas.scrollWidth * canvas_scale;
        canvas.height = canvas.scrollHeight * canvas_scale;
        //canvas.width = canvas.scrollWidth;
        //canvas.height = canvas.scrollHeight;
    }
}
function window_on_gamepadconnected(event /* GamepadEvent */) {
    console.log("Gamepad connected at index %d: %s. %d buttons, %d axes.", event.gamepad.index, event.gamepad.id, event.gamepad.buttons.length, event.gamepad.axes.length);
}
function window_on_gamepaddisconnected(event /* GamepadEvent */) {
    console.log("Gamepad disconnected at index %d: %s.", event.gamepad.index, event.gamepad.id);
}
function canvas_on_blur(event) {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = false;
    io.KeyShift = false;
    io.KeyAlt = false;
    io.KeySuper = false;
    for (let i = 0; i < io.KeysDown.length; ++i) {
        io.KeysDown[i] = false;
    }
    for (let i = 0; i < io.MouseDown.length; ++i) {
        io.MouseDown[i] = false;
    }
    console.log("canvas_on_blur");
}
const key_code_to_index = {
    "Tab": 9,
    "Enter": 13,
    "Escape": 27,
    "ArrowLeft": 37,
    "ArrowUp": 38,
    "ArrowRight": 39,
    "ArrowDown": 40,
    "NumpadEnter": 176,
};
function canvas_on_keydown(event) {
    const key_index = key_code_to_index[event.code] || event.key.charCodeAt(0);
    //console.log(event.type, event.key, event.code, key_index);
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = event.ctrlKey;
    io.KeyShift = event.shiftKey;
    io.KeyAlt = event.altKey;
    io.KeySuper = event.metaKey;
    _imgui__WEBPACK_IMPORTED_MODULE_1__.ASSERT(key_index >= 0 && key_index < _imgui__WEBPACK_IMPORTED_MODULE_1__.ARRAYSIZE(io.KeysDown));
    io.KeysDown[key_index] = true;
    // forward to the keypress event
    if ( /*io.WantCaptureKeyboard ||*/key_index == 9) {
        event.preventDefault();
    }
}
function canvas_on_keyup(event) {
    const key_index = key_code_to_index[event.code] || event.key.charCodeAt(0);
    //console.log(event.type, event.key, event.code, key_index);
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = event.ctrlKey;
    io.KeyShift = event.shiftKey;
    io.KeyAlt = event.altKey;
    io.KeySuper = event.metaKey;
    _imgui__WEBPACK_IMPORTED_MODULE_1__.ASSERT(key_index >= 0 && key_index < _imgui__WEBPACK_IMPORTED_MODULE_1__.ARRAYSIZE(io.KeysDown));
    io.KeysDown[key_index] = false;
    if (io.WantCaptureKeyboard || key_index == 9) {
        event.preventDefault();
    }
}
function canvas_on_keypress(event) {
    //console.log(event);
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.AddInputCharacter(event.charCode);
    if (io.WantCaptureKeyboard) {
        event.preventDefault();
    }
}
function canvas_on_pointermove(event) {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MousePos.x = event.offsetX;
    io.MousePos.y = event.offsetY;
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
// MouseEvent.button
// A number representing a given button:
// 0: Main button pressed, usually the left button or the un-initialized state
// 1: Auxiliary button pressed, usually the wheel button or the middle button (if present)
// 2: Secondary button pressed, usually the right button
// 3: Fourth button, typically the Browser Back button
// 4: Fifth button, typically the Browser Forward button
const mouse_button_map = [0, 2, 1, 3, 4];
function any_pointerdown() {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    for (let i = 0; i < io.MouseDown.length; i++) {
        if (io.MouseDown[i])
            return true;
    }
    return false;
}
function canvas_on_pointerdown(event) {
    if (event.target != canvas)
        return;
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MousePos.x = event.offsetX;
    io.MousePos.y = event.offsetY;
    io.MouseDown[mouse_button_map[event.button]] = true;
    // if (io.WantCaptureMouse) {
    //     event.preventDefault();
    // }
    //console.log("canvas_on_pointerdown", event);
}
function canvas_on_contextmenu(event) {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
function canvas_on_pointerup(event) {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MouseDown[mouse_button_map[event.button]] = false;
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
    //console.log("canvas_on_pointerup", event);
}
function canvas_on_wheel(event) {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    let scale = 1.0;
    switch (event.deltaMode) {
        case event.DOM_DELTA_PIXEL:
            scale = 0.01;
            break;
        case event.DOM_DELTA_LINE:
            scale = 0.2;
            break;
        case event.DOM_DELTA_PAGE:
            scale = 1.0;
            break;
    }
    io.MouseWheelH = event.deltaX * scale;
    io.MouseWheel = -event.deltaY * scale; // Mouse wheel: 1 unit scrolls about 5 lines text.
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
let touch_count = 0;
let touch_id;
class ITouch {
}
let multi_touch = {};
function canvas_on_touchstart(event) {
    for (let i = 0; i < event.changedTouches.length; i++) {
        let touch = event.changedTouches[i];
        touch_id = touch.identifier;
        multi_touch[touch.identifier] = { x: touch.clientX, y: touch.clientY };
    }
    let mtouch = multi_touch[touch_id];
    let io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MousePos.x = mtouch.x;
    io.MousePos.y = mtouch.y;
    io.MouseDown[0] = true;
}
function canvas_on_touchmove(event) {
    for (let i = 0; i < event.changedTouches.length; i++) {
        let touch = event.changedTouches[i];
        multi_touch[touch.identifier] = { x: touch.clientX, y: touch.clientY };
    }
    let mtouch = multi_touch[touch_id];
    let io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MousePos.x = mtouch.x;
    io.MousePos.y = mtouch.y;
}
function canvas_on_touchend(event) {
    let io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    for (let i = 0; i < event.changedTouches.length; i++) {
        let touch = event.changedTouches[i];
        if (touch.identifier == touch_id) {
            io.MouseDown[0] = false;
        }
        delete multi_touch[touch.identifier];
    }
    touch_count++;
    if (touch_count >= 200) {
        multi_touch = {};
    }
}
function canvas_on_touchcancel(event) {
    canvas_on_touchend(event);
}
let is_contextlost = false;
function add_key_event() {
    window.addEventListener("keydown", canvas_on_keydown);
    window.addEventListener("keyup", canvas_on_keyup);
    window.addEventListener("keypress", canvas_on_keypress);
}
function remove_key_event() {
    window.removeEventListener("keydown", canvas_on_keydown);
    window.removeEventListener("keyup", canvas_on_keyup);
    window.removeEventListener("keypress", canvas_on_keypress);
}
function add_pointer_event() {
    if (canvas) {
        canvas.addEventListener("pointermove", canvas_on_pointermove);
        canvas.addEventListener("wheel", canvas_on_wheel);
        //canvas.addEventListener("pointerdown", canvas_on_pointerdown);
        //canvas.addEventListener("pointerup", canvas_on_pointerup);
        canvas.addEventListener("touchstart", canvas_on_touchstart);
        canvas.addEventListener("touchmove", canvas_on_touchmove);
        canvas.addEventListener("touchend", canvas_on_touchend);
        canvas.addEventListener("touchcancel", canvas_on_touchcancel);
    }
    window.addEventListener("pointerdown", canvas_on_pointerdown);
    window.addEventListener("pointerup", canvas_on_pointerup);
}
function remove_pointer_event() {
    if (canvas) {
        canvas.removeEventListener("pointermove", canvas_on_pointermove);
        canvas.removeEventListener("wheel", canvas_on_wheel);
        //canvas.removeEventListener("pointerdown", canvas_on_pointerdown);
        //canvas.removeEventListener("pointerup", canvas_on_pointerup);
        canvas.removeEventListener("touchstart", canvas_on_touchstart);
        canvas.removeEventListener("touchmove", canvas_on_touchmove);
        canvas.removeEventListener("touchend", canvas_on_touchend);
        canvas.removeEventListener("touchcancel", canvas_on_touchcancel);
    }
    window.removeEventListener("pointerdown", canvas_on_pointerdown);
    window.removeEventListener("pointerup", canvas_on_pointerup);
}
function canvas_on_contextlost(e) {
    e.preventDefault();
    console.log("canvas_on_contextlost");
    is_contextlost = true;
}
function canvas_on_contextrestored(e) {
    console.log("canvas_on_contextrestored");
    Init(canvas);
    is_contextlost = false;
}
function Init(value) {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (typeof (window) !== "undefined") {
        io.BackendPlatformName = "imgui_impl_browser";
        _imgui__WEBPACK_IMPORTED_MODULE_1__.LoadIniSettingsFromMemory(window.localStorage.getItem("imgui.ini") || "");
    }
    else {
        io.BackendPlatformName = "imgui_impl_console";
    }
    if (typeof (navigator) !== "undefined") {
        io.ConfigMacOSXBehaviors = navigator.platform.match(/Mac/) !== null;
    }
    /*
    if (typeof(document) !== "undefined") {
        document.body.addEventListener("copy", document_on_copy);
        document.body.addEventListener("cut", document_on_cut);
        document.body.addEventListener("paste", document_on_paste);
    }
    */
    io.SetClipboardTextFn = (user_data, text) => {
        clipboard_text = text;
        // console.log(`set clipboard_text: "${clipboard_text}"`);
        if (typeof navigator !== "undefined" && typeof navigator.clipboard !== "undefined") {
            // console.log(`clipboard.writeText: "${clipboard_text}"`);
            navigator.clipboard.writeText(clipboard_text).then(() => {
                // console.log(`clipboard.writeText: "${clipboard_text}" done.`);
            });
        }
    };
    io.GetClipboardTextFn = (user_data) => {
        // if (typeof navigator !== "undefined" && typeof (navigator as any).clipboard !== "undefined") {
        //     console.log(`clipboard.readText: "${clipboard_text}"`);
        //     (navigator as any).clipboard.readText().then((text: string): void => {
        //         clipboard_text = text;
        //         console.log(`clipboard.readText: "${clipboard_text}" done.`);
        //     });
        // }
        // console.log(`get clipboard_text: "${clipboard_text}"`);
        return clipboard_text;
    };
    io.ClipboardUserData = null;
    if (typeof (window) !== "undefined") {
        window.addEventListener("resize", window_on_resize);
        window.addEventListener("gamepadconnected", window_on_gamepadconnected);
        window.addEventListener("gamepaddisconnected", window_on_gamepaddisconnected);
    }
    if (typeof (window) !== "undefined") {
        if (value instanceof (HTMLCanvasElement)) {
            canvas = value;
            value = canvas.getContext("webgl2", { alpha: false }) || canvas.getContext("webgl", { alpha: false }) || canvas.getContext("2d");
        }
        if (typeof WebGL2RenderingContext !== "undefined" && value instanceof (WebGL2RenderingContext)) {
            io.BackendRendererName = "imgui_impl_webgl2";
            canvas = canvas || value.canvas;
            gl = value;
        }
        else if (typeof WebGLRenderingContext !== "undefined" && value instanceof (WebGLRenderingContext)) {
            io.BackendRendererName = "imgui_impl_webgl";
            canvas = canvas || value.canvas;
            gl = value;
        }
        else if (typeof CanvasRenderingContext2D !== "undefined" && value instanceof (CanvasRenderingContext2D)) {
            io.BackendRendererName = "imgui_impl_2d";
            canvas = canvas || value.canvas;
            ctx = value;
        }
    }
    if (canvas !== null) {
        window_on_resize();
        canvas.style.touchAction = "none"; // Disable browser handling of all panning and zooming gestures.
        canvas.addEventListener("blur", canvas_on_blur);
        add_key_event();
        add_pointer_event();
        canvas.addEventListener("contextmenu", canvas_on_contextmenu);
        canvas.addEventListener('webglcontextlost', canvas_on_contextlost, false);
        canvas.addEventListener('webglcontextrestored', canvas_on_contextrestored, false);
    }
    // Setup back-end capabilities flags
    io.BackendFlags |= _imgui__WEBPACK_IMPORTED_MODULE_1__.BackendFlags.HasMouseCursors; // We can honor GetMouseCursor() values (optional)
    // Keyboard mapping. ImGui will use those indices to peek into the io.KeyDown[] array.
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Tab] = 9;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.LeftArrow] = 37;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.RightArrow] = 39;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.UpArrow] = 38;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.DownArrow] = 40;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.PageUp] = 33;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.PageDown] = 34;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Home] = 36;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.End] = 35;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Insert] = 45;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Delete] = 46;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Backspace] = 8;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Space] = 32;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Enter] = 13;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Escape] = 27;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.KeyPadEnter] = key_code_to_index["NumpadEnter"];
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.A] = 65;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.C] = 67;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.V] = 86;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.X] = 88;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Y] = 89;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Z] = 90;
    CreateDeviceObjects();
}
function Shutdown() {
    DestroyDeviceObjects();
    remove_key_event();
    remove_pointer_event();
    if (canvas !== null) {
        canvas.removeEventListener("blur", canvas_on_blur);
        canvas.removeEventListener("contextmenu", canvas_on_contextmenu);
    }
    gl = null;
    ctx = null;
    canvas = null;
    if (typeof (window) !== "undefined") {
        window.removeEventListener("resize", window_on_resize);
        window.removeEventListener("gamepadconnected", window_on_gamepadconnected);
        window.removeEventListener("gamepaddisconnected", window_on_gamepaddisconnected);
    }
    if (typeof (document) !== "undefined") {
        document.body.removeEventListener("copy", document_on_copy);
        document.body.removeEventListener("cut", document_on_cut);
        document.body.removeEventListener("paste", document_on_paste);
    }
}
function ClearBuffer(color, bufferBit = gl.COLOR_BUFFER_BIT) {
    gl.clearColor(color.x, color.y, color.z, color.w);
    gl.clear(bufferBit);
}
function NewFrame(time) {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (io.WantSaveIniSettings) {
        io.WantSaveIniSettings = false;
        if (typeof (window) !== "undefined") {
            window.localStorage.setItem("imgui.ini", _imgui__WEBPACK_IMPORTED_MODULE_1__.SaveIniSettingsToMemory());
        }
    }
    const w = canvas && canvas.scrollWidth || 640;
    const h = canvas && canvas.scrollHeight || 480;
    const display_w = gl && gl.drawingBufferWidth || w;
    const display_h = gl && gl.drawingBufferHeight || h;
    io.DisplaySize.x = w;
    io.DisplaySize.y = h;
    io.DisplayFramebufferScale.x = w > 0 ? (display_w / w) : 0;
    io.DisplayFramebufferScale.y = h > 0 ? (display_h / h) : 0;
    const dt = time - prev_time;
    prev_time = time;
    io.DeltaTime = dt / 1000;
    if (io.WantSetMousePos) {
        console.log("TODO: MousePos", io.MousePos.x, io.MousePos.y);
    }
    if (typeof (document) !== "undefined") {
        if (io.MouseDrawCursor) {
            document.body.style.cursor = "none";
        }
        else {
            switch (_imgui__WEBPACK_IMPORTED_MODULE_1__.GetMouseCursor()) {
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.None:
                    document.body.style.cursor = "none";
                    break;
                default:
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.Arrow:
                    document.body.style.cursor = "default";
                    break;
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.TextInput:
                    document.body.style.cursor = "text";
                    break; // When hovering over InputText, etc.
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeAll:
                    document.body.style.cursor = "all-scroll";
                    break; // Unused
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNS:
                    document.body.style.cursor = "ns-resize";
                    break; // When hovering over an horizontal border
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeEW:
                    document.body.style.cursor = "ew-resize";
                    break; // When hovering over a vertical border or a column
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNESW:
                    document.body.style.cursor = "nesw-resize";
                    break; // When hovering over the bottom-left corner of a window
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNWSE:
                    document.body.style.cursor = "nwse-resize";
                    break; // When hovering over the bottom-right corner of a window
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.Hand:
                    document.body.style.cursor = "move";
                    break;
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.NotAllowed:
                    document.body.style.cursor = "not-allowed";
                    break;
            }
        }
    }
    // Gamepad navigation mapping [BETA]
    for (let i = 0; i < io.NavInputs.length; ++i) {
        // TODO: This is currently causing an issue and I have no gamepad to test with.
        //       The error is: ''set' on proxy: trap returned falsish for property '21'
        //       I think that the NavInputs are zeroed out by ImGui at the start of each frame anyway
        //       so I am not sure if the following is even necessary.
        //io.NavInputs[i] = 0.0;
    }
    if (io.ConfigFlags & _imgui__WEBPACK_IMPORTED_MODULE_1__.ConfigFlags.NavEnableGamepad) {
        // Update gamepad inputs
        const gamepads = (typeof (navigator) !== "undefined" && typeof (navigator.getGamepads) === "function") ? navigator.getGamepads() : [];
        for (let i = 0; i < gamepads.length; ++i) {
            const gamepad = gamepads[i];
            if (!gamepad) {
                continue;
            }
            io.BackendFlags |= _imgui__WEBPACK_IMPORTED_MODULE_1__.BackendFlags.HasGamepad;
            const buttons_count = gamepad.buttons.length;
            const axes_count = gamepad.axes.length;
            var MAP_BUTTON = function MAP_BUTTON(NAV_NO, BUTTON_NO) {
                if (!gamepad) {
                    return;
                }
                if (buttons_count > BUTTON_NO && gamepad.buttons[BUTTON_NO].pressed)
                    io.NavInputs[NAV_NO] = 1.0;
            };
            var MAP_ANALOG = function MAP_ANALOG(NAV_NO, AXIS_NO, V0, V1) {
                if (!gamepad) {
                    return;
                }
                let v = (axes_count > AXIS_NO) ? gamepad.axes[AXIS_NO] : V0;
                v = (v - V0) / (V1 - V0);
                if (v > 1.0)
                    v = 1.0;
                if (io.NavInputs[NAV_NO] < v)
                    io.NavInputs[NAV_NO] = v;
            };
            // TODO: map input based on vendor and product id
            // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id
            const match = gamepad.id.match(/^([0-9a-f]{4})-([0-9a-f]{4})-.*$/);
            const match_chrome = gamepad.id.match(/^.*\(.*Vendor: ([0-9a-f]{4}) Product: ([0-9a-f]{4})\).*$/);
            const vendor = (match && match[1]) || (match_chrome && match_chrome[1]) || "0000";
            const product = (match && match[2]) || (match_chrome && match_chrome[2]) || "0000";
            switch (vendor + product) {
                case "046dc216": // Logitech Logitech Dual Action (Vendor: 046d Product: c216)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 1); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 2); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 0); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 4, -0.3, -0.9); // D-Pad Left
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 4, +0.3, +0.9); // D-Pad Right
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 5, -0.3, -0.9); // D-Pad Up
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 5, +0.3, +0.9); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                case "046dc21d": // Logitech Gamepad F310 (STANDARD GAMEPAD Vendor: 046d Product: c21d)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 0); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 1); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 2); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 14); // D-Pad Left
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 15); // D-Pad Right
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 12); // D-Pad Up
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 13); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6, +0.3, +0.9); // L2 / LT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7, +0.3, +0.9); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                case "2dc86001": // 8Bitdo SN30 Pro  8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6001)
                case "2dc86101": // 8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6101)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 1); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 0); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 4); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 6, -0.3, -0.9); // D-Pad Left
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 6, +0.3, +0.9); // D-Pad Right
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 7, -0.3, -0.9); // D-Pad Up
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 7, +0.3, +0.9); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 6); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 7); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 8); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 9); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                default: // standard gamepad: https://w3c.github.io/gamepad/#remapping
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 0); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 1); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 2); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 14); // D-Pad Left
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 15); // D-Pad Right
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 12); // D-Pad Up
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 13); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
            }
        }
    }
}
function toRgba(col) {
    const r = (col >>> 24);
    const g = (col >> 16) & 0xFF;
    const b = (col >> 8) & 0xFF;
    const a = (col & 0xFF);
    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
}
let dom_font = null;
function font_update(io) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!dom_font) {
            dom_font = new _font__WEBPACK_IMPORTED_MODULE_0__.Font;
        }
        io.Fonts.Fonts.forEach(font => {
            let glyph = font.GlyphToCreate;
            while (glyph) {
                glyph = dom_font.Create(glyph, font);
                font.GlyphCreated(glyph);
                glyph = font.GlyphToCreate;
            }
        });
        dom_font.UpdateTexture();
    });
}
let current_window_id = 0;
let scroll_acc = new _imgui__WEBPACK_IMPORTED_MODULE_1__.ImVec2(0, 0);
let mouse_first_down = false;
function scroll_update(io) {
    const hoveredWin = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetHoveredWindow();
    const hoveredId = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetHoveredId();
    if (hoveredWin && hoveredId == 0) {
        if (current_window_id != hoveredWin.ID) {
            current_window_id = hoveredWin.ID;
            scroll_acc.Set(0, 0);
            mouse_first_down = true;
        }
        if (hoveredWin.Flags & _imgui__WEBPACK_IMPORTED_MODULE_1__.ImGuiWindowFlags.NoMove) {
            let first_down = false;
            if (io.MouseDown[0]) {
                first_down = mouse_first_down;
                mouse_first_down = false;
            }
            else {
                mouse_first_down = true;
            }
            let scroll = new _imgui__WEBPACK_IMPORTED_MODULE_1__.ImVec2(hoveredWin.Scroll.x, hoveredWin.Scroll.y);
            if (hoveredWin.ScrollbarY) {
                if (io.MouseDown[0] && !first_down) {
                    scroll.y -= io.MouseDelta.y;
                    scroll_acc.y = io.MouseDelta.y;
                }
                else if (Math.abs(scroll_acc.y) > 1) {
                    scroll.y -= scroll_acc.y;
                    scroll_acc.y *= 0.8;
                }
                if (scroll.y < 0)
                    scroll.y = 0;
                else if (scroll.y > hoveredWin.ScrollMax.y) {
                    scroll.y = hoveredWin.ScrollMax.y;
                }
                hoveredWin.Scroll = scroll;
            }
            if (hoveredWin.ScrollbarX) {
                if (io.MouseDown[0]) {
                    scroll.x -= io.MouseDelta.x;
                    scroll_acc.x = io.MouseDelta.x;
                }
                if (scroll.x < 0)
                    scroll.x = 0;
                else if (scroll.x > hoveredWin.ScrollMax.x) {
                    scroll.x = hoveredWin.ScrollMax.x;
                }
                hoveredWin.Scroll = scroll;
            }
        }
    }
}
let dom_input;
let current_input_id = 0;
let current_input_text;
function input_text_update(io) {
    const activeId = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetActiveId();
    const inpId = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetInputTextId();
    if (!activeId || activeId != inpId) {
        current_input_id = 0;
        return;
    }
    if (current_input_id != activeId) {
        dom_input = null;
    }
    current_input_id = activeId;
    let inpState = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetInputTextState(activeId);
    let inp = dom_input;
    if (!inp) {
        let textCol = _imgui__WEBPACK_IMPORTED_MODULE_1__.Vec4_toRGBA(_imgui__WEBPACK_IMPORTED_MODULE_1__.GetStyleColorVec4(_imgui__WEBPACK_IMPORTED_MODULE_1__.ImGuiCol.Text));
        let textBg = _imgui__WEBPACK_IMPORTED_MODULE_1__.Vec4_toRGBA(_imgui__WEBPACK_IMPORTED_MODULE_1__.GetStyleColorVec4(_imgui__WEBPACK_IMPORTED_MODULE_1__.ImGuiCol.WindowBg));
        if (inpState.Flags & _imgui__WEBPACK_IMPORTED_MODULE_1__.ImGuiInputTextFlags.Multiline) {
            inp = _input__WEBPACK_IMPORTED_MODULE_2__.GetInput(_input__WEBPACK_IMPORTED_MODULE_2__.EType.eMultiLine, textCol, textBg);
        }
        else if (inpState.Flags & _imgui__WEBPACK_IMPORTED_MODULE_1__.ImGuiInputTextFlags.Password) {
            inp = _input__WEBPACK_IMPORTED_MODULE_2__.GetInput(_input__WEBPACK_IMPORTED_MODULE_2__.EType.ePassword, textCol, textBg);
        }
        else {
            inp = _input__WEBPACK_IMPORTED_MODULE_2__.GetInput(_input__WEBPACK_IMPORTED_MODULE_2__.EType.eInput, textCol, textBg);
        }
        current_input_text = inpState.Text;
        inp.on_visible = b => {
            if (b) {
                remove_key_event();
                io.KeysDown[9] = false;
            }
            else {
                add_key_event();
                if (inp.isTab) {
                    io.KeysDown[9] = true;
                }
            }
        };
        inp.setText(current_input_text, activeId, io.Fonts.CurrentFont);
        dom_input = inp;
    }
    let framebb = inpState.FrameBB;
    inp.setRect(framebb.Min.x, framebb.Min.y, framebb.Max.x - framebb.Min.x, framebb.Max.y - framebb.Min.y);
    if (current_input_text !== inp.Text) {
        current_input_text = inp.Text;
        inpState.Text = inp.Text;
        //console.log(inp.Text);
    }
    if (!inp.isVisible) {
        _imgui__WEBPACK_IMPORTED_MODULE_1__.SetActiveId(0);
    }
}
function BindState() {
    gl && gl.enable(gl.BLEND);
    gl && gl.blendEquation(gl.FUNC_ADD);
    gl && gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    gl && gl.disable(gl.CULL_FACE);
    gl && gl.disable(gl.DEPTH_TEST);
    gl && gl.enable(gl.SCISSOR_TEST);
}
function BindShader(ortho_projection) {
    gl && gl.useProgram(g_ShaderHandle);
    gl && gl.uniform1i(g_AttribLocationTex, 0);
    gl && g_AttribLocationProjMtx && gl.uniformMatrix4fv(g_AttribLocationProjMtx, false, ortho_projection);
}
function BindMesh() {
    const gl2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext && gl || null;
    const gl_vao = gl && gl.getExtension("OES_vertex_array_object") || null;
    if (enable_vao) {
        if (!g_vao) {
            g_vao = gl2 && gl2.createVertexArray(); // || gl_vao && gl_vao.createVertexArrayOES();
        }
        gl2 && gl2.bindVertexArray(g_vao);
        //gl_vao && gl_vao.bindVertexArrayOES(vertex_array_object);
    }
    gl && gl.bindBuffer(gl.ARRAY_BUFFER, g_VboHandle);
    gl && gl.enableVertexAttribArray(g_AttribLocationPosition);
    gl && gl.enableVertexAttribArray(g_AttribLocationUV);
    gl && gl.enableVertexAttribArray(g_AttribLocationColor);
    gl && gl.vertexAttribPointer(g_AttribLocationPosition, 2, gl.FLOAT, false, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertPosOffset);
    gl && gl.vertexAttribPointer(g_AttribLocationUV, 2, gl.FLOAT, false, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertUVOffset);
    gl && gl.vertexAttribPointer(g_AttribLocationColor, 4, gl.UNSIGNED_BYTE, true, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertColOffset);
}
function UnbindMesh() {
    const gl2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext && gl || null;
    if (enable_vao) {
        gl2 && gl2.bindVertexArray(null);
        //gl2 && gl2.deleteVertexArray(vertex_array_object);
        //gl_vao && gl_vao.deleteVertexArrayOES(vertex_array_object);
    }
    else {
        gl && gl.bindBuffer(gl.ARRAY_BUFFER, null);
        gl && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    }
}
function RenderDrawData(draw_data = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetDrawData()) {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    font_update(io);
    scroll_update(io);
    input_text_update(io);
    if (draw_data === null) {
        throw new Error();
    }
    gl || ctx || console.log(draw_data);
    // Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)
    const fb_width = io.DisplaySize.x * io.DisplayFramebufferScale.x;
    const fb_height = io.DisplaySize.y * io.DisplayFramebufferScale.y;
    if (fb_width === 0 || fb_height === 0) {
        return;
    }
    draw_data.ScaleClipRects(io.DisplayFramebufferScale);
    const gl2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext && gl || null;
    const gl_vao = gl && gl.getExtension("OES_vertex_array_object") || null;
    // Backup GL state
    //const last_active_texture: GLenum | null = gl && gl.getParameter(gl.ACTIVE_TEXTURE) || null;
    //const last_program: WebGLProgram | null = gl && gl.getParameter(gl.CURRENT_PROGRAM) || null;
    //const last_texture: WebGLTexture | null = gl && gl.getParameter(gl.TEXTURE_BINDING_2D) || null;
    //const last_array_buffer: WebGLBuffer | null = gl && gl.getParameter(gl.ARRAY_BUFFER_BINDING) || null;
    //const last_element_array_buffer: WebGLBuffer | null = gl && gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING) || null;
    //const last_vertex_array_object: WebGLVertexArrayObject | WebGLVertexArrayObjectOES | null = gl2 && gl2.getParameter(gl2.VERTEX_ARRAY_BINDING) || gl && gl_vao && gl.getParameter(gl_vao.VERTEX_ARRAY_BINDING_OES) || null;
    // GLint last_polygon_mode[2]; glGetIntegerv(GL_POLYGON_MODE, last_polygon_mode);
    //const last_viewport: Int32Array | null = gl && gl.getParameter(gl.VIEWPORT) || null;
    //const last_scissor_box: Int32Array | null = gl && gl.getParameter(gl.SCISSOR_BOX) || null;
    //const last_blend_src_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_SRC_RGB) || null;
    //const last_blend_dst_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_DST_RGB) || null;
    //const last_blend_src_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_SRC_ALPHA) || null;
    //const last_blend_dst_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_DST_ALPHA) || null;
    //const last_blend_equation_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_EQUATION_RGB) || null;
    //const last_blend_equation_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_EQUATION_ALPHA) || null;
    //const last_enable_blend: GLboolean | null = gl && gl.getParameter(gl.BLEND) || null;
    //const last_enable_cull_face: GLboolean | null = gl && gl.getParameter(gl.CULL_FACE) || null;
    //const last_enable_depth_test: GLboolean | null = gl && gl.getParameter(gl.DEPTH_TEST) || null;
    //const last_enable_scissor_test: GLboolean | null = gl && gl.getParameter(gl.SCISSOR_TEST) || null;
    const last_enable_scissor_test = false;
    // Setup desired GL state
    // Recreate the VAO every time (this is to easily allow multiple GL contexts to be rendered to. VAO are not shared among GL contexts)
    // The renderer would actually work without any VAO bound, but then our VertexAttrib calls would overwrite the default one currently bound.
    // Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill
    BindState();
    // glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    // Setup viewport, orthographic projection matrix
    // Our visible imgui space lies from draw_data->DisplayPps (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayMin is typically (0,0) for single viewport apps.
    gl && gl.viewport(0, 0, fb_width, fb_height);
    const L = draw_data.DisplayPos.x;
    const R = draw_data.DisplayPos.x + draw_data.DisplaySize.x;
    const T = draw_data.DisplayPos.y;
    const B = draw_data.DisplayPos.y + draw_data.DisplaySize.y;
    const ortho_projection = new Float32Array([
        2.0 / (R - L), 0.0, 0.0, 0.0,
        0.0, 2.0 / (T - B), 0.0, 0.0,
        0.0, 0.0, -1.0, 0.0,
        (R + L) / (L - R), (T + B) / (B - T), 0.0, 1.0,
    ]);
    BindShader(ortho_projection);
    BindMesh();
    // Draw
    const pos = draw_data.DisplayPos;
    let idx_buffer_type;
    draw_data.IterateDrawLists((draw_list) => {
        gl || ctx || console.log(draw_list);
        gl || ctx || console.log("VtxBuffer.length", draw_list.VtxBuffer.length);
        gl || ctx || console.log("IdxBuffer.length", draw_list.IdxBuffer.length);
        let idx_buffer_offset = 0;
        const vx = draw_list.VtxBuffer;
        const ix = draw_list.IdxBuffer;
        let ixU = null;
        switch (_imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize) {
            case 1:
                ixU = new Uint8Array(ix.buffer.slice(ix.byteOffset, ix.byteOffset + ix.byteLength));
                idx_buffer_type = gl.UNSIGNED_BYTE;
                break;
            case 2:
                ixU = new Uint16Array(ix.buffer.slice(ix.byteOffset, ix.byteOffset + ix.byteLength));
                idx_buffer_type = gl.UNSIGNED_SHORT;
                break;
            case 4:
                ixU = new Uint32Array(ix.buffer.slice(ix.byteOffset, ix.byteOffset + ix.byteLength));
                idx_buffer_type = gl.UNSIGNED_INT;
                break;
        }
        if (vx) {
            gl && gl.bindBuffer(gl.ARRAY_BUFFER, g_VboHandle);
            gl && gl.bufferData(gl.ARRAY_BUFFER, vx, gl.STREAM_DRAW);
        }
        if (ixU) {
            gl && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, g_ElementsHandle);
            gl && gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ixU, gl.STREAM_DRAW);
        }
        draw_list.IterateDrawCmds((draw_cmd) => {
            gl || ctx || console.log(draw_cmd);
            gl || ctx || console.log("ElemCount", draw_cmd.ElemCount);
            gl || ctx || console.log("ClipRect", draw_cmd.ClipRect.x, fb_height - draw_cmd.ClipRect.w, draw_cmd.ClipRect.z - draw_cmd.ClipRect.x, draw_cmd.ClipRect.w - draw_cmd.ClipRect.y);
            gl || ctx || console.log("TextureId", draw_cmd.TextureId);
            if (!gl && !ctx) {
                console.log("i: pos.x pos.y uv.x uv.y col");
                for (let i = 0; i < Math.min(3, draw_cmd.ElemCount); ++i) {
                    const view = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                    console.log(`${i}: ${view.pos[0].toFixed(2)} ${view.pos[1].toFixed(2)} ${view.uv[0].toFixed(5)} ${view.uv[1].toFixed(5)} ${("00000000" + view.col[0].toString(16)).substr(-8)}`);
                }
            }
            if (draw_cmd.UserCallback !== null) {
                // User callback (registered via ImDrawList::AddCallback)
                UnbindMesh();
                draw_cmd.UserCallback(draw_list, draw_cmd);
                BindState();
                BindShader(ortho_projection);
                BindMesh();
            }
            else {
                const clip_rect = new _imgui__WEBPACK_IMPORTED_MODULE_1__.Vec4(draw_cmd.ClipRect.x - pos.x, draw_cmd.ClipRect.y - pos.y, draw_cmd.ClipRect.z - pos.x, draw_cmd.ClipRect.w - pos.y);
                if (clip_rect.x < fb_width && clip_rect.y < fb_height && clip_rect.z >= 0.0 && clip_rect.w >= 0.0) {
                    // Apply scissor/clipping rectangle
                    gl && gl.scissor(clip_rect.x, fb_height - clip_rect.w, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);
                    // Bind texture, Draw
                    gl && gl.activeTexture(gl.TEXTURE0);
                    gl && gl.bindTexture(gl.TEXTURE_2D, draw_cmd.TextureId);
                    gl && gl.drawElements(gl.TRIANGLES, draw_cmd.ElemCount, idx_buffer_type, idx_buffer_offset);
                    if (ctx) {
                        ctx.save();
                        ctx.beginPath();
                        ctx.rect(clip_rect.x, clip_rect.y, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);
                        ctx.clip();
                        const idx = _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize === 4 ?
                            new Uint32Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset) :
                            new Uint16Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset);
                        for (let i = 0; i < draw_cmd.ElemCount; i += 3) {
                            const i0 = idx[i + 0];
                            const i1 = idx[i + 1];
                            const i2 = idx[i + 2];
                            const v0 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i0 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            const v1 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i1 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            const v2 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i2 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            const i3 = idx[i + 3];
                            const i4 = idx[i + 4];
                            const i5 = idx[i + 5];
                            const v3 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i3 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            const v4 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i4 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            const v5 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i5 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            let quad = true;
                            let minmin = v0;
                            let minmax = v0;
                            let maxmin = v0;
                            let maxmax = v0;
                            for (const v of [v1, v2, v3, v4, v5]) {
                                let found = false;
                                if (v.pos[0] <= minmin.pos[0] && v.pos[1] <= minmin.pos[1]) {
                                    minmin = v;
                                    found = true;
                                }
                                if (v.pos[0] <= minmax.pos[0] && v.pos[1] >= minmax.pos[1]) {
                                    minmax = v;
                                    found = true;
                                }
                                if (v.pos[0] >= maxmin.pos[0] && v.pos[1] <= maxmin.pos[1]) {
                                    maxmin = v;
                                    found = true;
                                }
                                if (v.pos[0] >= maxmax.pos[0] && v.pos[1] >= maxmax.pos[1]) {
                                    maxmax = v;
                                    found = true;
                                }
                                if (!found) {
                                    quad = false;
                                }
                            }
                            quad = quad && (minmin.pos[0] === minmax.pos[0]);
                            quad = quad && (maxmin.pos[0] === maxmax.pos[0]);
                            quad = quad && (minmin.pos[1] === maxmin.pos[1]);
                            quad = quad && (minmax.pos[1] === maxmax.pos[1]);
                            if (quad) {
                                if (minmin.uv[0] === maxmax.uv[0] || minmin.uv[1] === maxmax.uv[1]) {
                                    // one vertex color
                                    ctx.beginPath();
                                    ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    ctx.fillStyle = `rgba(${v0.col[0] >> 0 & 0xff}, ${v0.col[0] >> 8 & 0xff}, ${v0.col[0] >> 16 & 0xff}, ${(v0.col[0] >> 24 & 0xff) / 0xff})`;
                                    ctx.fill();
                                }
                                else {
                                    // no vertex color
                                    const image = draw_cmd.TextureId; // HACK
                                    let width = 0;
                                    let height = 0;
                                    if (image instanceof HTMLVideoElement) {
                                        width = image.videoWidth;
                                        height = image.videoHeight;
                                    }
                                    else if (has_videoframe && image instanceof VideoFrame) {
                                        width = image.displayWidth;
                                        height = image.displayHeight;
                                    }
                                    else {
                                        let src = image;
                                        width = src.width;
                                        height = src.height;
                                    }
                                    image && ctx.drawImage(image, minmin.uv[0] * width, minmin.uv[1] * height, (maxmax.uv[0] - minmin.uv[0]) * width, (maxmax.uv[1] - minmin.uv[1]) * height, minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    // ctx.beginPath();
                                    // ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    // ctx.strokeStyle = "yellow";
                                    // ctx.stroke();
                                }
                                i += 3;
                            }
                            else {
                                // one vertex color, no texture
                                ctx.beginPath();
                                ctx.moveTo(v0.pos[0], v0.pos[1]);
                                ctx.lineTo(v1.pos[0], v1.pos[1]);
                                ctx.lineTo(v2.pos[0], v2.pos[1]);
                                ctx.closePath();
                                ctx.fillStyle = `rgba(${v0.col[0] >> 0 & 0xff}, ${v0.col[0] >> 8 & 0xff}, ${v0.col[0] >> 16 & 0xff}, ${(v0.col[0] >> 24 & 0xff) / 0xff})`;
                                ctx.fill();
                            }
                        }
                        ctx.restore();
                    }
                }
            }
            idx_buffer_offset += draw_cmd.ElemCount * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize;
        });
    });
    // Destroy the temporary VAO
    UnbindMesh();
    // Restore modified GL state
    //gl && (last_program !== null) && gl.useProgram(last_program);
    //gl && (last_texture !== null) && gl.bindTexture(gl.TEXTURE_2D, last_texture);
    //gl && (last_active_texture !== null) && gl.activeTexture(last_active_texture);
    //gl2 && gl2.bindVertexArray(last_vertex_array_object);
    //gl_vao && gl_vao.bindVertexArrayOES(last_vertex_array_object);
    //gl && (last_array_buffer !== null) && gl.bindBuffer(gl.ARRAY_BUFFER, last_array_buffer);
    //gl && (last_element_array_buffer !== null) && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, last_element_array_buffer);
    //gl && (last_blend_equation_rgb !== null && last_blend_equation_alpha !== null) && gl.blendEquationSeparate(last_blend_equation_rgb, last_blend_equation_alpha);
    //gl && (last_blend_src_rgb !== null && last_blend_src_alpha !== null && last_blend_dst_rgb !== null && last_blend_dst_alpha !== null) && gl.blendFuncSeparate(last_blend_src_rgb, last_blend_src_alpha, last_blend_dst_rgb, last_blend_dst_alpha);
    //gl && (last_enable_blend ? gl.enable(gl.BLEND) : gl.disable(gl.BLEND));
    //gl && (last_enable_cull_face ? gl.enable(gl.CULL_FACE) : gl.disable(gl.CULL_FACE));
    //gl && (last_enable_depth_test ? gl.enable(gl.DEPTH_TEST) : gl.disable(gl.DEPTH_TEST));
    gl && (last_enable_scissor_test ? gl.enable(gl.SCISSOR_TEST) : gl.disable(gl.SCISSOR_TEST));
    // glPolygonMode(GL_FRONT_AND_BACK, (GLenum)last_polygon_mode[0]);
    //gl && (last_viewport !== null) && gl.viewport(last_viewport[0], last_viewport[1], last_viewport[2], last_viewport[3]);
    //gl && (last_scissor_box !== null) && gl.scissor(last_scissor_box[0], last_scissor_box[1], last_scissor_box[2], last_scissor_box[3]);
}
function CreateFontsTexture() {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    // Backup GL state
    const last_texture = gl && gl.getParameter(gl.TEXTURE_BINDING_2D);
    // Build texture atlas
    // const width: number = 256;
    // const height: number = 256;
    // const pixels: Uint8Array = new Uint8Array(4 * width * height).fill(0xff);
    //const { width, height, pixels } = io.Fonts.GetTexDataAsRGBA32();   // Load as RGBA 32-bits (75% of the memory is wasted, but default font is so small) because it is more likely to be compatible with user's existing shaders. If your ImTextureId represent a higher-level concept than just a GL texture id, consider calling GetTexDataAsAlpha8() instead to save on GPU memory.
    const { width, height, pixels } = io.Fonts.GetTexDataAsAlpha8();
    if (width && height && pixels) {
        let rgba4 = new Uint16Array(width * height);
        let i = 0;
        pixels.forEach(p => {
            rgba4[i] = 0xFFF0 | (p >> 4);
            i++;
        });
        // Upload texture to graphics system
        g_FontTexture = gl && gl.createTexture();
        gl && gl.bindTexture(gl.TEXTURE_2D, g_FontTexture);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        // gl && gl.pixelStorei(gl.UNPACK_ROW_LENGTH); // WebGL2
        gl && gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, rgba4);
        //gl && gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
        // Store our identifier
        io.Fonts.TexID = g_FontTexture || { foo: "bar" };
        // console.log("font texture id", g_FontTexture);
    }
    if (ctx) {
        const image_canvas = document.createElement("canvas");
        image_canvas.width = width;
        image_canvas.height = height;
        const image_ctx = image_canvas.getContext("2d");
        if (image_ctx === null) {
            throw new Error();
        }
        const image_data = image_ctx.getImageData(0, 0, width, height);
        image_data.data.set(pixels);
        image_ctx.putImageData(image_data, 0, 0);
        io.Fonts.TexID = image_canvas;
    }
    // Restore modified GL state
    gl && last_texture && gl.bindTexture(gl.TEXTURE_2D, last_texture);
}
function DestroyFontsTexture() {
    const io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.Fonts.TexID = null;
    gl && gl.deleteTexture(g_FontTexture);
    g_FontTexture = null;
    if (dom_font) {
        dom_font.Destroy();
        dom_font = null;
    }
}
function CreateDeviceObjects() {
    const vertex_shader = [
        "uniform mat4 ProjMtx;",
        "attribute vec2 Position;",
        "attribute vec2 UV;",
        "attribute vec4 Color;",
        "varying vec2 Frag_UV;",
        "varying vec4 Frag_Color;",
        "void main() {",
        "	Frag_UV = UV;",
        "	Frag_Color = Color;",
        "	gl_Position = ProjMtx * vec4(Position.xy,0,1);",
        "}",
    ];
    const fragment_shader = [
        "precision mediump float;",
        "uniform sampler2D Texture;",
        "varying vec2 Frag_UV;",
        "varying vec4 Frag_Color;",
        "void main() {",
        "	gl_FragColor = Frag_Color * texture2D(Texture, Frag_UV);",
        "}",
    ];
    g_ShaderHandle = gl && gl.createProgram();
    g_VertHandle = gl && gl.createShader(gl.VERTEX_SHADER);
    g_FragHandle = gl && gl.createShader(gl.FRAGMENT_SHADER);
    gl && gl.shaderSource(g_VertHandle, vertex_shader.join("\n"));
    gl && gl.shaderSource(g_FragHandle, fragment_shader.join("\n"));
    gl && gl.compileShader(g_VertHandle);
    gl && gl.compileShader(g_FragHandle);
    gl && gl.attachShader(g_ShaderHandle, g_VertHandle);
    gl && gl.attachShader(g_ShaderHandle, g_FragHandle);
    gl && gl.linkProgram(g_ShaderHandle);
    g_AttribLocationTex = gl && gl.getUniformLocation(g_ShaderHandle, "Texture");
    g_AttribLocationProjMtx = gl && gl.getUniformLocation(g_ShaderHandle, "ProjMtx");
    g_AttribLocationPosition = gl && gl.getAttribLocation(g_ShaderHandle, "Position") || 0;
    g_AttribLocationUV = gl && gl.getAttribLocation(g_ShaderHandle, "UV") || 0;
    g_AttribLocationColor = gl && gl.getAttribLocation(g_ShaderHandle, "Color") || 0;
    g_VboHandle = gl && gl.createBuffer();
    g_ElementsHandle = gl && gl.createBuffer();
    CreateFontsTexture();
}
function DestroyDeviceObjects() {
    DestroyFontsTexture();
    const gl2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext && gl || null;
    if (g_vao) {
        gl2 && gl2.deleteVertexArray(g_vao);
    }
    gl && gl.deleteBuffer(g_VboHandle);
    g_VboHandle = null;
    gl && gl.deleteBuffer(g_ElementsHandle);
    g_ElementsHandle = null;
    g_AttribLocationTex = null;
    g_AttribLocationProjMtx = null;
    g_AttribLocationPosition = -1;
    g_AttribLocationUV = -1;
    g_AttribLocationColor = -1;
    gl && gl.deleteProgram(g_ShaderHandle);
    g_ShaderHandle = null;
    gl && gl.deleteShader(g_VertHandle);
    g_VertHandle = null;
    gl && gl.deleteShader(g_FragHandle);
    g_FragHandle = null;
}
class Texture {
    constructor(param) {
        this._internalFormat = gl.RGBA;
        this._srcFormat = gl.RGBA;
        this._srcType = gl.UNSIGNED_BYTE;
        this._wrapS = gl.CLAMP_TO_EDGE;
        this._wrapT = gl.CLAMP_TO_EDGE;
        this._minFilter = gl.LINEAR;
        this._magFilter = gl.LINEAR;
        this._width = 1;
        this._height = 1;
    }
    Destroy() {
        if (this._texture) {
            gl && gl.deleteTexture(this._texture);
            this._texture = null;
        }
    }
    Bind(index = gl.TEXTURE0) {
        gl.activeTexture(index);
        gl.bindTexture(gl.TEXTURE_2D, this._texture);
    }
    Update(src, param) {
        let w, h;
        if (src == null) {
            if (param) {
                w = param.width;
                h = param.height;
            }
        }
        else if (src instanceof HTMLVideoElement) {
            let srcVideo = src;
            if (srcVideo) {
                w = srcVideo.videoWidth;
                h = srcVideo.videoHeight;
            }
        }
        else if (has_videoframe && src instanceof VideoFrame) {
            w = src.displayWidth;
            h = src.displayHeight;
        }
        else if (src instanceof Uint8Array || src instanceof Uint16Array) {
            if (param) {
                w = param.width;
                h = param.height;
            }
            else {
                w = this._width;
                h = this._height;
            }
        }
        else {
            let s = src;
            w = s.width;
            h = s.height;
        }
        if (!this._texture) {
            this._texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this._texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        }
        const level = param ? param.level ? param.level : 0 : 0;
        gl.bindTexture(gl.TEXTURE_2D, this._texture);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this._minFilter);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this._magFilter);
        if (w != this._width || h != this._height) {
            if (src == null) {
                const data = null;
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, w, h, 0, this._srcFormat, this._srcType, data);
            }
            else if (src instanceof Uint8Array || src instanceof Uint16Array) {
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, w, h, 0, this._srcFormat, this._srcType, src);
            }
            else {
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, this._srcFormat, this._srcType, src);
            }
            this._width = w;
            this._height = h;
        }
        else {
            if (src instanceof Uint8Array || src instanceof Uint16Array) {
                gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, w, h, this._srcFormat, this._srcType, src);
            }
            else {
                gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, this._srcFormat, this._srcType, src);
            }
        }
    }
}
class TextureCache {
    constructor() {
        this.cache = {};
    }
    Destroy() {
        Object.entries(this.cache).forEach(([key, value]) => {
            value.Destroy();
        });
        this.cache = {};
    }
    Load(name, src) {
        return __awaiter(this, void 0, void 0, function* () {
            var tex = new Texture();
            var image = new Image();
            image.crossOrigin = "anonymous";
            image.src = src;
            image.onload = () => {
                tex.Update(image);
            };
            this.cache[name] = tex;
            return tex;
        });
    }
}
class FrameBufferObject {
    constructor() {
    }
    Destroy() {
        if (this._target) {
            this._target.Destroy();
            this._target = null;
        }
        if (this._depth) {
            gl.deleteRenderbuffer(this._depth);
            this._depth = null;
        }
        if (this._fbo) {
            gl.deleteFramebuffer(this._fbo);
            this._fbo = null;
        }
    }
    Create(width, height, format = gl.RGB, depth = gl.DEPTH_COMPONENT16) {
        this.width = width;
        this.height = height;
        this.format = format;
        this.depth_format = depth;
    }
    Bind(use = true) {
        if (use) {
            if (!this._target) {
                let target = new Texture();
                target._srcFormat = target._internalFormat = this.format;
                target.Update(null, { width: this.width, height: this.height });
                this._target = target;
            }
            if (this.depth_format && !this._depth) {
                let depth = gl.createRenderbuffer();
                gl.bindRenderbuffer(gl.RENDERBUFFER, depth);
                gl.renderbufferStorage(gl.RENDERBUFFER, this.depth_format, this.width, this.height);
                this._depth = depth;
            }
            if (!this._fbo) {
                let fbo = gl.createFramebuffer();
                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._target._texture, 0);
                if (this._depth) {
                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depth);
                }
                this._fbo = fbo;
            }
            gl.bindFramebuffer(gl.FRAMEBUFFER, this._fbo);
            gl.viewport(0, 0, this.width, this.height);
        }
        else {
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
    }
    get_texture() {
        return this._target ? this._target._texture : null;
    }
}
class Shader {
    constructor() {
    }
    Destroy() {
        if (this._program) {
            gl && gl.deleteProgram(this._program);
            this._program = null;
        }
        if (this._vs) {
            gl && gl.deleteShader(this._vs);
            this._vs = null;
        }
        if (this._ps) {
            gl && gl.deleteShader(this._ps);
            this._ps = null;
        }
    }
    Create(vsCode, psCode) {
        let vs;
        if (vsCode) {
            vs = gl && gl.createShader(gl.VERTEX_SHADER);
            gl && gl.shaderSource(vs, vsCode.join("\n"));
            gl && gl.compileShader(vs);
            if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
                console.log('VertexShader compile failed: ' + gl.getShaderInfoLog(vs));
            }
            this._vs = vs;
        }
        else {
            vs = g_VertHandle;
        }
        let ps;
        if (psCode) {
            ps = gl && gl.createShader(gl.FRAGMENT_SHADER);
            gl && gl.shaderSource(ps, psCode.join("\n"));
            gl && gl.compileShader(ps);
            if (!gl.getShaderParameter(ps, gl.COMPILE_STATUS)) {
                console.log('FragmentShader compile failed: ' + gl.getShaderInfoLog(ps));
            }
            this._ps = ps;
        }
        else {
            ps = g_FragHandle;
        }
        let program = gl && gl.createProgram();
        gl && gl.attachShader(program, vs);
        gl && gl.attachShader(program, ps);
        gl && gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.log('linkProgram failed: ' + gl.getProgramInfoLog(program));
        }
        this._program = program;
    }
}


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImGui: () => (/* reexport module object */ _imgui__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   ImGuiObject: () => (/* binding */ ImGuiObject),
/* harmony export */   ImGui_Impl: () => (/* reexport module object */ _imgui_impl__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   version: () => (/* binding */ version)
/* harmony export */ });
/* harmony import */ var _imgui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imgui */ "./src/imgui.ts");
/* harmony import */ var _imgui_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imgui_impl */ "./src/imgui_impl.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const version = "0.1.43";
function ImGuiObject(obj, id = 0) {
    if (obj == null) {
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("(null)");
        return id;
    }
    Object.entries(obj).forEach(([key, value]) => {
        _imgui__WEBPACK_IMPORTED_MODULE_0__.PushID(id);
        id++;
        if (value == null) {
            _imgui__WEBPACK_IMPORTED_MODULE_0__.Text(key + ": (null)");
        }
        else if (typeof (value) === 'object') {
            if (_imgui__WEBPACK_IMPORTED_MODULE_0__.TreeNode(key)) {
                id = ImGuiObject(value, id + 1);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.TreePop();
            }
        }
        else if (typeof (value) === 'number') {
            let v = (_ = value) => obj[key] = _;
            _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextItemWidth(100);
            _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat(key, v);
        }
        else if (typeof (value) === 'boolean') {
            let v = (_ = value) => obj[key] = _;
            _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextItemWidth(100);
            _imgui__WEBPACK_IMPORTED_MODULE_0__.Checkbox(key, v);
        }
        else {
            _imgui__WEBPACK_IMPORTED_MODULE_0__.Text(key + ": " + value);
        }
        _imgui__WEBPACK_IMPORTED_MODULE_0__.PopID();
    });
    return id;
}
let _main;
function _loop(time) {
    _main.loop(time);
    window.requestAnimationFrame(_loop);
}
class Main {
    constructor() {
        this.text = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'whats up');
        this.text2 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'もじ/もんじ');
        this.text_area = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'whats up multiline');
        this.text_area2 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, '觀自在菩薩，行深般若波羅蜜多時，\n照見五蘊皆空，度一切苦厄。');
        this.first = true;
        this.v4 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.Vec4;
        this.image_src = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, '');
        this.textureCache = new _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.TextureCache;
        this.tm = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImTransform();
        this.v1 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.Vec2(-100, -50);
        this.v2 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.Vec2(100, 100);
    }
    ImGuiWindow(win) {
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("ID:" + win.ID);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat2("Pos", win.Pos);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.SliderFloat2("Scroll", win.Scroll, 0, win.ScrollMax.y);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat2("ScrollMax", win.ScrollMax);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("ScrollbarX:" + win.ScrollbarX);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("ScrollbarY:" + win.ScrollbarY);
    }
    loop(time) {
        if (_imgui_impl__WEBPACK_IMPORTED_MODULE_1__.is_contextlost)
            return;
        if (!_imgui_impl__WEBPACK_IMPORTED_MODULE_1__.any_pointerdown() && time - this.prev_time < 1000.0 / 30) {
            //return;
        }
        this.prev_time = time;
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.NewFrame(time);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.NewFrame();
        if (this.first) {
            _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextWindowPos(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec2(0, 0));
            if (_imgui__WEBPACK_IMPORTED_MODULE_0__.isMobile.any())
                _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextWindowSize(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec2(_imgui_impl__WEBPACK_IMPORTED_MODULE_1__.canvas.scrollWidth, _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.canvas.scrollHeight));
            this.first = false;
        }
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Begin("Hello");
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("Version " + _imgui__WEBPACK_IMPORTED_MODULE_0__.VERSION);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Input", this.text);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextItemWidth(-_imgui__WEBPACK_IMPORTED_MODULE_0__.FLT_MIN);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Input2", this.text2);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Password", this.text, this.text.size, _imgui__WEBPACK_IMPORTED_MODULE_0__.InputTextFlags.Password);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputTextMultiline("Text", this.text_area);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextItemWidth(-_imgui__WEBPACK_IMPORTED_MODULE_0__.FLT_MIN);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputTextMultiline("Text2", this.text_area2);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.TextWrapped(this.text_area2.buffer);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.SliderFloat4("Slider", this.v4, 0, 100);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat4("Float4", this.v4);
        //this.ImObject(ImGui.GetCurrentWindow());
        let win = _imgui__WEBPACK_IMPORTED_MODULE_0__.GetHoveredWindow();
        if (win) {
            if (_imgui__WEBPACK_IMPORTED_MODULE_0__.TreeNode("HoveredWindow")) {
                this.ImGuiWindow(win);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.TreePop();
            }
        }
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("HoveredID:" + _imgui__WEBPACK_IMPORTED_MODULE_0__.GetHoveredId());
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("ActiveID:" + _imgui__WEBPACK_IMPORTED_MODULE_0__.GetActiveId());
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("InputTextID:" + _imgui__WEBPACK_IMPORTED_MODULE_0__.GetInputTextId());
        let inpText = _imgui__WEBPACK_IMPORTED_MODULE_0__.GetInputTextState(_imgui__WEBPACK_IMPORTED_MODULE_0__.GetInputTextId());
        if (inpText) {
            if (_imgui__WEBPACK_IMPORTED_MODULE_0__.TreeNode("InputText")) {
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("ID:" + inpText.ID);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("Flags:" + inpText.Flags);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat2("FrameBBMin", inpText.FrameBB.Min);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat2("FrameBBMax", inpText.FrameBB.Max);
                let text = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, inpText.Text);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Text", text);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.TreePop();
            }
        }
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat2("scroll_acc", _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.scroll_acc);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.TextColored(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec4(0, 1, 0, 1), "FontTexturePool");
        if (_imgui_impl__WEBPACK_IMPORTED_MODULE_1__.dom_font && _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.dom_font.texturePage) {
            _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.dom_font.texturePage.forEach(page => {
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Image(page.Texure._texture, new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec2(512, 512));
            });
        }
        if (_imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("image_src", this.image_src)) {
            this.textureCache.Load("img", this.image_src.buffer).then(img => {
                this.image = img;
            });
        }
        if (this.image) {
            _imgui__WEBPACK_IMPORTED_MODULE_0__.Image(this.image._texture, new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec2(256, 256));
            var drawList = _imgui__WEBPACK_IMPORTED_MODULE_0__.GetForegroundDrawList();
            drawList.AddImage(this.image._texture, new _imgui__WEBPACK_IMPORTED_MODULE_0__.Vec2(0, 0), new _imgui__WEBPACK_IMPORTED_MODULE_0__.Vec2(100, 100));
        }
        let drawlist = _imgui__WEBPACK_IMPORTED_MODULE_0__.GetBackgroundDrawList();
        drawlist.AddCallback((drawlist, cmd) => {
            console.log("this is a drawlist callback " + cmd.UserCallbackData);
        }, 1);
        let vstart = drawlist.GetVertexSize();
        drawlist.AddRectFilledMultiColorRound(this.v1, this.v2, 0xff00ff00, 0xffffff00, 0xff00ffff, 0xff0000ff, 4, _imgui__WEBPACK_IMPORTED_MODULE_0__.ImDrawCornerFlags.All);
        drawlist.AddRect(this.v1, this.v2, 0xff0000ff, 4, _imgui__WEBPACK_IMPORTED_MODULE_0__.ImDrawCornerFlags.All);
        let font = _imgui__WEBPACK_IMPORTED_MODULE_0__.GetFont();
        font.RenderText(drawlist, 16, this.v1, 0xffffffff, new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec4(-100, -50, 100, 100), "Hello, World!");
        this.tm.rotate.SetRotate(time * 0.001);
        this.tm.translate.Set(200, 200);
        this.tm.scale = 1 + Math.sin(time * 0.001) * 0.25;
        drawlist.Transform(this.tm, vstart);
        drawlist.AddCallback((drawlist, cmd) => {
            console.log("this is a drawlist callback " + cmd.UserCallbackData);
        }, 2);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.End();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.ShowDemoWindow();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.ShowMetricsWindow();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.EndFrame();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Render();
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.ClearBuffer(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec4(0.25, 0.25, 0.25, 1));
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.RenderDrawData(_imgui__WEBPACK_IMPORTED_MODULE_0__.GetDrawData());
    }
}
window.addEventListener('DOMContentLoaded', () => __awaiter(void 0, void 0, void 0, function* () {
    yield _imgui__WEBPACK_IMPORTED_MODULE_0__["default"]();
    _imgui__WEBPACK_IMPORTED_MODULE_0__.CHECKVERSION();
    console.log("ImGui.CreateContext() VERSION=", _imgui__WEBPACK_IMPORTED_MODULE_0__.VERSION);
    console.log("imgui-ts version=", version);
    _imgui__WEBPACK_IMPORTED_MODULE_0__.CreateContext();
    _imgui__WEBPACK_IMPORTED_MODULE_0__.StyleColorsDark();
    if (_imgui__WEBPACK_IMPORTED_MODULE_0__.isMobile.any()) {
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.setCanvasScale(1);
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.setFontScale(1.5);
    }
    const io = _imgui__WEBPACK_IMPORTED_MODULE_0__.GetIO();
    let font = io.Fonts.AddFontDefault();
    //font.FontName="Microsoft JhengHei";
    font.FontName = "Arial";
    //font.FontName="sans-serif"
    font.FontStyle = "bold";
    font.FontSize = 16;
    //font.Ascent=2.5;
    let font2 = _imgui__WEBPACK_IMPORTED_MODULE_0__.CreateFont("Microsoft JhengHei", 16, "bold");
    font2.AddFontRange(0x4E00, 0x9FFF);
    font.MergeFont(font2);
    const canvas = document.getElementById("canvas");
    _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.Init(canvas);
    _main = new Main;
    window.requestAnimationFrame(_loop);
}));


/***/ }),

/***/ "./src/input.ts":
/*!**********************!*\
  !*** ./src/input.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EType: () => (/* binding */ EType),
/* harmony export */   GetInput: () => (/* binding */ GetInput),
/* harmony export */   Input: () => (/* binding */ Input),
/* harmony export */   dom_input: () => (/* binding */ dom_input)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/index.ts");

var EType;
(function (EType) {
    EType[EType["eInput"] = 0] = "eInput";
    EType[EType["eMultiLine"] = 1] = "eMultiLine";
    EType[EType["ePassword"] = 2] = "ePassword";
    EType[EType["eMax"] = 3] = "eMax";
})(EType || (EType = {}));
class Input {
    constructor(type, textCol, textBg) {
        this.isVisible = false;
        this.isTab = false;
        let input;
        switch (type) {
            case EType.eInput:
                input = document.createElement('input');
                input.type = 'text';
                break;
            case EType.eMultiLine:
                input = document.createElement('textarea');
                input.style.resize = 'none';
                break;
            case EType.ePassword:
                input = document.createElement('input');
                input.type = 'password';
                break;
        }
        input.style.position = 'fixed';
        input.style.top = 0 + 'px';
        input.style.left = 0 + 'px';
        input.style.borderWidth = '0';
        input.style.borderStyle = 'none';
        input.style.zIndex = '999';
        input.style.backgroundColor = textBg;
        input.style.color = textCol;
        input.value = "123";
        input.addEventListener('blur', (e) => { this.onLostFocus(e); });
        input.addEventListener('keydown', (e) => { this.onKeydown(e); });
        document.body.appendChild(input);
        this._dom_input = input;
        this.setVisible(false);
    }
    onLostFocus(e) {
        if (this.on_input) {
            this.on_input(this._dom_input.value);
        }
        this.setVisible(false);
    }
    onKeydown(e) {
        if (e.key == "Tab") {
            this.isTab = true;
            e.preventDefault();
            this.setVisible(false);
        }
    }
    isMe(id) {
        return this.isVisible && this._id == id;
    }
    get Text() {
        return this._dom_input.value;
    }
    setRect(x, y, w, h) {
        let input = this._dom_input;
        input.style.left = x + 'px';
        input.style.top = y + 'px';
        input.style.width = w - 5 + 'px';
        input.style.height = h - 5 + 'px';
    }
    setText(text, id, font) {
        this._id = id;
        let input = this._dom_input;
        input.style.font = _index__WEBPACK_IMPORTED_MODULE_0__.ImGui.Font_toString(font);
        input.value = text;
        this.setVisible(true);
    }
    setVisible(b) {
        let input = this._dom_input;
        if (b) {
            this.isTab = false;
            input.style.display = 'inline-block';
            input.focus();
        }
        else {
            input.style.display = 'none';
        }
        this.isVisible = b;
        if (this.on_visible) {
            this.on_visible(b);
        }
    }
}
let dom_input = {};
function GetInput(type, textColor, textBgColor) {
    let inp = dom_input[type];
    if (!inp) {
        inp = new Input(type, textColor, textBgColor);
        dom_input[type] = inp;
    }
    return inp;
}


/***/ }),

/***/ "./src/bind-imgui.js":
/*!***************************!*\
  !*** ./src/bind-imgui.js ***!
  \***************************/
/***/ ((module) => {


var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(Module) {
  Module = Module || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_main')) {
        Object.defineProperty(Module['ready'], '_main', { configurable: true, get: function() { abort('You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_main', { configurable: true, set: function() { abort('You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_end')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_free')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_init')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, get: function() { abort('You are getting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, set: function() { abort('You are setting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackSave')) {
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, get: function() { abort('You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, set: function() { abort('You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackRestore')) {
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, get: function() { abort('You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, set: function() { abort('You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackAlloc')) {
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, get: function() { abort('You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, set: function() { abort('You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, get: function() { abort('You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, set: function() { abort('You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, get: function() { abort('You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, set: function() { abort('You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, get: function() { abort('You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, set: function() { abort('You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_free')) {
        Object.defineProperty(Module['ready'], '_free', { configurable: true, get: function() { abort('You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_free', { configurable: true, set: function() { abort('You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___getTypeName')) {
        Object.defineProperty(Module['ready'], '___getTypeName', { configurable: true, get: function() { abort('You are getting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___getTypeName', { configurable: true, set: function() { abort('You are setting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___embind_register_native_and_builtin_types')) {
        Object.defineProperty(Module['ready'], '___embind_register_native_and_builtin_types', { configurable: true, get: function() { abort('You are getting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___embind_register_native_and_builtin_types', { configurable: true, set: function() { abort('You are setting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, get: function() { abort('You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, set: function() { abort('You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process === 'object' && "function" === 'function') || typeof window === 'object' || typeof importScripts === 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(function() { onload(readBinary(f)); }, 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';
function alignMemory() { abort('`alignMemory` is now a library function and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line'); }

assert(!ENVIRONMENT_IS_WORKER, "worker environment detected but not enabled at build time.  Add 'worker' to `-s ENVIRONMENT` to enable.");

assert(!ENVIRONMENT_IS_NODE, "node environment detected but not enabled at build time.  Add 'node' to `-s ENVIRONMENT` to enable.");

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");




var STACK_ALIGN = 16;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || false;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it.
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -s IMPORTED_MEMORY to define wasmMemory externally');
assert(INITIAL_MEMORY == 16777216, 'Detected runtime INITIAL_MEMORY setting.  Use -s IMPORTED_MEMORY to define wasmMemory dynamically');

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;
var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  flush_NO_FILESYSTEM()
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'data:application/octet-stream;base64,AGFzbQEAAAABwYuAgACrAWABfwF/YAJ/fwBgAAF/YAJ/fwF/YAF/AGADf39/AGADf39/AX9gAABgBH9/f38AYAR/f39/AX9gB39/f39/f38Bf2AFf39/f38AYAZ/f39/f38Bf2ACf38BfWABfAF/YAZ/f39/f38AYAJ/fQBgBX9/f39/AX9gA39/fQBgAAF9YAF/AX1gCH9/f39/f39/AX9gAX0BfWAHf39/f39/fwBgAn19AX1gAX0AYAV/f31/fwBgBn9/f39/fQBgCH9/f31/f39/AX9gCX9/f39/f39/fwF/YAN/f30Bf2AEf39/fQBgBX9/f399AGADfX19AX1gCX9/f39/f399fwBgBH9/fX8AYAF8AXxgBX9/f31/AGAAAX5gCn9/f39/f39/f38AYAZ9fX1/f38AYAZ/f31/f30AYAV/fn5+fgBgCH9/f39/f39/AGAHf39/f39/fQBgB39/fX9/f38Bf2AGf399fX9/AX9gAX8BfGADf35/AX5gBH99f38AYAJ9fQBgBn9/f399fwBgCH9/f39/f31/AGAHf39/f399fwBgC39/f39/f39/f39/AGACfn4BfmAHf399fX1/fwF/YAl/f39/f39/f38AYAN/fX0Bf2ACf30Bf2ACf30BfWAEf399fQBgA39/fwF9YAZ/f319fX8AYAd/f39/fX99AGAFf39/f30Bf2ADfX9/AGAGf398fH9/AX9gA399fwBgCX9/fX19f39/fwBgBn9/fX9/fwBgAXwBfWABfwF+YAV/fX19fQF/YAV/f399fQBgA399fQBgAnx8AXxgCH9/fX9/f31/AGACf3wAYAR/fX99AX9gCX9/fX9/f39/fwBgBH9+fn8AYAR/fn5/AX5gAAF8YAR9fX19AX1gBn9/f39/fQF/YAd/f31+fn9/AX9gB39/f39/fX0BfWAHf31/f399fQF/YAd/fn5+f319AX1gB399fn5/fX0BfmADf39+AX5gB399fX1/fX0BfWAJf39/f35+f39/AX9gCX9/f39/fX1/fwBgCX9/f39/f319fwBgA35+fgF+YAN+fn0BfmAGf39/fX9/AGAKf39/f39/f399fwBgAX0Bf2ADf35/AX9gAnx/AXxgBn98f39/fwF/YAJ+fwF/YAR+fn5+AX9gDX9/f39/f39/f39/f38AYAN/f38BfGADf398AGAIf39/fX1/f38AYAR9fX19AX9gAn19AX9gC399fX19fX19fX1/AGAJf319fX19fX1/AGAJf399f39/f31/AGAHf399f39/fwBgBn9/f319fQBgCH9/f399f31/AGAHf39/f319fwF/YAd/f318fH9/AX9gA39/fQF9YAd/fHx8f319AX1gB399fHx/fX0BfGADf398AXxgCX9/f399f39/fwF/YAl/f399fX1/f38Bf2AJf39/fX9/f39/AX9gCX9/f399fX9/fwF/YAl/f39/fHx/f38Bf2AHf39/fX1/fwF/YAp/f39/f39/fX1/AX9gBH99fX0BfWADfHx8AXxgA3x8fQF8YAF9AXxgCn9/f39/f39/f38Bf2AHf39/fHx/fwF/YAV/f399fwF/YAd/fX19f39/AGAEf399fQF/YAR/f31/AX9gCH9/f39/fX99AGAIf39/f39/f30AYAd/f399f399AGAJf39/fX9/f31/AGAMf39/f39/f39/f39/AGAHf39/fX19fwBgCX9/fX19f39/fwF/YAV/f31/fQF/YAd/f399f39/AGAKf39/fX9/f39/fwBgBH9/f30Bf2AFf319fX0AYAV/fX9/fQF/YAp/f31/f39/f31/AGACfX8BfWACfX8Bf2ADfn9/AX9gAXwBfmACf34AYAN/fn4AYAJ/fwF+YAR/f39+AX5gA39/fgBgAn9/AXxgAn5+AXxgAn5+AX1gAn5+AX9gBH9/fn8BfmAFf39/fn4AYAR/fn9/AX8Cv4mAgAAtA2Vudg1fX2Fzc2VydF9mYWlsAAgDZW52EV9lbXZhbF9uZXdfb2JqZWN0AAIDZW52E19lbXZhbF9zZXRfcHJvcGVydHkABQNlbnYRX2VtdmFsX3Rha2VfdmFsdWUAAwNlbnYNX2VtdmFsX2RlY3JlZgAEA2VudhlfZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uAA8DZW52Fl9lbWJpbmRfcmVnaXN0ZXJfY2xhc3MAagNlbnYJX2VtdmFsX2FzAGsDZW52El9lbXZhbF9uZXdfY3N0cmluZwAAA2VudhNfZW12YWxfZ2V0X3Byb3BlcnR5AAMDZW52Fl9lbXZhbF9zdHJpY3RseV9lcXVhbHMAAwNlbnYfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19wcm9wZXJ0eQAnA2VudgxfX2N4YV9hdGV4aXQABgNlbnYZX2VtYmluZF9yZWdpc3Rlcl9jb25zdGFudABsA2Vudg1fZW12YWxfaW5jcmVmAAQDZW52GF9fY3hhX2FsbG9jYXRlX2V4Y2VwdGlvbgAAA2VudgtfX2N4YV90aHJvdwAFA2VudhZfZW12YWxfcnVuX2Rlc3RydWN0b3JzAAQDZW52H19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb24AKwNlbnYiX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvcgAPA2VudgtfZW12YWxfY2FsbAAJA2Vudg1fZW12YWxfdHlwZW9mAAADZW52EF9lbXZhbF9uZXdfYXJyYXkAAgNlbnYXX2VtdmFsX2NhbGxfdm9pZF9tZXRob2QACANlbnYYX2VtdmFsX2dldF9tZXRob2RfY2FsbGVyAAMDZW52FV9lbWJpbmRfcmVnaXN0ZXJfdm9pZAABA2VudhVfZW1iaW5kX3JlZ2lzdGVyX2Jvb2wACwNlbnYbX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nAAEDZW52HF9lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcABQNlbnYWX2VtYmluZF9yZWdpc3Rlcl9lbXZhbAABA2VudhhfZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXIACwNlbnYWX2VtYmluZF9yZWdpc3Rlcl9mbG9hdAAFA2VudhxfZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3AAUDZW52Cl9fc3lzX29wZW4ABhZ3YXNpX3NuYXBzaG90X3ByZXZpZXcxCGZkX2Nsb3NlAAADZW52DV9fc3lzX2ZjbnRsNjQABgNlbnYLX19zeXNfaW9jdGwABhZ3YXNpX3NuYXBzaG90X3ByZXZpZXcxB2ZkX3JlYWQACRZ3YXNpX3NuYXBzaG90X3ByZXZpZXcxCGZkX3dyaXRlAAkDZW52BWFib3J0AAcDZW52FmVtc2NyaXB0ZW5fcmVzaXplX2hlYXAAAANlbnYVZW1zY3JpcHRlbl9tZW1jcHlfYmlnAAYDZW52C3NldFRlbXBSZXQwAAQDZW52F19lbWJpbmRfcmVnaXN0ZXJfYmlnaW50ABcWd2FzaV9zbmFwc2hvdF9wcmV2aWV3MQdm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AAMAAAUAAAUAAAYAAAMAAAYAAAIXAAACFQAACQAABgAAAjEAAAIKAAAVAAAChwEAABUAAAIdAAAKAAAKAAAVAAAdAAAKAAAVAAAVAAARAAACDAAAAogBAAARAAAGAAAGAAAJAAAJAAARAAAMAAAJAAACJwAABQAABQAABQAAAiMAABEAABEAAAYAAAJVAAASAAACJQAABQAAAAADAAADAAAIAAAIAAANAAARAAAIAAADAAAGAAIvAAACGgAACQAAAokBAAAGAAACigEAAAYAAAKLAQAACQAAAh4AAAKMAQAAFQAACAAAAwcABwICAgICAAQDAQABBwAHAgICAgIABAMABQMABQMBAAEFAQAHAAcCAgICAgAEAwAFAwAFAwEAAQEBAQEBDQASAQEBAQEBAwAFAQEBAQQEBAQEBAQEBAEBAQQAAAEAAAMAAAUFAAAAAAAABQEEAAAAAAAAAAAAAAEEAgAAAgAAAAABAAABAAQDAwACDgEGAAACAgICJCQAAwAQAgACAgIWAgAACQABAgEAAAYAAgYAAAIAAgICAAAMAAIAAgICAAAAAAIEBAAAAQAAAhAAABIAAgUDAAMAAAEAAAYAAgUDAAMAAAEAAgICAAAAAAIAAAAEAAABAAACBQMAAwAAAQAABgACBQACAgIAAgAAAgEDAAMAAQIAAAAAAQIAAAACAAAIAAACBQAACAAAAgAAAwAAAgACAgIBAwADAgAAAQIAAQEAAgICAAAAAAIAAAIfAAACAAABAAIAAAMAAgACAgIAAAIAAAIBAAACAgIFAwADAgAAAQIAAAYAAAIABgADAAAAAAALBAAABQAAAAABBQABAQAAAAICAgEDAAMCAAABAgABAwADAAEDAwEAAgICAQADAwgACwADAgAAAwIABgAAAQIAAAECAQIAAAUAAAIBAAAFAwYAAwIAAQECAAEAAAgAAAsAAAIAAAEAAAICDgEAAAUAAgUBAAAABgACBQEgAAACGwACQAAAAo0BAAIzAAACNQACFwAAAisAAiwAAAKOAQACDwAAFwACGwAAAiwAAgsAAAIPAAIpAAACjwEAAhoAAAJiAAIpGggAAAsAAk0AAwAADgIOAAQAAAKQAQACFwAAKwACNgAAApEBAAIiAAACYwACGwUAACwAAggAAAsAAjQAAAIiAAI1AAACNAACAQEBAQAABQACHwAAAiAAAj8AAAKSAQACGgAAYgACCwAADwACCAAACwACJQAAAjMAAgAABQACBQYBAAABAQAGAAUAAwkBAAAFAwADBgADAAgBAQQEAAAAAgMDAwAAAgYAAAMDAAAAAAUAAAUDAQABAAAACAACAAAIAAIIAAALAAIPJwAAAjYAAggBCCIAAGMAAgAAAAADAAIIAAALAAIAAgICAQMFCAADAgADAAABAgAABQAAAgEAAQEAAAEAAAIBAAAFAAACAAICAgEDAAMCAAIAAQMAAwABAQEAAAICAgQHAAABAQEDAAMCAAABAgEBAQMAAwIAAAECAg4AAg4CDgACDgACAgIFAAAGAAACAAADAAACAQUDBQMGAAMCAAADAgABAQICAAADAAIBAQAAAQEAAAUAAAIEAAAAAgICAwEBAQABARRHAkcAAAEBAQMDAAMCAAABAgAABQACAQMAAwIAAAECAAADAAIFAwADAgAAAQIAAAYAAAIFRQUFAwADAgACAAACkwEAAk8AAAKUAQACRgAADgIOAAAClQEAAlAAAAKWAQACAQAABQACAQAAAAMCAQAABQACAQAADgIOAAAABQIEBAQAAAEAAgUFAQMBAAAIAAIEBAQBAQQEAwAABgACAAICAgEAAQECAAEBAwAABgAAAgYAAAkAAgQEAwEDAAMCAAABAgEBAQQEBAQEBAQEBAQEBAQEBAQBAwAABgACBgAACQACAwYNAAACPgACHgAAApcBAAIAAAUAAAIBAAAFAAIBAAAFAAIAAAEAAgEFAwQAAwIAAgAABgAAAg0AAA0NAAICAgEAAQEBAQEBAQEBAQEFAwADAgAAAQIAAAYAAAIGAAAJAAIAAAAAAgAAEgACAgICAAADAQAFAwgACAMAAAACAwALBgAAAAIAAgQEAAICAgQEBAMAAwIAAAECBAMAAwIAAQIHAQEBAQEBAQEGAAECBAMAAwIAAAECBAMAAAQEBQAEAQUDAAMAAQIEBAQADg4EAgQEBAIEBAYCCQECAgQDAAMCAAABAgEBBQIBAgUEBAMAAwIAAAECAgQCAgEBAQcFAgUFAgQBAQEBAgQBAgIBAgQBAwIAAgACAQIEAQQBAQQEAAQEAQIEBAECBAMCAAIGAwIPAgoCAwMAAAQEBAYDAAAEBAQAAQIDAgYDAAAEBAQAAUIDAAADAAQBBAIGDAYDBAMDCwMCAA8CCQAAAAACAAIKAwAABAQEAgoDAAAEBAQKAwAABAQECgMAAAQEBB0CCgIKAwAABAQECgMAAAQEBAoDAAAEBAQdFQMAAwAcAAMAAwAcAAMAAwAcAAMAAwAcAAMAAwAcAAMAAwAcAAMAAwAcAAMAAwAcAAAAAAEFAwUFAAAAAAEFAAAAAAEFAwUAAAAAAQUDBQAAAAABBQMFAAAAAAEFAwUAAAAAAQUDBQAAAAABBQMFAAAAAQEGAAMCAAUGAwAAAAEAAwkBAQABAQEABgEAAAAABgADAAYABAgBAQQEAAUAAQAAAAAAAAAAAAAAAwMAAAAACwABBQABAQEAAQECAgIAAAIEAAAADgIOAAUAAgIAAAIEAAABAQYDAAAAAQADCQEBAAEBAQAGAQAAAAAGAAMABgAECAEBBAQABQABAAAAAAAAAAAAAAADAwAAAAALAAEFAAEBAQAEAAAADgIOAAUAAgIAAAIEAAABAQYAAwIABgMAAAABAAMJAQEAAQEBAAYBAAAAAAYAAwAGAAQIAQEEBAAFAAEAAAAAAAAAAAAAAAMDAAAAAAsAAQUAAQEBAAEBAgQAAAAOAg4FAAICAAACBAAAAQEGAAMCAAYDAAAAAQADCQEBAAEBAQAGAQAAAAAGAAMABgAECAEBBAQABQABAAAAAAAAAAAAAAADAwAAAAALAAEFAAEBAQABAQIEAAAADgIOBQACAgAAAgQAAAEBBgADAgAGAwAAAAEAAwkBAQABAQEABgEAAAAABgADAAYABAgBAQQEAAUAAQAAAAAAAAAAAAAAAwMAAAAACwABBQABAQEAAQECBAUAAgIAAAIEAAABAQYAAwIABgMAAAABAAMJAQEAAQEBAAYBAAAAAAYAAwAGAAQIAQEEBAAFAAEAAAAAAAAAAAAAAAMDAAAAAAsAAQUAAQEBAAEBAgQFAAICAAACBAAAAQEGAAMCAAYDAAAAAQADCQEBAAEBAQAGAQAAAAAGAAMABgAECAEBBAQABQABAAAAAAAAAAAAAAADAwAAAAALAAEFAAEBAQABAQIEBQACAgAAAgQAAAEBBgADAgAGAwAAAAEAAwkBAQABAQEABgEAAAAABgADAAYABAgBAQQEAAUAAQAAAAAAAAAAAAAAAwMAAAAACwABBQABAQEAAQECBC8FAAICAAACBAIMAgwMDAwMAgwMDAoKCgoKCgoK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AIA/QwAAgD8gAJMgAZSTIAKUIQBDAACAPyABkyAClCEBAkACQAJAAkACQAJAIAYOBQABAgMEBQsgAyACOAIAIAQgADgCACAFIAE4AgAPCyADIAc4AgAgBCACOAIAIAUgATgCAA8LIAMgATgCACAEIAI4AgAgBSAAOAIADwsgAyABOAIAIAQgBzgCACAFIAI4AgAPCyADIAA4AgAgBCABOAIAIAUgAjgCAA8LIAMgAjgCACAEIAE4AgAgBSAHOAIACykBAX8CQCAAIAEQeyIDIAAQfEYNACADKAIAIAFHDQAgAygCBCECCyACC08BA38gACgCCCECAkAgACgCACIARQ0AA0AgAiAAQQF2IgNBA3RqIgRBCGogAiAEKAIAIAFJIgQbIQIgACADQX9zaiADIAQbIgANAAsLIAILEAAgACgCCCAAKAIAQQN0agstAQJ/QQAhAgJAIAAgARB7IgMgABB8Rg0AIAMoAgAgAUcNACADKAIEIQILIAILTQECfyMAQRBrIgMkAAJAAkAgACABEHsiBCAAEH9GDQAgBCgCACABRg0BCyAAIAQgA0EIaiABIAIQgAEQgQEhBAsgA0EQaiQAIARBBGoLEAAgACgCCCAAKAIAQQN0agsSACAAIAI2AgQgACABNgIAIAALtgEBAn8CQCAAKAIIIgMgAUsNACADIAAoAgAiBEEDdGogAUkNACABIANrQQN1IQECQCAEIAAoAgRHDQAgACAAIARBAWoQggEQgwEgACgCACEECwJAIAQgAUwNACAAKAIIIAFBA3RqIgNBCGogAyAEIAFrQQN0ENMxGgsgACgCCCABQQN0IgRqIAIpAgA3AgAgACAAKAIAQQFqNgIAIAAoAgggBGoPC0HJwAFB85kBQfcMQZkrEAAACysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQQN0EFUhAgJAIAAoAggiA0UNACACIAMgACgCAEEDdBDRMRogACgCCBBXCyAAIAE2AgQgACACNgIICwsSACAAIAI2AgQgACABNgIAIAALUwECfyMAQRBrIgMkAAJAAkACQCAAIAEQeyIEIAAQf0YNACAEKAIAIAFGDQELIAAgBCADQQhqIAEgAhCAARCBARoMAQsgBCACNgIECyADQRBqJAAL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ACABIAIqApgqIAEqAgyUOAIMIAEQdSEAIAFBEGokACAACxMAQQAoArCdByAAQQR0akHcK2oLYgIBfQF/AkBBACgCsJ0HKgKYKiIBQwAAgD9gDQAgAEH///8HcSECAkACQCABIABBGHazlCIBQwAAgE9dIAFDAAAAAGBxRQ0AIAGpIQAMAQtBACEACyAAQRh0IAJyIQALIAALggEBBH8jAEEwayICJABBACgCsJ0HIQMgAkEYahCwASIEIAA2AgAgBCADIABBBHRqIgBB3CtqIgUpAgA3AgQgBEEMaiAAQeQraiIAKQIANwIAIANB5DZqIAQQsQEgAkEIaiABEHMgACACQRBqKQMANwIAIAUgAikDCDcCACACQTBqJAALDAAgAEEEahAwGiAAC24BAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahCyARCzASAAKAIAIQILIAAoAgggAkEUbGoiAiABKQIANwIAIAJBEGogAUEQaigCADYCACACQQhqIAFBCGopAgA3AgAgACAAKAIAQQFqNgIACysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQRRsEFUhAgJAIAAoAggiA0UNACACIAMgACgCAEEUbBDRMRogACgCCBBXCyAAIAE2AgQgACACNgIICwt5AQR/IwBBIGsiAiQAQQAoArCdByEDIAJBCGoQsAEiBCAANgIAIAQgAyAAQQR0aiIAQdwraiIFKQIANwIEIARBDGogAEHkK2oiACkCADcCACADQeQ2aiAEELEBIAAgAUEIaikCADcCACAFIAEpAgA3AgAgAkEgaiQAC2YBBH8CQCAAQQFIDQBBACgCsJ0HIgFB5DZqIQIDQCABIAIQtgEiAygCAEEEdGoiBEHkK2ogA0EMaikCADcCACAEQdwraiADKQIENwIAIAIQtwEgAEEBSiEDIABBf2ohACADDQALCwszAQF/AkAgACgCACIBQQBKDQBBqsQCQfOZAUHmDEG3kQEQAAALIAFBFGwgACgCCGpBbGoLLwEBfwJAIAAoAgAiAUEASg0AQarEAkHzmQFB8gxBs5EBEAAACyAAIAFBf2o2AgALcQEDfyMAQRBrIgIkAAJAIAAQuQEiAygCAEEIRw0AIAMoAgRBAUcNAEEAKAKw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IgogCUcNAAsgAEEAQeQGENIxIgogAhBUNgIAIAogAhDaMUEBajYCTCAKIAJBAEEAEGM2AgQgCCAKQQRqEN4BIAogCkH1mQJBABDfATYCUCADQQhqQ///f39D//9/fxAxGiAEIAMpAwg3AgAgA0EIakMAAAA/QwAAAD8QMRogBSADKQMINwIAIApBfzYCpAEgCkH//wM7AaABIAogCkGuAWotAABBGHRBj548cjYAqwEgA0EIakP//39/Q///f38QMRogByADKQMIIgw3AgAgBiAMNwIAIApBuAVqIAFBuDJqNgIAIAogCzYCiAUgCkKAgID8czcCgAUgCkL/////j4CAwL9/NwLcBCAKQbwFaiAKKAIANgIAIANBEGokACAKCxIAIABBADYCCCAAQgA3AgAgAAumAQAgABAvGiAAQQhqEC8aIABBEGoQLxogAEEYahAvGiAAQSBqEC8aIABBKGoQLxogAEEwahAvGiAAQcAAahDgARogAEHEAGoQ4AEaIABByABqEOABGiAAQdQAahDZARogAEHkAGoQ2QEaIABBiAFqEC8aIABBkAFqEOEBGiAAQbwBahDiARogAEHwAWoQ4wEaIABB/AFqEOMBGiAAQYgCahDkARogAAslACAAQwAAAABDAAAAABAxGiAAQQhqQwAAAABDAAAAABAxGiAACwsAIABBADYBACAACwoAIAAQ5QEaIAALEgAgAEEANgIIIABCADcCACAAC14AIAAQ5gEaIABBDGoQ1wEaIABBGGoQ5wEaIABBPGoQ6AEaIABByABqEOkBGiAAQdQAahDqARogAEHgAGoQ6wEaIABB+ABqEOwBGiAAQQBBkAEQ0jEiACABNgIsIAALTAEBfwJAIAAoAgAiAiAAKAIERw0AIAAgACACQQFqEO0BEO4BIAAoAgAhAgsgACgCCCACQQJ0aiABKAIANgIAIAAgACgCAEEBajYCAAsjACABIAIgAWtBACACGyAAQcABahDvASgCABBjIgIQ8AEgAgsLACAAQQA2AgAgAAsLACAAQQBBJBDSMQsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxUAIABCADcBACAAQQZqQgA3AQAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3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IABBiN8AahAvIQYgAEGQ3wBqEC8hByAAQaDfAGoQwwIaIABBrN8AahDEAhogAEG43wBqEMUCGiAAQcTfAGoQxgIaIABB0N8AahDHAhogAEHo3wBqEMMCGiAAQZDgAGoQyAIaIABBADYCtDIgACABRToAASAAQQA6AAAgAEIANwKsMgJAIAENAEG0CEG0CBBVEKwCEPQtIQELIABCADcDiDQgAEIANwKkNCAAQoCAgIBwNwOQNCAAQv////8PNwOYNCAAQgA3A+g0IABBmAFqIAE2AgAgAEGgNGpBADoAACAAQfA0akIANwMAIABB+DRqQgA3AwAgAEGANWpBADYCACAAQYw1akEAQSsQ0jEaIABBwDVqQgA3AwAgAEIANwO4NSACQwAAgL9DAACAvxAxGiAEIAIpAwA3AwAgAEEANgLsNSAAQgA3AuQ1IABCADcD0DUgAEHYNWpCADcDACAAQeA1akEAOwEAIABBxDdqQQBBNBDSMRogAhDZARogBUEIaiACQQhqKQMANwIAIAUgAikDADcCACAAQQA2Arw4IABCADcCtDggAEEAOgCwOCAAQQA2Apw4IABBAToAljggAEEAOwGUOCAAQf////8HNgKQOCAAQgA3A4g4IABBfzYCyDggAEEANgCXOCAAQn83A8A4IABCADcC5DkgAEIANwLEOSAAQcw5akIANwIAIABB1DlqQgA3AgAgAEHZOWpCADcAACAAQf////8HNgLwOSAAQf////8HNgLsOSAAQv/////3/////wA3AvQ5IABB+DpqQbTkATYCACAAQYg8akHB5AE2AgAgAEEANgLwPCAAQQA2AsQ6IABBADoA/DkgAEEANgLoPCAAQes8akEANgAAIABCfzcC9DwgAEIANwLEPSAAQcw9akIANwIAIABB1D1qQQA2AgAgAEEANgLAPiAAQv////8PNwPYPSAAQgA3Auw9IABB9D1qQgA3AgAgAEH8PWpBADYCACACQwAAAABDAAAAABAxGiADIAIpAwA3AwAgAEKAgICAgICAyAo3A6heIABBwN4AakH////7BzYCACAAQgA3A7BeIABBgICA+AM2AuxeIABCADcC5F4gAEKAgICAoOH1kTw3AtxeIABBADsB2F4gAEEANgLUXiAAQv////v3//+//wA3A7heIAJD//9/f0P//39/EDEaIAcgAikDACIINwMAIAYgCDcDACAAQQI2AoRgIABBADoA+F8gAEH////7BzYC9F8gAEIANwPgXyAAQQA6ANxfIABBADYCnF8gAEEuOwGYXyAAQQA2AoxgIABBADoAiGAgAEKAgICAIDcC/F8gAEGg4ABqQQBB6AMQ0jEaIABBfzYCkGQgAEJ/NwOIZCAAQZTkAGpBAEGBGBDSMRogAkEQaiQAIAALmQEBA38jAEEwayIBJAACQAJAIAAtAAANACAALQCZX0UNAQtBoPEBQbXzAEGeH0HDtwEQAAALIAFBCGoQyQIiAkHWGjYCAEHWGkEAQQAQYyEDIAJBBDYCHCACQQU2AhggAkEGNgIUIAJBBzYCECACQQg2AgggAiADNgIEIABBrN8AaiACEM8CIAAQ1AggAEEBOgAAIAFBMGokAAtGACAAQRBqEC8aIABBGGoQLxogAEEgahAvGiAAQShqEC8aIABBMGoQLxogAEE8ahDZARogAEHYAGoQLxogAEEAQeAAENIxCx8AIABCADcCACAAQRBqQQA2AgAgAEEIakIANwIAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEYahDZARogABCzAyAACygAIABBFGoQLxogAEEcahAvGiAAQSRqEC8aIABBADoAACAAEI0DIAALIwECfyAAQRhqIQEgACECA0AgAhC0BkEMaiICIAFHDQALIAALCQAgABCmBCAACxIAIABBADYCCCAAQgA3AgAgAAsaACAAELUGGiAAQQxqENsBGiAAQQA2AhggAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxoAIAAQtgYaIABBDGoQ2wEaIABBADYCGCAACxIAIABBADYCCCAAQgA3AgAgAAswACAAQQxqEDcaIABBGGoQwgIaIABBJGoQwgIaIABBgB1qENkBGiAAQQBBkB0Q0jELEgAgAEEANgIIIABCADcCACAACwoAIAAQwgIaIAALEgAgAEEANgIIIABCADcCACAACwoAIAAQwgIaIAALCgAgABDCAhogAAsSACAAQQA2AgggAEIANwIAIAALHAAgAEJ/NwIIIABBAToABCAAQYCAgAg2AgAgAAsLACAAQQBBJBDSMQvwBAIHfwF9IwBBwABrIgMkACAAQbjfAGohBAJAIAAoAqw0RQ0AIABBrDRqIQVBACEGAkADQAJAIAUgBhDWAigCACIAQQlqLQAAQQFxDQACQAJAIAAoAoQFIgdBf0YNACAEIAcQ+QMhBwwBCyAAKAIEEPoDIQcLAkAgBw0AIAAgBCAAKAIAEPsDIgcQ/AM2AoQFCyAHKAIAIAAoAgRHDQICQAJAIABBEGoqAgAiCotDAAAAT11FDQAgCqghCAwBC0GAgICAeCEICwJAAkAgACoCDCIKi0MAAABPXUUNACAKqCEJDAELQYCAgIB4IQkLIANBPGogCSAIEPQDGiAHIAMoAjw2AgQCQAJAIABBIGoqAgAiCotDAAAAT11FDQAgCqghCAwBC0GAgICAeCEICwJAAkAgACoCHCIKi0MAAABPXUUNACAKqCEJDAELQYCAgIB4IQkLIANBPGogCSAIEPQDGiAHIAMoAjw2AgggByAALQCNAToADAsgBkEBaiIGIAUoAgBHDQAMAgsAC0HimwJBtfMAQcPQAEG7jAEQAAALIAIgAhD9AyAEEP4DQQZsahD/AwJAIAQQ9QMiAEUNAANAIAAQgAQhByABKAIAIQYgAyAHNgI0IAMgBjYCMCACQcDhBCADQTBqEJwBIAAuAQQhByADIABBBmouAQA2AiQgAyAHNgIgIAJBpd0EIANBIGoQnAEgAC4BCCEHIAMgAEEKai4BADYCFCADIAc2AhAgAkGw3QQgA0EQahCcASADIAAtAAw2AgAgAkGX3QQgAxCcASACQczpBEEAEJkBIAQgABD4AyIADQALCyADQcAAaiQAC08BAn8CQCAAQbjfAGoiAhD1AyIARQ0AA0ACQCAALQANRQ0AAkAgACgCABD2AyIDRQ0AIAMgABD3AwsgAEEAOgANCyACIAAQ+AMiAA0ACwsL0gEBAX8jAEHAAGsiBCQAIAQgBEE8ajYCICAEIARBOGo2AiQCQAJAIANBnJIBIARBIGoQ+C9BAkcNACAEQTRqIAQuATwgBC4BOBD0AxogAiAEKAI0NgIEDAELIAQgBEE4ajYCFCAEIARBPGo2AhACQCADQaaSASAEQRBqEPgvQQJHDQAgBEE0aiAELgE8IAQuATgQ9AMaIAIgBCgCNDYCCAwBCyAEIARBNGo2AgAgA0Hm9QEgBBD4L0EBRw0AIAIgBCgCNEEARzoADAsgBEHAAGokAAtNAQJ/IwBBEGsiAyQAIAIQ8gMiAigCACEEIAMQ8wMaIAJBBmogAykBBjcBACACIAMpAwA3AgAgAkEBOgANIAIgBDYCACADQRBqJAAgAgtIAQJ/AkAgACgCrDRFDQAgAEGsNGohAkEAIQMDQCACIAMQ1gIoAgBBfzYChAUgA0EBaiIDIAIoAgBHDQALCyAAQbjfAGoQ5AILTAEBfwJAIAAoAgAiAiAAKAIERw0AIAAgACACQQFqEIEEEIIEIAAoAgAhAgsgACgCCCACQSRsaiABQSQQ0TEaIAAgACgCAEEBajYCAAssACAAQQAoArCdByAAGyIAENECAkBBACgCsJ0HIABHDQBBABCpAgsgABDSAgvzAwECfwJAIABBmAFqKAIAIgFFDQAgAC0AAUUNACABQQA6ABwgARDTAgsgAEEANgKYAQJAIAAtAABFDQACQCAALQCZX0UNACAAQSBqKAIARQ0AQQAoArCdByEBIAAQqQIgACgCIBDUAiABEKkCCyAAQQYQ1QIgAEGsNGohAkEAIQECQCAAKAKsNEEATA0AA0AgAiABENYCKAIAENcCIAFBAWoiASACKAIASA0ACwsgAhCPAiAAQbg0ahCPAiAAQcQ0ahCPAiAAQQA2Auw0IABB0DRqEI8CIABB3DRqENgCIABBADYC5DUgAEEANgLENyAAQQA2AtA1IABCADcD8DQgAEH4NGpCADcDACAAQeQ2ahDZAiAAQfA2ahDaAiAAQfw2ahDbAiAAQaw3ahDcAiAAQbg3ahDcAiAAQaw6ahDdAiAAQcg6ahD1BiAAQdg7ahD1BiAAQcQ+ahDeAiAAQeA+ahDfAiAAQew+ahDgAiAAQYA+ahDhAiAAQZw+ahDfAiAAQbQ+ahDiAiAAQfDeAGoQPSAAQfzeAGoQjgIgAEGAP2oQ4wIgAEG43wBqEOQCIABBrN8AahDlAgJAIAAoAuRfIgFFDQACQCABQQAoAtD8BUYNACABEGUaCyAAQQA2AuRfCyAAQejfAGoQ5gIgAEEAOgAACwsRAAJAIABFDQAgABDnAhBXCwsRAAJAIABFDQAgABD1LRBXCwtZAQJ/IwBBEGsiASQAQQAoArCdB0EANgKcXwJAIABFDQAgAUEANgIMIAFBDGoQgwQhAiAAQaEiEGQiAEUNACACQgEgATUCDCAAEGgaIAAQZRoLIAFBEGokAAtdAQN/QQAhAgJAIAAoAtBfQQBMDQAgAEHQ3wBqIQMDQAJAIAMgAhDoAigCACABRw0AIAMgAhDoAigCCCEEIAAgAyACEOgCIAQRAQALIAJBAWoiAiADKAIASA0ACwsLNgACQAJAIAFBAEgNACAAKAIAIAFKDQELQbbAAUHzmQFB3AxBjYYCEAAACyAAKAIIIAFBAnRqCxEAAkAgAEUNACAAEPEBEFcLCwcAIAAQhAQLIwEBfwJAIAAoAggiAUUNACAAQgA3AgAgARBXIABBADYCCAsLIwEBfwJAIAAoAggiAUUNACAAQgA3AgAgARBXIABBADYCCAsLIwEBfwJAIAAoAggiAUUNACAAQgA3AgAgARBXIABBADYCCAsLIwEBfwJAIAAoAggiAUUNACAAQgA3AgAgARBXIABBADYCCAsLDwAgABCFBCAAQQxqEIUEC14BA38gAEEMaiEBQQAhAgJAIAAoAgxBAEwNAANAAkAgASACEIcBKAIEIgNBf0YNACAAIAMQhgQQhwQaCyACQQFqIgIgASgCAEgNAAsLIAEQ2AIgABCIBCAAQQA2AhgLIwEBfwJAIAAoAggiAUUNACAAQgA3AgAgARBXIABBADYCCAsLIwEBfwJAIAAoAggiAUUNACAAQgA3AgAgARBXIABBADYCCAsLXgEDfyAAQQxqIQFBACECAkAgACgCDEEATA0AA0ACQCABIAIQhwEoAgQiA0F/Rg0AIAAgAxDBAxCJBBoLIAJBAWoiAiABKAIASA0ACwsgARDYAiAAEIoEIABBADYCGAsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFcgAEEANgIICwsYACAAQQxqEIsEIABBGGoQPSAAQSRqED0LBgAgABA9CyMBAX8CQCAAKAIIIgFFDQAgAEIANwIAIAEQVyAAQQA2AggLCwYAIAAQPQv0AgAgAEHo3wBqEMIGGiAAQdDfAGoQwwYaIABBxN8AahDEBhogAEG43wBqEMUGGiAAQazfAGoQxgYaIABBoN8AahDCBhogAEH83gBqEPkBGiAAQfDeAGoQxwYaIABBkNwAahD4LRogAEGAP2oQyAYaIABB7D5qEMkGGiAAQeA+ahDKBhogAEHEPmoQywYaIABBtD5qELEGGiAAQag+ahCCAhogAEGcPmoQygYaIABBgD5qEMwGGiAAQeA9ahDNBhogAEHYO2oQ9QEaIABByDpqEPUBGiAAQaw6ahDOBhogAEGAOmoQzwYaIABBuDdqENAGGiAAQaw3ahDQBhogAEGgN2oQ0QYaIABBlDdqENIGGiAAQYg3ahD5ARogAEH8NmoQ0wYaIABB8DZqENQGGiAAQeQ2ahDVBhogAEHcNGoQ9wEaIABB0DRqEIMCGiAAQcQ0ahCDAhogAEG4NGoQgwIaIABBrDRqEIMCGiAAQQhqENYGGiAACzYAAkACQCABQQBIDQAgACgCACABSg0BC0G2wAFB85kBQdwMQY2GAhAAAAsgACgCCCABQQR0agspAQF/AkBBACgCsJ0HIgANAEHhsQRBtfMAQagaQYOTAhAAAAsgAEEIagsaAQF/QQAoArCdByIAQYA6akEAIAAtAIA6GwsNAEEAKAKwnQcrA4g0Cw0AQQAoArCdBygCkDQLDQBBACgCsJ0HQcg6agsNAEEAKAKwnQdBuDJqC4ABAQJ/IwBBEGsiASQAQQAoArCdByECIAAQ8AIgACgCUCAAEJMCIAJBAToAsjUgAkEBOgCWOCABQQhqIAJB5AFqIAAoAqAGQQxqEEsgAiABKQMINwPINQJAIAAtAAhBBHENACAAKAKgBi0ACEEEcQ0AIAIgADYC/DQLIAFBEGokAAuCAgEDf0EAIQECQEEAKAKwnQciAigCxDcgAEYNACACIAA2AsQ3AkACQCAARQ0AAkAgAi0AlzhFDQAgAkEBOgCVOAsgAkEAOgCZOCAAKAKwBiEDDAELQQAhAyACQQA6AJk4CyACQQA6AJQ4IAJBADYCzDcgAiADNgLINyACQQA2Aow4CyAAQQAQ8QICQAJAIABFDQAgACgCoAYiAUUNAQsCQCACKAKkNUUNACACKALQNSIDRQ0AIAMoAqAGIAFGDQAgAi0AsjUNABCUAgsCQCAARQ0AIAEQ8gIgASgCCCAAKAIIckGAwABxDQAgARDzAgsPC0G3lQJBtfMAQYkxQdIYEAAAC98BAQR/QQAhAgJAAkBBACgCsJ0HIgMoAqw3IgRFDQACQCAARQ0AIARBAUgNACADQaw3aiEFA0ACQCAFIAIQ/wIoAgQiA0UNACADKAIIIgNBgICAIHFFDQQgA0GAgIAIcQ0AIAIhAyACIAUoAgAiBE4NAgNAAkAgBSADEP8CKAIEIgRFDQAgBCgCoAYgACgCoAZGDQILIANBAWoiAyAFKAIAIgRIDQAMAwsACyACQQFqIgIgBSgCACIESA0ACwsgAiAETg0AIAIgARCBAwsPC0GdyQJBtfMAQbo+QfAYEAAAC48BAQN/AkBBACgCsJ0HQbg0aiIBENUDKAIAIABGDQAgASgCACICQQJIDQAgAkF+aiECA0ACQCABIAIQ1gIoAgAgAEcNACABIAIQ1gIgASACQQFqENYCIAEoAgAgAkF/c2pBAnQQ0zEaIAEgASgCAEF/ahDWAiAANgIADwsgAkEASiEDIAJBf2ohAiADDQALCwucAQEDfwJAQQAoArCdB0GsNGoiARDVAygCACICIABGDQAgAigCoAYgAEYNACABKAIAIgJBAkgNACACQX5qIQIDQAJAIAEgAhDWAigCACAARw0AIAEgAhDWAiABIAJBAWoQ1gIgASgCACACQX9zakECdBDTMRogASABKAIAQX9qENYCIAA2AgAPCyACQQBKIQMgAkF/aiECIAMNAAsLC4QCAQR/IwBBEGsiACQAAkACQAJAQQAoArCdByIBKAL8NEUNACABKAKkNRDwASABKAL8NCICRQ0CIAIoAqAGIgJFDQICQCABQewBai0AAEUNACABQeQBaiIDEPUCRQ0AIABBCGogAyABQcg1ahBLAkACQCACKgIMIAAqAghcDQAgAkEQaioCACAAKgIMWw0BCyACEPYCIAIgAEEIakEBEPcCCyABKAL8NBDwAgwCCxCUAiABQQA2Avw0DAELIAEoAtA1IgJFDQAgAigCUCICIAEoAqQ1Rw0AIAIQ8AEgAUHsAWotAAANABCUAgsgAEEQaiQADwtB+RZBtfMAQewaQYfSARAAAAtGAQF/AkBBACgCsJ0HIgENAEHQlgJBtfMAQYokQY/oARAAAAsgACABQeQBaiAAGyIAKgIAQwAAeshgIAAqAgRDAAB6yGBxCzYAAkAgAEEJai0AAEEBcQ0AQQAoArCdByIAKgKcX0MAAAAAX0UNACAAIABBHGoqAgA4ApxfCwvEAQECfyMAQRBrIgMkACAAKACrASEEAkACQAJAIAJFDQAgBEEYdEEYdSACcUUNASACEPgCRQ0CCyAAIARBcXE2AKsBIANBCGpD//9/f0P//39/EDEaIAAgAykDCDcCsAEgAyAAKQIMNwMIIAMgARA0IAAgAykDADcCDCADIABBDGogA0EIahBLIABBzAFqIAMQ+QIgAEHkAWogAxD5AiAAQdwBaiADEPkCCyADQRBqJAAPC0HujQRBtfMAQY4zQeHLABAAAAsLACAAIABBf2pxRQsiACAAIAEqAgAgACoCAJI4AgAgACABKgIEIAAqAgSSOAIEC5kCAQR/IwBBEGsiACQAAkBBACgCsJ0HIgEoAqQ1DQAgASgCkDUNAAJAIAEoAsQ3IgJFDQAgAi0AkAENAQsCQCABQdgHai0AAEUNAAJAIAEoAvQ0IgNFDQACQCADQQtqLQAAQQRxRQ0AIAMoApwBQYACEPsCRQ0CCyABKALwNBDvAgJAIAFBtQFqLQAARQ0AIAMtAAhBAXENACAAIAMQ/AIgACABQYgHahCdAg0AIAFBADYC/DQLIAEtAJs1RQ0BIAFBADYC/DQMAQsgAkUNABD9Ag0AQQAQ8AILIAFB2QdqLQAARQ0AEP0CIQICQCABKALwNCIDRQ0AIAMgAhD+AkUNACABKALwNCECCyACQQEQ8QILIABBEGokAAvPAQEEf0EAKAKwnQchAgJAAkAgAUGAAXFFDQAgAA0BIAIoAqw3IQMCQCABQYACcUUNACADQQBKDwsgAyACKAK4N0oPCyACQaw3aiEDIAIoAqw3IQQCQAJAIAFBgAJxRQ0AQQAhAQJAIARBAEoNAEEADwsDQCADIAEQ/wIoAgAgAEYiBQ0CIAFBAWoiASADKAIATg0CDAALAAtBACEFIAQgAigCuDciAUwNACADIAEQ/wIoAgAgAEYhBQsgBQ8LQcbGAkG18wBBxD1BzoUBEAAACz8BAX8jAEEQayICJAAgACABQQxqIAJBCGogASoCDCABKgIckiABQRBqKgIAIAEQgAOSEDEQoQEaIAJBEGokAAtmAQR/AkACQEEAKAKwnQciACgCrDciAUEBSA0AIABBtDdqKAIAIQIDQAJAIAIgAUF/aiIAQSRsaigCBCIDRQ0AIANBC2otAABBCHENAwsgAUEBSiEDIAAhASADDQALC0EAIQMLIAMLTQEDf0EAKAKwnQciAkGsNGohAyACKAKsNCECAkADQCACQQFIDQECQCADIAJBf2oiAhDWAigCACIEIABHDQBBAQ8LIAQgAUcNAAsLQQALNgACQAJAIAFBAEgNACAAKAIAIAFKDQELQbbAAUHzmQFB3AxBjYYCEAAACyAAKAIIIAFBJGxqCzsCAX0Bf0MAAAAAIQECQCAALQAIQQFxDQBBACgCsJ0HIQIgABCgAyACQdQqaioCACIBIAGSkiEBCyABC5wBAQR/AkAgAEEASA0AQQAoArCdByICKAKsNyAATA0AIAJBrDdqIgMgABD/AigCCCEEIAMgABD/AigCBCEFIAMgABCWAwJAIAFFDQACQAJAIAQNAEEAIQQMAQsCQCAELQCLAQ0AIAVFDQAgBUEAEJQDDwsgAigCjDgNACAEEMMDIQQLIAQQ8AILDwtBz74BQbXzAEHaPkGXjQEQAAALsQQBC39BACgCsJ0HIQAQgwNBACEBAkAQ/QIiAkUNAEEAIQEgACgC9DQiA0UNACADIAIQhANBAXMhAQsgACgCCCIEQRBxIQUgAEGwB2ohBkF/IQdBACEDQQAhCANAAkAgACADaiIJQdgHai0AAEUNAEEBIQoCQCAAKALwNA0AIAAoAqw3QQBKIQoLIAlB5wdqIAo6AAALIAlB7AFqLQAAIgogCEEBcXIhCQJAIApFDQACQCAHQX9GDQAgBiADQQN0aisDACAGIAdBA3RqKwMAY0UNAQsgAyEHCyAJQQBHIQggA0EBaiIDQQVHDQALQQEhCEEBIQMCQCAHQX9GDQAgACAHakHnB2otAABBAEchAwsgBUEARyEKAkAgAC0A7DxFDQAgAC0A8DxBEHFFIQgLIAogAXIhCgJAAkACQAJAAkACQCADDQAgCCAKcg0BIAAoAohkIghBf0YNAwwECyAKRQ0BCyAAQQA2Avg0IABCADcD8DQgACgCiGQiCEF/Rw0CQQEhCCADIAlBAEdxRQ0BDAMLIAAoAohkIghBf0cNAUEBIQggACgC8DQNAiAJDQILIAAoAqw3QQBKIQgMAQsgCEEARyEICyAAQdQGaiAIOgAAAkACQCAAKAKMZCIDQX9GDQAgA0EARyEDDAELIAAoAqQ1IAJyQQBHIQMLIABB1gZqIAAoApBkQQFqQQFLOgAAIABB1QZqQQEgAyAEQQlxQQFGGyADIABB2QZqLQAAGzoAAAuCBAIKfwF+IwBB0ABrIgAkAEEAIQECQEEAKAKwnQciAigC/DQiA0UNAEEAIAMgA0EJai0AAEECcRshAQsgACACQfgqaiIDKQMAIgo3A0gCQAJAIAJBtAFqLQAARQ0AIABBwABqIAMgAEEwakMAAIBAQwAAgEAQMRDUAQwBCyAAIAo3A0ALAkACQAJAIAIoAqw0IgRBAUgNACACQeQBaiEFIAJBrDRqIQYgAEE4aiEHA0ACQCAGIAQiCEF/aiIEENYCKAIAIgMtAIoBRQ0AIAMtAJEBDQAgA0EJai0AAEECcQ0AIAcgA0HsA2opAgA3AwAgACADKQLkAzcDMCAAQTBqIABByABqIABBwABqIAMoAghBwoCACHEbENIBIABBMGogBRCdAkUNAAJAIAMvAdQERQ0AIABBCGogAEEoaiADKgIMIAMuAdgEspIgA0EQaioCACADQdoEai4BALKSEDEiCSAAQSBqIAMuAdQEsiADQdYEai4BALIQMRBOIABBEGogCSAAQQhqEKEBIAUQnQINAQsgASADIAEbIQECQCACKAL8NCIJRQ0AIAMoAqAGIAkoAqAGRg0BCyACIAE2AvA0DAMLIAhBAUoNAAsLIAIgATYC8DRBACEDQQAhBCABRQ0BCyABKAKgBiEECyACIAM2Avg0IAIgBDYC9DQgAEHQAGokAAswAQF/AkAgACgCoAYgAUcNAEEBDwsCQANAIAAgAUYiAg0BIAAoApwGIgANAAsLIAILRwECf0EAKAKwnQciAEH8AWotAAAiAUECciABIABB/QFqLQAAGyIBQQRyIAEgAEH+AWotAAAbIgFBCHIgASAAQf8Bai0AABsL9w4CBn8DfSMAQRBrIgAkAAJAAkACQAJAQQAoArCdByIBRQ0AIAFBABDVAhCHAxCIAyABQQE6AJw0IAFBADYC6F4gAUEANgLoNCABIAEoApA0QQFqNgKQNCABIAErA4g0IAFBGGoiAioCALugOQOINCABQfzeAGpBABCJAyABIAEqAoRkIAIqAgAiBiABIAEoAoBkIgJBAnRqQaDgAGoiAyoCAJOSOAKEZCADIAY4AgAgASACQQFqQfgAbzYCgGRD//9/fyEGAkAgASoChGQiB0MAAAAAXkUNAEMAAIA/IAdDAADwQpWVIQYLIAFB3AZqIAY4AgAgAUGYAWooAgBBAToAHBCKAxCLAyABKAKsMhCMA0UNASAAQwAAAABDAAAAACABQRBqKgIAIAFBFGoqAgAQdBogAUHYMmogAEEIaikDADcCACABQdAyaiAAKQMANwIAIAFByDJqIAFB1CtqKgIAOAIAIAFBuDJqIAFB2CtqKgIAEOIGIAFB4DJqIAFB0CtqLQAAIgI2AgACQCABQdErai0AAEUNACABKAKsMigCVC0AAEEEcQ0AIAEgAkECciICNgLgMgsCQCABQdIrai0AAEUNACABIAJBBHIiAjYC4DILAkAgAUEMai0AAEEIcUUNACABIAJBCHI2AuAyCyABQcg6aiICEOUGIAIgASgCmAEoAgQQiQcgAhCGByABQdg7aiICEOUGIAIgASgCmAEoAgQQiQcgAhCGByABQYA6ahCNAwJAIAEtAOw8RQ0AIAFBhD1qKAIAIgIgASgCpDVHDQAgAhDwAQsCQAJAIAEoApQ1RQ0AIAEoApA1IgNFDQEgASgCpDUgA0cNBCABQQA2AqA1DAQLIAFCADcCnDUgASgCkDUiAw0DCyABKAKkNSECQQAhAwwDC0HhsQRBtfMAQcUdQZ7SARAAAAtBz6EEQbXzAEHgHUGe0gEQAAALIAEgASoCGCIGIAEqApw1kjgCnDUCQCABKAKkNSICIANHDQAgAyECDAELIAEgBiABKgKgNZI4AqA1CyABIAM2ApQ1IAFBADoAmzUgAUEAOgCYNSABQQA2ApA1IAEtAJk1IQMgAUEAOgCZNSABIAM6AJo1AkAgASgCqDUgAkYNACACRQ0AIAEoAtw1IAJHDQAQlAIgASgCpDUhAgsgASoCGCEIAkAgAkUNACABIAggASoCrDWSOAKsNQsgASACNgLcNSABQQA6AOA1IAFBADoAtTUgAUEANgKoNSABQQA6ALA1IAEgASgC0DU2AuQ1IAEgAS0AtDU6AOE1IAEgCCABKgLsNZI4Auw1AkAgASgCqF4iA0UNACACIANGDQAgAUEANgKoXgsCQCACDQAgAUIANwO4NSABQcA1akIANwMACyABQf////sHNgLMPUEAIQIgAUEANgLcPSABQQA7AO08IAEgASgC0D02AtQ9IAFBADYC0D0gAUH8BmoQhQM2AgAgAUHYGGogAUHYCGpBgBAQ0TEaA0ACQAJAIAEgAmpBgAJqLQAADQBDAACAvyEGDAELQwAAAAAhBiABIAJBAnRqQdgIaioCACIHQwAAAABdDQAgByAIkiEGCyABIAJBAnRqQdgIaiAGOAIAIAJBAWoiAkGABEcNAAsQjgMQjwMQggMQ9AICQAJAAkAQ/QINACABKALMOUUNASABKgLcOUMAAAAAXkUNAQsgASABKgLEOiABKgIYQwAAwECUkkMAAIA/EFI4AsQ6DAELIAEgASoCxDogASoCGEMAACDBlJJDAAAAABCoATgCxDoLIAFBfzYCkGQgAUEANgLoPCABQn83A4hkIABDAACAP0MAAIA/EDEaIAEgACkDADcDiF8QkAMQkQMCQAJAIAEoArg0IgIgASgCrDRHDQBD//9/fyEGAkAgAS0AnzQNACABQbgBaioCACIHQwAAAABdDQAgASsDiDS2IAeTIQYLAkAgAkUNACABQaw0aiEEQQAhAwNAIAQgAxDWAigCACICQQA7AZYBIAJBADoAjAEgAiACLQCKASIFOgCLASACQQA6AIoBAkAgBQ0AIAItAOAGDQAgAioC4AQgBl1FDQAgAhCNAgsgA0EBaiIDIAQoAgBHDQALC0EAIQICQCABKAKoPkEATA0AIAFBgD5qIQQgAUGoPmohAwNAAkAgAyACEJIDKgIAQwAAAABgRQ0AIAMgAhCSAyoCACAGXUUNACAEIAIQkwMQ2wgLIAJBAWoiAiADKAIASA0ACwsCQCABLQCfNEUNABCKAgsgAUEAOgCfNAJAIAEoAsQ3IgJFDQAgAi0AiwENAEEAQQAQlAMLIAFB0DRqQQAQlQMgAUG4N2pBABCWAyABQZQ3aiICQQAQlwMgAEEANgIAIAIgABCYAyABQaA3akEAEJkDIAEoAsQ3QQAQ8QIQmgMgAUEBOgCdNCAAQwAAyENDAADIQxAxQQQQmwNBljRBAEEAEJwDGiABKALsNC0AkgFFDQEgAUEBENUCIABBEGokAA8LQdu6AUG18wBB0B5BntIBEAAAC0GExAFBtfMAQf0eQZ7SARAAAAv/BAICfwF9AkACQAJAAkACQAJAAkACQAJAAkACQEEAKAKwnQciAC0AAEUNACAAKAKQNCEBAkACQCAAQRhqKgIAQwAAAABeDQAgAUUNAUGjzQRBtfMAQbI2QbHSABAAAAsgAUUNACAAKAKUNCABRw0CCyAAQRBqKgIAQwAAAABgRQ0CIABBFGoqAgBDAAAAAGBFDQIgAEGYAWooAgAiASgCqAhBAEwNAyABQagIakEAEJ0DKAIAEIwDRQ0EIABB1CtqKgIAQwAAAABeRQ0FIABB2CtqKgIAQwAAAABeRQ0GIAAqApgqIgJDAAAAAGBFDQcgAkMAAIA/X0UNByAAQawqaioCAEMAAIA/YEUNCCAAQbAqaioCAEMAAIA/YEUNCCAAQbwqaigCAEEBakEDTw0KQQAhAQNAAkAgACABQQJ0akE0aigCAEEBakGBBEkNAEGlugRBtfMAQb02QbHSABAAAAsgAUEBaiIBQRZHDQALAkAgAC0ACEEBcUUNACAAQeQAaigCAEF/Rg0KCwJAIABBtAFqLQAARQ0AIABBDGotAABBAnENACAAQQA6ALQBCw8LQeLoAUG18wBBsTZBsdIAEAAAC0HWqwRBtfMAQbM2QbHSABAAAAtByswEQbXzAEG0NkGx0gAQAAALQeevBEG18wBBtTZBsdIAEAAAC0HhsARBtfMAQbY2QbHSABAAAAtBicsEQbXzAEG3NkGx0gAQAAALQcjKBEG18wBBuDZBsdIAEAAAC0H9yQRBtfMAQbk2QbHSABAAAAtBiLYEQbXzAEG6NkGx0gAQAAALQc6zBEG18wBBwTZBsdIAEAAAC0GyN0G18wBBuzZBsdIAEAAAC7gBAgJ/AX0CQAJAQQAoArCdByIALQCZXw0AIABBuN8AahCeA0UNAQJAIABBIGooAgAiAUUNACABEJ8DCyAAQQE6AJlfCwJAIAAqApxfIgJDAAAAAF5FDQAgACACIABBGGoqAgCTIgI4ApxfIAJDAAAAAF9FDQACQAJAIABBIGooAgAiAUUNACABENQCDAELIABB2AZqQQE6AAALIABBADYCnF8LDwtB9J4EQbXzAEG6zgBBitQAEAAACyIAAkAgACgCBCABTg0AIAAgACABEO0BEO4BCyAAIAE2AgALNAECfwJAQQAoArCdByIAQaQBaigCACIBDQAgAEGYAWooAgBBqAhqQQAQnQMoAgAhAQsgAQvkAQMCfwJ9AX4CQAJAIABFDQBBACgCsJ0HIQEgABCMA0UNAEMAAAAAIQMgACoC2AEiBEMAAAAAXkUNASABIAA2AqwyIAFDAACAPyAEIAFBnAFqKgIAIAAqAjSUlBCoATgCtDICQCABKALsNCICRQ0AIAIQoAMhAyABKAKsMiEACyABIAM4ArAyIAAoAlQiAikCICEFIAFBhDRqIAJBKGo2AgAgASAFNwO4MiABQcQyaiADOAIAIAFBwDJqIAA2AgAPC0G2oQRBtfMAQbsxQe4wEAAAC0GesgFBtfMAQbwxQe4wEAAACwQAQQELWgIBfwF+IwBBEGsiASQAIABCADcCBCAAQQA6AAAgAEEMakIANwIAIAFBCGpDAAAAAEMAAAAAEDEaIAAgASkDCCICNwIcIAAgAjcCJCAAIAI3AhQgAUEQaiQAC+cZAwh/A30BfiMAQdAAayIAJABBACEBQQAoArCdByICQgA3AsQ5IAJB1wZqQQA6AAAgAigCCCIDQQFxIQQCQCADQQJxRQ0AIAJBDGotAABBAXFFDQBBASEBIAIoAvQ3QQRGDQACQCACQYAGaioCAEMAAAAAXg0AIAJBiAZqKgIAQwAAAABeDQAgAkGEBmoqAgBDAAAAAF4NACACQYwGaioCAEMAAAAAXg0AIAJBkAZqKgIAQwAAAABeDQAgAkGUBmoqAgBDAAAAAF4NACACQZgGaioCAEMAAAAAXg0AIAJBnAZqKgIAQwAAAABeRQ0BCyACQQQ2AvQ3CwJAIARFDQACQCACQeQAaigCABChA0UNACACQQM2AvQ3IAJBgAZqQYCAgPwDNgIACwJAIAJB6ABqKAIAEKEDRQ0AIAJBAzYC9DcgAkGIBmpBgICA/AM2AgALAkAgAkHsAGooAgAQoQNFDQAgAkEDNgL0NyACQYQGakGAgID8AzYCAAsCQCACQThqKAIAEKEDRQ0AIAJBAzYC9DcgAkHEBmpBgICA/AM2AgALAkAgAkE8aigCABChA0UNACACQQM2AvQ3IAJByAZqQYCAgPwDNgIACwJAIAJBwABqKAIAEKEDRQ0AIAJBAzYC9DcgAkHMBmpBgICA/AM2AgALAkAgAkHEAGooAgAQoQNFDQAgAkEDNgL0NyACQdAGakGAgID8AzYCAAsCQCACQfwBai0AACIDRQ0AIAJBuAZqQYCAgPwDNgIACwJAIAJB/QFqLQAARQ0AIAJBvAZqQYCAgPwDNgIACyACQf4Bai0AAEUNACADDQAgAkHABmpBgICA/AM2AgALIAJBrClqIAJB2ChqQdQAENExGkEAIQMDQEMAAIC/IQgCQCACIANBAnRqIgVBgAZqKgIAQwAAAABeRQ0AQwAAAAAhCCAFQdgoaioCACIJQwAAAABdDQAgCSACKgIYkiEICyAFQdgoaiAIOAIAIANBAWoiA0EVRw0ACwJAIAIoApw4RQ0AAkAgAi0AljhFDQAgAi0AmjhFDQELEKIDCyACQQA2Apw4IAJBADsAmTggAkEANgLkNwJAIAItALA4RQ0AEKMDCwJAAkACQAJAAkAgAigCuDhBAkcNACACLQCwOEUNAQJAIAJB0DhqKAIADQAgAkGgOWooAgANACACQQA6AJY4CyACQQA2Arg4CwJAIAItAJU4RQ0AIAItAJQ4RQ0AAkAgAi0ACEEEcUUNACACQQxqLQAAQQRxRQ0AIAItAJY4DQAgAi0AlzhFDQAgAigCxDdFDQAgAEHAAGoQpAMgAkHkAWogACkDQCILNwIAIAJBgAdqIAs3AwAgAkEBOgDXBgsgAkEAOgCVOAsgAkEANgLgNyACQQA6AJQ4IAIoAow4QQJPDQECQCACKALENyIDRQ0AIAMQpQMgAigCxDciA0UNACADKAKsBkUNACACKAKMOA0AIANBADYCrAYLEKYDAkACQCABIARBAEdyQQFHDQAgAigCxDciAw0BCyACQdkGakEAOgAADAMLIAJB2QZqIAMoAghBgIAQcSIDQRJ2QQFzOgAAIAMNAiACKALIN0UNAiACLQCWOA0CQQEhAwwDC0HIKkG18wBBlMUAQcLGARAAAAtB6L8CQbXzAEGqxQBBwsYBEAAACyACKALMOUEARyEDCyACQdoGaiADOgAAAkACQAJAAkACQAJAAkACQAJAQQFBARCnA0UNAAJAIAIoAqQ1RQ0AQQEQqAMNARCUAgwBCwJAIAIoAsQ3IgNFDQAgAygCCEGAgIAocUGAgIAIRw0AIAMoApwGIgVFDQAgAygCVEUNAiAFEPACIAMoAlRBAEEAEKkDIAJBADoAlDggAi0AlzhFDQEgAkEBOgCVOAwBCwJAIAIoAqw3QQFIDQAgAkGsN2oiAxCqAygCBEELai0AAEEIcQ0BIAMoAgBBf2pBARCBAwwBCwJAIAIoAow4RQ0AQQAQqwMMAQsCQCADRQ0AIAMoAghBgICAKHFBgICACEYNACADQQA2ArAGCyACQgA3A8g3CyACQgA3A9A3IAJB2DdqQgA3AwAgAkHQN2ohAyACKALIN0UNBSACLQCWOA0FIAIoAsw5DQUgAigCxDciBUUNBiAFQQpqLQAAQQRxDQUCQEEAEKwDDQAgAigCpDUiBUUNBSACKALINyEGDAILQQBBARCnAyEHIAIoAsg3IQECQCACKAKkNSIFDQAgB0UNACADIAE2AgAMAwsgBUUNAgJAIAUgAUYNACABIQYMAgsgAiAFNgLUNyABIQYgBSEBIAdFDQEMAwtB18gCQbXzAEHHxQBBwsYBEAAACyAFIAZGDQIMAwsgAiABNgLUNyAHRQ0BCyACIAE2Atg3C0ECQQEQpwNFDQAgAiACKALINzYC3DcLIAIoAsQ3IgVFDQBBACEHIAVBCmotAABBBHFFDQEgAkEBOgCWOAwBC0EAIQVBASEHCwJAAkACQAJAAkAgAygCACIDRQ0AIAIoAtQ3IANHDQELIAJBADoAsDgCQCACKALwNyIDRQ0AIAIgAzYC2DcgAiADNgLcNyACIAM2AtQ3IAIgAzYC0DcLIAJBADYC8DcCQAJAIAIoArg4IgENACACQQA2ArQ4IAJBfzYCwDgCQCAHDQAgAigCzDkNACAFQQpqLQAAQQRxDQACQEEAEK0DDQACQEEEQQMQpwMNAEERQQMQpwNFDQELIAJBADYCwDgLAkBBARCtAw0AAkBBBUEDEKcDDQBBEkEDEKcDRQ0BCyACQQE2AsA4CwJAQQIQrQMNAAJAQQZBAxCnAw0AQRNBAxCnA0UNAQsgAkECNgLAOAtBAxCtAw0AAkBBB0EDEKcDDQBBFEEDEKcDRQ0BCyACQQM2AsA4CyACIAIoAsA4IgM2Asg4DAELIAIoAsA4IgNBf0YNAiACKALIOEF/Rg0CIAFBAUcNAyACQQI2Arg4C0MAAAAAIQgCQCAERQ0AEK4DIQggAigCwDghAwsCQAJAAkAgA0F/Rg0AIAJBAToAsDggAiADNgLEOCACIAJB/AZqKAIANgK8OAwBCyACLQCwOEUNAQsgAigCyDcNACACQQA2Apw4IAJBgQI7AJk4IAJBADoAljgLEK8DAkAgAigCxDciA0UNACADQQpqLQAAQQRxDQAgAigCzDkNAAJAAkAgAxCgA0MAAMhClCACKgIYlEMAAAA/kiIJi0MAAABPXUUNACAJqCEFDAELQYCAgIB4IQULIAWyIQkCQCADQcQCaigCAA0AIANB0QJqLQAARQ0AIAItALA4RQ0AAkAgAigCwDgiBUEBSw0AIAMgCSAJjCAFGyADKgJYkhA1ELADIAIoAsA4IQULIAVBfnFBAkcNACADIAmMIAkgBUECRhsgA0HcAGoqAgCSEDUQsQMLIABBwABqQQRBAEPNzMw9QwAAIEEQsgMCQCAAKgJAIgpDAAAAAFsNACADLQCIAUUNACADIAogCZQgAyoCWJIQNRCwAwsgACoCRCIKQwAAAABbDQAgAyAKIAmUIANB3ABqKgIAkhA1ELEDCyACQcw4ahCzAyACQfQ4ahCzAyACQZw5ahCzAwJAIAItALA4RQ0AIAIoAvQ3QQRHDQAgAigCjDgNACAAQThqIAIoAsQ3IgNB9ANqIANBDGoiBRBLIABBCGogAEE4aiAAQTBqQwAAgD9DAACAPxAxEEsgAEEgaiADQfwDaiAFEEsgAEEoaiAAQSBqIABBGGpDAACAP0MAAIA/EDEQTiAAQcAAaiAAQQhqIABBKGoQoQEiBSADIAIoAow4QQR0akG4BmoQ0wENACADEKADIQkgBSAAQQhqIAUQtAMgCUMAAAA/lCIJEFKMIAUQtQMgCRBSjBAxENIBIAMgAigCjDhBBHRqQbgGaiAFELYDIAJCADcDyDcLAkACQCACKALENyIDRQ0AIABByABqIAMgAigCjDhBBHRqIgVBwAZqKQIANwMAIAAgBUG4BmopAgA3A0AMAQsgAEHAAGpDAAAAAEMAAAAAQwAAAABDAAAAABC3AxogAigCxDchAwsCQAJAIANFDQAgAEE4aiADQQxqIABBwABqEE4gAEEwaiACKALEN0EMaiAAQcgAahBOIABBCGogAEE4aiAAQTBqEKEBGgwBCyAAQQhqELgDCyACIAApAwg3Avg3IAJBgDhqIgMgAEEQaikDADcCACACQfg3aiIFIAgQuQMgAyACKgL4N0MAAIA/kiADKgIAEFIiCDgCACACIAg4Avg3IAUQugMNAyACQQA2Aog4IABB0ABqJAAPC0Gg8wFBtfMAQfXFAEHCxgEQAAALQb/MAUG18wBBkMYAQcLGARAAAAtBqekBQbXzAEGRxgBBwsYBEAAAC0GXoQRBtfMAQeDGAEHCxgEQAAALswcED38BfgJ9AXwjAEEQayIAJAACQEEAKAKwnQciAUHkAWoiAhD1AkUNACAAQQhqIAIQNCABIAApAwgiDzcC5AEgASAPNwP4PgsCQAJAIAIQ9QJFDQAgAUGAB2oiAxD1AkUNACAAQQhqIAIgAxBLIAFB9AZqIAApAwgiDzcCAAwBCyAAQQhqQwAAAABDAAAAABAxGiABQfQGaiAAKQMIIg83AgALAkACQCAPp75DAAAAAFwNACAPQiCIp75DAAAAAFsNAQsgAUEAOgCXOAsgAUGAB2ogASkC5AE3AwAgAUEIaiEEQQAhAwNAAkACQCABIANqIgVB7AFqIgYtAABFDQAgBCADQQJ0aiIHQewHaiIIKgIAIRAgBCADaiIJQdoHaiIKQQA6AABDAAAAACERIAlB0AdqIgsgEEMAAAAAXSIMOgAAIAdBgAhqIBA4AgACQCAMDQAgECABKgIYkiERCyAIIBE4AgAgBUHdB2oiCEEAOgAAAkAgEEMAAAAAXUUNAAJAAkAgASoCKCABKwOINCISIAEgA0EDdCIMaiINQbAHaiIOKwMAobZeRQ0AAkACQCACEPUCRQ0AIABBCGogAiANQYgHahBLDAELIABBCGpDAAAAAEMAAAAAEDEaCwJAIABBCGoQTCABKgIsIhAgEJRdRQ0AIAhBAToAAAsgDiABKgIoQwAAAMCUuzkDAAwBCyAOIBI5AwALIAQgDGoiDEGAB2ogASkC5AE3AwAgCUHkB2ogCC0AADoAACAAQQhqQwAAAABDAAAAABAxGiAMQZQIaiAAKQMINwIAIAdBvAhqQQA2AgAMAgsCQAJAIAIQ9QJFDQAgAEEIaiACIAEgA0EDdGpBiAdqEEsMAQsgAEEIakMAAAAAQwAAAAAQMRoLIAdBvAhqIQcgByAHKgIAIABBCGoQTBCoATgCACAEIANBA3RqIglBlAhqIQcgByAHKgIAIAAqAggiEIwgECAQQwAAAABdGxCoATgCACAJQZgIaiEHIAcgByoCACAAKgIMIhCMIBAgEEMAAAAAXRsQqAE4AgAMAQsgBCADaiIHQdAHaiILQQA6AAAgB0HaB2oiCiAEIANBAnRqIglB7AdqIggqAgAiEEMAAAAAYDoAACAIQYCAgPx7NgIAIAlBgAhqIBA4AgAgB0HVB2pBADoAAAsCQCAGLQAADQAgCi0AAA0AIAVB7AdqQQA6AAALAkAgCy0AAEUNACABQQA6AJc4CyADQQFqIgNBBUcNAAsgAEEQaiQAC5UHAgR/A30jAEEgayIAJAACQEEAKAKwnQciASgCgDVFDQAgASABKgKMNSABQRhqKgIAkzgCjDUCQAJAQQAQ9QJFDQAgAEEYaiABQeQBaiABQYQ1ahBLIABBGGoQTCABQTBqKgIAIgQgBJReRQ0AIAFBADYCjDUMAQsgASoCjDVDAAAAAF9FDQELIAFBADYCjDUgAUEANgKANQsCQAJAIAFB9AFqKgIAIgRDAAAAAFwNACABQfgBaioCAEMAAAAAWw0BCwJAIAEoAqQ1RQ0AIAEtALY1DQELAkAgASgClDVFDQAgAS0AmjUNAQsCQCABKAKANSICDQAgASgC8DQiAkUNAQsgAi0AjQENAAJAIARDAAAAAFsNAAJAIAFB/AFqLQAARQ0AIAFBoAFqLQAARQ0BIAIQuwMgAiACKgKABSIEIAEqAvQBQ83MzD2UkkMAAAA/QwAAIEAQvAMiBTgCgAUgAkELai0AAEEBcQ0CIABBCGogAkEUaiIDQwAAgD8gBSAElSIEkxAzIAAgAUHkAWogAkEMaiIBEEsgAEEQaiAAQQhqIAAQvQMgAEEYaiAAQRBqIAMQvgMgAEEQaiABIABBGGoQTiACIABBEGpBABD3AiAAQQhqIAMgBBAzIABBEGogAEEIahA0IAIgACkDEDcCFCAAQQhqIAJBHGogBBAzIABBEGogAEEIahA0IAIgACkDEDcCHAwCCyABQf0Bai0AAA0AIAIQuwMCQCACKAIIIgNBgICACHFFDQADQAJAIAJB5ABqKgIAQwAAAABbDQAgA0GQBHFBEEcNAgsgAigCnAYiAigCCCIDQYCAgAhxDQALCyADQZAEcQ0AIAJB9ANqELUDIQUgAhCgAyEGIAIgAkHcAGoqAgAgBCAGQwAAoECUIAVDH4UrP5QQUhA1lJMQsQMLAkACQCABQfgBaioCACIEQwAAAABbDQAgAUH9AWotAABFDQELIAEqAvQBIgRDAAAAAFsNASABQf0Bai0AAEUNAQsgBEMAAAAAWw0AIAFB/AFqLQAADQAgAhC7AwJAIAIoAggiAUGAgIAIcUUNAANAAkAgAioCYEMAAAAAWw0AIAFBkARxQRBHDQILIAIoApwGIgIoAggiAUGAgIAIcQ0ACwsgAUGQBHENACACQfQDahC0AyEGIAIQoAMhBSACIAIqAlggBCAFIAWSIAZDH4UrP5QQUhA1lJMQsAMLIABBIGokAAuMAwEEf0EAIQACQEEAKAKwnQciASgCxDciAkUNACACLQCKAUUNACACQQpqLQAAQQRxDQAgAUH8AWotAAANAEEAQQEQvwMhAAsgASAAOgD8OQJAAkACQCABKAKkNQ0AIAANAQsgASgC6DkhAAwBCyABQf////8HNgL0OSABIAEoAsQ3IgA2Aug5AkAgASgCyDdFDQAgASgCkDgiAkH/////B0YNACABIAJBf0EBIAFB/QFqLQAAG2pBAWo2Avg5DAELIAFBACABQf0Bai0AAEEBcWs2Avg5CyABQQA2AuQ5IAFC//////f/////ADcC7DkCQCAARQ0AIAEgADYC5DkCQCABKAL0OSICQf////8HRg0AIABBqANqKAIAIgNBf0YNACABIAIgA0EBahDAAzYC7DkLAkAgASgC+DkiAkH/////B0YNACAAQawDaigCACIAQX9GDQAgASACIABBAWoQwAM2AvA5CyABQQA2Aug5IAFC//////f/////ADcC9DkLIAFB/////wc2ApA4CzYAAkACQCABQQBIDQAgACgCACABSg0BC0G2wAFB85kBQdwMQY2GAhAAAAsgACgCCCABQQJ0agsJACAAIAEQwQMLpwEBA39BACECQQAoArCdByIDKAK4NEF/aiEEAkAgAEUNACAEIAAQwgMiAEF/aiAAQX9GGyEECwJAIARBAEgNACADQbg0aiEDA0ACQCADIAQiABDWAigCACIEIAFGDQAgBC0AiwFFDQAgBCgCCCICQYCAgAhxDQAgAkGAhBBxQYCEEEYNACAEEMMDIQIMAgsgAEF/aiEEQQAhAiAAQQBKDQALCyACEPACCyIAAkAgACgCBCABTg0AIAAgACABEMQDEMUDCyAAIAE2AgALIgACQCAAKAIEIAFODQAgACAAIAEQxgMQxwMLIAAgATYCAAsiAAJAIAAoAgQgAU4NACAAIAAgARDIAxDJAwsgACABNgIAC0wBAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahDIAxDJAyAAKAIAIQILIAAoAgggAkECdGogASgCADYCACAAIAAoAgBBAWo2AgALIgACQCAAKAIEIAFODQAgACAAIAEQygMQywMLIAAgATYCAAupAQEDfyMAQRBrIgAkAEEAKAKwnQciAUEANgKMYAJAIAEtAIhgRQ0AIAEoApQ1IQJBBxDMAwJAQQ5BARC/A0UNACABQQA6AIhgCwJAQQBBABDNA0UNACACRQ0AIAFBADoAiGAgASACNgKMYAtDmpkZPxDOAxDPAyAAIAI2AgBBpYwCIAAQkQlB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AEEIaiABIAJBCGoQ4QQgACACKQMoNwIIIAJBMGokAAsZACAAIAEgAhAxGiAAQQhqIAMgBBAxGiAACysBAX8gAEMAAAAAQwAAAABBACgCsJ0HIgFBEGoqAgAgAUEUaioCABC3AxoLIQAgACAAKgIEIAGSOAIEIABBDGoiACAAKgIAIAGSOAIACxwAIAAqAgAgACoCCF4gACoCBCAAQQxqKgIAXnILPAEBfwJAQQAoArCdByIBKAKANSAARg0AIAEgADYCgDUgAUGAgICABDYCjDUgASABQeQBaikCADcChDULCxQAIAEgAiAAIAAgAl4bIAAgAV0bCx0AIAAgASoCACACKgIAlCABKgIEIAIqAgSUEDEaCx0AIAAgASoCACACKgIAlSABKgIEIAIqAgSVEDEaCzABAX9BACECAkBBACgCsJ0HIABBAnRqQTRqKAIAIgBBAEgNACAAIAEQtgQhAgsgAgsKACABIABqIAFvCzcAAkACQCABQQBIDQAgACgCACABSg0BC0G2wAFB85kBQdwMQY2GAhAAAAsgACgCCCABQagEbGoLQQECf0EAKAKwnQciAUG4NGohAiABKAK4NCEBA0ACQCABQQFODQBBfw8LIAIgAUF/aiIBENYCKAIAIABHDQALIAELIwEBfwJAAkAgACgCrAYiAUUNACABLQCLAQ0BCyAAIQELIAELKwACQAJAIAAoAgQiAA0AQQghAAwBCyAAQQJtIABqIQALIAAgASAAIAFKGwtMAQJ/AkAgACgCBCABTg0AIAFBAnQQVSECAkAgACgCCCIDRQ0AIAIgAyAAKAIAQQJ0ENExGiAAKAIIEFcLIAAgATYCBCAAIAI2AggLCysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQSRsEFUhAgJAIAAoAggiA0UNACACIAMgACgCAEEkbBDRMRogACgCCBBXCyAAIAE2AgQgACACNgIICwsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUECdBBVIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBAnQQ0TEaIAAoAggQVwsgACABNgIEIAAgAjYCCAsLKwACQAJAIAAoAgQi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jDVB0coBEAAAC0EAKAKwnQciASABKALsNCICNgLoOSACQagDaigCACECIAFB/////wc2Avg5IAEgACACakEBajYC9DkL3gEBBH8jAEEgayIAJAACQEEAKAKwnQciASgC7DQiAi0AkAFFDQAgASgCxDciAyACKAKoBkcNAAJAIAEtAJk4DQAgASgCnDhFDQELIAEoAow4IANBwAJqKAIARw0AIAFBADoAmTggASADQZgCaigCADYCnDggAEEIaiADQaACaiADQQxqEEsgACABKALENyICQagCaiACQQxqEEsgAEEQaiAAQQhqIAAQoQEaIAFBqDhqIABBGGopAwA3AgAgASAAKQMQNwKgOBCvAxDNBA0AQwAAAD8QrAULIABBIGokAAttAgJ/An1BACgCsJ0HIgEoAuw0IQIgAiACQdgBaioCACIDIAFB5CpqKgIAIgSTIAQgAyACQYACaioCAJKSIAAQrQUgAkEQaioCAJMgABCuBSACQfwAakMAAAAAIAJBwABqKgIAIASTEKgBOAIACw0AIAEgAJMgApQgAJILlQECAn0BfwJAIAJDAAAAAGBFDQAgAkMAAIA/X0UNACAAEIADIQMgABDiAyEEIABB/ABqQQA2AgAgAEH0AGogAjgCAAJAAkAgAEHcAGoqAgAgASADIASSk5IiAotDAAAAT11FDQAgAqghBQwBC0GAgICAeCEFCyAAQewAaiAFsjgCAA8LQdavAUG18wBBzTxB64YCEAAACzkBAn8jAEEQayIBJAAgAUEAKAKwnQcoAuw0IgIgABCHAjYCDCACQcABaiABQQxqEN4BIAFBEGokAAs5AQJ/IwBBEGsiASQAIAFBACgCsJ0HKALsNCICIAAQiAI2AgwgAkHAAWogAUEMahDeASABQRBqJAALMgEBfyMAQRBrIgEkACABIAA2AgxBACgCsJ0HKALsNEHAAWogAUEMahDeASABQRBqJAALGQAgACABIABrQQAgARsgAhBjIgEQ8AEgAQsUAEEAKAKwnQcoAuw0IABBABDfAQsSAEEAKAKwnQcoAuw0IAAQhAILTAEDfyMAQSBrIgEkACABQQhqQQAoArCdBygC7DQiAkHMAWoiAyAAEE4gAkG0BGogAUEQaiADIAFBCGoQoQEQnwIhACABQSBqJAAgAAszAQF/IwBBEGsiAiQAQQAoArCdBygC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Ag8LQY7vAUG18wBB+8EAQfGIARAAAAs4ACAAIAI2AgQgACABNgIAIAAgAUHMAmooAgA2AgggACADKQIANwIYIABBIGogA0EIaikCADcCAAsOACAAEM4EKQLMATcCAAtCAQJ/IwBBEGsiASQAEJIEIgIgACkCADcCzAEgAUEIaiACQeQBaiIAIAJBzAFqENQBIAAgASkDCDcCACABQRBqJAALOAECfyMAQRBrIgEkACABQQhqEM4EIgJBzAFqIAJBDGoQSyAAIAFBCGogAkHYAGoQTiABQRBqJAALGQEBfxDOBCIAKgLMASAAKgIMkyAAKgJYkgsjAQF/EM4EIgBB0AFqKgIAIABBEGoqAgCTIABB3ABqKgIAkgtcAQJ/IwBBEGsiASQAIAEQkgQiAkEMaiACQdgAahBLIAFBCGogASAAEE4gAiABKQMINwLMASABQQhqIAJB5AFqIgAgAkHMAWoQ1AEgACABKQMINwIAIAFBEGokAAs0AQF/EJIEIgEgASoCDCABKgJYkyAAkiIAOALMASABQeQBaiEBIAEgASoCACAAEKgBOAIACz4BAX8QkgQiAUHQAWogAUEQaioCACABQdwAaioCAJMgAJIiADgCACABQegBaiEBIAEgASoCACAAEKgBOAIACxYBAX8gABDOBCIBQdwBaiABQQxqEEsLVwECf0EAKAKwnQchARCSBCECAkAgAEMAAAAAXA0AIAFBgCtqKgIAIQALIAJBjAJqIgEgACABKgIAkiIAOAIAIAIgACACKgIMkiACQZACaioCAJI4AswBC1cBAn9BACgCsJ0HIQEQkgQhAgJAIABDAAAAAFwNACABQYAraioCACEACyACQYwCaiIBIAEqAgAgAJMiADgCACACIAAgAioCDJIgAkGQAmoqAgCSOALMAQtPAQN/QQAoArCdByIBKALsNCECAkAgAEMAAAAAXA0AIAIqAuQEIQALIAJBtANqIgMgADgCACACQbwDaiADEIgFIAEgASgC0DZBfnE2AtA2C4gCAgZ/A30jAEEQayICJABBACEDQQAoArCdByIEKALsNCEFAkACQCABIARB6CpqKgIAIgggAEF/aiIGsiIJlJMgALKVIgqLQwAAAE9dRQ0AIAqoIQcMAQtBgICAgHghBwsgAkMAAIA/IAeyEKgBIgo4AgwCQAJAIAEgCCAKkiAJlJMi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UrgePxB0GiAAQZwEaiACKQMANwIAIABBlARqIAEpAwA3AgAgAUPNzMw+Q4/C9T5Dj8I1P0NxPUo/EHQaIABBrARqIAIpAwA3AgAgAEGkBGogASkDADcCACABQx+F6z5DcT0KP0PNzEw/QwAAgD8QdBogAEG8BGogAikDADcCACAAQbQEaiABKQMANwIAIAFDzczMPkPNzMw+Q2ZmZj9DZmbmPhB0GiAAQcwEaiACKQMANwIAIABBxARqIgUgASkDADcCACABQ2Zm5j5DZmbmPkNmZmY/Q83MTD8QdBogAEHcBGoiBiACKQMANwIAIABB1ARqIgcgASkDADcCACABQxSuBz9DFK4HP0NSuF4/Q83MTD8QdBogAEHsBGogAikDADcCACAAQeQEaiIIIAEpAwA3AgAgAUMAAAA/QwAAAD9DAAAAP0OamRk/EHQaIABB/ARqIAIpAwA3AgAgAEH0BGogASkDADcCACABQ5qZGT9DmpkZP0MzMzM/QwAAgD8QdBogAEGMBWogAikDADcCACAAQYQFaiABKQMANwIAIAFDMzMzP0MzMzM/Q2ZmZj9DAACAPxB0GiAAQZwFaiACKQMANwIAIABBlAVqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0PNzMw9EHQaIABBrAVqIAIpAwA3AgAgAEGkBWogASkDADcCACABQxSuRz9DhetRP0MAAIA/Q5qZGT8QdBogAEG8BWogAikDADcCACAAQbQFaiABKQMANwIAIAFDFK5HP0OF61E/QwAAgD9DZmZmPxB0GiAAQcwFaiACKQMANwIAIABBxAVqIAEpAwA3AgAgASAFIARDzcxMPxDeBiAAQdwFaiACKQMANwIAIABB1AVqIgUgASkDADcCACAAQewFaiAGKQIANwIAIABB5AVqIAcpAgA3AgAgASAIIARDmpkZPxDeBiAAQfwFaiACKQMANwIAIABB9AVqIgQgASkDADcCACABIAUgA0PNzEw/EN4GIABBjAZqIAIpAwA3AgAgAEGEBmogASkDADcCACABIAQgA0PNzMw+EN4GIABBnAZqIAIpAwA3AgAgAEGUBmogASkDADcCACABQwAAgD9DAACAP0MAAIA/QwAAgD8QdBogAEGsBmogAikDADcCACAAQaQGaiABKQMANwIAIAFDZmZmP0MzMzM/QwAAAABDAACA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VSECAkAgACgCCCIDRQ0AIAIgAyAAKAIAQagEbBDRMRogACgCCBBXCyAAIAE2AgQgACACNgIICwsLACAAQgA3AgAgAAsLACAAQgA3AgAgAAsLACAAQgA3AgAgAAsVACAAQgA3AgAgAEEIakEANgIAIAALEgAgAEEANgIIIABCADcCACAACxUAIABCADcCACAAQQhqQQA2AgAgAAvoBwMHfwN9AX4jAEHgAGsiAyQAAkACQBCSBCIELQCPAQ0AIABFDQFBACgCsJ0HIQUCQCABDQAgACAAENoxaiEBCyADQdgAaiAEKgLMASAEQdABaioCACAEQYQCaioCAJIQMSEGIARBuANqKgIAIQoCQCABIABrQdEPSA0AIApDAAAAAGANABDOBSEKIANB0ABqQwAAAABDAAAAABAxIQcgAyADKQNYIg03A0gCQCAFLQDcXw0AAkACQCAEQbgEaioCACANQiCIp74iC5MgCpUiDItDAAAAT11FDQAgDKghCAwBC0GAgICAeCEICyAIQQFIDQBDAAAAACEMAkAgASAATQ0AIAJBAXEhCUEAIQQDQCAAQQogASAAaxBZIgUgASAFGyEFAkAgCQ0AIAcqAgAhDCADQThqIAAgBUEAQwAAgL8QywEgByAMIAMqAjgQjQk4AgALIARBAWohBAJAIAVBAWoiACABTw0AIAQgCEgNAQsLIASyIQwLIAMgCiAMlCALkjgCTAsCQCAAIAFPDQAgA0EwaiADQcgAaiADQShqQ///f38gChAxEI4JIANBOGogA0HIAGogA0EwahChASEEAkADQCAEQQBBABCeAg0BIABBCiABIABrEFkhBSAHKgIAIQwgA0EwaiAAIAUgASAFGyIFQQBDAACAvxDLASAHIAwgAyoCMBCNCTgCACADIAMpA0giDTcDICADIA03AxAgA0EQaiAAIAVBABDGASAEIAogBCoCBJI4AgQgBCAKIAQqAgySOAIMIAMgCiADKgJMkjgCTCAFQQFqIgAgAUkNAAsLQwAAAAAhDAJAIAAgAU8NACACQQFxIQJBACEFA0AgAEEKIAEgAGsQWSIEIAEgBBshBAJAIAINACAHKgIAIQwgA0EwaiAAIARBAEMAAIC/EMsBIAcgDCADKgIwEI0JOAIACyAFQQFqIQUgBEEBaiIAIAFJDQALIAWyIQwLIAMgCiAMlCADKgJM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IAFBgH9qIABMDQEMAgsgAUF/Sg0AQf8AIQIgAUH/AGogAEgNAQsgACABayECCyACQRh0QRh1CyABAX9BfyABIABqIgIgAUH/AXMgAEkbIAIgARtB/wFxCxwBAX9BACAAIAFrIgIgACABSRsgAiABG0H/AXELTgEBfwJAAkACQCABQX9KDQBBgIACIQJBgIB+IAFrIABMDQEMAgsgAUUNAEH//wEhAkH//wEgAWsgAEgNAQsgASAAaiECCyACQRB0QRB1C1ABAX8CQAJAAkAgAUEBSA0AQYCAAiECIAFBgIB+aiAATA0BDAILIAFBf0oNAEH//wEhAiABQf//AWogAEgNAQsgACABayECCyACQRB0QRB1CyIBAX9BfyABIABqIgIgAUH//wNzIABJGyACIAEbQf//A3ELHQEBf0EAIAAgAWsiAiAAIAFJGyACIAEbQf//A3ELTQEBfwJAAkAgAUF/Sg0AQYCAgIB4IQJBgICAgHggAWsgAEoNAQtB/////wcgASAAaiICQf////8HIAFrIABIGyACIAFBAEobIQILIAILTQEBfwJAAkAgAUEBSA0AQYCAgIB4IQIgAUGAgICAeHIgAEoNAQtB/////wcgACABayICIAFB/////wdqIABIGyACIAFBAEgbIQILIAILGwEBf0F/IAEgAGoiAiABQX9zIABJGyACIAEbCxgBAX9BACAAIAFrIgIgACABSRsgAiABGwthAQF+AkACQCABQn9VDQBCgICAgICAgICAfyECQoCAgICAgICAgH8gAX0gAFUNAQtC////////////ACABIAB8IgJC////////////ACABfSAAUxsgAiABQgBVGyECCyACC2EBAX4CQAJAIAFCAVMNAEKAgICAgICAgIB/IQIgAUKAgICAgICAgIB/hCAAVQ0BC0L///////////8AIAAgAX0iAiABQv///////////wB8IABTGyACIAFCAFMbIQILIAILHgEBfkJ/IAEgAHwiAiABQn+FIABUGyACIAFCAFIbCxsBAX5CACAAIAF9IgIgACABVBsgAiABQgBSGwuICQMFfwF9AXwjAEHQAWsiBSQAA0AgACIGQQFqIQAgBiwAACIHEOYJDQALQQAhCAJAAkAgB0H/AXFBVmoiAEEFSw0AQQEgAHRBI3FFDQADQCAGLAABIQAgBkEBaiIJ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AUMAAAAAEMcFIAFBgANqIgEgASgCAEEBajYCACAAQaeVASAAGxCvBQu+AQEDf0EAKAKwnQciACgC7DQhAUMAAAAAEMgFIAFBgANqIgIgAigCAEF/aiICNgIAQQEgAnQhAgJAIAAoAsA4DQAgACgCxDcgAUcNABCjBEUNACAALQCUOEUNACABQYQDaigCACACcUUNACABQcABahDvASgCACAAKAKMOEEAEKkDEPQFCyABQYQDaiIAIAAoAgAgAkF/anE2AgACQCABKALAAUEBSg0AQZu/AkHw8gBB+y1B0fQAEAAACxDqBAsiAgF/AX1BACgCsJ0HIgAqArAyIABB0CpqKgIAIgEgAZKSC0QBAX8CQEEAKAKwnQciAigC7DQtAI8BDQAgAkHgNmogADoAACACQdw2aiABQQEgARs2AgAgAiACKALQNkECcjYC0DYLCy8BAn9BACECAkAQkgQiAy0AjwENACADIABBABDfASABQRpyIABBABCYCyECCyACC9oBAgV/An0jAEEwayIDJABBACEEAkAQkgQiBS0AjwENAAJAAkAgAQ0AQRohBgwBC0GegMAAIQYgAS0AAEUNAQsgBSAAQQAQ3wEiByAGIAJyIABBABCYCyEEIAFFDQBBACgCsJ0HIQAgA0EIahCoCyECIAVBoAJqKgIAIAVBqAJqKgIAIABB0CpqKgIAIgggCJKTIAAqArAykxCNCSEIIAVBpAJqKgIAIQkCQEGQmgJBACAHELIFIAMgCCAJEDEQpAlFDQAgAUEAOgAACyACEKkLCyADQTBqJAAgBAsbACAAQQhqENkBGiAAQRhqENkBGiAAEKoLIAALaQEBf0EAKAKwnQcoAuw0IgFBmAJqIAAoAgA2AgAgAUGcAmogACgCBDYCACABQaACaiAAKQIINwIAIAFBqAJqIABBEGopAgA3AgAgAUGwAmogACkCGDcCACABQbgCaiAAQSBqKQIANwIAC2kBAX8gAEEAKAKwnQcoAuw0IgFBmAJqKAIANgIAIAAgAUGcAmooAgA2AgQgACABQaACaikCADcCCCAAQRBqIAFBqAJqKQIANwIAIAAgAUGwAmopAgA3AhggAEEgaiABQbgCaikCADcCAAsnAAJAIAAgAS0AACACIAMQzQkiAEUNACABIAEtAABBAXM6AAALIAAL7wMCBn8DfSMAQfAAayIC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IAAoAgBODQAgACAEEKgGIgUoAgQiBEEgcQ0AIAMoAgQgBHNBwAFxDQAgAUEMaiADQSQQ0TEaIAMgBUEjENExGiAFIAFBDGpBIxDRMRoCQCAAQQ5qLQAAQcAAcUUNABCHBgtBASECCyABQTBqJAAgAgvcAgMFfwF+An0jAEEgayIBJABBACECQQAoArCdByIDKALsNCIEKQLMASEGIAMqArAyIQcgAUEQaiAAKgIoIANB1CpqKgIAIgiTIABBLGoqAgAQMRogBCABKQMQNwLMASAAIAcgCJIgACoCKJI4AiggAUEYaiADQeQraikCADcDACABIANB3CtqKQIANwMQIAEgASoCHEMAAAA/lDgCHEEAIAFBEGoQtAFBFSABQwAAAABDAAAAAEMAAAAAQwAAAAAQdBC0AUG9HUEAQdAAEMkJIQNBAhC1AQJAIANFDQBBACECAkAgACgCAEEATA0AQQAhAwNAAkAgACADEKgGIgVBBmotAABBIHENACAFIAIgACAFEKkGIAAoAhQgBSgCAEZBACABQwAAAABDAAAAABAxEM0JGyECCyADQQFqIgMgACgCAEgNAAsLEMsJCyAEIAY3AswBIAFBIGokACACCyIAAkAgACgCBCABTg0AIAAgACABEIIMEIMMCyAAIAE2AgALtQECA38BfSMAQRBrIgMkAEEAKAKwnQchBCADQQhqIAFBAEEBQwAAgL8QywEgAyADKgIIIARB0CpqIgUqAgCSIAMqAgwgBEHUKmoqAgAiBiAGkpIQMSEBIAUqAgAhBgJAAkAgAkUNACABKgIAIAYgBEHoKmoqAgAgBCoCsDKSkpIhBgwBCyABKgIAIAZDAACAP5KSIQYLIAEgBjgCACAAIAYQ9AsQtAkgASoCBBAxGiADQRBqJAALNgACQAJAIAFBAEgNACAAKAIAIAFKDQELQbbAAUHzmQFB3AxBjYYCEAAACyAAKAIIIAFBA3RqC6kEAwZ/An0DfiMAQdAAayIBJABBACECQQAoArCdByIDKALsNCEEIAFByABqIAMqArAyIgdDAAAAwJIgByADQdQqaioCACIIIAiSkhAxGiAEKQLMASEJIAEqAkghByABQcAAaiADQeQraikCADcDACABIANB3CtqKQIANwM4IAEgASoCREMAAAA/lDgCREEAIAFBOGoQtAFBFSABQShqQwAAAABD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QecHSg0AAkAgACgChBwgAWpB5wdMDQADQCAAEIAMIAAoAoQcIAFqQecHSg0ACwsgACAALgH+GyIBQQFqOwH+GyAAIAFBBHRqDwsgAEEANgKEHCAAQQA7Af4bQQALFAAgAEHnBzYCiBwgAEHjADsBgBwLvwEBBX8CQCAALgH+GyIBQQFIDQBBACECAkAgACgCDCIDQQBIDQAgACAAKAKEHCAAKAIEIgRrIgE2AoQcIABBsAxqIgUgBSAEQQF0aiABQQF0ENMxGiAALgH+GyIBQQFIDQADQAJAIANBAEgNACAAIAJBBHRqIAMgBGs2AgwLIAJBAWoiAiABRg0BIAAgAkEEdGooAgwhAwwACwALIAAgAUF/aiICOwH+GyAAIABBEGogAkEQdEEQdUEEdBDTMRoLC00BAn9BASEBAkAgABCFCw0AAkAgAEFYaiICQRNLDQBBASACdEGTgCBxDQELIABBhX9qQQNJDQACQCAAQaV/ag4DAQABAAtBACEBCyABCysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQQN0EFUhAgJAIAAoAggiA0UNACACIAMgACgCAEEDdBDRMRogACgCCBBXCyAAIAE2AgQgACACNgIICwscAQF/IAAoAgAhAiAAIAEoAgA2AgAgASACNgIACwUAIACLCwcAIAAQ2C8LHAEBfSAAKgIAIQIgACABKgIAOAIAIAEgAjgCAAsoAAJAIAEgAGuyIAKUIACykiICi0MAAABPXUUNACACqA8LQYCAgIB4CxQAIAEgAiAAIAAgAksbIAAgAUkbCxwBAX8gACgCACECIAAgASgCADYCACABIAI2AgALLAACQCABIABrsyAClCAAs5IiAkMAAIBPXSACQwAAAABgcUUNACACqQ8LQQALFAAgASACIAAgACACVRsgACABUxsLHAEBfiAAKQMAIQIgACABKQMANwMAIAEgAjcDAAsFACAAmQsHACAAENcvCxwBAXwgACsDACECIAAgASsDADkDACABIAI5AwALDAAgACABIAAgAVMbCwkAIAAgARDaLwstAAJAIAEgAH20IAKUIAC0kiICi0MAAABfXUUNACACrg8LQoCAgICAgICAgH8LhwECAX4Cf0IAIQICQCAAIAAtAABBLUYiA2oiACAALQAAQStGaiIALQAAIgRBUGpB/wFxQQlLDQBCACECA0AgBK1C/wGDQtD///8PfEL/////D4MgAkIKfnwhAiAALQABIQQgAEEBaiEAIARBUGpB/wFxQQpJDQALCyABQgAgAn0gAiADGzcDAAsUACABIAIgACAAIAJWGyAAIAFUGwscAQF+IAApAwAhAiAAIAEpAwA3AwAgASACNwMACywAAkAgASAAfbUgApQgALWSIgJDAACAX10gAkMAAAAAYHFFDQAgAq8PC0IAC3wCAX0Cf0MAAAAAIQICQCAAIAAtAABBLUYiA2oiACAALQAAQStGaiIALQAAIgRBUGpB/wFxQQlLDQADQCACQwAAIEGUIARB/wFxQVBqspIhAiAALQABIQQgAEEBaiEAIARBUGpB/wFxQQpJDQALCyABIAKMIAIgAxs4AgALFAAgASACIAAgACACZBsgACABYxsLDAAgACABIAAgAWMbCw4AIAEgAKEgAruiIACgC4QBAgF8An9EAAAAAAAAAAAhAgJAIAAgAC0AAEEtRiIDaiIAIAAtAABBK0ZqIgAtAAAiBEFQakH/AXFBCUsNAANAIAJEAAAAAAAAJECiIARB/wFxQVBqt6AhAiAALQABIQQgAEEBaiEAIARBUGpB/wFxQQpJDQALCyABIAKaIAIgAxs5AwALIgACQCAAKAIEIAFODQAgACAAIAEQngwQnwwLIAAgATYCAAsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC04BAn8CQCAAKAIEIAFODQAgAUGQAWwQVSECAkAgACgCCCIDRQ0AIAIgAyAAKAIAQZABbBDRMRogACgCCBBXCyAAIAE2AgQgACACNgIICwuxAgECfyMAQTBrIgEkACABQQhqEMkxIAAQoQwgAEH6hAIgASABQQhqEKIMIgIQowwgAhCkDBogAEGp0gAgASABQQhqQQRyEKIMIgIQpQwgAhCkDBogAEGS0gAgASABQRBqEKIMIgIQpgwgAhCkDBogAEGZ0gAgASABQRRqEKIMIgIQowwgAhCkDBogAEHb6AEgASABQRhqEKIMIgIQpgwgAhCkDBogAEGJ0gAgASABQRxqEKIMIgIQpQwgAhCkDBogAEGR0gAgASABQSBqEKIMIgIQpQwgAhCkDBogAEGf0gAgASABQSRqEKIMIgIQpwwgAhCkDBogAEGo0gAgASABQShqEKIMIgIQpwwgAhCkDBogAEGrJCABIAFBLGoQogwiAhCnDCACEKQMGiABQTBqJAALCgAgABABEKgMGgs0AQF/IwBBEGsiAiQAIAJBCGogARCqDBCrDCEBIAAQrAwgARCtDBADNgIAIAJBEGokACAACzUBAX8jAEEQayIDJAAgACgCACADQQhqIAEQqQwiASgCACACKAIAEAIgARCkDBogA0EQaiQACwsAIAAoAgAQBCAACzUBAX8jAEEQayIDJAAgACgCACADQQhqIAEQqQwiASgCACACKAIAEAIgARCkDBogA0EQaiQACzUBAX8jAEEQayIDJAAgACgCACADQQhqIAEQqQwiASgCACACKAIAEAIgARCkDBogA0EQaiQACzUBAX8jAEEQayIDJAAgACgCACADQQhqIAEQqQwiASgCACACKAIAEAIgARCkDBogA0EQaiQACwsAIAAgATYCACAACw0AIAAgARAINgIAIAALBAAgAAs7AQF/IwBBEGsiAiQAIAIgABD6FzYCDCACQQxqIAEQqgwQqgwQ+xcQ/BcgAkEMahD9FyACQRBqJAAgAAsFABD+FwsHACAAEP8XCwoAQbydBxCvDBoLDQBBt/gAQRcQsAwgAAsvAQF/IwBBEGsiAiQAIAAgAkEIahCxDCACQQhqELIMELMMQRggARAFIAJBEGokAAsEAEEBCwUAEIEYCwYAQcj8BAszAQF/IwBBEGsiASQAIAFBCGogABEEACABQQhqEIAYIQAgAUEIahCkDBogAUEQaiQAIAALCgBBxJ0HELYMGgs4AQJ/ELcMELgMIQEQuQwhAhC6DBC7DBC8DBC9DBCzDEEZEL8MIAEQvwwgAkHdHxDADEEaEAYgAAsCAAsEAEEACwQAQQALBQAQlRgLBQAQlhgLBQAQlxgLBABBAAsHACAAEJMYCwYAQcD+BAsGAEHC/gQLEgACQCAARQ0AIAAQlBgQ4jALCz8CAX0BfEP//39/IQECQCAAEMMMIgJEAAAA4P//70dmDQBD//9//yEBIAJEAAAA4P//78dlDQAgArYhAQsgAQtKAgF/AXwjAEEQayIBJAAgACgCACABQQhqEMQMKAIAIAFBBGoQByECIAEgASgCBBDFDCEAIAIQxgwhAiAAEMcMGiABQRBq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IQMCQCACQSBqEIoQDQAgAkEgahCSECEDCyAAIAM2AjAgAkEQaiABQaCKAhCTECAAIAJBEGoQwgw4AjQgAkEQahCkDBogAkEQaiABQY+KAhCTECAAIAJBEGoQwgw4AjggAkEQahCkDBogAkEQaiABQYTfARCjDSAAIAJBEGoQjhA6ADwgAkEQahCkDBogAkEQaiABQcPVABCUECAAIAJBEGoQlRA2AkAgAkEQahCkDBogAkEQaiABQYYKEJYQIAAgAkEQahDCDDgCRCACQRBqEKQMGiACQQhqIAFButQBEJcQIAJBEGogAkEIahCYECAAQcoAaiACQRBqEJkQQScQxDAaIAJBEGoQ/DAaIAJBCGoQpAwaIAJBIGoQpAwaIAJBKGoQpAwaIAJBMGokAAs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQqQwiAigCABAJEKgMGiACEKQMGiADQRBqJAALCgAgACgCAEECRgs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQqQwiAigCABAJEKgMGiACEKQMGiADQRBqJAALSgICfwF8IwBBEGsiASQAIAAoAgAgAUEIahCaECgCACABQQRqEAchAyABIAEoAgQQxQwhACADEJsQIQIgABDHDBogAUEQaiQAIAILNgEBfyMAQRBrIgMkACAAIAEoAgAgA0EIaiACEKkMIgIoAgAQCRCoDBogAhCkDBogA0EQaiQAC0oCAn8BfCMAQRBrIgEkACAAKAIAIAFBCGoQnBAoAgAgAUEEahAHIQMgASABKAIEEMUMIQAgAxCdECECIAAQxwwaIAFBEGokACACC0oCAn8BfCMAQRBrIgEkACAAKAIAIAFBCGoQnhAoAgAgAUEEahAHIQMgASABKAIEEMUMIQAgAxCfECECIAAQxwwaIAFBEGokACACCzYBAX8jAEEQayIDJAAgACABKAIAIANBCGogAhCpDCICKAIAEAkQqAwaIAIQpAwaIANBEGokAAs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQqQwiAigCABAJEKgMGiACEKQMGiADQRBqJAALSgICfwF8IwBBEGsiASQAIAAoAgAgAUEIahCgECgCACABQQRqEAchAyABIAEoAgQQxQwhACADEKEQIQIgABDHDBogAUEQaiQAIAILNgEBfyMAQRBrIgMk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aiQACwkAIAAgARD0HwsnAQF/IwBBEGsiASQAIAEgADYCDCABQQxqEPYfIQAgAUEQaiQAIAALCQAgACABEPcfCwkAIAAgARD4HwsJACAAIAEQ+R8LQgEBfyMAQRBrIgIkACACIAE2AgwQjBEgACACQQhqEPofIAJBCGoQ+x8QmRVBnAMgAkEMahD9H0EAEBIgAkEQaiQACwsAIAAgASACEIAgC0IBAX8jAEEQayICJAAgAiABNgIMEIwRIAAgAkEIahCBICACQQhqEIIgEOIUQZ0DIAJBDGoQhCBBABASIAJBEGokAAsHACAAEIYgCwcAIAEQhyALCQAgACABEIkgCxAAIAEgACgCAGotAAAQtBgLFQEBf0EEEOEwIgEgACgCADYCACABCxYAIAIQoRkhAiABIAAoAgBqIAI6AAALCQAgACABEJIgCwkAIAAgARCTIAsJACAAIAEQlCALBwAgABCVIAsHACABEJYgCwcAIAAQlyALBwAgARCYIAsHACAAEJkgCwcAIAEQmiALBwAgABCbIAsHACABEJwgCwcAIAAQnSALBwAgARCeIAsHACAAEJ8gCwcAIAEQoCALBwAgABChIAsHACABEKIgCwcAIAAQoyALBwAgARCkIAsJACAAIAEQpSALCQAgACABEKYgC0IBAX8jAEEQayICJAAgAiABNgIMEIwRIAAgAkEIahCnICACQQhqEKggEJkVQZ4DIAJBDGoQqiBBABASIAJBEGokAAsLACAAIAEgAhCsIAtCAQF/IwBBEGsiAiQAIAIgATYCDBCMESAAIAJBCGoQrSAgAkEIahCuIBDiFEGfAyACQQxqELAgQQAQEiACQRBqJAALCQAgACABELIgCwsAIAAgASACELMgCwkAIAAgARC0IAtCAQF/IwBBEGsiAiQAIAIgATYCDBCMESAAIAJBCGoQtSAgAkEIahC2IBC3IEGgAyACQQxqELkgQQAQEiACQRBqJAALCwAgACABIAIQuyALQgEBfyMAQRBrIgIkACACIAE2AgwQjBEgACACQQhqELwgIAJBCGoQvSAQviBBoQMgAkEMahDAIEEAEBIgAkEQaiQACz8BAX8jAEEQayICJAAgAiABKQIANwMIEIwRIAAgAhDCICACEMMgELYNQaIDIAJBCGoQxSBBABASIAJBEGokAAsJACAAIAEQyCALQgEBfyMA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CQAgACABELciCwkAIAAgARC4IgswAQF/IwBBEGsiAiQAIAAgAkEIahCKFSACQQhqEIsVEIwVQasGIAEQBSACQRBqJAALBwAgABC6IgsJACAAIAEQuyILMAEBfyMAQRBrIgIkACAAIAJBCGoQjhUgAkEIahCPFRC2DUGsBiABEAUgAkEQaiQACzABAX8jAEEQayICJAAgACACQQhqEJEVIAJBCGoQkhUQyxRBrQYgARAFIAJBEGokAAsJACAAIAEQviILMAEBfyMAQRBrIgIkACAAIAJBCGoQlBUgAkEIahCVFRDLFEGuBiABEAUgAkEQaiQACwcAIAAQwCILCQAgACABEMEiCwkAIAAgARDCIgswAQF/IwBBEGsiAiQAIAAgAkEIahCXFSACQQhqEJgVEJkVQa8GIAEQBSACQRBqJAALBwAgABDEIgswAQF/IwBBEGsiAiQAIAAgAkEIahCbFSACQQhqEJwVELMNQbAGIAEQBSACQRBqJAALBwAgABDGIgswAQF/IwBBEGsiAiQAIAAgAkEIahCeFSACQQhqEJ8VELMNQbEGIAEQBSACQRBqJAALCQAgACABEMgiCzABAX8jAEEQayICJAAgACACQQhqEKEVIAJBCGoQohUQsw1BsgYgARAFIAJBEGokAAsHACAAEMoiCwkAIAAgARDLIgsHACAAEMwiCwkAIAAgARDNIgsJACAAIAEQziILBwAgABDPIgsHACAAENAiCwcAIAAQ0SILBwAgABDSIgsHACAAENMiCwkAIAAgARDUIgswAQF/IwBBEGsiAiQAIAAgAkEIahCkFSACQQhqEKUVELYNQbMGIAEQBSACQRBqJAALBwAgABDWIgsHACAAENciCwkAIAAgARDYIgswAQF/IwBBEGsiAiQAIAAgAkEIahCnFSACQQhqEKgVELYNQbQGIAEQBSACQRBqJAALBwAgABDaIgsJACAAIAEQ2yILMAEBfyMAQRBrIgIkACAAIAJBCGoQqhUgAkEIahCrFRCZFUG1BiABEAUgAkEQaiQACwcAIAAQ3SILMAEBfyMAQRBrIgIkACAAIAJBCGoQrRUgAkEIahCuFRCzDUG2BiABEAUgAkEQaiQACwsAIAAgASACEN8iCwkAIAAgARDgIgswAQF/IwBBEGsiAiQAIAAgAkEIahCwFSACQQhqELEVEJkVQbcGIAEQ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JAALCwAgACABIAIQoysLMAEBfyMAQRBrIgIkACAAIAJBCGoQnBYgAkEIahCdFhCeFkHYBiABEAUgAkEQaiQACwkAIAAgARClKwsNACAAIAEgAiADEKYrCzABAX8jAEEQayICJAAgACACQQhqEKAWIAJBCGoQoRYQ5hRB2QYgARAFIAJBEGokAAsNACAAIAEgAiADEKgrCzABAX8jAEEQayICJAAgACACQQhqEKMWIAJBCGoQpBYQ5hRB2gYgARAFIAJBEGokAAsHACAAEKorCwkAIAAgARCrKwsLACAAIAEgAhCsKwsJACAAIAEQrSsLCQAgACABEK4rCwkAIAAgARCvKwswAQF/IwBBEGsiAiQAIAAgAkEIahCmFiACQQhqEKcWEJkVQdsGIAEQBSACQRBqJAALCQAgACABELErCwkAIAAgARCyKwsJACAAIAEQsysLDwAgACABIAIgAyAEELQrCzABAX8jAEEQayICJAAgACACQQhqEKkWIAJBCGoQqhYQqxZB3AYgARAFIAJBEGokAAsFABC2KwsJACAAIAEQtysLMAEBfyMAQRBrIgIkACAAIAJBCGoQrRYgAkEIahCuFhDkDEHdBiABEAUgAkEQaiQACwUAELkrCwcAIAAQuisLDQAgACABIAIgAxC7KwswAQF/IwBBEGsiAiQAIAAgAkEIahCwFiACQQhqELEWELIWQd4GIAEQBSACQRBqJAALCQAgACABEL0rCzABAX8jAEEQayICJAAgACACQQhqELQWIAJBCGoQtRYQtg1B3wYgARAFIAJBEGokAAsFABC/KwsHACAAEMArCwcAIAAQwSsLBQAQyisLMAEBfyMAQRBrIgIkACAAIAJBCGoQtxYgAkEIahCeEBCzDEHgBiABEAUgAkEQaiQACwUAEMsrCwUAEMwrCwkAIAAgARDNKwswAQF/IwBBEGsiAiQAIAAgAkEIahC5FiACQQhqELoWELMNQeEGIAEQBSACQRBqJAALBwAgABDPKwswAQF/IwBBEGsiAiQAIAAgAkEIahC8FiACQQhqEL0WELMNQeIGIAEQBSACQRBqJAALCwAgACABIAIQ0SsLMAEBfyMAQRBrIgIkACAAIAJBCGoQvxYgAkEIahDAFhD0FEHjBiABEAUgAkEQaiQACwsAIAAgASACENMrCzABAX8jAEEQayICJAAgACACQQhqEMIWIAJBCGoQwxYQ9BRB5AYgARAFIAJBEGokAAswAQF/IwBBEGsiAiQAIAAgAkEIahDFFiACQQhqEMYWEOEMQeUGIAEQBSACQRBqJAALCQAgACABENYrCwsAIAAgASACENcrCwkAIAAgARDYKwsHACAAENkrCwkAIAAgARDaKwsHACAAENsrCwkAIAAgAxDcKwswAQF/IwBBEGsiAiQAIAAgAkEIahDIFiACQQhqEMkWEOYUQeYGIAEQBSACQRBqJAALCQAgACABEN4rCwcAIAAQ3ysLCwAgACABIAIQ4CsLMAEBfyMAQRBrIgIkACAAIAJBCGoQyxYgAkEIahDMFhD0FEHnBiABEAUgAkEQaiQACwkAIAAgARDiKwsJACAAIAEQ4ysLCQAgACABEOQrCwcAIAAQ5SsLMAEBfyMAQRBrIgIkACAAIAJBCGoQzhYgAkEIahDPFhCzDUHoBiABEAUgAkEQaiQACwkAIAAgARDnKwswAQF/IwBBEGsiAiQAIAAgAkEIahDRFiACQQhqENIWEJkVQekGIAEQBSACQRBqJAALMAEBfyMAQRBrIgIkACAAIAJBCGoQ1BYgAkEIahDEDBDVFkHqBiABEAUgAkEQaiQACwcAIAAQ6CsLBwAgABDpKwsHACAAEOorCwkAIAAgARDzKwsFABD0KwsHACAAEPUrCw0AIAAgASACIAMQ9isLMAEBfyMAQRBrIgIkACAAIAJBCGoQ1xYgAkEIahDYFhDZFkHrBiABEAUgAkEQaiQACwsAIAAgASACEPgrCzABAX8jAEEQayICJAAgACACQQhqENsWIAJBCGoQ3BYQ4hRB7AYgARAFIAJBEGokAAsPACAAIAEgAiADIAQQ+isLMAEBfyMAQRBrIgIkACAAIAJBCGoQ3hYgAkEIahDfFhDgFkHtBiABEAUgAkEQaiQACwsAIAAgASACEPwrCzABAX8jAEEQayICJAAgACACQQhqEOIWIAJBCGoQ4xYQmRVB7gYgARAFIAJBEGokAAsHACAAEP4rCxEAIAAgASACIAMgBCAFEP8rCzABAX8jAEEQayICJAAgACACQQhqEOUWIAJBCGoQ5hYQ5xZB7wYgARAFIAJBEGokAAsRACAAIAEgAiADIAQgBRCCLAswAQF/IwBBEGsiAiQAIAAgAkEIahDpFiACQQhqEOoWEJkVQfAGIAEQBSACQRBqJAALMAEBfyMAQRBrIgIkACAAIAJBCGoQ7BYgAkEIahDtFhDuFkHxBiABEAUgAkEQaiQACwsAIAAgASACEIUsCzABAX8jAEEQayICJAAgACACQQhqEPAWIAJBCGoQ8RYQ4hRB8gYgARAFIAJBEGokAAsHACAAEIcsCwkAIAAgARCLLAsJACAAIAEQjCwLMAEBfyMAQRBrIgIkACAAIAJBCGoQ8xYgAkEIahD0FhD1FkHzBiABEAUgAkEQaiQACw0AIAAgASACIAMQjiwLMAEBfyMAQRBrIgIkACAAIAJBCGoQ9xYgAkEIahD4FhD5FkH0BiABEAUgAkEQaiQACwcAIAAQkCwLBwAgABCRLAsHACAAEJIsCwcAIAAQkywLEwAgACABIAIgAyAEIAUgBhCULAswAQF/IwBBEGsiAiQAIAAgAkEIahD7FiACQQhqEPwWELkVQfUGIAEQBSACQRBqJAALCwAgACABIAIQliwLMAEBfyMAQRBrIgIkACAAIAJBCGoQ/hYgAkEIahD/FhD0FEH2BiABEAUgAkEQaiQACwkAIAAgARC3LAswAQF/IwBBEGsiAiQAIAAgAkEIahCBFyACQQhqEIIXELMNQfcGIAEQBSACQRBqJAALBwAgABC5LAsFABCdIQsuAQF/IAAQmRlBBGoQxTEiASAAEJkZNgIAIAFBBGogABCmECAAEJkZENExGiABCwQAIAALHAAgARCCGBogABCDGBogAhCCGBogABCEGBogAAsHACAAENoxCwQAQQELCgAgABECABC0GAsFABCfIQsHACAAKAIACwUAIAC4CwUAEJ8YCwcAIAAqAgALBQAgALsLBABBAgsFABC4IQsPACABEMMeIAARAAAQtyELBABBAgsFABC8IQsGAEGUgQULDAAgARC7ISAAEQQACwQAQQELBQAQviELCgAgABECABC3IQsEAEEBCwUAEIEYCwQAQQELBQAQ3iELBwAgABEHAAsEAEECCwUAEPghCzEBAX8jAEEQayICJAAgAkEIaiABEKoYIAJBCGogABEEACACQQhqEKQMGiACQRBqJAALBABBAgsFABCAIgsoAQF/IwBBEGsiAiQAIAIgARCRGCACIAARBAAgAhD8MBogAkEQaiQACwQAQQELKgEBfyMAQRBrIgEkACABIAARBAAgARC6FCEAIAEQ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AAJAIARBAXFFDQAgASgCACAAaigCACEACyABIAIQjRkgAxCNGSAAEQUACxUBAX9BCBDhMCIBIAApAgA3AwAgAQsEACAACwYAQcCDBQsQACAAIAEgAhCZEEEAEIILCwQAQQQLBQAQrxkLQQEBfyMAQRBrIgQkACAAKAIAIQAgARCuGSEBIAIQjRkhAiAEIAMQkRggASACIAQgABEFACAEEPwwGiAEQRBqJAALFQEBf0EEEOEwIgEgACgCADYCACABCwQAIAALBgBB4IMFCwQAQQILBQAQtRkLPwEBfyABELQZIAAoAgQiAkEBdWohASAAKAIAIQACQCACQQFxRQ0AIAEoAgAgAGooAgAhAAsgASAAEQAAELQYCxUBAX9BCBDhMCIBIAApAgA3AwAgAQsEACAACwYAQfCDBQsGAEGQhAULBgBBkIQFCwYAQbSEBQsGAEHghAULKQEBfyMAQRBrIgIkACACIAFBBGo2AgwgACACQQxqELsZGiACQRBqJAALNAEBfyMAQRBrIgIkACACQQhqIAEQvBkQvRkhASAAEL4ZIAEQvxkQAzYCACACQRBqJAAgAAsEACAACz4BAX8jAEEQayICJAAgAiAAEPoXNgIMIAJBDGogARC8GRC8GSgCABDAGRDBGSACQQxqEP0XIAJBEGokACAACwUAEMIZCwcAIAAQ/xcLBAAgAAsZACAAKAIAIAE2AgAgACAAKAIAQQhqNgIACwYAQYT/BAsVAQF/QQQQ4TAiASAAKAIANgIAIAELKQEBfyMAQRBrIgIkACACIAFBDGo2AgwgACACQQxqELsZGiACQRBqJAALKQEBfyMAQRBrIgIkACACIAFBFGo2AgwgACACQQxqELsZGiACQRBqJAALBgBBhIUFCwYAQYSFBQsGAEGghQULBgBByIUFCwQAQQELBQAQzhkLCgAgABECABDNGQsEACAACwYAQdiFBQsEAEEECwUAENUZCwYAQfCFBQtGAQF/IAEQ1BkgACgCBCIEQQF1aiEBIAAoAgAhAAJAIARBAXFFDQAgASgCACAAaigCACEACyABIAIQjRkgAxCkGCAAERIACxUBAX9BCBDhMCIBIAApAgA3AwAgAQsEACAACwYAQeCFBQsEAEECCwUAENoZCzwBAX8gARDUGSAAKAIEIgJBAXVqIQEgACgCACEAAkAgAkEBcUUNACAB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wRoQAzYCACACQRBqJAAgAAsWACAAIAFBsgcgAhC4GiADELgaELkaCwQAIAALTQEBfyMAQSBrIgUkACAFQQhqIAMQuBogBBC4GhDCGiEDIAAgASgCACAFQRhqEOsUIAVBGGoQ7BQgAxDDGiACEQkAEKgMGiAFQSBqJAALBAAgAAs+AQF/IwBBEGsiAiQAIAIgABD6FzYCDCACQQxqIAEQuhoQuhooAgAQyBoQyRogAkEMahD9FyACQRBqJAAgAAsFABDKGgsHACAAEP8XCwQAIAALOwEBfyMAQRBrIgIkACACIAAQ+hc2AgwgAkEMaiABEL4aEL4aEOQZEMsaIAJBDGoQ/RcgAkEQaiQAIAALBQAQzBoLBwAgABD/FwtZAQF/IwBBEGsiAyQAIAMgABDEGjYCDCABELgaIQEgAhC4GiECIANBDGogARC4GhCAGBDFGiADQQxqIAIQuBoQuBoQgBgQxRogA0EMahD9FyADQRBqJAAgAAsHACAAEMcaCwQAIAALGQAgACgCACABNgIAIAAgACgCAEEIajYCAAsGAEGwiQULBAAgAAsEACAACxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBByIgFCxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBBqIsGCwQAQQMLBQAQ0hoLQQEBfyMAQRBrIgMkACAAKAIAIQAgARDRGiEBIANBCGogAhCqGCABIANBCGogABEBACADQQhqEKQMGiADQRBqJAALFQEBf0EEEOEwIgEgACgCADYCACABCwQAIAALBgBBuIkFC04BAX8jAEEQayICJAACQAJAIAFBDGoiARDUGkUNACACQQhqIAEQ1BpBAnQgARDVGhDWGiAAIAJBCGoQ1xoaDAELIAAQyAwLIAJBEGokAAsHACAAKAIACyUAAkAgACgCAEEASg0AQarEAkHomQFB5QxB4DAQAAALIAAoAggLDAAgACABIAIQ2BoaCzQBAX8jAEEQayICJAAgAkEIaiABENkaENoaIQEgABDbGiABENwaEAM2AgAgAkEQaiQAIAALEgAgACACNgIEIAAgATYCACAACwQAIAALRQEBfyMAQRBrIgIkACACIAAQ+hc2AgQgAkEIaiABENkaENkaEN0aIAJBBGogAkEIahDeGiACQQRqEP0XIAJBEGokACAACwUAEN8aCwcA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IAAoAgA2AgAgAQsGAEHwlAULBgBBlJUFCwYAQZSVBQsGAEGslQULBgBBzJUFC28BA38jAEEQayICJABBACEDAkAgACgCCEEATA0AA0AgAiAAKAIEIANBAnRqKAIANgIMIAJBCGogASACIAJBDGoQsR0iBBCyHSACQQhqEKQMGiAEEKQMGiADQQFqIgMgACgCCEgNAAsLIAJBEGokAAs0AQF/IwBBEGsiAiQAIAJBCGogARC0HRC1HSEBIAAQth0gARC3HRADNgIAIAJBEGokACAACxEAIAAgAUGyByACELgaELMdC0UBAX8jAEEQayIEJAAgBCADELgaELgdIQMgACABKAIAIARBCGoQsQwgBEEIahCyDCADELkdIAIRCQAQqAwaIARBEGokAAsEACAACz4BAX8jAEEQayICJAAgAiAAEPoXNgIMIAJBDGogARC0HRC0HSgCABC6HRC7HSACQQxqEP0XIAJBEGokACAACwUAELwdCwcAIAAQ/xcLOwEBfyMAQRBrIgIkACACIAAQ+hc2AgwgAkEMaiABELgaELgaEIAYEMUaIAJBDGoQ/RcgAkEQaiQAIAALBwAgABD/FwsEACAACxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBBoIkFCwQAQQMLBQAQwh0LQQEBfyMAQRBrIgMkACAAKAIAIQAgARDBHSEBIANBCGogAhCqGCABIANBCGogABEBACADQQhqEKQMGiADQRBqJAALFQEBf0EEEOEwIgEgACgCADYCACABCwQAIAALBgBB3JUFCykBAX8jAEEQayICJAAgAiABQRRqNgIMIAAgAkEMahC7GRogAkEQaiQACxUBAX9BBBDhMCIBIAAoAgA2AgAgAQspAQF/IwBBEGsiAiQAIAIgAUEcajYCDCAAIAJBDGoQuxkaIAJBEGokAAspAQF/IwBBEGsiAiQAIAIgAUEkajYCDCAAIAJBDGoQuxkaIAJBEGokAAsEAEECCwUAEMwdCzwBAX8gARDLHSAAKAIEIgJBAXVqIQEgACgCACEAAkAgAkEBcUUNACABKAIAIABqKAIAIQALIAEgABEEAAsVAQF/QQgQ4TAiASAAKQIANwMAIAELBAAgAAsGAEHolQULKAEBfyMAQRBrIgIkACACQQhqIAEQywwgACACQQhqEM0HIAJBEGokAAsEAEEDCwUA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AXVqIQEgACgCACEAAkAgAkEBcUUNACABKAIAIABqKAIAIQALIAEgABEEAAsVAQF/QQgQ4TAiASAAKQIANwMAIAELBgBB7J0FCyoBAX8jAEEQayICJAAgAiABQewGajYCDCAAIAJBDGoQuxkaIAJBEGokAAtEAQF/IwBBEGsiAyQAAkACQCACQQRLDQAgAyABIAJBA3RqQYAHajYCDCAAIANBDGoQ2yAaDAELIAAQ3CALIANBEGokAAs0AQF/IwBBEGsiAiQAIAJBCGogARDdIBDeICEBIAAQ3yAgARDgIBADNgIAIAJBEGokACAACwoAIABBARCoDBoLBAAgAAs+AQF/IwBBEGsiAiQAIAIgABD6FzYCDCACQQxqIAEQ3SAQ3SAoAgAQwBkQwRkgAkEMahD9FyACQRBqJAAgAAsFABDhIAsHACAAEP8XCwYAQYT/BAsEAEEDCwUAEOcgC0QBAX8jAEEQayIDJAAgACgCACEAIANBCGogARDmICACEI0ZIAARBQAgA0EIahCAGCEBIANBCGoQpAwaIANBEGokACABCxUBAX9BBBDhMCIBIAAoAgA2AgAgAQsEACAACwYAQfSdBQsoAQF9QwAAgL8hAgJAIAFBBEsNACAAIAFBAnRqQewHaioCACECCyACCwQAQQMLBQAQuiALKQEBfUMAAIC/IQICQCABQf8DSw0AIAAgAUECdGpB0AhqKgIAIQILIAILKAEBfUMAAIC/IQICQCABQRRLDQAgACABQQJ0akHQKGoqAgAhAgsgAgsGAEGQngULBgBBkJ4FCwYAQaieBQsGAEHIngULKQEBfyMAQRBrIgIkACACIAFBBGo2AgwgACACQQxqELsZGiACQRBqJAALFQEBf0EEEOEwIgEgACgCADYCACABCykBAX8jAEEQayICJAAgAiABQRRqNgIMIAAgAkEMahC7GRogAkEQaiQACykBAX8jAEEQayICJAAgAiABQRxqNgIMIAAgAkEMahC7GRogAkEQaiQACykBAX8jAEEQayICJAAgAiABQThqNgIMIAAgAkEMahC7GRogAkEQaiQACyoBAX8jAEEQayICJAAgAiABQcgAajYCDCAAIAJBDGoQuxkaIAJBEGokAAsqAQF/IwBBEGsiAiQAIAIgAUHQAGo2AgwgACACQQxqELsZGiACQRBqJAALKgEBfyMAQRBrIgIkACACIAFB2ABqNgIMIAAgAkEMahC7GRogAkEQaiQACyoBAX8jAEEQayICJAAgAiABQeAAajYCDCAAIAJBDGoQuxkaIAJBEGokAAsqAQF/IwBBEGsiAiQAIAIgAUGUAWo2AgwgACACQQxqELsZGiACQRBqJAALKgEBfyMAQRBrIgIkACACIAFBnAFqNgIMIAAgAkEMahC7GRogAkEQaiQACyoBAX8jAEEQayICJAAgAiABQaQBajYCDCAAIAJBDGoQuxkaIAJBEGokAAsqAQF/IwBBEGsiAiQAIAIgAUGsAWo2AgwgACACQQxqELsZGiACQRBqJAALRAEBfyMAQRBrIgMkAAJAAkAgAkE0Sw0AIAMgASACQQR0akHEAWo2AgwgACADQQxqEP8gGgwBCyAAENwgCyADQRBqJAALNAEBfyMAQRBrIgIkACACQQhqIAEQgCEQgSEhASAAEIIhIAEQgyEQAzYCACACQRBqJAAgAAsEACAACz4BAX8jAEEQayICJAAgAiAAEPoXNgIMIAJBDGogARCAIRCAISgCABCEIRCFISACQQxqEP0XIAJBEGokACAACwUAEIYhCwcAIAAQ/xcLBAAgAAsZACAAKAIAIAE2AgAgACAAKAIAQQhqNgIACwYAQfT/BAsEAEEDCwUAEIwhC0QBAX8jAEEQayIDJAAgACgCACEAIANBCGogARCLISACEI0ZIAARBQAgA0EIahCAGCEBIANBCGoQpAwaIANBEGokACABCxUBAX9BBBDhMCIBIAAoAgA2AgAgAQsEACAACwYAQdieBQtRAQF/IwBBEGsiAyQAAkAgAUE0Sw0AIAMgAhDqDCAAIAFBBHRqIgBBzAFqIANBCGopAwA3AgAgAEHEAWogAykDADcCAAsgA0EQaiQAIAFBNUkLBABBBAsFABCSIQtRAQF/IwBBEGsiBCQAIAAoAgAhACABEIshIQEgAhCNGSECIARBCGogAxCqGCABIAIgBEEIaiAAEQYAELQYIQEgBEEIahCkDBogBEEQaiQAIAELFQEBf0EEEOEwIgEgACgCADYCACABCwYAQfCeBQsEAEEBCwUAEJchCwoAIAARAgAQliELBAAgAAsGAEGAnwULBABBAwsFABCcIQtBAQF/IAEQiyEgACgCBCIDQQF1aiEBIAAoAgAhAAJAIANBAXFFDQAgASgCACAAaigCACEACyABIAIQpBggABEQAAsVAQF/QQgQ4TAiASAAKQIANwMAIAELBgBBhJ8FCwYAQcD9BAsXAEGswQJBkCpBlAhBCEEQQRRBBBC3BQsGAEHAiwYLBwAgABChIQsNAEG4ARDhMCAAEKIhC4ADAQF/IAAgARCrAjYCACAAQQRqQc3pBBD/ERogAEEQakHN6QQQ/xEaIABBHGoQyAwgAEEgahDIDCAAQSRqEMgMIABBKGoQyAwgAEEsahDIDCAAQTBqEMgMIABBNGpBzekEEP8RGiAAQcAAahDIDCAAQcQAahDIDCAAQcgAahDIDCAAQcwAahDcICAAQdAAahDcICAAQdQAahDcICAAQdgAahDcICAAQdwAahDcICAAQeAAahDcICAAQeQAahDcICAAQQA2AmggAEHsAGpBzekEEP8RGiAAQfgAahDcICAAQfwAahDcICAAQYABahDcICAAQQA2AoQBIABBiAFqQc3pBBD/ERogAEGUAWoQ3CAgAEGYAWoQ3CAgAEEANgKcASAAQaABakHN6QQQ/xEaIABBrAFqENwgIABBsAFqENwgIABBtAFqENwgEKgCIQIgACgCABCpAhDpAiIBQQA2AtABIAFBtAc2AswBIAFBtQc2AsgBIAFCADcDGCACEKkCIAALTwEDfyMAQRBrIgIkABD1HyIDQTRqIgQgARCmIRoCQCADQcQAaiIBEIoQDQAgAkEIaiABIANByABqIAQQpyEgAkEIahCkDBoLIAJBEGokAAtwAQN/IwBBIGsiASQAAkAQ9R8iAkHAAGoiAxCKEA0AIAFBCGogAyACQcgAahClISABQRBqIAFBCGoQmBAgAkE0aiABQRBqEMweGiABQRBqEPwwGiABQQhqEKQMGgsgAkE0ahCZECECIAFBIGokACACCxEAIAAgAUGyByACEKghEKkhCwkAIAAgARCvIQsWACAAIAFBsgcgAhCoISADELAhELEhCwQAIAALRQEBfyMAQRBrIgQkACAEIAMQqCEQqiEhAyAAIAEoAgAgBEEIahCrISAEQQhqEKwhIAMQrSEgAhEJABCoDBogBEEQaiQACzsBAX8jAEEQayICJAAgAiAAEPoXNgIMIAJBDGogARCoIRCoIRCAGBDFGiACQQxqEP0XIAJBEGokACAACwQAQQELBQAQriELBwAgABD/FwsGAEGQnwULCQAgACABEP8wCwQAIAALTQEBfyMAQSBrIgUkACAFQQhqIAMQqCEgBBCwIRCyISEDIAAgASgCACAFQRhqELMhIAVBGGoQtCEgAxC1ISACEQkAEKgMGiAFQSBqJAALWQEBfyMAQRBrIgMkACADIAAQxBo2AgwgARCoISEBIAIQsCEhAiADQQxqIAEQqCEQgBgQxRogA0EMaiACELAhELAhELoUEJcZIANBDGoQ/RcgA0EQaiQAIAALBABBAgsFABC2IQsHACAAEMcaCwYAQZSfBQsEACAACwYAQZyfBQsHACAAELohCxIAAkAgAEUNACAAEJQYEOIwCwsEACAACwYAQaSfBQsFABD1HwsGAEGsnwULBwAgABDAIQslAQF/QQAhAUEAIAA2AsCdBwJAIABFDQAgACgCACEBCyABEKkCCycBAX8jAEEQayIBJAAgARDpAjYCDCAAIAFBDGoQwiEaIAFBEGokAAs0AQF/IwBBEGsiAiQAIAJBCGogARDDIRDEISEBIAAQxSEgARDGIRADNgIAIAJBEGokACAACwQAIAALPgEBfyMAQRBrIgIkACACIAAQ+hc2AgwgAkEMaiABEMMhEMMhKAIAEMchEMghIAJBDGoQ/RcgAkEQaiQAIAALBQAQySELBwAgABD/FwsEACAACxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBBnJwFCycBAX8jAEEQayIBJAAgARCqATYCDCAAIAFBDGoQyyEaIAFBEGokAAs0AQF/IwBBEGsiAiQAIAJBCGogARDMIRDNISEBIAAQziEgARDPIRADNgIAIAJBEGokACAACwQAIAALPgEBfyMAQRBrIgIkACACIAAQ+hc2AgwgAkEMaiABEMwhEMwhKAIAEJYhENAhIAJBDGoQ/RcgAkEQaiQAIAALBQAQ0SELBwAgABD/FwsZACAAKAIAIAE2AgAgACAAKAIAQQhqNgIACwYAQaieBQtjAQJ/IwBBIGsiACQAQdCdB0EAENMhIABBEGoQyAwgAEEIahDIDEHQnQcgAEEYaiAAQRBqIABBCGoQxRwiARDGHCABEJYaGiAAQQhqEKQMGiAAQRBqEKQMGhCGAyAAQSBqJAALOAEBfwJAIAAQhxoiAiABTw0AIAAgASACaxDUIQ8LAkAgAiABTQ0AIAAgACgCACABQQN0ahDVIQsLcAECfyMAQSBrIgIkAAJAAkAgABDHHCgCACAAKAIEa0EDdSABSQ0AIAAgARDWIQwBCyAAEIoaIQMgAkEIaiAAIAAQhxogAWoQ0BwgABCHGiADENEcIgMgARDXISAAIAMQ0hwgAxDTHBoLIAJBIGokAAsgAQF/IAAgARDYISAAEIcaIQIgACABEJEaIAAgAhDZIQtaAQN/IwBBEGsiAiQAAkAgAiAAIAEQzBwiAygCBCIBIAMoAggiBEYNAANAIAAQihogARCNGhDaISADIAFBCGoiATYCBCABIARHDQALCyADEM8cGiACQRBqJAALYgECfyMAQRBrIgIkAAJAIAIgAEEIaiABENshIgEoAgAgASgCBEYNAANAIAAQ2hwgASgCABCNGhDaISABIAEoAgBBCGoiAzYCACADIAEoAgRHDQALCyABENwhGiACQRBqJAALAgALMwAgACAAEIUaIAAQhRogABCGGkEDdGogABCFGiABQQN0aiAAEIUaIAAQhxpBA3RqEIgaCwkAIAAgARDdIQsrAQF/IAAgASgCADYCACABKAIAIQMgACABNgIIIAAgAyACQQN0ajYCBCAACxEAIAAoAgggACgCADYCACAACz0BAX8jAEEQayICJAAgAkEIahDIDCACEMgMIAEgAkEIaiACEMUcGiACEKQMGiACQQhqEKQMGiACQRBqJAALBgBBsJ8FCycBAX8jAEEQayIBJAAgARDqAjYCDCAAIAFBDGoQ4CEaIAFBEGokAAs0AQF/IwBBEGsiAiQAIAJBCGogARDhIRDiISEBIAAQ4yEgARDkIRADNgIAIAJBEGokACAACwQAIAALPgEBfyMAQRBrIgIkACACIAAQ+hc2AgwgAkEMaiABEOEhEOEhKAIAEOUhEOYhIAJBDGoQ/RcgAkEQaiQAIAALBQAQ5yELBwAgABD/FwsEACAACxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBBrJUFCykBAX8jAEEQayIBJAAgASAAEOkhIgAQ6iEQkC0gABDrIRogAUEQaiQACysAIAAgATYCCCAAQbyfBTYCAAJAIAEQihANACAAIAAoAgAoAggRBAALIAALEgBBACAAQQRqIAAoAggQihAbCycAIABBvJ8FNgIAAkAgACgCCBCKEA0AIAAgACgCACgCDBEEAAsgAAsKACAAEOshEOIwC2sB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FyACQRBqJAAgAAsFABCmIgsHACAAEP8XCwQAIAALGQAgACgCACABNgIAIAAgACgCAEEIajYCAAsGAEG0hAULBgBB8KAFCyYBAX8jAEEQayIBJAAgAUEIaiAAEMsMIAFBCGoQoAUgAUEQaiQACwYAQYShBQsGAEGQoQULKAEBfyMAQRBrIgIkACACQQhqIAAQywwgAkEIaiABEJMFIAJBEGokAAsoAQF/IwBBEGsiAiQAIAJBCGogABDLDCACQQhqIAEQlgUgAkEQaiQACwkAIAAgARCYBQsFABCcBQsxAQF/IwBBEGsiAyQAIAAQmRAhACADQQhqIAEQywwgACADQQhqIAIQlAUgA0EQaiQACwYAQaChBQsxAQF/IwBBEGsiAyQAIAAQmRAhACADQQhqIAEQywwgACADQQhqIAIQlwUgA0EQaiQACw4AIAAQmRAgASACEJsFCwYAQbChBQsKACAAEJkQEJ0FCzUBAX8jAEEQayICJAAgAkEIahDVBCAAIAJBCGogAiABEK0aIgEQzAwgARCkDBogAkEQaiQACzUBAX8jAEEQayICJAAgAkEIahDSBSAAIAJBCGogAiABEK0aIgEQzAwgARCkDBogAkEQaiQACzUBAX8jAEEQayICJAAgAkEIahDTBSAAIAJBCGogAiABEK0aIgEQzAwgARCkDBogAkEQaiQACzUBAX8jAEEQayICJAAgAkEIahDUBSAAIAJBCGogAiABEK0aIgEQzAwgARCkDBogAkEQaiQACwYAQcChBQseAQF/QQAhAQJAIAAQihANACAAENEbIQELIAEQ+AQLcAEDfyMAQSBrIgIkACACQQhqIAEQiiIgAkEIaiACQRhqQYvtABCpDCIDENUMIQQgAxCkDBogAkEIahCkDBoCQAJAIARFDQAgACABEJUQEK8BDAELIAJBCGogARDqDCAAIAJBCGoQtAELIAJBIGokAAsGAEHUoQULBgBB4KEFC2EBA38jAEEQayICJAAgAiABEIoiIAIgAkEIakGL7QAQqQwiAxDVDCEEIAMQpAwaIAIQpAwaAkACQCAERQ0AIAAgARDCDBC4AQwBCyACIAEQywwgACACEL8BCyACQRBqJAALBgBB6KEFCycBAX8jAEEQayIBJAAgARClBTYCDCAAIAFBDGoQ/x0aIAFBEGokAAs1AQF/IwBBEGsiAiQA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AgAgAiABayICayIENgIAAkAgAkEBSA0AIAQgASACENExGgsLPgEBfyMAQRBrIgIkACACIAAQiiUoAgA2AgwgACABEIolKAIANgIAIAEgAkEMahCKJSgCADYCACACQRBqJAALKgAgACAAEIglIAAQiCUgABDnJGogABCIJSAAEOckaiAAEIglIAFqEIklCwIACwwAIAAgACgCBBCLJQsQACAAEI0lKAIAIAAoAgBrCwsAIAAgASACEIwlCwQAIAALCQAgAUEAOgAACwQAIAALCgAgAEEIahD9JAsHACAAEPwkCxAAIAAQ/yQoAgAgACgCAGsLBABBfwsHACAAEP4kCwQAIAALCgAgAEEIahCAJQsHACAAEIElCwQAIAALBAAgAAsOACAAIAEQgiU2AgAgAAseAAJAIAAQ+iQgAU8NAEH/tgEQixgACyABQQEQjRgLCgAgAEEEahCHJQsHACAAEPYkCwcAIAAoAgALCgAgACgCABDIJAsCAAsEACAACwkAIAAgARCOJQsLACABIAJBARDvFwsKACAAQQxqEJElCz4BAn8CQCAAKAIIIAFGDQADQCAAEOkkIQIgACAAKAIIQX9qIgM2AgggAiADEMgkEI8lIAAoAgggAUcNAAsLCwkAIAAgARCQJQsCAAsHACAAEIElCwwAIAAgASkCADcCAAspACAAKAIAIAEoAgA2AgAgACgCACABKAIENgIEIAAgACgCAEEIajYCAAsGAEGYqwULMwACQEEALQDwnQdBAXENAEHwnQcQhzFFDQBBABCWJTYC7J0HQfCdBxCPMQtBACgC7J0HCyoBAn8jAEEQayIAJAAgAEEIahCXJSAAQQhqEJglEBghASAAQRBqJAAgAQsEAEECCwUAEJklCwYAQaCrBQsPACAAIAAoAggQmyU6AAQLBwAgABCcJQtKAgJ/AXwjAEEQayIBJAAgACgCACABQQhqEJ0lKAIAIAFBBGoQByEDIAEgASgCBBDFDCEAIAMQniUhAiAAEMcMGiABQRBqJAAgAgsFABCfJQsKACAAEKAlEKElCwYAQdyrBQsfAAJAIACZRAAAAAAAAOBBY0UNACAAqg8LQYCAgIB4CwQAIAALLQEBfyMAQRBrIgMkABCkJSAAIAEgA0EIaiACEM0kEM4kENAkEBcgA0EQaiQACyYAAkAgACgCAEUNACAAEKklIAAQ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4TAiASAAKAIANgIAIAELKQEBfyMAQRBrIgIkACACIAFBCGo2AgwgACACQQxqELsZGiACQRBqJAALBgBBmL4FCwYAQZi+BQsGAEG4vgULBgBB4L4FCyoBAX8jAEEQayICJAAgAiABQYAdajYCDCAAIAJBDGoQxiwaIAJBEGokAAs0AQF/IwBBEGsiAiQAIAJBCGogARDHLBDILCEBIAAQySwgARDKLBADNgIAIAJBEGokACAACwQAIAALPgEBfyMAQRBrIgIkACACIAAQ+hc2AgwgAkEMaiABEMcsEMcsKAIAEMssEMwsIAJBDGoQ/RcgAkEQaiQAIAALBQAQzSwLBwAgABD/FwsEACAACxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBB8L0FCxUBAX9BBBDhMCIBIAAoAgA2AgAgAQsvAQF/IwBBEGsiAiQAIAAgAiABQSxqKAIAEP8RIgEQkSMaIAEQ/DAaIAJBEGokAAuQAQECfyMAQRBrIgIkACAAQQxqENEsIQMgAiABEJgQIABBGGogAhCZGUEBahA+IABBIGooAgAgAhCZECACEJkZQQFqENExGiAAIAIQmRk2AgggAhCZECEBIABBFGooAgAgA0F/aiABIAEgAhCZGWpBABBqIQEgAEEBOgDvHCAAIAE2AgQgAhD8MBogAkEQaiQACwcAIAAoAgALFQEBf0EEEOEwIgEgACgCADYCACABCwYAQYC/BQsGAEGAvwULBgBBmL8FCwYAQbi/BQspAQF/IwBBEGsiAiQAIAIgAUEMajYCDCAAIAJBDGoQuxkaIAJBEGokAAsVAQF/QQQQ4TAiASAAKAIANgIAIAELKQEBfyMAQRBrIgIkACACIAFBFGo2AgwgACACQQxqELsZGiACQRBqJAALKQEBfyMAQRBrIgIkACACIAFBHGo2AgwgACACQQxqELsZGiACQRBqJAALKQEBfyMAQRBrIgIkACACIAFBJGo2AgwgACACQQxqELsZGiACQRBqJAALKQEBfyMAQRBrIgIkACACIAFBLGo2AgwgACACQQxqELsZGiACQRBqJAALKQEBfyMAQRBrIgIkACACIAFBNGo2AgwgACACQQxqELsZGiACQRBqJAALKQEBfyMAQRBrIgIkACACIAFBPGo2AgwgACACQQxqELsZGiACQRBqJAALKgEBfyMAQRBr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AEGAgAI7Aa4HIABB//8BOwGsByAAQQA7AaoHIABBATsBqAcgAEEyOwGmByAAQQA7AaQHIABB//8DOwGiByAAQQA2ApwHIABBATYCmAcgAEEyNgKUByAAQYCAgIB8NgKQByAAQf////8DNgKMByAAQZv///8DNgKIByAAQf////8DNgKEByAAQQA2AoAHIABBATYC/AYgAEEyNgL4BiAAQQA2AvQGIABB/////wc2AvAGIABBm////wc2AuwGIABB/////wc2AugGIABCADcDkAggAEIBNwOACSAAQjI3A/AIIABCgICAgICAgIBANwPoCCAAQv//////////PzcD4AggAEKb/////////z83A9gIIABC//////////8/NwPQCCAAQgA3A8gIIABCATcD4AYgAEIyNwPYBiAAQgA3A9AGIABC////////////ADcDyAYgAEKb//////////8ANwPABiAAQv///////////wA3A7gGIABBADYCtAYgAEGAgID8AzYCsAYgAEH5hdSAfTYCrAYgAEH5hdSABTYCqAYgAEIANwOgBiAAQoCAgICAgID4PzcDmAYgAEKAgNCx0v6ahkM3A5AGIABCgIDQsdL+mobDADcDiAZB7agCQQAQkQlBvcECQaC5BxC2CRpDAAAAAEMAAIC/ENwEQYenAxCgLUHjrgJBAEGMkwdDzcxMPiAAQb8HakEAQQAtAKC5ByICGyAAQb0HakEAIAIbQQBBABCaChpB0q4CQQFBjZMHQ83MTD4gAEG6B2pBAEEALQCguQciAhsgAEG4B2pBACACG0Hu0ABBABCaChpBk7ACQQJBjpMHQ83MTD4gAEG0B2pBAEEALQCguQciAhsgAEGwB2pBACACG0EAQQAQmgoaQYCwAkEDQZCTB0PNzEw+IABBqgdqQQBBAC0AoLkHIgIbIABBpgdqQQAgAhtB7tAAQQAQmgoaQYy3AkEEQZSTB0PNzEw+IABBnAdqQQBBAC0AoLkHIgIbIABBlAdqQQAgAhtBAEEAEJoKGkH5tgJBBUGYkwdDzcxMPiAAQYAHakEAQQAtAKC5ByICGyAAQfgGakEAIAIbQe7QAEEAEJoKGkGosgJBBkGgkwdDzcxMPiAAQZAIakEAQQAtAKC5ByICGyAAQfAIakEAIAIbQQBBABCaChpBlbICQQdBqJMHQ83MTD4g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BBDNLg0AIAggByADEMwuELguCyADQQFqIgMgBygCAEgNAAsLIAQhBQJAAkACQCAIKAIAIgkOAgABAgsgAiAGNgIUIAIgBDYCECAAQeroBCACQRBqELkuDAMLIAEgBiABKAIUayAEEIELIAEgASgCJCAIQQAQzC4oAgBBABCCCyABIAEoAiRBjdwEQQAQggsMAgsDQEEAIQNBACEHAkAgCUEATA0AAkADQAJAAkAgAw0AIAhBABDMLigCACAFaiwAABDOLyEHDAELIAdFDQIgByAIIAMQzC4oAgAgBWosAAAQzi9HDQILIANBAWoiAyAIKAIAIglODQIMAAsACwJAIAVBAUgNACABIAYgASgCFGsgBBCBCyABIAEoAiQgCEEAEMwuKAIAIAhBABDMLigCACAFahCCCwtBACEDIABBkOMEQQAQuS4gCCgCAEEBSA0DA0AgAiAIIAMQzC4oAgA2AgAgAEG63AQgAhC5LiADQQFqIgMgCCgCAEgNAAwECwALIAVBAWohBQwACwALIAAoAqQCIQMCQAJAAkACQAJAIAEoAhBBfWoOAgABBgsCQCADQX9HDQAgACgCmAJBf2ohBwwCCyADQQFIDQUgACADQX9qIgc2AqQCDAILIANBf0YNBCADQQFqIgdBfyAHIAAoApgCSBshBwsgACAHNgKkAiADIAdGDQMgB0EATg0AQc3pBCEDDAELIABBmAJqIAcQuy4oAgAhAwsgAUEAIAEoAhgQgQsgAUEAIANBABCCCwwBCyAIEL0uGgsgAkEwaiQAQQALUQECfwJAIAEsAAAQzi8gACwAACICEM4vayIDDQAgAkUNAANAIAEsAAEQzi8gACwAASICEM4vayIDDQEgAUEBaiEBIABBAWohACACDQALCyADCwcAIAAoAggLbQECfwJAAkAgACgCCCICIAFLDQAgAiAAKAIAIgNBAnRqIAFLDQELQenAAUHzmQFB9AxB8skBEAAACyABIAFBBGogAyABIAJrIgJBAnZBf3NqQQJ0ENMxGiAAIAAoAgBBf2o2AgAgACgCCCACags2AAJAAkAgAUEASA0AIAAoAgAgAUoNAQtBtsABQfOZAUHcDEGNhgIQAAALIAAoAgggAUECdGoLVgECfwJAAkAgAkEBSA0AA0AgASwAABDOLyAALAAAIgMQzi9rIgQNAiADRQ0BIAFBAWoh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BEGgAWokACAAC7UBAQJ/IwBBoAFrIgQkACAEQQhqQcCABkGQARDRMRoCQAJAAkAgAUEASg0AIAENASAEQZ8BaiEAQQEhAQsgBCAANgI0IAQgADYCHCAEQX4gAGsiBSABIAEgBUsbIgE2AjggBCAAIAFqIgA2AiQgBCAANgIYIARBCGogAiADEI4wIQAgAUUNASAEKAIcIgEgASAEKAIYRmtBADoAAAwBCxDpL0E9NgIAQX8hAAsgBEGgAWokACAACxEAIABB/////wcgASACEJEwCxEAIABB/////wcgASACEJIwCxAAIABBIEYgAEF3akEFSXILPwICfwF+IAAgATcDcCAAIAAoAggiAiAAKAIEIgNrrCIENwN4IAAgAyABp2ogAiAEIAFVGyACIAFCAFIbNgJoC7sBAgF+BH8CQAJAAkAgACkDcCIBUA0AIAApA3ggAVkNAQsgABCxMCICQX9KDQELIABBADYCaEF/DwsgACgCCCIDIQQCQCAAKQNwIgFQDQAgAyEEIAEgACkDeEJ/hXwiASADIAAoAgQiBWusWQ0AIAUgAadqIQQLIAAgBDYCaCAAKAIEIQQCQCADRQ0AIAAgACkDeCADIARrQQFqrHw3A3gLAkAgAiAEQX9qIgAtAABGDQAgACACOgAACyACCzUAIAAgATcDACAAIARCMIinQYCAAnEgAkIwiKdB//8BcXKtQjCGIAJC////////P4OENwMIC+cCAQF/IwBB0ABrIgQkAAJAAkAgA0GAgAFIDQAgBEEgaiABIAJCAEKAgICAgICA//8AENkwIARBIGpBCGopAwAhAiAEKQMgIQECQCADQf//AU4NACADQYGAf2ohAwwCCyAEQRBqIAEgAkIAQoCAgICAgID//wAQ2TAgA0H9/wIgA0H9/wJIG0GCgH5qIQMgBEEQakEIaikDACECIAQpAxAhAQwBCyADQYGAf0oNACAEQcAAaiABIAJCAEKAgICAgIDAABDZMCAEQcAAakEIaikDACECIAQpA0AhAQJAIANBg4B+TA0AIANB/v8AaiEDDAELIARBMGogASACQgBCgICAgICAwAAQ2TAgA0GGgH0gA0GGgH1KG0H8/wFqIQMgBEEwakEIaikDACECIAQpAzAhAQsgBCABIAJCACADQf//AGqtQjCGENkwIAAgBEEIaikDADcDCCAAIAQp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RQ0AIAIgADYCNAsgASAANgIAEPQvIAALywIBAn8jAEEgayICJAACQAJAAkACQEH1gQIgASwAABC+MA0AEOkvQRw2AgAMAQtBmAkQxTEiAw0BC0EAIQMMAQsgA0EAQZABENIxGgJAIAFBKxC+MA0AIANBCEEEIAEtAABB8gBGGzYCAAsCQAJAIAEtAABB4QBGDQAgAygCACEBDAELAkAgAEEDQQAQIyIBQYAIcQ0AIAIgAUGACHI2AhAgAEEEIAJBEGoQIxoLIAMgAygCAEGAAXIiATYCAAsgA0H/AToASyADQYAINgIwIAMgADYCPCADIANBmAFqNgIsAkAgAUEIcQ0AIAIgAkEYajYCACAAQZOoASACECQNACADQQo6AEsLIANBnwg2AiggA0GZCDYCJCADQaAINgIgIANBoQg2AgwCQEHYzwcoAgQNACADQX82AkwLIAMQpzAhAwsgAkEgaiQAIAMLdAEBf0ECIQECQCAAQSsQvjANACAALQAAQfIARyEBCyABQYABciABIABB+AAQvjAbIgFBgIAgciABIABB5QAQvjAbIgEgAUHAAHIgAC0AACIAQfIARhsiAUGABHIgASAAQfcARhsiAUGACHIgASAAQeEARhsLBAAgAAsMACAAKAI8EKowECIL2AEBBH8jAEEgayIDJAAgAyABNgIQIAMgAiAAKAIwIgRBAEdrNgIUIAAoAiwhBSADIAQ2AhwgAyAFNgIYQX8hBAJAAkACQCAAKAI8IANBEGpBAiADQQxqECUQzDANACADKAIMIgRBAEoNAQsgACAEQTBxQRBzIAAoAgByNgIADAELIAQgAygCFCIGTQ0AIAAgACgCLCIFNgIEIAAgBSAEIAZrajYCCAJAIAAoAjBFDQAgACAFQQFqNgIEIAIgAWpBf2ogBS0AADoAAAsgAiEECyADQSBqJAAgBAs8AQF/IwBBEGsiAyQAIAAoAjwgASACQf8BcSADQQhqEOExEMwwIQAgAykDCCEBIANBEGokAEJ/IAEgABsL2AIBB38jAEEgayIDJAAgAyAAKAIcIgQ2AhAgACgCFCEFIAMgAjYCHCADIAE2AhggAyAFIARrIgE2AhQgASACaiEGQQIhByADQRBqIQECQAJAAkACQCAAKAI8IANBEGpBAiADQQxqECYQzDANAANAIAYgAygCDCIERg0CIARBf0wNAyABIAQgASgCBCIISyIFQQN0aiIJIAkoAgAgBCAIQQAgBRtrIghqNgIAIAFBDEEEIAUbaiIJIAkoAgAgCGs2AgAgBiAEayEGIAAoAjwgAUEIaiABIAUbIgEgByAFayIHIANBDGoQJhDMMEUNAAsLIAZBf0cNAQsgACAAKAIsIgE2AhwgACABNgIUIAAgASAAKAIwajYCECACIQQMAQtBACEEIABBADYCHCAAQgA3AxAgACAAKAIAQSByNgIAIAdBAkYNACACIAEoAgRrIQQLIANBIGokACAEC1cBA38gACgCVCEDIAEgAyADQQAgAkGAAmoiBBC8MCIFIANrIAQgBRsiBCACIAQgAkkbIgIQ0TEaIAAgAyAEaiIENgJUIAAgBDYCCCAAIAMgAmo2AgQgAguBAQECfyAAIAAtAEoiAUF/aiABcjoASgJAIAAoAhQgACgCHE0NACAAQQBBACAAKAIkEQYAGgsgAEEANgIcIABCADcDEAJAIAAoAgAiAUEEcUUNACAAIAFBIHI2AgBBfw8LIAAgACgCLCAAKAIwaiICNgIIIAAgAjYCBCABQRt0QR91C0EBAn8jAEEQayIBJABBfyECAkAgABCwMA0AIAAgAUEPakEBIAAoAiARBgBBAUcNACABLQAPIQILIAFBEGokACACCwkAIABBABC7MAvjBAEFfyMAQdABayIEJAAgBEIBNwMIAkAgAiABbCIFRQ0AIAQgAjYCECAEIAI2AhQgBSACayEGIAIhASACIQdBAiEIA0AgBEEQaiAIQQJ0aiAHIAJqIAEiB2oiATYCACAIQQFqIQggByEHIAEgBUkNAAsCQAJAIAZBAU4NAEEBIQhBASEBDAELIAAgBmohB0EBIQhBASEBA0ACQAJAIAhBA3FBA0cNACAAIAIgAyABIARBEGoQtDAgBEEIakECELUwIAFBAmohAQwBCwJAAkAgBEEQaiABQX9qIghBAnRqKAIAIAcgAGtJDQAgACACIAMgBEEIaiABQQAgBEEQahC2MAwBCyAAIAIgAyABIARBEGoQtDALAkAgAUEBRw0AIARBCGpBARC3MEEAIQEMAQsgBEEIaiAIELcwQQEhAQsgBCAEKAIIQQFyIgg2AgggACACaiIAIAdJDQALC0EAIAJrIQcgACACIAMgBEEIaiABQQAgBEEQahC2MANAAkACQAJAAkAgAUEBRw0AIAhBAUcNACAEKAIMDQEMBQsgAUEBSg0BCyAEQQhqIARBCGoQuDAiCBC1MCAIIAFqIQEgBCgCCCEIDAELIARBCGpBAhC3MCAEIAQoAghBB3M2AgggBEEIakEBELUwIAFBf2ohCCAAIARBEGogAUF+aiIBQQJ0aigCACACamsgAiADIARBCGogCEEBIARBEGoQtjAgBEEIakEBELcwIAQgBCgCCEEBciIINgIIIAAgB2ogAiADIARBCGogAUEBIARBEGoQtjALIAAgB2ohAAwACwALIARB0AFqJAALsQEBB38jAEHwAWsiBSQAIAUgADYCAEEBIQYCQCADQQJIDQBBACABayEHIAAhCANAAkAgACAIIAdqIgggBCADQX5qIglBAnRqKAIAayIKIAIRAwBBAEgNACAAIAggAhEDAEF/Sg0CCyAFIAZBAnRqIAogCCAKIAggAhEDAEF/SiILGyIINgIAIAZBAWohBiADQX9qIAkgCxsiA0EBSg0ACwsgASAFIAYQuTAgBUHwAWokAAtUAQJ/AkACQCABQR9LDQAgACgCBCECIAAhAwwBCyAAQQRqIQMgAUFgaiEBQQAhAgsgAygCACEDIAAgAiABdjYCBCAAIAJBICABa3QgAyABdnI2AgAL0wIBBX8jAEHwAWsiByQAIAcgAygCACIINgLoASADKAIEIQMgByAANgIAIAcgAzYC7AFBACABayEJAkACQAJAAkACQCAIQQFGDQAgACEKQQEhCAwBCyAAIQpBASEIIAMNAEEBIQggACEDDAELA0ACQCAKIAYgBEECdGooAgBrIgMgACACEQMAQQFODQAgCiEDDAILAkACQCAFDQAgBEECSA0AIARBAnQgBmpBeGooAgAhBSAKIAlqIgsgAyACEQMAQX9KDQEgCyAFayADIAIRAwBBf0oNAQsgByAIQQJ0aiADNgIAIAdB6AFqIAdB6AFqELgwIgoQtTAgCEEBaiEIIAogBGohBEEAIQUgAyEKIAcoAugBQQFHDQEgAyEKIAcoAuwBDQEMAwsLIAohAwwBCyAFDQELIAEgByAIELkwIAMgASACIAQgBhC0MAsgB0HwAWokAAtUAQJ/AkACQCABQR9LDQAgAEEEaiECIAAoAgAhAwwBCyABQWBqIQFBACEDIAAhAgsgAigCACECIAAgAyABdDYCACAAIANB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QQFqIgkQvTBFDQAgAyANIAMgDUF/c2oiBCANIARLG0EBaiILayEOQQAhDwwBCyADIAtrIg4hDwsgA0F/aiEKIANBP3IhDEEAIQcgACEGA0ACQCAAIAZrIANPDQACQCAAQQAgDBC8MCIERQ0AIAQhACAEIAZrIANJDQMMAQsgACAMaiEACwJAAkACQCACQYAIaiAGIApqLQAAIgRBA3ZBHHFqKAIAIAR2QQFxDQAgAyEEDAELAkAgAyACIARBAnRqKAIAayIERQ0AIA4gBCAEIAtJGyAEIAcbIAQgDxshBAwBCyAJIQQCQAJAIAEgCSAHIAkgB0sbIghqLQAAIgVFDQADQCAFQf8BcSAGIAhqLQAARw0CIAEgCEEBaiIIai0AACIFDQALIAkhBAsDQCAEIAdNDQYgASAEQX9qIgRqLQAAIAYgBGotAABGDQALIAshBCAPIQcMAgsgCCANayEEC0EAIQcLIAYgBGohBgwACwALQQAhBgsgAkGgCGokACAGCwIACwIACxYAAkAgAA0AQQAPCxDpLyAANgIAQX8L+AoCBH8EfiMAQfAAayIFJAAgBEL///////////8AgyEJAkACQAJAIAFCf3wiCkJ/USACQv///////////wCDIgsgCiABVK18Qn98IgpC////////v///AFYgCkL///////+///8AURsNACADQn98IgpCf1IgCSAKIANUrXxCf3wiCkL///////+///8AVCAKQv///////7///wBRGw0BCwJAIAFQIAtCgICAgICAwP//AFQgC0KAgICAgIDA//8AURsNACACQoCAgICAgCCEIQQgASEDDAILAkAgA1AgCUKAgICAgIDA//8AVCAJQoCAgICAgMD//wBRGw0AIARCgICAgICAIIQhBAwCCwJAIAEgC0KAgICAgIDA//8AhYRCAFINAEKAgICAgIDg//8AIAIgAyABhSAEIAKFQoCAgICAgICAgH+FhFAiBhshBEIAIAEgBhshAwwCCyADIAlCgICAgICAwP//AIWEUA0BAkAgASALhEIAUg0AIAMgCYRCAFINAiADIAGDIQMgBCACgyEEDAILIAMgCYRQRQ0AIAEhAyACIQQMAQsgAyABIAMgAVYgCSALViAJIAtRGyIHGyEJIAQgAiAHGyILQv///////z+DIQogAiAEIAcbIgJCMIinQf//AXEhCAJAIAtCMIinQf//AXEiBg0AIAVB4ABqIAkgCiAJIAogClAiBht5IAZBBnStfKciBkFxahDOMEEQIAZrIQYgBUHoAGopAwAhCiAFKQNgIQkLIAEgAyAHGyEDIAJC////////P4MhBAJAIAgNACAFQdAAaiADIAQgAyAEIARQIgcbeSAHQQZ0rXynIgdBcWoQzjBBECAHayEIIAVB2ABqKQMAIQQgBSkDUCEDCyAEQgOGIANCPYiEQoCAgICAgIAEhCEEIApCA4YgCUI9iIQhASADQgOGIQMgCyAChSEKAkAgBiAIayIHRQ0AAkAgB0H/AE0NAEIAIQRCASEDDAELIAVBwABqIAMgBEGAASAHaxDOMCAFQTBqIAMgBCAHENgwIAUpAzAgBSkDQCAFQcAAakEIaikDAIRCAFKthCEDIAVBMGpBCGopAwAhBAsgAUKAgICAgICABIQhDCAJQgOGIQICQAJAIApCf1UNAAJAIAIgA30iASAMIAR9IAIgA1StfSIEhFBFDQBCACEDQgAhBAwDCyAEQv////////8DVg0BIAVBIGogASAEIAEgBCAEUCIHG3kgB0EGdK18p0F0aiIHEM4wIAYgB2shBiAFQShqKQMAIQQgBSkDICEBDAELIAQgDHwgAyACfCIBIANUrXwiBEKAgICAgICACINQDQAgAUIBiCAEQj+GhCABQgGDhCEBIAZBAWohBiAEQgGIIQQLIAtCgICAgICAgICAf4MhAgJAIAZB//8BSA0AIAJCgICAgICAwP//AIQhBEIAIQMMAQtBACEHAkACQCAGQQBMDQAgBiEHDAELIAVBEGogASAEIAZB/wBqEM4wIAUgASAEQQEgBmsQ2DAgBSkDACAFKQMQIAVBEGpBCGopAwCEQgBSrYQhASAFQQhqKQMAIQQLIAFCA4ggBEI9hoQhAyAHrUIwhiAEQgOIQv///////z+DhCAChCEEIAGnQQdxIQYCQAJAAkACQAJAENYwDgMAAQIDCyAEIAMgBkEES618IgEgA1StfCEEAkAgBkEERg0AIAEhAwwDCyAEIAFCAYMiAiABfCIDIAJUrXwhBAwDCyAEIAMgAkIAUiAGQQBHca18IgEgA1StfCEEIAEhAwwBCyAEIAMgAlAgBkEAR3GtfCIBIANUrXwhBCABIQMLIAZFDQELENcwGgsgACADNwMAIAAgBDcDCCAFQfAAaiQAC1MBAX4CQAJAIANBwABxRQ0AIAEgA0FAaq2GIQJCACEBDAELIANFDQAgAUHAACADa62IIAIgA60iBIaEIQIgASAEhiEBCyAAIAE3AwAgACACNwMIC+ABAgF/An5BASEEAkAgAEIAUiABQv///////////wCDIgVCgICAgICAwP//AFYgBUKAgICAgIDA//8AURsNACACQgBSIANC////////////AIMiBkKAgICAgIDA//8AViAGQoCAgICAgMD//wBRGw0AAkAgAiAAhCAGIAWEhFBFDQBBAA8LAkAgAyABg0IAUw0AQX8hBCAAIAJUIAEgA1MgASADURsNASAAIAKFIAEgA4WEQgBSDwtBfyEEIAAgAlYgASADVSABIANRGw0AIAAgAoUgASADhYRCAFIhBAsgBAvYAQIBfwJ+QX8hBAJAIABCAFIgAUL///////////8AgyIFQoCAgICAgMD//wBWIAVCgICAgICAwP//AFEbDQAgAkIAUiADQv///////////wCDIgZCgICAgICAwP//AFYgBkKAgICAgIDA//8AURsNAAJAIAIgAIQgBiAFhIRQRQ0AQQAPCwJAIAMgAYNCAFMNACAAIAJUIAEgA1MgASADURsNASAAIAKFIAEgA4WEQgBSDwsgACACViABIANVIAEgA1EbDQAgACAChSABIAOFhEIAUiEECyAEC+8QAgV/Dn4jAEHQAmsiBSQAIARC////////P4MhCiACQv///////z+DIQsgBCAChUKAgICAgICAgIB/gyEMIARCMIinQf//AXEhBgJAAkACQCACQjCIp0H//wFxIgdBf2pB/f8BSw0AQQAhCCAGQX9qQf7/AUkNAQsCQCABUCACQv///////////wCDIg1CgICAgICAwP//AFQgDUKAgICAgIDA//8AURsNACACQoCAgICAgCCEIQwMAgsCQCADUCAEQv///////////wCDIgJCgICAgICAwP//AFQgAkKAgICAgIDA//8AURsNACAEQoCAgICAgCCEIQwgAyEBDAILAkAgASANQoCAgICAgMD//wCFhEIAUg0AAkAgAyACQoCAgICAgMD//wCFhFBFDQBCACEBQoCAgICAgOD//wAhDAwDCyAMQoCAgICAgMD//wCEIQxCACEBDAILAkAgAyACQoCAgICAgMD//wCFhEIAUg0AQgAhAQwCCwJAIAEgDYRCAFINAEKAgICAgIDg//8AIAwgAyAChFAbIQxCACEBDAILAkAgAyAChEIAUg0AIAxCgICAgICAwP//AIQhDEIAIQEMAgtBACEIAkAgDUL///////8/Vg0AIAVBwAJqIAEgCyABIAsgC1AiCBt5IAhBBnStfKciCEFxahDOMEEQIAhrIQggBUHIAmopAwAhCyAFKQPAAiEBCyACQv///////z9WDQAgBUGwAmogAyAKIAMgCiAKUCIJG3kgCUEGdK18pyIJQXFqEM4wIAkgCGpBcGohCCAFQbgCaikDACEKIAUpA7ACIQMLIAVBoAJqIANCMYggCkKAgICAgIDAAIQiDkIPhoQiAkIAQoCAgICw5ryC9QAgAn0iBEIAENowIAVBkAJqQgAgBUGgAmpBCGopAwB9QgAgBEIAENowIAVBgAJqIAUpA5ACQj+IIAVBkAJqQQhqKQMAQgGGhCIEQgAgAkIAENowIAVB8AFqIARCAEIAIAVBgAJqQQhqKQMAfUIAENowIAVB4AFqIAUpA/ABQj+IIAVB8AFqQQhqKQMAQgGGhCIEQgAgAkIAENowIAVB0AFqIARCAEIAIAVB4AFqQQhqKQMAfUIAENowIAVBwAFqIAUpA9ABQj+IIAVB0AFqQQhqKQMAQgGGhCIEQgAgAkIAENowIAVBsAFqIARCAEIAIAVBwAFqQQhqKQMAfUIAENowIAVBoAFqIAJCACAFKQOwAUI/iCAFQbABakEIaikDAEIBhoRCf3wiBEIAENowIAVBkAFqIANCD4ZCACAEQgAQ2jAgBUHwAGogBEIAQgAgBUGgAWpBCGopAwAgBSkDoAEiCiAFQZABakEIaikDAHwiAiAKVK18IAJCAVatfH1CABDaMCAFQYABakIBIAJ9QgAgBEIAENowIAggByAGa2ohBgJAAkAgBSkDcCIPQgGGIhAgBSkDgAFCP4ggBUGAAWpBCGopAwAiEUIBhoR8Ig1CmZN/fCISQiCIIgIgC0KAgICAgIDAAIQiE0IfiEL/////D4MiBH4iFCABQh+IQv////8PgyIKIAVB8ABqQQhqKQMAQgGGIA9CP4iEIBFCP4h8IA0gEFStfCASIA1UrXxCf3wiD0IgiCINfnwiECAUVK0gECAPQv////8PgyIPIAFCP4giFSALQgGGhEL/////D4MiC358IhEgEFStfCAEIA1+fCAPIAR+IhQgCyANfnwiECAUVK1CIIYgEEIgiIR8IBEgEEIghnwiECARVK18IBAgDyABQgGGIhZC/v///w+DIhF+IhcgEkL/////D4MiEiALfnwiFCAXVK0gFCACIAp+fCIXIBRUrXx8IhQgEFStfCAUIBIgBH4iECARIA1+fCIEIA8gCn58Ig0gAiALfnwiD0IgiCAEIBBUrSANIARUrXwgDyANVK18QiCGhHwiBCAUVK18IAQgFyACIBF+IgIgEiAKfnwiCkIgiCAKIAJUrUIghoR8IgIgF1StIAIgD0IghnwgAlStfHwiAiAEVK18IgRC/////////wBWDQAgE0IBhiAVhCETIAVB0ABqIAIgBCADIA4Q2jAgAUIxhiAFQdAAakEIaikDAH0gBSkDUCIBQgBSrX0hDSAGQf7/AGohBkIAIAF9IQoMAQsgBUHgAGogAkIBiCAEQj+GhCICIARCAYgiBCADIA4Q2jAgAUIwhiAFQeAAakEIaikDAH0gBSkDYCIKQgBSrX0hDSAGQf//AGohBkIAIAp9IQogASEWCwJAIAZB//8BSA0AIAxCgICAgICAwP//AIQhDEIAIQEMAQsCQAJAIAZBAUgNACANQgGGIApCP4iEIQ0gBq1CMIYgBEL///////8/g4QhDyAKQgGGIQQMAQsCQCAGQY9/Sg0AQgAhAQwCCyAFQcAAaiACIARBASAGaxDYMCAFQTBqIBYgEyAGQfAAahDOMCAFQSBqIAMgDiAFKQNAIgIgBUHAAGpBCGopAwAiDxDaMCAFQTBqQQhqKQMAIAVBIGpBCGopAwBCAYYgBSkDICIBQj+IhH0gBSkDMCIEIAFCAYYiAVStfSENIAQgAX0hBAsgBUEQaiADIA5CA0IAENowIAUgAyAOQgVCABDaMCAPIAIgAkIBgyIBIAR8IgQgA1YgDSAEIAFUrXwiASAOViABIA5RG618IgMgAlStfCICIAMgAkKAgICAgIDA//8AVCAEIAUpAxBWIAEgBUEQakEIaikDACICViABIAJRG3GtfCICIANUrXwiAyACIANCgICAgICAwP//AFQgBCAFKQMAViABIAVBCGopAwAiBFYgASAEURtxrXwiASACVK18IAyEIQwLIAAgATcDACAAIAw3AwggBUHQAmokAAuOAgICfwN+IwBBEGsiAiQAAkACQCABvSIEQv///////////wCDIgVCgICAgICAgHh8Qv/////////v/wBWDQAgBUI8hiEGIAVCBIhCgICAgICAgIA8fCEFDAELAkAgBUKAgICAgICA+P8AVA0AIARCPIYhBiAEQgSIQoCAgICAgMD//wCEIQUMAQsCQCAFUEUNAEIAIQZCACEFDAELIAIgBUIAIASnZ0EgaiAFQiCIp2cgBUKAgICAEFQbIgNBMWoQzjAgAkEIaikDAEKAgICAgIDAAIVBjPgAIANrrUIwhoQhBSACKQMAIQYLIAAgBjcDACAAIAUgBEKAgICAgICAgIB/g4Q3AwggAkEQaiQAC+EBAgN/An4jAEEQayICJAACQAJAIAG8IgNB/////wdxIgRBgICAfGpB////9wdLDQAgBK1CGYZCgICAgICAgMA/fCEFQgAhBgwBCwJAIARBgICA/AdJDQAgA61CGYZCgICAgICAwP//AIQhBUIAIQYMAQsCQCAEDQBCACEGQgAhBQwBCyACIAStQgAgBGciBEHRAGoQzjAgAkEIaikDAEKAgICAgIDAAIVBif8AIARrrUIwhoQhBSACKQMAIQYLIAAgBjcDACAAIAUgA0GAgICAeHGtQiCGhDcDCCACQRBqJAALjQECAn8CfiMAQRBrIgIkAAJAAkAgAQ0AQgAhBEIAIQUMAQsgAiABIAFBH3UiA2ogA3MiA61CACADZyIDQdEAahDOMCACQQhqKQMAQoCAgICAgMAAhUGegAEgA2utQjCGfCABQYCAgIB4ca1CIIaEIQUgAikDACEECyAAIAQ3AwAgACAFNwMIIAJBEGokAAtyAgF/An4jAEEQayICJAACQAJAIAENAEIAIQNCACEEDAELIAIgAa1CACABZyIBQdEAahDOMCACQQhqKQMAQoCAgICAgMAAhUGegAEgAWutQjCGfCEEIAIpAwAhAwsgACADNwMAIAAgBDcDCCACQRBqJAALBABBAAsEAEEAC1MBAX4CQAJAIANBwABxRQ0AIAIgA0FAaq2IIQFCACECDAELIANFDQAgAkHAACADa62GIAEgA60iBIiEIQEgAiAEiCECCyAAIAE3AwAgACACNwMIC+sLAgV/D34jAEHgAGsiBSQAIAFCIIggAkIghoQhCiADQhGIIARCL4aEIQsgA0IxiCAEQv///////z+DIgxCD4aEIQ0gBCAChUKAgICAgICAgIB/gyEOIAJC////////P4MiD0IgiCEQIAxCEYghESAEQjCIp0H//wFxIQYCQAJAAkAgAkIwiKdB//8BcSIHQX9qQf3/AUsNAEEAIQggBkF/akH+/wFJDQELAkAgAVAgAkL///////////8AgyISQoCAgICAgMD//wBUIBJCgICAgICAwP//AFEbDQAgAkKAgICAgIAghCEODAILAkAgA1AgBEL///////////8AgyICQoCAgICAgMD//wBUIAJCgICAgICAwP//AFEbDQAgBEKAgICAgIAghCEOIAMhAQwCCwJAIAEgEkKAgICAgIDA//8AhYRCAFINAAJAIAMgAoRQRQ0AQoCAgICAgOD//wAhDkIAIQEMAwsgDkKAgICAgIDA//8AhCEOQgAhAQwCCwJAIAMgAkKAgICAgIDA//8AhYRCAFINACABIBKEIQJCACEBAkAgAlBFDQBCgICAgICA4P//ACEODAMLIA5CgICAgICAwP//AIQhDgwCCwJAIAEgEoRCAFINAEIAIQEMAgsCQCADIAKEQgBSDQBCACEBDAILQQAhCAJAIBJC////////P1YNACAFQdAAaiABIA8gASAPIA9QIggbeSAIQQZ0rXynIghBcWoQzjBBECAIayEIIAUpA1AiAUIgiCAFQdgAaikDACIPQiCGhCEKIA9CIIghEAsgAkL///////8/Vg0AIAVBwABqIAMgDCADIAwgDFAiCRt5IAlBBnStfKciCUFxahDOMCAIIAlrQRBqIQggBSkDQCIDQjGIIAVByABqKQMAIgJCD4aEIQ0gA0IRiCACQi+GhCELIAJCEYghEQsgC0L/////D4MiAiABQv////8PgyIEfiITIANCD4ZCgID+/w+DIgEgCkL/////D4MiA358IgpCIIYiDCABIAR+fCILIAxUrSACIAN+IhQgASAPQv////8PgyIMfnwiEiANQv////8PgyIPIAR+fCINIApCIIggCiATVK1CIIaEfCITIAIgDH4iFSABIBBCgIAEhCIKfnwiECAPIAN+fCIWIBFC/////weDQoCAgIAIhCIBIAR+fCIRQiCGfCIXfCEEIAcgBmogCGpBgYB/aiEGAkACQCAPIAx+IhggAiAKfnwiAiAYVK0gAiABIAN+fCIDIAJUrXwgAyASIBRUrSANIBJUrXx8IgIgA1StfCABIAp+fCABIAx+IgMgDyAKfnwiASADVK1CIIYgAUIgiIR8IAIgAUIghnwiASACVK18IAEgEUIgiCAQIBVUrSAWIBBUrXwgESAWVK18QiCGhHwiAyABVK18IAMgEyANVK0gFyATVK18fCICIANUrXwiAUKAgICAgIDAAINQDQAgBkEBaiEGDAELIAtCP4ghAyABQgGGIAJCP4iEIQEgAkIBhiAEQj+IhCECIAtCAYYhCyADIARCAYaEIQQLAkAgBkH//wFIDQAgDkKAgICAgIDA//8AhCEOQgAhAQwBCwJAAkAgBkEASg0AAkBBASAGayIHQYABSQ0AQgAhAQwDCyAFQTBqIAsgBCAGQf8AaiIGEM4wIAVBIGogAiABIAYQzjAgBUEQaiALIAQgBxDYMCAFIAIgASAHENgwIAUpAyAgBSkDEIQgBSkDMCAFQTBqQQhqKQMAhEIAUq2EIQsgBUEgakEIaikDACAFQRBqQQhqKQMAhCEEIAVBCGopAwAhASAFKQMAIQIMAQsgBq1CMIYgAUL///////8/g4QhAQsgASAOhCEOAkAgC1AgBEJ/VSAEQoCAgICAgICAgH9RGw0AIA4gAkIBfCIBIAJUrXwhDgwBCwJAIAsgBEKAgICAgICAgIB/hYRCAFENACACIQEMAQsgDiACIAJCAYN8IgEgAlStfCEOCyAAIAE3AwAgACAONwMIIAVB4ABqJAALdQEBfiAAIAQgAX4gAiADfnwgA0IgiCIEIAFCIIgiAn58IANC/////w+DIgMgAUL/////D4MiAX4iBUIgiCADIAJ+fCIDQiCIfCADQv////8PgyAEIAF+fCIDQiCIfDcDCCAAIANCIIYgBUL/////D4OENwMAC0gBAX8jAEEQayIFJAAgBSABIAIgAyAEQoCAgICAgICAgH+FEM0wIAUpAwAhASAAIAVBCGopAwA3AwggACABNwMAIAVBEGokAAvqAwICfwJ+IwBBIGsiAiQAAkACQCABQv///////////wCDIgRCgICAgICAwP9DfCAEQoCAgICAgMCAvH98Wg0AIABCPIggAUIEhoQhBAJAIABC//////////8PgyIAQoGAgICAgICACFQNACAEQoGAgICAgICAwAB8IQUMAgsgBEKAgICAgICAgMAAfCEFIABCgICAgICAgIAIhUIAUg0BIAUgBEIBg3whBQwBCwJAIABQIARCgICAgICAwP//AFQgBEKAgICAgIDA//8AURsNACAAQjyIIAFCBIaEQv////////8Dg0KAgICAgICA/P8AhCEFDAELQoCAgICAgID4/wAhBSAEQv///////7//wwBWDQBCACEFIARCMIinIgNBkfcASQ0AIAJBEGogACABQv///////z+DQoCAgICAgMAAhCIEIANB/4h/ahDOMCACIAAgBEGB+AAgA2sQ2DAgAikDACIEQjyIIAJBCGopAwBCBIaEIQUCQCAEQv//////////D4MgAikDECACQRBqQQhqKQMAhEIAUq2EIgRCgYCAgICAgIAIVA0AIAVCAXwhBQwBCyAEQoCAgICAgICACIVCAFINACAFQgGDIAV8IQULIAJBIGokACAFIAFCgICAgICAgICAf4OEvwvEAwIDfwF+IwBBIGsiAiQAAkACQCABQv///////////wCDIgVCgICAgICAwL9AfCAFQoCAgICAgMDAv398Wg0AIAFCGYinIQMCQCAAUCABQv///w+DIgVCgICACFQgBUKAgIAIURsNACADQYGAgIAEaiEEDAILIANBgICAgARqIQQgACAFQoCAgAiFhEIAUg0BIAQgA0EBcWohBAwBCwJAIABQIAVCgICAgICAwP//AFQgBUKAgICAgIDA//8AURsNACABQhmIp0H///8BcUGAgID+B3IhBAwBC0GAgID8ByEEIAVC////////v7/AAFYNAEEAIQQgBUIwiKciA0GR/gBJDQAgAkEQaiAAIAFC////////P4NCgICAgICAwACEIgUgA0H/gX9qEM4wIAIgACAFQYH/ACADaxDYMCACQQhqKQMAIgVCGYinIQQCQCACKQMAIAIpAxAgAkEQakEIaikDAIRCAFKthCIAUCAFQv///w+DIgVCgICACFQgBUKAgIAIURsNACAEQQFqIQQMAQsgACAFQoCAgAiFhEIAUg0AIARBAXEgBGohBAsgAkEgaiQAIAQgAUIgiKdBgICAgHhxcr4LFQBBkNTHAiQCQZDUB0EPakFwcSQBCwcAIwAjAWsLBAAjAQszAQF/IABBASAAGyEBAkADQCABEMUxIgANAQJAEJYxIgBFDQAgABEHAAwBCwsQJwALIAALBwAg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IgpCgICAgICAwABUDQALCyAGQYCAAnEhCAJAIAdBAEoNACAFQcAAaiAEIApC////////P4MgB0H4AGogCHKtQjCGhEIAQoCAgICAgMDDPxDZMCAFQcgAaikDACECIAUpA0AhBAwBCyAKQv///////z+DIAcgCHKtQjCGhCECCyAAIAQ3AwAgACACNwMIIAVBgAFqJAALrgEAAkACQCABQYAISA0AIABEAAAAAAAA4H+iIQACQCABQf8PTg0AIAFBgXhqIQEMAgsgAEQAAAAAAADgf6IhACABQf0XIAFB/RdIG0GCcGohAQwBCyABQYF4Sg0AIABEAAAAAAAAEACiIQACQCABQYNwTA0AIAFB/gdqIQEMAQsgAEQAAAAAAAAQAKIhACABQYZoIAFBhmhKG0H8D2ohAQsgACABQf8Haq1CNIa/ogtLAgF+An8gAUL///////8/gyECAkACQCABQjCIp0H//wFxIgNB//8BRg0AQQQhBCADDQFBAkEDIAIgAIRQGw8LIAIgAIRQIQQLIAQLkgQBA38CQCACQYAESQ0AIAAgASACECkaIAAPCyAAIAJqIQMCQAJAIAEgAHNBA3ENAAJAAkAgAEEDcQ0AIAAhAgwBCwJAIAJBAU4NACAAIQIMAQsgACECA0AgAiABLQAAOgAAIAFBAWohASACQQFqIgJBA3FFDQEgAiADSQ0ACwsCQCADQXxxIgRBwABJDQAgAiAEQUBqIgVLDQADQCACIAEoAgA2AgAgAiABKAIENgIEIAIgASgCCDYCCCACIAEoAgw2AgwgAiABKAIQNgIQIAIgASgCFDYCFCACIAEoAhg2AhggAiABKAIcNgIcIAIgASgCIDYCICACIAEoAiQ2AiQgAiABKAIoNgIoIAIgASgCLDYCLCACIAEoAjA2AjAgAiABKAI0NgI0IAIgASgCODYCOCACIAEoAjw2AjwgAUHAAGohASACQcAAaiICIAVNDQALCyACIARPDQEDQCACIAEoAgA2AgAgAUEEaiEBIAJBBGoiAiAESQ0ADAILAAsCQCADQQRPDQAgACECDAELAkAgA0F8aiIEIABPDQAgACECDAELIAAhAgNAIAIgAS0AADoAACACIAEtAAE6AAEgAiABLQACOgACIAIgAS0AAzoAAyABQQRqIQEgAkEEaiICIARNDQALCwJAIAIgA08NAANA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IGhvcml6b250YWwgb25seQBSZXNpemUgdmVydGljYWwgb25seQBpby5Db25maWdXaW5kb3dzTW92ZUZyb21UaXRsZUJhck9ubHkASW1HdWlJbnB1dFRleHRGbGFnc19SZWFkT25seQB0YWJsZV9zY3JvbGx5AE1vZGlmeQBFdmVudEtleQBJc0FjdGl2ZUlkVXNpbmdLZXkASW1HdWlUYWJsZUZsYWdzX0NvbnRleHRNZW51SW5Cb2R5AEltR3VpVGFibGVGbGFnc19Ob0JvcmRlcnNJbkJvZHkAU2l6aW5nIFBvbGljeQBCb2JieQBFeGFtcGxlOiBTaW1wbGUgb3ZlcmxheQBOYXZVcGRhdGVXaW5kb3dpbmdPdmVybGF5AEV4YW1wbGU6IExvbmcgdGV4dCBkaXNwbGF5AEtleVJlcGVhdERlbGF5AE15AHRhYmxlLT5CZ0NsaXBSZWN0Lk1pbi55IDw9IHRhYmxlLT5CZ0NsaXBSZWN0Lk1heC55AHRhYmxlLT5CZzJDbGlwUmVjdEZvckRyYXdDbWQuTWluLnkgPD0gdGFibGUtPkJnMkNsaXBSZWN0Rm9yRHJhd0NtZC5NYXgueQB0YWJsZS0+Um93UG9zWTIgPT0gaW5uZXJfd2luZG93LT5EQy5DdXJzb3JQb3MueQBXZSBjYWxsIEFsaWduVGV4dFRvRnJhbWVQYWRkaW5nKCkgdG8gdmVydGljYWxseSBhbGlnbiB0aGUgdGV4dCBiYXNlbGluZSBieSArRnJhbWVQYWRkaW5nLnkAUHJpbVZ0eABQcmltV3JpdGVWdHgAIyNjc3gAKyUuMGYgcHgAWC9ZID0gJS4wZiBweABNZXNoOiBFbGVtQ291bnQ6ICVkLCBWdHhPZmZzZXQ6ICslZCwgSWR4T2Zmc2V0OiArJWQsIEFyZWE6IH4lMC5mIHB4AFRleHR1cmUgQXJlYTogYWJvdXQgJWQgcHggfiVkeCVkIHB4AGNoZWNrYm94AElURU06IENoZWNrYm94AElURU06IExpc3RCb3gARGVidWdOb2RlRHJhd0NtZFNob3dNZXNoQW5kQm91bmRpbmdCb3gAdGFibGVfc2Nyb2xseABTaXgAUGF0aEZpbGxDb252ZXgAIyNoZXgAaW5wdXQgdTMyIGhleABpbnB1dCBzMzIgaGV4AEdldEtleUluZGV4AFRhYmxlR2V0Um93SW5kZXgAR2V0SW5kZXgAVGFibGVTZXRDb2x1bW5JbmRleABUYWJsZUdldENvbHVtbkluZGV4AEFudGlBbGlhc2VkTGluZXNVc2VUZXgASGV4AFByaW1Xcml0ZUlkeAAjI21heABHZXRDbGlwUmVjdE1heABHZXRJdGVtUmVjdE1heABHZXRXaW5kb3dDb250ZW50UmVnaW9uTWF4AEdldENvbnRlbnRSZWdpb25NYXgAU2Nyb2xsTWF4AElucHV0VGV4dEV4AFBsb3RFeABTZXBhcmF0b3JFeABTY3JvbGxiYXJFeABUYWJJdGVtRXgAQmVnaW5UYWJsZUV4ACMjUG9wdXBfJTA4eAAtKyAgIDBYMHgALTBYKzBYIDBYLTB4KzB4IDB4AFJlbmRlckFycm93AEltR3VpVHJlZU5vZGVGbGFnc19PcGVuT25BcnJvdwBZZWxsb3cAc2xpZGVyIGZsb2F0IGxvdwBzbGlkZXIgZG91YmxlIGxvdwBzbGlkZXIgdTY0IGxvdwBzbGlkZXIgczY0IGxvdwBzbGlkZXIgdTMyIGxvdwBzbGlkZXIgczMyIGxvdwBNZW51IGluc2lkZSBhIHJlZ3VsYXIgd2luZG93AE1lbnVzIGluc2lkZSBhIHJlZ3VsYXIgd2luZG93AFNob3cgSG9yaXpvbnRhbCBjb250ZW50cyBzaXplIGRlbW8gd2luZG93AEV4YW1wbGU6IEF1dG8tcmVzaXppbmcgd2luZG93AENvbnN0cmFpbmVkLXJlc2l6aW5nIHdpbmRvdwBnLkN1cnJlbnRXaW5kb3cgPT0gd2luZG93AHdpbmRvdyA9PSBnLk5hdldpbmRvdwBCZWdpblBvcHVwQ29udGV4dFdpbmRvdwBTaG93QWJvdXRXaW5kb3cAR2V0SG92ZXJlZFJvb3RXaW5kb3cAZy5Nb3ZpbmdXaW5kb3cgJiYgZy5Nb3ZpbmdXaW5kb3ctPlJvb3RXaW5kb3cAR2V0Q3VycmVudFdpbmRvdwBpbm5lcl93aW5kb3cgPT0gZy5DdXJyZW50V2luZG93AG91dGVyX3dpbmRvdyA9PSBpbm5lcl93aW5kb3cgfHwgb3V0ZXJfd2luZG93ID09IGlubmVyX3dpbmRvdy0+UGFyZW50V2luZG93AE5hdkluaXRXaW5kb3cATmF2VXBkYXRlV2luZG93aW5nSGlnaGxpZ2h0V2luZG93AEZvY3VzV2luZG93AFNob3dNZXRyaWNzV2luZG93AENsb3NlUG9wdXBzT3ZlcldpbmRvdwB3aW5kb3cgPT0gdGFibGUtPklubmVyV2luZG93AFNob3dEZW1vV2luZG93AH5JbUd1aVdpbmRvdwBHZXRBY3RpdmVXaW5kb3cAZmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX0NoaWxkV2luZG93AHdpbmRvdy0+RmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX0NoaWxkV2luZG93ACBDaGlsZFdpbmRvdwBHZXRIb3ZlcmVkV2luZG93AGcuTmF2V2luZG93ICYmIHJlc3VsdC0+V2luZG93AEJvcmRlclNoYWRvdwBUYWJsZU5leHRSb3cAVGFibGVIZWFkZXJzUm93AFRhYmxlQmVnaW5Sb3cAIXRhYmxlLT5Jc0luc2lkZVJvdwBUYWJsZUVuZFJvdwAjI3ByZXZpZXcASW1HdWlDb21ib0ZsYWdzX05vUHJldmlldwBXaXRoIFNpZGUgUHJldmlldwBXaXRoIEFscGhhIFByZXZpZXcAV2l0aCBIYWxmIEFscGhhIFByZXZpZXcAaXRlbSB2aWV3AFRyZWUgdmlldwBOZXcAZHJhd19jbWQuQ2xpcFJlY3QueCA8PSBkcmF3X2NtZC5DbGlwUmVjdC56ICYmIGRyYXdfY21kLkNsaXBSZWN0LnkgPD0gZHJhd19jbWQuQ2xpcFJlY3QudwAjI2hzdgBGaWxlMV9iLndhdgBGaWxlMV9hLndhdgBObyBuYXYAUm9vdFdpbmRvd0Zvck5hdgAjI3YAdGFibGVfY29udGV4dF9tZW51AFN1Yi1tZW51AGl0ZW0gY29udGV4dCBtZW51AEVuYWJsZSBjb250ZXh0IG1lbnUATm8gbWVudQBUYWJsZU9wZW5Db250ZXh0TWVudQAjI0NvbnRleHRNZW51AE15SGVscE1lbnUAQmVnaW5NZW51AEVuZE1lbnUAIENoaWxkTWVudQBXaXRoIE9wdGlvbnMgTWVudQBEaXNhYmxlIE1lbnUAJWxsdQAlc18ldQBpbWd1aV9sb2cudHh0AHdpbmRvd19jb250ZXh0AHZvaWRfY29udGV4dABEZXN0cm95Q29udGV4dABTZXRDdXJyZW50Q29udGV4dABHZXRDdXJyZW50Q29udGV4dABXcmFwSW1HdWlDb250ZXh0AENyZWF0ZUNvbnRleHQAc2hvd193cmFwcGVkX3RleHQAaW5wdXQgdGV4dABCdWxsZXQgdGV4dABzb21lIG1vcmUgdGV4dAAlZCBzb21lIHRleHQAVGVtcElucHV0VGV4dABpby5Db25maWdEcmFnQ2xpY2tUb0lucHV0VGV4dABJVEVNOiBJbnB1dFRleHQAQnVsbGV0VGV4dABSZW5kZXJUZXh0AERhdGFUeXBlQXBwbHlPcEZyb21UZXh0AExhYmVsVGV4dABMb2dUZXh0AFNldENsaXBib2FyZFRleHQAR2V0Q2xpcGJvYXJkVGV4dABBZGRUZXh0ACMjVGV4dABDb2xvcmZ1bCBUZXh0AEFkZCBEZWJ1ZyBUZXh0AElURU06IFRleHQAVVRGLTggVGV4dAB3dABVVEYtOCBpbnB1dABXYW50VGV4dElucHV0AEltR3VpU2xpZGVyRmxhZ3NfTm9JbnB1dABJbUd1aUlucHV0VGV4dEZsYWdzX0FsbG93VGFiSW5wdXQATXVsdGktbGluZSBUZXh0IElucHV0AEZpbHRlcmVkIFRleHQgSW5wdXQAUGFzc3dvcmQgSW5wdXQARXhhbXBsZTogU2ltcGxlIGxheW91dABUYWJCYXJMYXlvdXQAVGFibGVVcGRhdGVMYXlvdXQARGVidWdDaGVja1ZlcnNpb25BbmREYXRhTGF5b3V0AEJhc2ljIEhvcml6b250YWwgTGF5b3V0AENvY29udXQAQ3V0AGtlZXBjb3N0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aTo6RW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aSgpOjooYW5vbnltb3VzIGNsYXNzKTo6b3BlcmF0b3IoKShlbXNjcmlwdGVuOjp2YWwpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUZvbnRDb25maWc6OkVtc2NyaXB0ZW5CaW5kaW5nSW5pdGlhbGl6ZXJfSW1Gb250Q29uZmlnKCk6Oihhbm9ueW1vdXMgY2xhc3MpOjpvcGVyYXRvcigpKEltRm9udENvbmZpZyAmLCBlbXNjcmlwdGVuOjp2YWwpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aTo6RW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aSgpOjooYW5vbnltb3VzIGNsYXNzKTo6b3BlcmF0b3IoKSgpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUZvbnRDb25maWc6OkVtc2NyaXB0ZW5CaW5kaW5nSW5pdGlhbGl6ZXJfSW1Gb250Q29uZmlnKCk6Oihhbm9ueW1vdXMgY2xhc3MpOjpvcGVyYXRvcigpKGNvbnN0IEltRm9udENvbmZpZyAmKSBjb25zdABEcmF3TGlzdCA9PSAmRHJhd0xpc3RJbnN0AERyYXcgaW4gQmFja2dyb3VuZCBkcmF3IGxpc3QARHJhdyBpbiBGb3JlZ3JvdW5kIGRyYXcgbGlzdABHZXRXaW5kb3dEcmF3TGlzdABJbURyYXdMaXN0AEdldEJhY2tncm91bmREcmF3TGlzdABHZXRGb3JlZ3JvdW5kRHJhd0xpc3QAIyMjTmF2V2luZG93aW5nTGlzdABNb3VzZURvdWJsZUNsaWNrTWF4RGlzdABTY3JvbGxUYXJnZXRFZGdlU25hcERpc3QAZy5OYXZNb3ZlUmVxdWVzdABQYXRoQXJjVG9GYXN0AEV4cG9ydAB1bnNpZ25lZCBzaG9ydABfRGVmYXVsdFNvcnQAX05vU29ydABSZXZlcnQAaW5zZXJ0AERpc3BsYXlTdGFydABTZWxlY3Rpb25TdGFydABDYXJyb3QAQmVldHJvb3QAUm9vdABBcHJpY290AEdldEtleVByZXNzZWRBbW91bnQAIyNjb2x1bW5zX2NvdW50AGl0ZW1zX2NvdW50AHZfaWR4ID49IDAgJiYgdl9pZHggPCB2YWx1ZXNfY291bnQAdjFfaWR4ID49IDAgJiYgdjFfaWR4IDwgdmFsdWVzX2NvdW50AFNhbXBsZSBjb3VudABUb3RhbFZ0eENvdW50AFRvdGFsSWR4Q291bnQAQ21kTGlzdHNDb3VudABHZXRDb2x1bW5zQ291bnQAc2V0dGluZ3MtPkNvbHVtbnNDb3VudCA9PSB0YWJsZS0+Q29sdW1uc0NvdW50ICYmIHNldHRpbmdzLT5Db2x1bW5zQ291bnRNYXggPj0gc2V0dGluZ3MtPkNvbHVtbnNDb3VudABjb2x1bW5fbiA+PSAtMSAmJiBjb2x1bW5fbiA8IHRhYmxlLT5Db2x1bW5zQ291bnQAY29sdW1uX24gPj0gMCAmJiBjb2x1bW5fbiA8IHRhYmxlLT5Db2x1bW5zQ291bnQAY29sdW1uX24gPj0gMCAmJiB0YWJsZS0+Q29sdW1uc0NvdW50AEl0ZW1zQ291bnQAY29sdW1uLT5Tb3J0T3JkZXIgPCB0YWJsZS0+U29ydFNwZWNzQ291bnQAVGFibGVHZXRDb2x1bW5Db3VudABFbGVtQ291bnQAbiA8IGNvbHVtbi0+U29ydERpcmVjdGlvbnNBdmFpbENvdW50AEdldEZyYW1lQ291bnQAZy5GcmFtZUNvdW50RW5kZWQgIT0gZy5GcmFtZUNvdW50AENvbmZpZ0RhdGFDb3VudABpZHggPj0gMCAmJiBpZHggPCBfQ291bnQATm8gYnJpbmcgdG8gZnJvbnQARHN0Rm9udABTZXRDdXJyZW50Rm9udABHZXRGb250AFBvcEZvbnQASW1Gb250AFB1c2hGb250AE1lcmdlRm9udABDbGVhclN1YkZvbnQAQ29kZXBvaW50AEFub3RoZXIgYnVsbGV0IHBvaW50AENvbnN0cmFpbnQASW5wdXRUZXh0V2l0aEhpbnQAIyNpbnQAaW5wdXQgaW50AHNsaWRlciBpbnQAZHJhZyBpbnQAcmFuZ2UgaW50AHVuc2lnbmVkIGludABQYXVjaWxvcXVlbnQAQ29udGVudAAjI2N1cnJlbnQAQ2hhbm5lbHNTZXRDdXJyZW50AFNvbWUgRG9jdW1lbnQAVGV4dCBCYXNlbGluZSBBbGlnbm1lbnQAVW5pbmRlbnQASW5kZW50AERlc2NlbnQAQXNjZW50AE9wZW4gUmVjZW50AEVnZ3BsYW50AElucHV0SW50AFZTbGlkZXJJbnQARHJhZ0ludABOYXZVcGRhdGVNb3ZlUmVzdWx0AFNldCBhcyBkZWZhdWx0AEFkZEZvbnREZWZhdWx0AEl0ZW1XaWR0aERlZmF1bHQARGVidWcjI0RlZmF1bHQASXNCdWlsdABLZXlBbHQAVGFibGVSb3dCZ0FsdABFeGl0AEdyYXBlZnJ1aXQAUXVpdABzcGxpdABDaGFubmVsc1NwbGl0ACMjZWRpdABJc0l0ZW1EZWFjdGl2YXRlZEFmdGVyRWRpdABDb250ZW50U2l6ZUV4cGxpY2l0AEltR3VpVGFibGVGbGFnc19TaXppbmdGaXhlZEZpdABUZXN0Qml0AFNldEJpdABDbGVhckJpdABUb3AtcmlnaHQAQm90dG9tLXJpZ2h0ACMjcmlnaHQATmF2SGlnaGxpZ2h0AFJvb3RXaW5kb3dGb3JUaXRsZUJhckhpZ2hsaWdodABOYXZXaW5kb3dpbmdIaWdobGlnaHQAdGFibGVfcm93X2hlaWdodAByb3dfbWluX2hlaWdodABSb3cgaGVpZ2h0AFdlaWdodABUZXhIZWlnaHQAR2V0V2luZG93SGVpZ2h0AEl0ZW1zSGVpZ2h0AEdldFRleHRMaW5lSGVpZ2h0AEdldEZyYW1lSGVpZ2h0AGcuU3R5bGUuV2luZG93TWVudUJ1dHRvblBvc2l0aW9uID09IEltR3VpRGlyX05vbmUgfHwgZy5TdHlsZS5XaW5kb3dNZW51QnV0dG9uUG9zaXRpb24gPT0gSW1HdWlEaXJfTGVmdCB8fCBnLlN0eWxlLldpbmRvd01lbnVCdXR0b25Qb3NpdGlvbiA9PSBJbUd1aURpcl9SaWdodABIZWxsbyBSaWdodABTdHlsZUNvbG9yc0xpZ2h0AFRhYmxlQm9yZGVyTGlnaHQAS2V5U2hpZnQAVG9wLWxlZnQAQm90dG9tLWxlZnQAIyNsZWZ0AEltR3VpQ29tYm9GbGFnc19Qb3B1cEFsaWduTGVmdABIZWxsbyBMZWZ0AHB0cl9mcm9tX29mZnNldABpby5CYWNrZW5kRmxhZ3M6IFJlbmRlcmVySGFzVnR4T2Zmc2V0AElkeE9mZnNldABJbURyYXdWZXJ0UG9zT2Zmc2V0AFNldENvbHVtbk9mZnNldABHZXRDb2x1bW5PZmZzZXQAR2V0RHJhZ2dlZENvbHVtbk9mZnNldABJbURyYXdWZXJ0Q29sT2Zmc2V0AEdseXBoT2Zmc2V0AGJ5dGVPZmZzZXQASW1EcmF3VmVydFVWT2Zmc2V0AFNjcm9sbCBPZmZzZXQATG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQAQnVsbGV0AHJvdyBiZyB0YXJnZXQAQmVnaW5EcmFnRHJvcFRhcmdldABFbmREcmFnRHJvcFRhcmdldABnLkRyYWdEcm9wV2l0aGluVGFyZ2V0AFNjcm9sbFRhcmdldABnLk5hdldpbmRvd2luZ1RhcmdldABTZXQAT2JqZWN0AEdldFdpbmRvd1JlY3QAQ29sdW1uc1JlY3QAT3V0ZXJSZWN0AElubmVyUmVjdABHZXRSZXNpemVCb3JkZXJSZWN0AEdldFdpbmRvd1Njcm9sbGJhclJlY3QASG9zdENsaXBSZWN0AENvbHVtbnNDbGlwUmVjdABJbm5lckNsaXBSZWN0AFBvcENsaXBSZWN0AFB1c2hDbGlwUmVjdABCYWNrZ3JvdW5kQ2xpcFJlY3QAX09uQ2hhbmdlZENsaXBSZWN0AENvbnRlbnRSZWdpb25SZWN0AFByaW1SZWN0AEltUmVjdABDb2x1bW5zV29ya1JlY3QAUGF0aFJlY3QASXNNb3VzZUhvdmVyaW5nUmVjdABHZXRUYWJsZVJlY3QAQWRkUmVjdABpbnB1dCBmbG9hdABzbGlkZXIgZmxvYXQAZHJhZyBzbWFsbCBmbG9hdABkcmFnIGZsb2F0AHJhbmdlIGZsb2F0AElURU06IElucHV0RmxvYXQAVlNsaWRlckZsb2F0AElURU06IFNsaWRlckZsb2F0AERyYWdGbG9hdABJbUd1aVNsaWRlckZsYWdzX05vUm91bmRUb0Zvcm1hdABQb3BCdXR0b25SZXBlYXQAUHVzaEJ1dHRvblJlcGVhdABFYXQAdWludDY0X3QAM3dheXMAZnJlZXplX3Jvd3MAUG9wdXBzICYgTW9kYWwgd2luZG93cwBDaGlsZCB3aW5kb3dzAFNldHRpbmdzV2luZG93cwBNZXRyaWNzUmVuZGVyV2luZG93cwBNZXRyaWNzQWN0aXZlV2luZG93cwBDaGlsZFdpbmRvd3MAQ2F0dHl3YW1wdXMAIyNwcmV2aW91cwBQcmV2aW91cwBDb250ZXh0IG1lbnVzAFNldE5leHRXaW5kb3dGb2N1cwBTZXRXaW5kb3dGb2N1cwBTZXRJdGVtRGVmYXVsdEZvY3VzAFNldFdpbmRvd05hbWVGb2N1cwBQb3BBbGxvd0tleWJvYXJkRm9jdXMAUHVzaEFsbG93S2V5Ym9hcmRGb2N1cwBJbnB1dHMsIE5hdmlnYXRpb24gJiBGb2N1cwBOb05hdklucHV0cwBfc2V0QXRfTmF2SW5wdXRzAF9nZXRBdF9OYXZJbnB1dHMATm9Nb3VzZUlucHV0cwBCRy9GRyBkcmF3IGxpc3RzAEl0ZXJhdGVEcmF3TGlzdHMAVGFibGVCZWdpbkFwcGx5UmVxdWVzdHMAVGl0bGUgYmFyIEhvdmVyZWQvQWN0aXZlIHRlc3RzAEl0ZXJhdGVGb250cwBTZXROZXh0V2luZG93U2l6ZUNvbnN0cmFpbnRzAFNvbWUgb3RoZXIgY29udGVudHMARXZlbiBtb3JlIGNvbnRlbnRzAFNvbWUgY29udGVudHMAU29tZSB0cmVlIGNvbnRlbnRzAE5vZGUgY29udGVudHMAQ29udGVudHMAQ2xvc2UgQWxsIERvY3VtZW50cwBFeGFtcGxlOiBEb2N1bWVudHMAR3JhZGllbnRzAE1heDogJWQgdW5pdHMATWluOiAlZCB1bml0cwBCdWxsZXRzAERyYWcgYW5kIGRyb3AgaW4gc3RhbmRhcmQgd2lkZ2V0cwBTaG93RGVtb1dpbmRvd1dpZGdldHMATXVsdGktY29tcG9uZW50IFdpZGdldHMAUGxvdHMgV2lkZ2V0cwBDb2xvci9QaWNrZXIgV2lkZ2V0cwBSYW5nZSBXaWRnZXRzAFNjYWxlQ2xpcFJlY3RzAFRoaWNrbmVzcwBNb3VzZSBjdXJzb3JzAGlvLkJhY2tlbmRGbGFnczogSGFzTW91c2VDdXJzb3JzACMjY29sb3JzAEZpbHRlciBjb2xvcnMASFNWIGVuY29kZWQgY29sb3JzAF9zZXRBdF9Db2xvcnMAX2dldEF0X0NvbG9ycwBPbmx5IE1vZGlmaWVkIENvbG9ycwBpby5Db25maWdNYWNPU1hCZWhhdmlvcnMAImltZ3VpIiBsZXR0ZXJzAENsZWFySW5wdXRDaGFyYWN0ZXJzAFNldHRpbmdzSGFuZGxlcnMAVGFibGVHY0NvbXBhY3RUcmFuc2llbnRCdWZmZXJzAERlSW5kZXhBbGxCdWZmZXJzAFRhYmxlVXBkYXRlQm9yZGVycwBJbUd1aVRhYmxlRmxhZ3NfQm9yZGVycwBWZXJ0aWNhbCBTbGlkZXJzAHNob3dfaGVhZGVycwB0YWJsZV9jdXN0b21faGVhZGVycwBEaXNwbGF5IGhlYWRlcnMAQ3VzdG9tIGhlYWRlcnMAUmVvcmRlcmFibGUsIGhpZGVhYmxlLCB3aXRoIGhlYWRlcnMARGlzYWJsZSB2ZXJ0aWNhbCBib3JkZXJzIGluIGNvbHVtbnMgQm9keSAoYm9yZGVycyB3aWxsIGFsd2F5cyBhcHBlYXJzIGluIEhlYWRlcnMAQ29sbGFwc2luZyBIZWFkZXJzAEluc2VydENoYXJzAERlbGV0ZUNoYXJzAFRhYkJhcnMAUG9wdXBzAEdyb3VwcwAjI3BvcwBjZmdfaW5mb3MARGlzcGxheVBvcwBTZXROZXh0V2luZG93UG9zAFNldFdpbmRvd1BvcwBHZXRXaW5kb3dQb3MAR2V0Q3Vyc29yU3RhcnRQb3MAU2V0Q3Vyc29yUG9zAEdldEN1cnNvclBvcwBQb3BUZXh0V3JhcFBvcwBQdXNoVGV4dFdyYXBQb3MAU2V0Q3Vyc29yU2NyZWVuUG9zAEdldEN1cnNvclNjcmVlblBvcwBXYW50U2V0TW91c2VQb3MAaW8uQmFja2VuZEZsYWdzOiBIYXNTZXRNb3VzZVBvcwBpby5Db25maWdGbGFnczogTmF2RW5hYmxlU2V0TW91c2VQb3MAR2V0TW91c2VQb3MAU2V0V2luZG93TmFtZVBvcwBfZ2V0QXRfTW91c2VDbGlja2VkUG9zAFNjcm9sbCBUbyBQb3MAU2hvdyBzdGVwIGJ1dHRvbnMAU21hbGwgYnV0dG9ucwBOb3JtYWwgYnV0dG9ucwBMb2dCdXR0b25zAFdpbmRvdyBvcHRpb25zAFNldENvbG9yRWRpdE9wdGlvbnMAU2V0QWxsb2NhdG9yRnVuY3Rpb25zAFJlbmRlcldpbmRvd0RlY29yYXRpb25zACVkIGFjdGl2ZSBhbGxvY2F0aW9ucwBNZXRyaWNzQWN0aXZlQWxsb2NhdGlvbnMAbXljb2x1bW5zAEluIGNvbHVtbnMAJWQgY29sdW1ucwBCZWdpbkNvbHVtbnMARW5kQ29sdW1ucwBUYWJsZXMgJiBDb2x1bW5zACUuMDZmIG5zAERyYWcgYW5kIGRyb3AgdG8gY29weS9zd2FwIGl0ZW1zAE1peGVkIGl0ZW1zAFNob3cgaW5kZW50ZWQgaXRlbXMAJS4xMGYgZ3JhbXMAJWUgZ3JhbXMAJUk2NHUgbXMAJXUgbXMAVG9vbHMAZnJlZXplX2NvbHMARGVidWcgZGV0YWlscwBEZXRhaWxzAHBpeGVscwBTaXplUGl4ZWxzAFRhYmxlU2V0dXBEcmF3Q2hhbm5lbHMAVGFibGVNZXJnZURyYXdDaGFubmVscwBFcXVhbHMATW9kYWxzAFVwZGF0ZVdpbmRvd1BhcmVudEFuZFJvb3RMaW5rcwB1c21ibGtzAGZzbWJsa3MAaGJsa3MAdW9yZGJsa3MAZm9yZGJsa3MARXJyb3JDaGVja05ld0ZyYW1lU2FuaXR5Q2hlY2tzAEVycm9yQ2hlY2tFbmRGcmFtZVNhbml0eUNoZWNrcwBDb21wbGV0aW9uLCBIaXN0b3J5LCBFZGl0IENhbGxiYWNrcwBDb2x1bW5zIHdpZHRocwBJbUd1aVRhYmxlRmxhZ3NfUHJlY2lzZVdpZHRocwBnbHlwaHMASXRlcmF0ZUdseXBocwBDbGVhciBzZXR0aW5ncwBXYW50U2F2ZUluaVNldHRpbmdzAFRhYmxlU2F2ZVNldHRpbmdzAFVwZGF0ZVNldHRpbmdzAFRhYmxlR2V0Qm91bmRTZXR0aW5ncwBJbUd1aVRhYmxlRmxhZ3NfTm9TYXZlZFNldHRpbmdzAHRhYmxlX2NvbHVtbnNfZmxhZ3MAQ29sdW1ucyBmbGFncwBUYWJJdGVtQnV0dG9uICYgTGVhZGluZy9UcmFpbGluZyBmbGFncwBjYWxsYmFja19kYXRhLkZsYWdzID09IGZsYWdzAENoZWNrYm94RmxhZ3MAUmFzdGVyaXplckZsYWdzAFRhYmxlR2V0Q29sdW1uRmxhZ3MAVGFibGVTZXR1cENvbHVtbkZsYWdzAENvbmZpZ0ZsYWdzAEJhY2tlbmRGbGFncwBEcmFnL1NsaWRlciBGbGFncwBCYWNrZW5kIEZsYWdzAFNjcm9sbGJhclNpemVzAFNjYWxlQWxsU2l6ZXMAdGFibGVfY29sdW1uc19mbGFnc19jaGVja2JveGVzAEFsbCBwcmltaXRpdmVzAFByaW1pdGl2ZXMAIyN2YWx1ZXMAUmF3IEhTViB2YWx1ZXMAU2V0dGluZ3MgcGFja2VkIGRhdGE6IFdpbmRvd3M6ICVkIGJ5dGVzAFNldHRpbmdzIHBhY2tlZCBkYXRhOiBUYWJsZXM6ICVkIGJ5dGVzAFNldHRpbmdzIHVucGFja2VkIGRhdGEgKC5pbmkpOiAlZCBieXRlcwBCdWZmZXIgY29udGVudHM6ICVkIGxpbmVzLCAlZCBieXRlcwAlczogJWQgZW50cmllcywgJWQgYnl0ZXMAMTIsMzQ1IGJ5dGVzACAyLDM0NSBieXRlcwBSZXNlcnZlQnl0ZXMAVGV4dHVyZXMARGF0YSBUeXBlcwBOdW1iZXIgb2YgbGluZXMAQnVsbGV0IHBvaW50IDIKT24gbXVsdGlwbGUgbGluZXMAQW50aS1hbGlhc2VkIGxpbmVzAEFkZCAxMDAwIGxpbmVzAFBsb3RMaW5lcwBBbnRpQWxpYXNlZExpbmVzAEZyYW1lIFRpbWVzAE1hbmlwdWxhdGluZyB3aW5kb3cgdGl0bGVzAEV4YW1wbGVzAFNob3cgd2luZG93cyByZWN0YW5nbGVzAFNob3cgdGFibGVzIHJlY3RhbmdsZXMAU2VsZWN0YWJsZXMATmVzdGVkIHRhYmxlcwBTaG93RGVtb1dpbmRvd1RhYmxlcwBTZXR0aW5nc1RhYmxlcwBbRGVidWddIEFkZCA1IGVudHJpZXMAU2l6aW5nIHBvbGljaWVzAEdseXBoUmFuZ2VzAGlvLkNvbmZpZ1dpbmRvd3NSZXNpemVGcm9tRWRnZXMASW1hZ2VzAEJhc2ljIHRyZWVzAFRyZWVzAEFkdmFuY2VkLCB3aXRoIFNlbGVjdGFibGUgbm9kZXMAVHJlZSBub2RlcwBOLWdvbiBzaWRlcwBTeW5jZWQgaW5zdGFuY2VzAE1ldHJpY3NSZW5kZXJWZXJ0aWNlcwBNZXRyaWNzUmVuZGVySW5kaWNlcwBZZXMARGVzACVzOiAnJXMnICVkIHZ0eCwgJWQgaW5kaWNlcywgJWQgY21kcwBJdGVyYXRlRHJhd0NtZHMAVGFibGVHZXRTb3J0U3BlY3MAQ29tcGFyZVdpdGhTb3J0U3BlY3MASW1HdWlUYWJsZVNvcnRTcGVjcwBJbUd1aVRhYmxlU29ydENvbHVtblNwZWNzACMjdGFicwBJbUd1aVRhYkJhckZsYWdzX0F1dG9TZWxlY3ROZXdUYWJzACMjVGFicwBjYW52YXMAQ2FudmFzAEZvbnREYXRhT3duZWRCeUF0bGFzAEltRm9udEF0bGFzAElzAAolKnMlLipzACAlLipzAEtleXMgbW9kczogJXMlcyVzJXMAU2Nyb2xsOiAoJS4yZi8lLjJmLCUuMmYvJS4yZikgU2Nyb2xsYmFyOiVzJXMAUG9wdXBJRDogJTA4eCwgV2luZG93OiAnJXMnJXMlcwBDb2x1bW5zR2l2ZW5XaWR0aDogJS4xZiwgQ29sdW1uc0F1dG9GaXRXaWR0aDogJS4xZiwgSW5uZXJXaWR0aDogJS4xZiVzACUuKnMlJWQlcwBkZWZpbmU6IF9fY2xhbmdfdmVyc2lvbl9fPSVzACVzIDB4JTA4WCAoJWQgdGFicyklcwBUYWJsZSAweCUwOFggKCVkIGNvbHVtbnMsIGluICclcycpJXMAJXMgJyVzJyVzAENvcHkgJXMAJXMgJWRweCAlcwAlcyAlcwBTd2FwICVzAERlYXIgSW1HdWkgJXMATW92ZSAlcwBTYXZlICVzACglNi4xZiwlNi4xZikgKCU2LjFmLCU2LjFmKSBTaXplICglNi4xZiwlNi4xZikgQ29sICVkICVzAE5hdkxhc3RDaGlsZE5hdldpbmRvdzogJXMAJSVzOiAlcwBpby5CYWNrZW5kUmVuZGVyZXJOYW1lOiAlcwBpby5CYWNrZW5kUGxhdGZvcm1OYW1lOiAlcwBOYXZJbnB1dFNvdXJjZTogJXMAQWN0aXZlSWQ6IDB4JTA4WC8weCUwOFggKCUuMmYgc2VjKSwgQWxsb3dPdmVybGFwOiAlZCwgU291cmNlOiAlcwBNb3VzZSBjdXJzb3IgJWQ6ICVzAEN1cnJlbnQgbW91c2UgY3Vyc29yID0gJWQ6ICVzAC0gJXMAKCU2LjFmLCU2LjFmKSAoJTYuMWYsJTYuMWYpIFNpemUgKCU2LjFmLCU2LjFmKSAlcwBGb3VyRm91ckZvdXIASXRlbSBGb3VyAGluZGV4X2Zyb21fcHRyAG9mZnNldF9mcm9tX3B0cgAjI015U3RyAEV4YW1wbGU6IFByb3BlcnR5IGVkaXRvcgBTaG93U3R5bGVFZGl0b3IARGVhciBJbUd1aSBTdHlsZSBFZGl0b3IAdmVjdG9yAFNob3dGb250U2VsZWN0b3IAU2hvd1N0eWxlU2VsZWN0b3IARm9udHMjI1NlbGVjdG9yAENvbG9ycyMjU2VsZWN0b3IAU2VwYXJhdG9yAGlvLk1vdXNlRHJhd0N1cnNvcgBTZXRNb3VzZUN1cnNvcgBHZXRNb3VzZUN1cnNvcgBSZW5kZXJNb3VzZUN1cnNvcgBlcnJvcgBDaXJjbGVTZWdtZW50TWF4RXJyb3IAQ2lyY2xlIFNlZ21lbnQgTWF4IEVycm9yAEFkZCBEZWJ1ZyBFcnJvcgAjI2NvbG9yAEJhY2tncm91bmQgY29sb3IAQWRkUmVjdEZpbGxlZE11bHRpQ29sb3IAVGFibGVTZXRCZ0NvbG9yACMjUmVmQ29sb3IAUG9wU3R5bGVDb2xvcgBQdXNoU3R5bGVDb2xvcgBXaXRoIFJlZiBDb2xvcgBUYWlsb3IAU2FpbG9yAFNsaWRlckJlaGF2aW9yAEJ1dHRvbkJlaGF2aW9yAERyYWdCZWhhdmlvcgBUcmVlTm9kZUJlaGF2aW9yAGRzdF9jb2x1bW4tPkRpc3BsYXlPcmRlciA9PSBkc3Rfb3JkZXIgLSByZW9yZGVyX2RpcgBBaXIAQ29ybmlmbG93ZXIASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNPdXRlcgBMaXN0Qm94Rm9vdGVyAENlbnRlcgBGaWx0ZXIAQWRkSW5wdXRDaGFyYWN0ZXIAV2F0ZXIAS2V5U3VwZXIAfkltR3VpTGlzdENsaXBwZXIASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNJbm5lcgBDb25maWdNZW1vcnlDb21wYWN0VGltZXIAbXlwaWNrZXIAIyNwcmV2aWV3aW5nX3BpY2tlcgAjI3BpY2tlcgBEZWFyIEltR3VpIE1ldHJpY3MvRGVidWdnZXIAYnVmZmVyAFZ0eEJ1ZmZlcgBJZHhCdWZmZXIAbG9uZ2VlZXIAX05vUmVvcmRlcgBUYWJCYXJRdWV1ZVJlb3JkZXIAV2luZG93Qm9yZGVyAFBvcHVwQm9yZGVyAEltR3VpQ29sb3JFZGl0RmxhZ3NfTm9Cb3JkZXIARnJhbWVCb3JkZXIAUmVzZXQgb3JkZXIAU2hvdyB3aW5kb3dzIGJlZ2luIG9yZGVyAGNvbHVtbi0+SW5kZXhXaXRoaW5FbmFibGVkU2V0IDw9IGNvbHVtbi0+RGlzcGxheU9yZGVyAFNvcnRPcmRlcgBSZW5kZXIARm9sZGVyAFNob3cgMm5kIGhlYWRlcgBDb2xsYXBzaW5nSGVhZGVyAFRhYmxlSGVhZGVyAG51bWJlcgBDdWN1bWJlcgBJbnB1dFNjYWxhcgBWU2xpZGVyU2NhbGFyAERyYWdTY2FsYXIAdW5zaWduZWQgY2hhcgBFdmVudENoYXIARWxsaXBzaXNDaGFyAFJlbmRlckNoYXIAUGF0aENsZWFyAE9oIGRlYXIAUGVhcgAjI21lbnViYXIASC1zY3JvbGxiYXIATm8gc2Nyb2xsYmFyAE5vIHRpdGxlYmFyAE1haW4gbWVudSBiYXIAVGFiIGJhcgBQb3BTdHlsZVZhcgBQdXNoU3R5bGVWYXIAQmVnaW5NZW51QmFyAEJlZ2luTWFpbk1lbnVCYXIARW5kTWFpbk1lbnVCYXIAIyNNYWluTWVudUJhcgBFbmRNZW51QmFyAHdpbmRvdy0+RmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX01lbnVCYXIAUHJvZ3Jlc3NCYXIATXlUYWJCYXIAQmVnaW5UYWJCYXIARW5kVGFiQmFyACMjVGFiQmFyAFByb2dyZXNzIEJhcgBEZWZhdWx0OiBVaW50OCArIEhTViArIEh1ZSBCYXIAV2l0aCBBbHBoYSBCYXIAbXlfc2VsZWN0X3BvcHVwAG15X2ZpbGVfcG9wdXAAbXlfdG9nZ2xlX3BvcHVwAGFub3RoZXIgcG9wdXAASSBhbSBhIHRvb2x0aXAgb3ZlciBhIHBvcHVwAE15UG9wdXAAR2V0TW91c2VQb3NPbk9wZW5pbmdDdXJyZW50UG9wdXAAQ2xvc2VDdXJyZW50UG9wdXAARmluZEJlc3RXaW5kb3dQb3NGb3JQb3B1cABCZWdpblBvcHVwAE9wZW5Qb3B1cABFbmRQb3B1cAB3aW5kb3ctPkZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19Qb3B1cABTdGFja2VkIFBvcHVwAEJlZ2luR3JvdXAARW5kR3JvdXAAU3RyZHVwAC4uL2ltZ3VpX2RyYXcuY3BwAC4uL2ltZ3VpX3dpZGdldHMuY3BwAC4uL2ltZ3VpX3RhYmxlcy5jcHAALi4vaW1ndWlfZGVtby5jcHAASGVsbG8uY3BwAC4uL2ltZ3VpLmNwcABjY2MyLmNwcABiYmIyLmNwcABhYWEyLmNwcABDYXB0dXJlTW91c2VGcm9tQXBwAENhcHR1cmVLZXlib2FyZEZyb21BcHAASW1HdWlUYWJsZUZsYWdzX1NpemluZ1N0cmV0Y2hQcm9wAFdpdGggRHJhZyBhbmQgRHJvcABOaW5jb21wb29wAENob3AAVG9wAFRyZWVQb3AASW1HdWlTbGlkZXJGbGFnc19BbHdheXNDbGFtcABEYXRhVHlwZUNsYW1wAEhlbHAASSBhbSBhIGZhbmN5IHRvb2x0aXAASSBhbSBhIHRvb2x0aXAAU2V0VG9vbHRpcABCZWdpblRvb2x0aXAARW5kVG9vbHRpcABHZXRDdXJyZW50V2luZG93UmVhZCgpLT5GbGFncyAmIEltR3VpV2luZG93RmxhZ3NfVG9vbHRpcABSZXNpemVHcmlwAExvbmcgdGV4dCB0aGF0IGlzIGxpa2VseSB0byBjbGlwAEltR3VpVGFibGVGbGFnc19Ob0NsaXAAU3RlcABTd2FwAFNldEl0ZW1BbGxvd092ZXJsYXAAX3NldEF0X0tleU1hcABfZ2V0QXRfS2V5TWFwAERhdGFUeXBlQXBwbHlPcABDYWxsYmFjayAlcCwgdXNlcl9kYXRhICVwAC9wYXRoL3R3bwBUd29Ud29Ud28ASXRlbSBUd28AVG9tYXRvAFNldCB0byB6ZXJvAGZvbwBEZWFyIEltR3VpIERlbW8AVHdvIGl0ZW1zOiBIZWxsbwBNb3JlIHNwYWNpbmc6IEhlbGxvAFNjcm9sbFRhcmdldENlbnRlclJhdGlvAE1hbmdvAG1hbGxpbmZvAERhdGFUeXBlR2V0SW5mbwBHZXRTdHlsZVZhckluZm8AVW5kbwBzdGJfdGV4dGVkaXRfZGlzY2FyZF9yZWRvAFJlZG8AQXZvY2FkbwBPbmx5IG1ha2VzIGEgZGlmZmVyZW5jZSBpZiB0aGUgcG9wdXAgaXMgbGFyZ2VyIHRoYW4gdGhlIGNvbWJvAEJlZ2luQ29tYm8ARW5kQ29tYm8ASVRFTTogQ29tYm8AUGF0aEJlemllclF1YWRyYXRpY0N1cnZlVG8AUGF0aEJlemllckN1YmljQ3VydmVUbwBQYXRoTGluZVRvAFBhdGhBcmNUbwBGb250Tm8AU3RlcE5vAEJyeW4AVW5rbm93bgBJc0tleURvd24AX3NldEF0X0tleXNEb3duAF9nZXRBdF9LZXlzRG93bgBJbUd1aVRhYkJhckZsYWdzX0ZpdHRpbmdQb2xpY3lSZXNpemVEb3duAElzQW55TW91c2VEb3duAElzTW91c2VEb3duAF9zZXRBdF9Nb3VzZURvd24AX2dldEF0X01vdXNlRG93bgAjU291cmNlRXh0ZXJuAHdhcm4ASGVhZGVyIHdpdGggYSBjbG9zZSBidXR0b24AdGhpcyBpcyBhIDMwMC13aWRlIGJ1dHRvbgBJbUd1aUNvbWJvRmxhZ3NfTm9BcnJvd0J1dHRvbgAjI0NvbG9yQnV0dG9uAEltR3VpVGFiQmFyRmxhZ3NfVGFiTGlzdFBvcHVwQnV0dG9uAFRhYkl0ZW1CdXR0b24ARmlsbEJ1dHRvbgBTbWFsbEJ1dHRvbgBJbUd1aVRhYkJhckZsYWdzX05vQ2xvc2VXaXRoTWlkZGxlTW91c2VCdXR0b24AVGFiTWluV2lkdGhGb3JDbG9zZUJ1dHRvbgBJbnZpc2libGVCdXR0b24ASW1hZ2VCdXR0b24AQnV0dG9uOiAlcyMjI0J1dHRvbgBBZHZhbmNlZCAmIENsb3NlIEJ1dHRvbgBJVEVNOiBCdXR0b24AV2F0ZXJtZWxvbgBEYWlrb24ARGVzY3JpcHRpb24Ac3RkOjpleGNlcHRpb24AU29tZU9wdGlvbgBBbGlnbiBsYWJlbCB3aXRoIGN1cnJlbnQgWCBwb3NpdGlvbgBXaW5kb3dNZW51QnV0dG9uUG9zaXRpb24AQ29sb3JCdXR0b25Qb3NpdGlvbgBDb21wbGV0aW9uAFRhYmxlR2V0Q29sdW1uTmV4dFNvcnREaXJlY3Rpb24AVGFibGVTZXRDb2x1bW5Tb3J0RGlyZWN0aW9uAFRhYmxlR2V0Q29sdW1uQXZhaWxTb3J0RGlyZWN0aW9uAEhhc1NlbGVjdGlvbgBTZWxlY3Rpb24gU3RhdGU6IE11bHRpcGxlIFNlbGVjdGlvbgBTZWxlY3Rpb24gU3RhdGU6IFNpbmdsZSBTZWxlY3Rpb24AQWN0aW9uAF9fY3hhX2d1YXJkX2FjcXVpcmUgZGV0ZWN0ZWQgcmVjdXJzaXZlIGluaXRpYWxpemF0aW9uAERpc2FibGUgdHJlZSBpbmRlbnRhdGlvbgBDb25maWd1cmF0aW9uAF9nZXRBdF9LZXlzRG93bkR1cmF0aW9uAF9nZXRBdF9OYXZJbnB1dHNEb3duRHVyYXRpb24AX2dldEF0X01vdXNlRG93bkR1cmF0aW9uAERlY29yYXRpb24AQ29uZmlnL0J1aWxkIEluZm9ybWF0aW9uAEdldFZlcnNpb24AJTA0ZDogc2Nyb2xsYWJsZSByZWdpb24AIyNTY3JvbGxpbmdSZWdpb24AQWRkTmdvbgBUcmVlIGluIGNvbHVtbgBUYWJsZU5leHRDb2x1bW4AVGFibGVTZXR1cENvbHVtbgAjI21pbgAoKGNoYXIqKShzdGF0ZS0+dW5kb19yZWMgKyBzdGF0ZS0+cmVkb19wb2ludCkpID49IGJ1Zl9iZWdpbgBHZXRTcGFuUHRyQmVnaW4ATG9nQmVnaW4ATWFpbgBHZXRDbGlwUmVjdE1pbgBHZXRJdGVtUmVjdE1pbgBHZXRXaW5kb3dDb250ZW50UmVnaW9uTWluAHJpZ2h0LWFsaWduAEJ1dHRvblRleHRBbGlnbgBTZWxlY3RhYmxlVGV4dEFsaWduAFdpbmRvd1RpdGxlQWxpZ24AQ29sdW1uc0NvbnRlbnRVbmZyb3plbgBDb2x1bW5zQ29udGVudEZyb3plbgBJdGVtc0Zyb3plbgBJc1BvcHVwT3BlbgBTZXROZXh0SXRlbU9wZW4ASXNJdGVtVG9nZ2xlZE9wZW4AcG9zIDw9IHRleHRfbGVuAFB1c2hDbGlwUmVjdEZ1bGxTY3JlZW4ASGlkZGVuAHBvcyArIGJ5dGVzX2NvdW50IDw9IEJ1ZlRleHRMZW4AbmFuAFNldENsaXBib2FyZFRleHRGbgBHZXRDbGlwYm9hcmRUZXh0Rm4AV2VpZ2h0PSVmJW4AT3JkZXI9JWQlbgBXaWR0aD0lZCVuAFZpc2libGU9JWQlbgBDb2x1bW4gJWQlbgBTb3J0PSVkJWMlbgBVc2VySUQ9MHglMDhYJW4Ac2xpZGVyIGVudW0AUGx1bQBBcXVhcml1bQBJbVRyYW5zZm9ybQBCb3R0b20AQ3VzdG9tACMjaXRlbQBTb21lIG1lbnUgaXRlbQBNZW51IGl0ZW0AVGV4dCBhbGlnbmVkIHRvIGZyYW1lZCBpdGVtAFNvbWUgZnJhbWVkIGl0ZW0ASVRFTTogTWVudUl0ZW0AQmVnaW5Qb3B1cENvbnRleHRJdGVtAE5hdlNjb3JlSXRlbQBCZWdpblRhYkl0ZW0ARW5kVGFiSXRlbQBQbG90SGlzdG9ncmFtAEJyZWFtAEtleUN0cmwAYm9vbABDdXJ2ZVRlc3NlbGxhdGlvblRvbABmaXNoX2hhdC5pbmwAc2xpZGVyIHU4IGZ1bGwAc2xpZGVyIHM4IGZ1bGwAc2xpZGVyIHUxNiBmdWxsAHNsaWRlciBzMTYgZnVsbABzbGlkZXIgdTY0IGZ1bGwAc2xpZGVyIHM2NCBmdWxsAHNsaWRlciB1MzIgZnVsbABzbGlkZXIgczMyIGZ1bGwAU2l6ZUZ1bGwAQXV0by1zY3JvbGwASW1HdWlUYWJCYXJGbGFnc19GaXR0aW5nUG9saWN5U2Nyb2xsAEFudGktYWxpYXNlZCBmaWxsAEFudGlBbGlhc2VkRmlsbAAjI2NlbGwAc21hbGwAIyNjaGVja2FsbABPcGVuIGFsbABSZW1vdmUgYWxsAENsb3NlIGFsbABSZXNpemVBbGwAU2l6ZSBhbGwgY29sdW1ucyB0byBkZWZhdWx0IyMjU2l6ZUFsbABTaXplIGFsbCBjb2x1bW5zIHRvIGZpdCMjI1NpemVBbGwAV2luZG93U2V0dGluZ3NIYW5kbGVyX1dyaXRlQWxsAEdldENvbnRlbnRSZWdpb25BdmFpbABieXRlc19wZXJfcGl4ZWwAR2V0Rm9udFRleFV2V2hpdGVQaXhlbABDbG9zZVBvcHVwVG9MZXZlbABNYWNrZXJlbABTZXRDdXJyZW50Q2hhbm5lbABNb3VzZVdoZWVsAERlZmF1bHQ6IEZsb2F0ICsgSERSICsgSHVlIFdoZWVsAERpc2FibGUgTW91c2UgV2hlZWwAQ2FuY2VsAGxhYmVsAGVtc2NyaXB0ZW46OnZhbABob3Jpem9udGFsACMjb3JpZ2luYWwAT3JpZ2luYWwAaGV4YWRlY2ltYWwAQ29udGVudElkZWFsAENvbHVtbnNDb250ZW50SGVhZGVyc0lkZWFsAENvbnRlbnRTaXplSWRlYWwAQmVnaW5Qb3B1cE1vZGFsAHZlcnRpY2FsAFNhdmUgdG8gZGlzawBDaGVja01hcmsAU3R5bGVDb2xvcnNEYXJrAG5leHRfY2h1bmsAc2hyaW5rAGlvLkNvbmZpZ0lucHV0VGV4dEN1cnNvckJsaW5rAFBpbmsAbm8gYmxhbmsAUG9sbG9jawBIYWRkb2NrAE9wZW5Qb3B1cE9uSXRlbUNsaWNrAElURU06IFRyZWVOb2RlIHcvIEltR3VpVHJlZU5vZGVGbGFnc19PcGVuT25Eb3VibGVDbGljawBUcmFjawBGaW5kR2x5cGhOb0ZhbGxiYWNrAFVzZXJDYWxsYmFjawBNeVJlc2l6ZUNhbGxiYWNrAEFkZENhbGxiYWNrAFJlc2l6ZSBDYWxsYmFjawBwb3BfYmFjawBLaXdpAGltZ3VpAEFib3V0IERlYXIgSW1HdWkASW1HdWlUYWJsZUZsYWdzX1NvcnRNdWx0aQBkZXNrdG9wLmluaQBpbWd1aS5pbmkAIyNJbmkAQnJvY2NvbGkAQmliaQBQb3M9JWksJWkAU2l6ZT0laSwlaQBFYXJ0aABEZWZhdWx0IERlcHRoAEJvdGgAbGVuZ3RoAGJ5dGVMZW5ndGgAaW5uZXJfd2lkdGgAdGFibGVfaXRlbV93aWR0aABXcmFwIHdpZHRoAEl0ZW0gd2lkdGgAVGV4V2lkdGgAR2V0V2luZG93V2lkdGgAX05vSGVhZGVyV2lkdGgAR2V0V2luZG93Q29udGVudFJlZ2lvbldpZHRoAFRhYmxlU2V0Q29sdW1uV2lkdGgAR2V0Q29sdW1uV2lkdGgAVGFibGVVcGRhdGVDb2x1bW5zV2VpZ2h0RnJvbVdpZHRoAFNldE5leHRJdGVtV2lkdGgAUG9wSXRlbVdpZHRoAFB1c2hJdGVtV2lkdGgAQ2FsY0l0ZW1XaWR0aABJbUd1aVRyZWVOb2RlRmxhZ3NfU3BhbkZ1bGxXaWR0aABJbUd1aVRyZWVOb2RlRmxhZ3NfU3BhbkF2YWlsV2lkdGgAV2lkZ2V0cyBXaWR0aABQYXRoACNUcmVlUHVzaABMb2dGaW5pc2gAVGlsZWZpc2gAZ2x5cGgASW1Gb250R2x5cGgAQ3JlYXRlR2x5cGgARmluZEdseXBoAGFhYWFhYWFhIGJiYmJiYmJiLCBjIGNjY2NjY2NjLGRkZGRkZGRkLiBkIGVlZWVlZWVlICAgZmZmZmZmZmYuIGdnZ2dnZ2dnIWhoaGhoaGhoAHNsaWRlciBmbG9hdCBoaWdoAHNsaWRlciBkb3VibGUgaGlnaABzbGlkZXIgdTY0IGhpZ2gAc2xpZGVyIHM2NCBoaWdoAHNsaWRlciB1MzIgaGlnaABzbGlkZXIgczMyIGhpZ2gAUmVzaXphYmxlLCBzdHJldGNoAF9XaWR0aFN0cmV0Y2gAbXkgc2FpbG9yIGlzIHJpY2gAUmljaABLTyBCbGFoYmxhaABPSyBCbGFoYmxhaABUaGlzIGlzIHRoZSBDdWN1bWJlciB0YWIhCmJsYWggYmxhaCBibGFoIGJsYWggYmxhaABUaGlzIGlzIHRoZSBBdm9jYWRvIHRhYiEKYmxhaCBibGFoIGJsYWggYmxhaCBibGFoAFRoaXMgaXMgdGhlIEJyb2Njb2xpIHRhYiEKYmxhaCBibGFoIGJsYWggYmxhaCBibGFoAEJsYWggYmxhaCBibGFoAEJsYWggYmxhaApCbGFoIEJsYWgALi4vaW1zdGJfdGV4dGVkaXQuaABmaXNoX2hhdC5oAEhlbGxvLmgALi4vaW1ndWlfaW50ZXJuYWwuaAAuLlxpbWd1aS5oAC4uL2ltZ3VpLmgAYWJjLmgAc2xpZGVyIGZsb2F0IGxvdyBsb2cAc2xpZGVyIGRvdWJsZSBsb3cgbG9nAGRyYWcgZmxvYXQgbG9nAGRyYWcgZG91YmxlIGxvZwAlaSBUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nAEV4YW1wbGU6IExvZwBDb3B5IG9mIEltYWdlMDAxLnBuZwBDb3B5IG9mIEltYWdlMDAxIChGaW5hbDIpLnBuZwBbZXJyb3JdIHNvbWV0aGluZyB3ZW50IHdyb25nAFRhYmxlQm9yZGVyU3Ryb25nAHVuc2lnbmVkIGxvbmcASG92ZXJlZC9BY3RpdmUgdGVzdHMgYWZ0ZXIgQmVnaW4oKSBmb3IgdGl0bGUgYmFyIHRlc3RpbmcAdGFibGVfc29ydGluZwBTb3J0aW5nAHN0ZDo6d3N0cmluZwBiYXNpY19zdHJpbmcAc3RkOjpzdHJpbmcAc3RkOjp1MTZzdHJpbmcAc3RkOjp1MzJzdHJpbmcARGF0YVR5cGVGb3JtYXRTdHJpbmcAU2hvdyBJbURyYXdDbWQgYm91bmRpbmcgYm94ZXMgd2hlbiBob3ZlcmluZwBTaG93IEltRHJhd0NtZCBtZXNoIHdoZW4gaG92ZXJpbmcARmlsdGVyaW5nAEV4YW1wbGU6IEN1c3RvbSByZW5kZXJpbmcAUmVuZGVyaW5nAElzV2luZG93QXBwZWFyaW5nAFZlcnRpY2FsIHNjcm9sbGluZywgd2l0aCBjbGlwcGluZwBDYWxjTGlzdENsaXBwaW5nAHdvcmQtd3JhcHBpbmcAV29yZC13cmFwcGluZwBXb3JkIFdyYXBwaW5nAEhvcml6b250YWwgc2Nyb2xsaW5nACMjSG9yaXpvbnRhbFNjcm9sbGluZwAjI1ZlcnRpY2FsU2Nyb2xsaW5nAEhvcml6b250YWwgU2Nyb2xsaW5nAExheW91dCAmIFNjcm9sbGluZwBGb250QWxsb3dVc2VyU2NhbGluZwBDYXB0dXJlL0xvZ2dpbmcASXNNb3VzZURyYWdnaW5nAFdpbmRvd1JvdW5kaW5nAFNjcm9sbGJhclJvdW5kaW5nAFBvcHVwUm91bmRpbmcARnJhbWVSb3VuZGluZwBDaGlsZFJvdW5kaW5nAEdyYWJSb3VuZGluZwBUYWJSb3VuZGluZwAhd2luZG93LT5EQy5NZW51QmFyQXBwZW5kaW5nAF9QcmVmZXJTb3J0RGVzY2VuZGluZwBfTm9Tb3J0RGVzY2VuZGluZwBfUHJlZmVyU29ydEFzY2VuZGluZwBfTm9Tb3J0QXNjZW5kaW5nAHRhYmxlX3BhZGRpbmcARGlzcGxheVdpbmRvd1BhZGRpbmcAQ2VsbFBhZGRpbmcAQWxpZ25UZXh0VG9GcmFtZVBhZGRpbmcAVG91Y2hFeHRyYVBhZGRpbmcARGlzcGxheVNhZmVBcmVhUGFkZGluZwBTYWZlIEFyZWEgUGFkZGluZwBJbmRlbnRTcGFjaW5nAEl0ZW1Jbm5lclNwYWNpbmcAQ29sdW1uc01pblNwYWNpbmcASXRlbVNwYWNpbmcAR2V0VHJlZU5vZGVUb0xhYmVsU3BhY2luZwBHZXRUZXh0TGluZUhlaWdodFdpdGhTcGFjaW5nAEdldEZyYW1lSGVpZ2h0V2l0aFNwYWNpbmcAR2x5cGhFeHRyYVNwYWNpbmcAVGFiYmluZwBJbUZvbnRDb25maWcAJS4wZiBkZWcAc2hvd193aWRnZXRfZnJhbWVfYmcASG9sZGluZyBtZSBjbGVhcnMgdGhlCnRoZSBrZXlib2FyZCBjYXB0dXJlIGZsYWcASG92ZXJpbmcgbWUgc2V0cyB0aGUKa2V5Ym9hcmQgY2FwdHVyZSBmbGFnAE5hdlVwZGF0ZUFueVJlcXVlc3RGbGFnAEV2ZW50RmxhZwBQb3BJdGVtRmxhZwBQdXNoSXRlbUZsYWcAV2luZG93QmcAVGFibGVSb3dCZwBJbUd1aVRhYmxlRmxhZ3NfUm93QmcAVGFibGVIZWFkZXJCZwBTY3JvbGxiYXJCZwBNZW51QmFyQmcAUG9wdXBCZwBNb2RhbFdpbmRvd0RpbUJnAE5hdldpbmRvd2luZ0RpbUJnAEZyYW1lQmcAVGl0bGVCZwBDaGlsZEJnAFRleHRTZWxlY3RlZEJnACVkOiAlOC40ZwolZDogJTguNGcAYnVmAG15X3N0ci0+YmVnaW4oKSA9PSBkYXRhLT5CdWYAaW5mAEFsaWduIHRvIHJpZ2h0IGVkZ2UgbWludXMgaGFsZgAlbGYAc2Fucy1zZXJpZgAjI29mZgBSZXZlcnQgUmVmAFNhdmUgUmVmACUuOGYAIFdlaWdodD0lLjRmAFY6JTAuM2YAUzolMC4zZgBSOiUwLjNmAEg6JTAuM2YARzolMC4zZgBCOiUwLjNmAEE6JTAuM2YAcmF0aW8gPSAlLjNmACVzOiAlLjNmAEg6ICUuM2YsIFM6ICUuM2YsIFY6ICUuM2YASDogJS4zZiwgUzogJS4zZiwgVjogJS4zZiwgQTogJS4zZgAlLjAyZgBzdHlsZS5XaW5kb3dQYWRkaW5nOiAlLjJmLCUuMmYAc3R5bGUuRnJhbWVQYWRkaW5nOiAlLjJmLCUuMmYAc3R5bGUuSXRlbUlubmVyU3BhY2luZzogJS4yZiwlLjJmAHN0eWxlLkl0ZW1TcGFjaW5nOiAlLjJmLCUuMmYAaW8uRGlzcGxheVNpemU6ICUuMmYsJS4yZgBpby5EaXNwbGF5RnJhbWVidWZmZXJTY2FsZTogJS4yZiwlLjJmAE9mZnNldCAlLjJmAFNldHRpbmdzRGlydHlUaW1lciAlLjJmAEF2YWlsICUuMmYAV2lkdGggJS4yZgBbJWRdICUuMmYAbWluX3Jvd19oZWlnaHQgPSAlLjJmAHN0eWxlLkZyYW1lUm91bmRpbmc6ICUuMmYAc3R5bGUuV2luZG93Qm9yZGVyU2l6ZTogJS4yZgBzdHlsZS5GcmFtZUJvcmRlclNpemU6ICUuMmYATXlDb2xvciMjMmYAU2Nyb2xsICUuMWYvJS4xZiAlLjFmLyUuMWYAJTAyZCVjIFRhYiAweCUwOFggJyVzJyBPZmZzZXQ6ICUuMWYsIFdpZHRoOiAlLjFmLyUuMWYAaW8uQ29uZmlnTWVtb3J5Q29tcGFjdFRpbWVyID0gJS4xZgBNb3VzZSB3aGVlbDogJS4xZgBDZWxsUGFkZGluZ1g6ICUuMWYsIENlbGxTcGFjaW5nWDogJS4xZi8lLjFmLCBPdXRlclBhZGRpbmdYOiAlLjFmAEFkdmFuY2VYOiAlLjFmAFc6ICUuMWYAJS4xMGYAKihjb25zdCBmbG9hdCopcF9taW4gPj0gLTMuNDAyODIzNDdlKzM4RiAvIDIuMGYgJiYgKihjb25zdCBmbG9hdCopcF9tYXggPD0gMy40MDI4MjM0N2UrMzhGIC8gMi4wZgAqKGNvbnN0IGRvdWJsZSopcF9taW4gPj0gLTEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4IC8gMi4wZiAmJiAqKGNvbnN0IGRvdWJsZSopcF9tYXggPD0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDggLyAyLjBmAGNlbnRlcl95X3JhdGlvID49IDAuMGYgJiYgY2VudGVyX3lfcmF0aW8gPD0gMS4wZgBjZW50ZXJfeF9yYXRpbyA+PSAwLjBmICYmIGNlbnRlcl94X3JhdGlvIDw9IDEuMGYAY29sdW1uLT5TdHJldGNoV2VpZ2h0ID4gMC4wZgBJdGVtc0hlaWdodCA+IDAuMGYAdmlzaWJsZV93ZWlnaHQgPiAwLjBmICYmIHZpc2libGVfd2lkdGggPiAwLjBmAGNvbHVtbl8wX3dpZHRoID4gMC4wZiAmJiBjb2x1bW5fMV93aWR0aCA+IDAuMGYAdGFiLT5Db250ZW50V2lkdGggPiAwLjBmAHRhYmxlLT5NaW5Db2x1bW5XaWR0aCA+IDAuMGYAc2Nyb2xsYmFyX3NpemUgPiAwLjBmAHNjYWxlID4gMC4wZgBmb250LT5TY2FsZSA+IDAuMGYASW1NYXgoc2l6ZV9jb250ZW50c192LCBzaXplX2F2YWlsX3YpID4gMC4wZgBpbm5lcl93aWR0aCA+PSAwLjBmAHRhYmxlLT5Jbm5lcldpbmRvdy0+V2luZG93UGFkZGluZy54ID09IDAuMGYgJiYgdGFibGUtPklubmVyV2luZG93LT5XaW5kb3dQYWRkaW5nLnkgPT0gMC4wZiAmJiB0YWJsZS0+SW5uZXJXaW5kb3ctPldpbmRvd0JvcmRlclNpemUgPT0gMC4wZgBJdGVtc0hlaWdodCA8PSAwLjBmAHNpemVfYXJnLnggIT0gMC4wZiAmJiBzaXplX2FyZy55ICE9IDAuMGYAJS4wZnglLjBmACVzCiUuMGYvJS4wZgBSZWZTY2FsZT0lZgBhdmcgJWYAQXNjZW50OiAlZiwgRGVzY2VudDogJWYsIEhlaWdodDogJWYAVW5kZXJseWluZyBmbG9hdCB2YWx1ZTogJWYAVGFibGVTb3J0U3BlY3NTYW5pdGl6ZQBBdXRvLXJlc2l6ZQBObyByZXNpemUAQWx3YXlzQXV0b1Jlc2l6ZQBfTm9SZXNpemUASW1HdWlUYWJsZUZsYWdzX05vQm9yZGVyc0luQm9keVVudGlsUmVzaXplAEV4YW1wbGU6IENvbnN0cmFpbmVkIFJlc2l6ZQBvdXRlcl9zaXplAGFwcGx5X25ld190ZXh0X2xlbmd0aCA8PSBidWZfc2l6ZQBFeHBsaWNpdCBjb250ZW50IHNpemUAT3V0ZXIgc2l6ZQBhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAEluaXRpYWxpemUARGlzcGxheVNpemUAR2V0VmVydGV4U2l6ZQBJbURyYXdJZHhTaXplAFNldE5leHRXaW5kb3dTaXplAFNldFdpbmRvd1NpemUAR2V0V2luZG93U2l6ZQBDYWxjVGV4dFNpemUASW1EcmF3VmVydFNpemUAR2V0Rm9udFNpemUAU2V0TmV4dFdpbmRvd0NvbnRlbnRTaXplAEN1cnJlbnRTaXplAEdldEl0ZW1SZWN0U2l6ZQAjI091dGVyU2l6ZQBXaW5kb3dCb3JkZXJTaXplAFBvcHVwQm9yZGVyU2l6ZQBGcmFtZUJvcmRlclNpemUAQ2hpbGRCb3JkZXJTaXplAFRhYkJvcmRlclNpemUAU2Nyb2xsYmFyU2l6ZQBXaW5kb3dNaW5TaXplAEdyYWJNaW5TaXplAEJ1ZlNpemUAU2V0V2luZG93TmFtZVNpemUASW1HdWlTdHlsZVNpemUARGVzaXJlZFNpemUASW1HdWlJT1NpemUASW1WZWM0U2l6ZQBJbVZlYzJTaXplAGcuV2luZG93c0ZvY3VzT3JkZXIuU2l6ZSA9PSBnLldpbmRvd3MuU2l6ZQBjb2x1bW5faW5kZXggPCBjb2x1bW5zLT5Db2x1bW5zLlNpemUAKGludClkcmF3X2xpc3QtPl9WdHhDdXJyZW50SWR4ID09IGRyYXdfbGlzdC0+VnR4QnVmZmVyLlNpemUAZHJhd19saXN0LT5WdHhCdWZmZXIuU2l6ZSA9PSAwIHx8IGRyYXdfbGlzdC0+X1Z0eFdyaXRlUHRyID09IGRyYXdfbGlzdC0+VnR4QnVmZmVyLkRhdGEgKyBkcmF3X2xpc3QtPlZ0eEJ1ZmZlci5TaXplAGRyYXdfbGlzdC0+SWR4QnVmZmVyLlNpemUgPT0gMCB8fCBkcmF3X2xpc3QtPl9JZHhXcml0ZVB0ciA9PSBkcmF3X2xpc3QtPklkeEJ1ZmZlci5EYXRhICsgZHJhd19saXN0LT5JZHhCdWZmZXIuU2l6ZQBnLldpbmRvd3MuU2l6ZSA9PSBnLldpbmRvd3NUZW1wU29ydEJ1ZmZlci5TaXplAGRzdF90bXAgPT0gZy5EcmF3Q2hhbm5lbHNUZW1wTWVyZ2VCdWZmZXIuRGF0YSArIGcuRHJhd0NoYW5uZWxzVGVtcE1lcmdlQnVmZmVyLlNpemUAcmVtYWluaW5nID49IDAgJiYgcmVtYWluaW5nIDwgZy5PcGVuUG9wdXBTdGFjay5TaXplAHRhYi0+TmFtZU9mZnNldCAhPSAtMSAmJiAoaW50KXRhYi0+TmFtZU9mZnNldCA8IFRhYnNOYW1lcy5CdWYuU2l6ZQBvZmYgPj0gNCAmJiBvZmYgPCBCdWYuU2l6ZQBwID49IEJ1Zi5EYXRhICYmIHAgPCBCdWYuRGF0YSArIEJ1Zi5TaXplAHRleHRfbGVuIDwgb2JqLT5UZXh0Vy5TaXplAG5ld19zaXplIDw9IFNpemUAaSA+PSAwICYmIGkgPCBTaXplAGl0ID49IERhdGEgJiYgaXQgPD0gRGF0YSArIFNpemUAaXQgPj0gRGF0YSAmJiBpdCA8IERhdGEgKyBTaXplAFRhYmxlU2V0dXBTY3JvbGxGcmVlemUAQ3VydmUAUHJpbVVucmVzZXJ2ZQBQcmltUmVzZXJ2ZQBObyBtb3ZlAE1vdmUATmF2QWN0aXZlAFdhc0FjdGl2ZQBTZXBhcmF0b3JBY3RpdmUASGVhZGVyQWN0aXZlAGcuQWN0aXZlSWQgPT0gaWQgfHwgZy5BY3RpdmVJZCA9PSAwIHx8IGcuRHJhZ0Ryb3BBY3RpdmUAUmVzaXplR3JpcEFjdGl2ZQBCdXR0b25BY3RpdmUASXNBbnlJdGVtQWN0aXZlAElzSXRlbUFjdGl2ZQBGcmFtZUJnQWN0aXZlAFRpdGxlQmdBY3RpdmUAVGFiVW5mb2N1c2VkQWN0aXZlAFNsaWRlckdyYWJBY3RpdmUAU2Nyb2xsYmFyR3JhYkFjdGl2ZQBUYWJBY3RpdmUAcGFyZW50X3dpbmRvdyAmJiBwYXJlbnRfd2luZG93LT5BY3RpdmUASXRlbSBGaXZlAFNhdmUAZy5DdXJyZW50V2luZG93LT5Jc0ZhbGxiYWNrV2luZG93ID09IHRydWUAT3BhcXVlAGJsdWUAIyN2YWx1ZQAjI1ZhbHVlAGh1ZQAjI3BhbGV0dGUAUGFsZXR0ZQBQYXN0ZQBJbUd1aVRhYmxlRmxhZ3NfU29ydFRyaXN0YXRlAEludGVybmFsIHN0YXRlAHJvdGF0ZQBTZXRSb3RhdGUAR2V0SW5wdXRUZXh0U3RhdGUASW1HdWlJbnB1dFRleHRTdGF0ZQBDb21wYXJlV2l0aEN1cnJlbnRTdGF0ZQBLZXlib2FyZCwgTW91c2UgJiBOYXZpZ2F0aW9uIFN0YXRlAEZyYW1lcmF0ZQBBbmltYXRlAEFic3F1YXR1bGF0ZQB0cmFuc2xhdGUASXRlcmF0ZUdseXBoVG9DcmVhdGUATmF2VXBkYXRlAFBhdGhMaW5lVG9NZXJnZUR1cGxpY2F0ZQBLZXlSZXBlYXRSYXRlAEluaVNhdmluZ1JhdGUAaW8uQ29uZmlnRmxhZ3M6IE5vTW91c2UAV2FudENhcHR1cmVNb3VzZQBzbGlkZXIgdTggcmV2ZXJzZQBzbGlkZXIgczggcmV2ZXJzZQBzbGlkZXIgdTY0IHJldmVyc2UAc2xpZGVyIHM2NCByZXZlcnNlAHNsaWRlciB1MzIgcmV2ZXJzZQBzbGlkZXIgczMyIHJldmVyc2UATm8gY29sbGFwc2UATm8gY2xvc2UAQ2xvc2UAZy5EcmFnRHJvcFdpdGhpblRhcmdldCA9PSBmYWxzZQB0YWJsZS0+SXNVbmZyb3plblJvd3MgPT0gZmFsc2UAZy5XaXRoaW5FbmRDaGlsZCA9PSBmYWxzZQB0YWJsZS0+TWVtb3J5Q29tcGFjdGVkID09IGZhbHNlAGcuTG9nRW5hYmxlZCA9PSBmYWxzZQB0YWJsZSAhPSAwTCAmJiB0YWJsZS0+SXNMYXlvdXRMb2NrZWQgPT0gZmFsc2UAZXJhc2UAdXBwZXJjYXNlAEF0bGFzIHRleHR1cmUAQW50aS1hbGlhc2VkIGxpbmVzIHVzZSB0ZXh0dXJlAEZpcmUAZW50ZXIgdGV4dCBoZXJlAFRvb2x0aXAgaGVyZQBTZXRLZXlib2FyZEZvY3VzSGVyZQBDdXN0b206IEFsd2F5cyBTcXVhcmUARGF0YVR5cGVDb21wYXJlACMjb3V0cHV0X3R5cGUAIyNzaG93X3dpbmRvd3NfcmVjdF90eXBlACMjc2hvd190YWJsZV9yZWN0c190eXBlAFRlc3QgdHlwZQByb3cgYmcgdHlwZQBjZWxsIGJnIHR5cGUASXRlbSBUeXBlAGcuV2l0aGluRnJhbWVTY29wZQBMb2dTbGlkZXJEZWFkem9uZQB0YXJnZXQgIT0gSW1HdWlUYWJsZUJnVGFyZ2V0X05vbmUAZy5OYXZNb3ZlRGlyICE9IEltR3VpRGlyX05vbmUgJiYgZy5OYXZNb3ZlQ2xpcERpciAhPSBJbUd1aURpcl9Ob25lAHNvcnRfZGlyZWN0aW9uICE9IEltR3VpU29ydERpcmVjdGlvbl9Ob25lAGcuTmF2TW92ZVJlcXVlc3RGb3J3YXJkID09IEltR3VpTmF2Rm9yd2FyZF9Ob25lAC9wYXRoL29uZQBMaWtlIHRoaXMgb25lAFJlbW92ZSBvbmUAQWRkUG9seWxpbmUASW5wdXRUZXh0TXVsdGlsaW5lAFJlbmRlcmluZyBtb3JlIHRleHQgaW50byB0aGUgc2FtZSBsaW5lAEJ5IGRlZmF1bHQsIFNlbGVjdGFibGVzIHVzZXMgc3R5bGUuU2VsZWN0YWJsZVRleHRBbGlnbiBidXQgaXQgY2FuIGJlIG92ZXJyaWRkZW4gb24gYSBwZXItaXRlbSBiYXNpcyB1c2luZyBQdXNoU3R5bGVWYXIoKS4gWW91J2xsIHByb2JhYmx5IHdhbnQgdG8gYWx3YXlzIGtlZXAgeW91ciBkZWZhdWx0IHNpdHVhdGlvbiB0byBsZWZ0LWFsaWduIG90aGVyd2lzZSBpdCBiZWNvbWVzIGRpZmZpY3VsdCB0byBsYXlvdXQgbXVsdGlwbGUgaXRlbXMgb24gYSBzYW1lIGxpbmUAQmxhaW5lAEltR3VpSW5wdXRUZXh0RmxhZ3NfQ3RybEVudGVyRm9yTmV3TGluZQBTYW1lTGluZQBBZGRMaW5lAGxlZnQgcGFuZQBTaXplIGNvbHVtbiB0byBmaXQjIyNTaXplT25lAE9uZU9uZU9uZQBJdGVtIE9uZQBEb24ndCBhc2sgbWUgbmV4dCB0aW1lAEdldFRpbWUATW91c2VEb3VibGVDbGlja1RpbWUARGVsdGFUaW1lAFVwZGF0ZU1vdXNlTW92aW5nV2luZG93TmV3RnJhbWUAR2V0QWN0aXZlSWRQcmV2aW91c0ZyYW1lAEdldEhvdmVyZWRJZFByZXZpb3VzRnJhbWUATmF2RW5kRnJhbWUAQmVnaW5DaGlsZEZyYW1lAEVuZENoaWxkRnJhbWUASW5pRmlsZW5hbWUATG9nRmlsZW5hbWUASW1HdWlUYWJsZUZsYWdzX1NpemluZ1N0cmV0Y2hTYW1lAEltR3VpVGFibGVGbGFnc19TaXppbmdGaXhlZFNhbWUARm9udE5hbWUAR2V0U3R5bGVDb2xvck5hbWUAQmFja2VuZFJlbmRlcmVyTmFtZQBUYWJsZUdldENvbHVtbk5hbWUAQmFja2VuZFBsYXRmb3JtTmFtZQBHZXRUYWJOYW1lAC0gb3IgbWUASG92ZXIgb3ZlciBtZQBDbGljayBtZQBGb250U3R5bGUAR2V0U3R5bGUASW1HdWlTdHlsZQBBbmltYXRlZCB0aXRsZSAlYyAlZCMjI0FuaW1hdGVkVGl0bGUAQSBSYXRoZXIgTG9uZyBUaXRsZQBQaW5lYXBwbGUAQXBwbGUAQ2xvc2UgQ29uc29sZQBFeGFtcGxlOiBDb25zb2xlAEF1ZGlvIGZpbGUAU3lzdGVtIGZpbGUASW1hZ2UgZmlsZQBTaG93RXhhbXBsZU1lbnVGaWxlAExvZ1RvRmlsZQBMb2cgVG8gRmlsZQBBZGRUcmlhbmdsZQBzbGlkZXIgYW5nbGUAU2xpZGVyQW5nbGUAQWRkQ2lyY2xlAGlucHV0IGRvdWJsZQBkcmFnIGRvdWJsZQBJbnB1dERvdWJsZQAhaXNfdmlzaWJsZQBOYXZWaXNpYmxlAEltR3VpVGFibGVGbGFnc19Ob0tlZXBDb2x1bW5zVmlzaWJsZQBfSXNWaXNpYmxlAElzSXRlbVZpc2libGUAdGFiLT5MYXN0RnJhbWVWaXNpYmxlID49IHRhYl9iYXItPlByZXZGcmFtZVZpc2libGUAdGFibGUtPkZsYWdzICYgSW1HdWlUYWJsZUZsYWdzX1Jlc2l6YWJsZQB0YWJsZS0+RmxhZ3MgJiBJbUd1aVRhYmxlRmxhZ3NfU29ydGFibGUAIyNzZWxlY3RhYmxlADMuIEkgYW0gbm90IHNlbGVjdGFibGUANC4gSSBhbSBzZWxlY3RhYmxlADIuIEkgYW0gc2VsZWN0YWJsZQAxLiBJIGFtIHNlbGVjdGFibGUAU2VsZWN0YWJsZQBnLkN1cnJlbnRXaW5kb3cgPT0gb3V0ZXJfd2luZG93ICYmIGcuQ3VycmVudFRhYmxlID09IHRhYmxlAF9JbmRlbnREaXNhYmxlAEltR3VpVGFiQmFyRmxhZ3NfUmVvcmRlcmFibGUAdGFibGUtPkZsYWdzICYgSW1HdWlUYWJsZUZsYWdzX1Jlb3JkZXJhYmxlAF9JbmRlbnRFbmFibGUANS4gSSBhbSBkb3VibGUgY2xpY2thYmxlAEltR3VpVGFibGVGbGFnc19IaWRlYWJsZQBCZWdpblRhYmxlAEVuZFRhYmxlAHdpbmRvdyBzY2FsZQBGb250IHNjYWxlAGdsb2JhbCBzY2FsZQBTZXRXaW5kb3dGb250U2NhbGUATW91c2VDdXJzb3JTY2FsZQBEaXNwbGF5RnJhbWVidWZmZXJTY2FsZQBGb250R2xvYmFsU2NhbGUAUGF0aFN0cm9rZQBBcnRpY2hva2UAQ2hhbm5lbHNNZXJnZQBPcmFuZ2UAaW8uQ29uZmlnRmxhZ3M6IE5vTW91c2VDdXJzb3JDaGFuZ2UAQ2xlYXJGb250UmFuZ2UAQWRkRm9udFJhbmdlAEluUmFuZ2UAQWxpZ24gdG8gcmlnaHQgZWRnZQBTZXRTdGF0ZVN0b3JhZ2UAR2V0U3RhdGVTdG9yYWdlACNpbWFnZQBBZGRJbWFnZQB0cmVlAC9wYXRoL3RocmVlAFRocmVlVGhyZWVUaHJlZQBJdGVtIFRocmVlAE9uZQpUd28KVGhyZWUAVHJlZQBNZW1GcmVlAFNuaWNrZXJzbmVlAHRoaXMgaXMgYSB0cmVlIG5vZGUAVHJlZSBub2RlAGZpbGVuYW1lICYmIG1vZGUARm9jdXMgZnJvbSBjb2RlAFNjcm9sbCBmcm9tIGNvZGUASVRFTTogVHJlZU5vZGUATWVyZ2VNb2RlAERpc3BsYXkgTW9kZQBQaWNrZXIgTW9kZQBTaG93VXNlckd1aWRlACMjY3VydmVzc2VnbWVudG92ZXJyaWRlACMjY2lyY2xlc2VnbWVudG92ZXJyaWRlAEN1cnZlcyBzZWdtZW50cyBvdmVycmlkZQBDaXJjbGUgc2VnbWVudHMgb3ZlcnJpZGUAX0RlZmF1bHRIaWRlAF9Ob0hpZGUATGV0dHVjZQAjI3NvdXJjZQBUaGlzIGlzIGEgZHJhZyBhbmQgZHJvcCBzb3VyY2UAVGVzdCB0cmVlIG5vZGUgYXMgZHJhZyBzb3VyY2UAQmVnaW5EcmFnRHJvcFNvdXJjZQBFbmREcmFnRHJvcFNvdXJjZQBDdXJ2ZSBUZXNzZWxsYXRpb24gVG9sZXJhbmNlAGNvbmQgPT0gSW1HdWlDb25kX0Fsd2F5cyB8fCBjb25kID09IEltR3VpQ29uZF9PbmNlAEJlYXRyaWNlAHN0Yl90ZXh0ZWRpdF9yZXBsYWNlAE1ldHJpY3NUb3RhbFN1cmZhY2UARHJhZyBNZQAlZQBwYXNzd29yZABOYXZNb3ZlUmVxdWVzdEZvcndhcmQATmF2S2V5Ym9hcmQAV2FudENhcHR1cmVLZXlib2FyZAAgTmF2Tm9DYXB0dXJlS2V5Ym9hcmQAaW8uQ29uZmlnRmxhZ3M6IE5hdkVuYWJsZUtleWJvYXJkAENvcHkgdG8gY2xpcGJvYXJkAENvcHkgIkhlbGxvLCB3b3JsZCEiIHRvIGNsaXBib2FyZABMb2dUb0NsaXBib2FyZABMb2cgVG8gQ2xpcGJvYXJkAEJlcm5hcmQATm8gYmFja2dyb3VuZABCb3JkZXJzLCBiYWNrZ3JvdW5kAFRhYkl0ZW1CYWNrZ3JvdW5kACMjQmFja2dyb3VuZAAjI0ZvcmVncm91bmQAQWRkUmVjdEZpbGxlZE11bHRpQ29sb3JSb3VuZAAoKGNoYXIqKShzdGF0ZS0+dW5kb19yZWMgKyBzdGF0ZS0+cmVkb19wb2ludCArIDEpICsgbW92ZV9zaXplKSA8PSBidWZfZW5kAEhhbmQARGlzcGxheUVuZABHZXRTcGFuUHRyRW5kAFNlbGVjdGlvbkVuZABpdCA+PSBEYXRhICYmIGl0IDwgRGF0YUVuZABwID49IERhdGEgJiYgcCA8IERhdGFFbmQASW1EcmF3Q21kAEFkZERyYXdDbWQAaGVsbG8sIHdvcmxkAEhlbGxvCldvcmxkAElzTW91c2VEcmFnUGFzdFRocmVzaG9sZABNb3VzZURyYWdUaHJlc2hvbGQAYnV0dG9uX2ZsYWdzICYgSW1HdWlCdXR0b25GbGFnc19QcmVzc2VkT25EcmFnRHJvcEhvbGQAJWxsZABUYWJsZVNvcnRTcGVjc0J1aWxkAG91dGVyX2NoaWxkAEJlZ2luQ2hpbGQARW5kQ2hpbGQARmllbGQARW5hYmxlIGdyaWQAR3JpZAB2b2lkAEJlZ2luUG9wdXBDb250ZXh0Vm9pZABJc01vdXNlUG9zVmFsaWQAZy5BY3RpdmVJZCA9PSBpZABjb2x1bW5zLT5JRCA9PSBpZABzdGF0ZSAmJiBzdGF0ZS0+SUQgPT0gaWQAaGJsa2hkAGcuSW5pdGlhbGl6ZWQAUmVzaXphYmxlLCBtaXhlZABSZXNpemFibGUsIGZpeGVkAF9XaWR0aEZpeGVkAE5vdEFsbG93ZWQAZy5OYXZNb3ZlUmVxdWVzdEZvcndhcmQgPT0gSW1HdWlOYXZGb3J3YXJkX0ZvcndhcmRRdWV1ZWQAVGV4dFVuZm9ybWF0dGVkAGVyYXNlX3Vuc29ydGVkAF9Jc1NvcnRlZABJbmRlbnRlZABJc0l0ZW1FZGl0ZWQATWFya0l0ZW1FZGl0ZWQATm90IFNlbGVjdGVkAElzSXRlbURlYWN0aXZhdGVkAElzSXRlbUFjdGl2YXRlZABDbGVhckdseXBoQ3JlYXRlZAB1bnVzZWQAVGFiVW5mb2N1c2VkAElzV2luZG93Rm9jdXNlZABJc0FueUl0ZW1Gb2N1c2VkAElzSXRlbUZvY3VzZWQASXNLZXlQcmVzc2VkAFNldE5leHRXaW5kb3dDb2xsYXBzZWQAU2V0V2luZG93Q29sbGFwc2VkAElzV2luZG93Q29sbGFwc2VkAFRpdGxlQmdDb2xsYXBzZWQAU2V0V2luZG93TmFtZUNvbGxhcHNlZABTZXRUYWJJdGVtQ2xvc2VkAElzS2V5UmVsZWFzZWQASXNNb3VzZVJlbGVhc2VkAENvbHVtbnNDb250ZW50SGVhZGVyc1VzZWQAVGV4dENvbG9yZWQARmlyc3QgZ3JvdXAgaG92ZXJlZABJc1dpbmRvd0hvdmVyZWQAUGxvdExpbmVzSG92ZXJlZABfSXNIb3ZlcmVkAFNlcGFyYXRvckhvdmVyZWQASGVhZGVySG92ZXJlZABSZXNpemVHcmlwSG92ZXJlZABCdXR0b25Ib3ZlcmVkAElzQW55SXRlbUhvdmVyZWQASXNJdGVtSG92ZXJlZABQbG90SGlzdG9ncmFtSG92ZXJlZABGcmFtZUJnSG92ZXJlZABTY3JvbGxiYXJHcmFiSG92ZXJlZABUYWJIb3ZlcmVkAE91dGVyUmVjdENsaXBwZWQAVGV4dCB3cmFwcGVkAFRleHRXcmFwcGVkAEFsaWduZWQAKHdpbmRvdy0+RmxhZ3MgfCBnLk5hdldpbmRvdy0+RmxhZ3MpICYgSW1HdWlXaW5kb3dGbGFnc19OYXZGbGF0dGVuZWQAQnVtZnV6emxlZABBZGRDb252ZXhQb2x5RmlsbGVkAEFkZFJlY3RGaWxsZWQAQWRkTmdvbkZpbGxlZABBZGRUcmlhbmdsZUZpbGxlZABBZGRDaXJjbGVGaWxsZWQAQWRkUXVhZEZpbGxlZABUZXh0RGlzYWJsZWQAX0lzRW5hYmxlZABJc0l0ZW1DbGlja2VkAElzTW91c2VDbGlja2VkAElzTW91c2VEb3VibGVDbGlja2VkAENoZWNrZWQAQWRkSW1hZ2VSb3VuZGVkACFnLkluaXRpYWxpemVkICYmICFnLlNldHRpbmdzTG9hZGVkAHRhYmxlX2FkdmFuY2VkAEFkdmFuY2VkAFJlZABBZGRJbWFnZVF1YWQAQWRkUXVhZABOYXZHYW1lcGFkAGlvLkJhY2tlbmRGbGFnczogSGFzR2FtZXBhZABpby5Db25maWdGbGFnczogTmF2RW5hYmxlR2FtZXBhZABBY2NlcHREcmFnRHJvcFBheWxvYWQAU2V0RHJhZ0Ryb3BQYXlsb2FkAEdldERyYWdEcm9wUGF5bG9hZABHZXRJbnB1dFRleHRJZABTZXRBY3RpdmVJZABHZXRBY3RpdmVJZABnLk5hdkFjdGl2YXRlRG93bklkID09IGcuTmF2QWN0aXZhdGVJZABmb250LT5Db250YWluZXJBdGxhcy0+VGV4SUQgPT0gX0NtZEhlYWRlci5UZXh0dXJlSWQAR2V0SG92ZXJlZElkACVJNjRkACUwNGQAJTAzZABWOiUzZABTOiUzZABSOiUzZABIOiUzZABHOiUzZABCOiUzZABBOiUzZAAjI01lbnVfJTAyZAAjI1Rvb2x0aXBfJTAyZAAjI0NvbWJvXyUwMmQAQ29sdW1uICUtMmQATm9kZSVkAGIlZABGaWVsZF8lZABkZWZpbmU6IF9fY3BsdXNwbHVzPSVkACBPcmRlcj0lZAAgV2lkdGg9JWQAIFZpc2libGU9JWQAMHglMDhYICIlcyIgUG9zICglZCwlZCkgU2l6ZSAoJWQsJWQpIENvbGxhcHNlZD0lZABkZWZpbmU6IF9fR05VQ19fPSVkACVkLyVkAE5vZGUlZC4lZAAlcyAlZCwlZABIZWxsbyAlZCwlZABUaGlzIGlzIHRoZSBwb3B1cCBmb3IgQnV0dG9uKCIuLiIpIGluIENlbGwgJWQsJWQASGVsbG8gd29ybGQgJWQsJWQARml4ZWQgJWQsJWQAaW8uRm9udHM6ICVkIGZvbnRzLCBGbGFnczogMHglMDhYLCBUZXhTaXplOiAlZCwlZAAweCUwOFgsJWQAUm93ICVkAFNjcm9sbGluZyBUZXh0ICVkAFNvbWUgdGVzdCAlZABNb3JlIGNvbnRlbnQgJWQAU29tZSBjb250ZW50ICVkAE15T2JqZWN0ICVkAFRoaXMgaXMgYSBjdXN0b20gcG9wdXAgZm9yIENvbHVtbiAlZABSb3cgJWQgQ29sdW1uICVkAEl0ZW0gJWQAdGhpcyBjZWxsICVkAFNlbGVjdGFibGUgTGVhZiAlZAAlKnNUaGlzIGlzIGxpbmUgJWQATGluZSAlZABTeW5jZWQgVGFibGUgJWQAU2VsZWN0YWJsZSBOb2RlICVkAENoaWxkICVkAEl0ZW0gPSAlZABEYXRhOiAlcApTaXplOiAlZApDYXBhY2l0eTogJWQAQWN0aXZlOiAlZC8lZCwgV3JpdGVBY2Nlc3NlZDogJWQsIEJlZ2luT3JkZXJXaXRoaW5Db250ZXh0OiAlZABXYW50VGV4dElucHV0OiAlZABNeU9iamVjdDogJWQASXRlbSB3aXRoIGZvY3VzOiAlZABXYW50U2V0TW91c2VQb3M6ICVkAEFwcGVhcmluZzogJWQsIEhpZGRlbjogJWQgKENhblNraXAgJWQgQ2Fubm90ICVkKSwgU2tpcEl0ZW1zOiAlZAAlczogJWQATmF2SWQ6IDB4JTA4WCwgTmF2TGF5ZXI6ICVkAE5hdkRpc2FibGVIaWdobGlnaHQ6ICVkLCBOYXZEaXNhYmxlTW91c2VIb3ZlcjogJWQASG92ZXJlZENvbHVtbkJvZHk6ICVkLCBIb3ZlcmVkQ29sdW1uQm9yZGVyOiAlZABIb3ZlcmVkSWQ6IDB4JTA4WC8weCUwOFggKCUuMmYgc2VjKSwgQWxsb3dPdmVybGFwOiAlZABIb3ZlcmVkIGNvbHVtbjogJWQAUmVzaXplZENvbHVtbjogJWQsIFJlb3JkZXJDb2x1bW46ICVkLCBIZWxkSGVhZGVyQ29sdW1uOiAlZABXYW50Q2FwdHVyZU1vdXNlOiAlZABOYXZBY3RpdmU6ICVkLCBOYXZWaXNpYmxlOiAlZABXYW50Q2FwdHVyZUtleWJvYXJkOiAlZABJc0l0ZW1Ib3ZlcmVkOiAlZABzaXplb2Yoc2l6ZV90KTogJWQsIHNpemVvZihJbURyYXdJZHgpOiAlZCwgc2l6ZW9mKEltRHJhd1ZlcnQpOiAlZABBc2MATWVtQWxsb2MAZnVuYwBBZGRCZXppZXJRdWFkcmF0aWMATXVzaWMAU3R5bGVDb2xvcnNDbGFzc2ljAEJhc2ljAEltR3VpU2xpZGVyRmxhZ3NfTG9nYXJpdGhtaWMAaW5wdXQgc2NpZW50aWZpYwBBZGRCZXppZXJDdWJpYwAlLjJmCnNlYwBHZXRTcGVjAGFiYwBNeUNvbG9yIyMzYwBmaXNoX2hhdC5jAG1haW4uYwBjY2MxLmMAYmJiMS5jAGFhYTEuYwAgU29ydD0lZCVjACVjJWMlYwByYWRpbyBjAHJiACMjcmdiAHNob3dfbWVzaCB8fCBzaG93X2FhYmIAU2xpZGVyR3JhYgBTY3JvbGxiYXJHcmFiAFRhYkJhckNsb3NlVGFiAGZsb2F0IChpbmRlbnRlZCkjIzViAGZsb2F0IChpbmRlbnRlZCkjIzRiAE15Q29sb3IjIzNiAGZsb2F0IChpbmRlbnRlZCkjIzNiAGZsb2F0IChpbmRlbnRlZCkjIzJiAGZsb2F0IyMxYgBmbG9hdCAoaW5kZW50ZWQpIyMxYgByYWRpbyBiAHJ3YQBSZXNldE1vdXNlRHJhZ0RlbHRhAEdldE1vdXNlRHJhZ0RlbHRhAE1vdXNlRGVsdGEAR2V0RHJhd0RhdGEAQWRkRHJhd0xpc3RUb0RyYXdEYXRhAEltRHJhd0RhdGEARm9udERhdGEAQmFja2VuZFJlbmRlcmVyVXNlckRhdGEAQmFja2VuZFBsYXRmb3JtVXNlckRhdGEAQmFja2VuZExhbmd1YWdlVXNlckRhdGEAQ2xpcGJvYXJkVXNlckRhdGEASW1HdWlJbnB1dFRleHRDYWxsYmFja0RhdGEAVXNlckNhbGxiYWNrRGF0YQBJbUd1aVNpemVDYWxsYmFja0RhdGEAU2V0dGluZ3NJbmlEYXRhAENvbmZpZ0RhdGEAR2V0RHJhd0xpc3RTaGFyZWREYXRhAEJ1ZiA9PSBlZGl0X3N0YXRlLT5UZXh0QS5EYXRhAGNhbGxiYWNrX2RhdGEuQnVmID09IHN0YXRlLT5UZXh0QS5EYXRhAEJyaWFubmEAYXJlbmEAQmFuYW5hAEFiaWJsaW9waG9iaWEAYWxwaGEAU2V0TmV4dFdpbmRvd0JnQWxwaGEAR2xvYmFsIEFscGhhAFdpdGggQWxwaGEAIyNmbG9hdDVhAGZsb2F0IyM0YQBmbG9hdCMjM2EAZmxvYXQjIzJhAHJhZGlvIGEAW35dAFt4XQBbZXJyb3JdAFslZF0Ab3BlcmF0b3JbXQBbIF0AfC8tXABDVFJMK1oAIyNaAEZvY3VzIG9uIFoAR2V0U2Nyb2xsTWF4WQBTdGFydFBvc1kAU2V0Q3Vyc29yUG9zWQBHZXRDdXJzb3JQb3NZAFNldFNjcm9sbEZyb21Qb3NZAFNjcm9sbGJhclkAU2V0U2Nyb2xsWQBHZXRTY3JvbGxZAEltR3VpVGFibGVGbGFnc19TY3JvbGxZAFNldFNjcm9sbEhlcmVZAEltR3VpVGFibGVGbGFnc19Ob0hvc3RFeHRlbmRZAExvZ1RvVFRZAExvZyBUbyBUVFkASElTVE9SWQAjU0NST0xMWQBDTEFTU0lGWQBDVFJMK1kAIyNZAEZvY3VzIG9uIFkAR2V0U2Nyb2xsTWF4WABTZXRDdXJzb3JQb3NYAEdldEN1cnNvclBvc1gAU2V0U2Nyb2xsRnJvbVBvc1gASW1HdWlUYWJsZUZsYWdzX05vUGFkT3V0ZXJYAEltR3VpVGFibGVGbGFnc19QYWRPdXRlclgASW1HdWlUYWJsZUZsYWdzX05vUGFkSW5uZXJYAFNjcm9sbGJhclgAU2V0U2Nyb2xsWABHZXRTY3JvbGxYAEltR3VpVGFibGVGbGFnc19TY3JvbGxYAFN0cmV0Y2ggKyBTY3JvbGxYAFNldFNjcm9sbEhlcmVYAEdseXBoTWF4QWR2YW5jZVgAR2x5cGhNaW5BZHZhbmNlWABJbUd1aVRhYmxlRmxhZ3NfTm9Ib3N0RXh0ZW5kWAAjU0NST0xMWABGTFRfTUFYAENvbHVtbiAlZCBPcmRlciAlZCBTb3J0T3JkZXIgJWQgJXMgVmlzICVkICVzICU3LjNmIFVzZXJJRCAweCUwOFgATmF2Rm9jdXNTY29wZUlkID0gMHglMDhYAGlvLkNvbmZpZ0ZsYWdzOiAweCUwOFgAU2F2ZUZsYWdzOiAweCUwOFgAaW8uQmFja2VuZEZsYWdzOiAweCUwOFgATmF2QWN0aXZhdGVJZDogMHglMDhYLCBOYXZJbnB1dElkOiAweCUwOFgASG92ZXJlZElkOiAweCUwOFgAJXMvJXNfJTA4WAAgVXNlcklEPSUwOFgAJXMvJTA4WABDb2x1bW5zIElkOiAweCUwOFgsIENvdW50OiAlZCwgRmxhZ3M6IDB4JTA0WABDb2RlcG9pbnQ6IFUrJTA0WAAjJTAyWCUwMlglMDJYJTAyWAAjJTAyWCUwMlglMDJYAENUUkwrWABOYXZMYXN0SWRzOiAweCUwOFgsMHglMDhYLCBOYXZMYXllckFjdGl2ZU1hc2s6ICVYACMjWABPZmZzZXQgWABGb2N1cyBvbiBYAFJlc2l6ZU5FU1cAUmVzaXplRVcAQ1RSTCtXACMjVwBJbUd1aVRhYmxlRmxhZ3NfQm9yZGVyc1YASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNPdXRlclYASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNJbm5lclYAT3ZlcnNhbXBsZVYAUHJpbVJlY3RVVgBQcmltUXVhZFVWAENvbG9yQ29udmVydFJHQnRvSFNWAENUUkwrVgBURVNUAGltZ3VpX2tleSA+PSAwICYmIGltZ3VpX2tleSA8IEltR3VpS2V5X0NPVU5UAG1vdXNlX2N1cnNvciA+IEltR3VpTW91c2VDdXJzb3JfTm9uZSAmJiBtb3VzZV9jdXJzb3IgPCBJbUd1aU1vdXNlQ3Vyc29yX0NPVU5UAGlkeCA+PSAwICYmIGlkeCA8IEltR3VpU3R5bGVWYXJfQ09VTlQAbW91c2VfYnV0dG9uID49IDAgJiYgbW91c2VfYnV0dG9uIDwgSW1HdWlNb3VzZUJ1dHRvbl9DT1VOVABkYXRhX3R5cGUgPj0gMCAmJiBkYXRhX3R5cGUgPCBJbUd1aURhdGFUeXBlX0NPVU5UAG4gPCBCSVRDT1VOVABOQVYsRk9DVVMAU1RCX1RFWFRFRElUX0lOU0VSVENIQVJTAFJlc2l6ZU5TAElURU1TAG4gPj0gMCAmJiBuIDwgQ0hVTktTICYmIEN1cnJTcGFuID09IENIVU5LUwBuID09IEN1cnJTcGFuICYmIG4gPCBDSFVOS1MAQ3RybCtTAENUUkwrUwBDaGlsZFIAV2l0aCBIRFIAQ0xFQVIASEVMUABPT09PT09PAEdldElPAEltR3VpSU8AQ3RybCtPAFJFQUNUSU9OAElNR1VJX1ZFUlNJT04ASU1HVUlfQ0hFQ0tWRVJTSU9OAEZMVF9NSU4AaGFzX2ZyZWV6ZV92ID09IGZhbHNlIHx8IHRhYmxlLT5CZzJEcmF3Q2hhbm5lbFVuZnJvemVuICE9IFRBQkxFX0RSQVdfQ0hBTk5FTF9CRzJfRlJPWkVOAE5BTgBNTU1NAENUUkwrTQBDaGlsZEwAJXM6IE5VTEwATExMTExMTABETkRfREVNT19DRUxMAHdpbmRvdy0+REMuQ3VycmVudENvbHVtbnMgPT0gMEwAY3Vycl9jbWQtPlVzZXJDYWxsYmFjayA9PSAwTABnLkxvZ0ZpbGUgPT0gMEwAZy5OYXZXaW5kb3cgIT0gMEwAd2luZG93ID09IDBMIHx8IHdpbmRvdy0+Um9vdFdpbmRvdyAhPSAwTAB3aW5kb3ctPlJvb3RXaW5kb3dGb3JOYXYtPlBhcmVudFdpbmRvdyAhPSAwTAB0ZXh0ICE9IDBMAGcuTmF2V2luZG93aW5nVGFyZ2V0ICE9IDBMAGNvbHVtbnMgIT0gMEwAY2FsbGJhY2sgIT0gMEwAR0ltR3VpICE9IDBMAHN0YXRlICE9IDBMAHR5cGUgIT0gMEwAdGFibGUgIT0gMEwAQnVmLkRhdGEgIT0gMEwAT0sAS0tLS0tLSwBKSkpKAExlZ2FjeSBDb2x1bW5zIEFQSQBTZXQgdG8gUEkASUlJSUlJSQBJbUd1aVRhYmxlRmxhZ3NfQm9yZGVyc0gASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnMKID0gSW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNJbm5lclYKIHwgSW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNPdXRlclYKIHwgSW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNJbm5lclYKIHwgSW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNPdXRlckgASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNJbm5lckgAUGl4ZWxTbmFwSABPdmVyc2FtcGxlSABISEhIAFdJTkRPV0lORwBDVVJSRU5UTFkgQVBQRU5ESU5HAEdHR0cASU5GAEZGRkYAX0NPTDRGAF9DT0wzRgAjUkVTSVpFACNNT1ZFAFJlc2l6ZU5XU0UAI0NPTExBUFNFACNDTE9TRQBFRUVFAF9UUkVFTk9ERQBWYWx1ZV9EAExFVkVSQUdFCkJVWlpXT1JEAFRleElEAFNldE5hdklEAEdldElEAFNldEZvY3VzSUQAQ29sdW1uVXNlcklEAFBvcElEAFB1c2hJRABUYWJsZUdldENvbHVtblJlc2l6ZUlEAFBvcFRleHR1cmVJRABQdXNoVGV4dHVyZUlEAF9PbkNoYW5nZWRUZXh0dXJlSUQAZ3JvdXBfZGF0YS5XaW5kb3dJRCA9PSB3aW5kb3ctPklEAHNldHRpbmdzLT5JRCA9PSB3aW5kb3ctPklEAGVkaXRfc3RhdGUtPklEICE9IDAgJiYgZy5BY3RpdmVJZCA9PSBlZGl0X3N0YXRlLT5JRABzZXR0aW5ncy0+SUQgPT0gdGFibGUtPklEAEREREQAVHJlZU5vZGVFeF9DAFZhbHVlX0MAVHJlZU5vZGVfQwBHZXRDb2xvclUzMl9DAENDQ0NDQ0NDQ0NDQwBDVFJMK0MAQ2F0ZWdvcnkgQwBMaXN0Qm94X0IAVHJlZU5vZGVFeF9CAEFkZFRleHRfQgBMaXN0Qm94SGVhZGVyX0IAQ29sbGFwc2luZ0hlYWRlcl9CAFJhZGlvQnV0dG9uX0IATWVudUl0ZW1fQgBUcmVlUHVzaF9CAFZhbHVlX0IASXNSZWN0VmlzaWJsZV9CAFNlbGVjdGFibGVfQgBUcmVlTm9kZV9CAEdldENvbG9yVTMyX0IAQ29sb3JDb252ZXJ0SFNWdG9SR0IARnJhbWVCQgBCQkJCQkJCQgBDYXRlZ29yeSBCAGNhbGxiYWNrX2RhdGEuQnVmU2l6ZSA9PSBzdGF0ZS0+QnVmQ2FwYWNpdHlBAENhbGNXb3JkV3JhcFBvc2l0aW9uQQBDYWxjVGV4dFNpemVBAExpc3RCb3hfQQBUcmVlTm9kZUV4X0EAQWRkVGV4dF9BAExpc3RCb3hIZWFkZXJfQQBDb2xsYXBzaW5nSGVhZGVyX0EAUmFkaW9CdXR0b25fQQBNZW51SXRlbV9BAFRyZWVQdXNoX0EAVmFsdWVfQQBJc1JlY3RWaXNpYmxlX0EAU2VsZWN0YWJsZV9BAFRyZWVOb2RlX0EAR2V0Q29sb3JVMzJfQQBBQUFBAE4vQQBDYXRlZ29yeSBBAFNhdmUgY2hhbmdlIHRvIHRoZSBmb2xsb3dpbmcgaXRlbXM/AFNhdmU/AERlbGV0ZT8AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8ZmxvYXQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQ4X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDhfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQzMl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQzMl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBjaGFyPgBzdGQ6OmJhc2ljX3N0cmluZzx1bnNpZ25lZCBjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaWduZWQgY2hhcj4APFVua25vd24+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGxvbmc+AEl0ZW0gd2l0aCBmb2N1czogPG5vbmU+AE5hdlJlY3RSZWxbMF06IDxOb25lPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxkb3VibGU+ADxwYXNzd29yZD4ATW91c2UgUG9zaXRpb246IDxpbnZhbGlkPgA8TlVMTD4ATW91c2UgcG9zOiA8SU5WQUxJRD4APDxQUkVTUyBTUEFDRSBUTyBESVNBQkxFPj4AIyM+ADw8ACMjPABDb2xvciBidXR0b24gb25seToAQ29sb3Igd2lkZ2V0IHdpdGggRmxvYXQgRGlzcGxheToATXVsdGktbGluZSB0ZXh0OgBWZXJ0OgBDb2xvciB3aWRnZXQ6AEhvbGQgdG8gcmVwZWF0OgBMaXN0czoAQ2VsbCBjb250ZW50czoASG92ZXIgdG8gc2VlIG1vdXNlIGN1cnNvcnM6AERlY29yYXRpb25zOgBDb2x1bW5zOgBNaXNjIGl0ZW1zOgBEcmFnczoAT3V0cHV0IGZsYWdzOgBJbnB1dCBmbGFnczoARmVhdHVyZXM6AFRhYmxlczoAQ29tbWFuZHM6ACVzOgBDb2xvciBwaWNrZXI6AENvbG9yIGJ1dHRvbiB3aXRoIFBpY2tlcjoAT3RoZXI6AFdpdGhvdXQgYm9yZGVyOgBXaXRoIGJvcmRlcjoAQ29sb3IgYnV0dG9uIHdpdGggQ3VzdG9tIFBpY2tlciBQb3B1cDoAS2V5cyBkb3duOgBOYXZJbnB1dHMgZG93bjoATW91c2UgZG93bjoATmF2SW5wdXRzIGR1cmF0aW9uOgBNb3VzZSBkYmxjbGljazoAU2l6aW5nOgBTb3J0aW5nOgBNYW51YWxseSB3cmFwcGluZzoAU2Nyb2xsaW5nOgBQYWRkaW5nOgBVc2luZyBleHBsaWNpdCBzaXplOgBDaGFycyBxdWV1ZToAS2V5cyByZWxlYXNlOgBUZXh0IGJhc2VsaW5lOgBFZGl0IG5hbWU6AFNldCBkZWZhdWx0cyBpbiBjb2RlOgBLZXlzIHByZXNzZWQ6AE5hdklucHV0cyBwcmVzc2VkOgBNb3VzZSByZWxlYXNlZDoAV2l0aCBrZXlib2FyZCBuYXZpZ2F0aW9uIGVuYWJsZWQ6AE1vdXNlIGNsaWNrZWQ6AFRlc3QgcGFyYWdyYXBoICVkOgBDb2xvciB3aWRnZXQgSFNWIHdpdGggQWxwaGE6AFVzaW5nIE5vSG9zdEV4dGVuZFggYW5kIE5vSG9zdEV4dGVuZFk6AENvbG9yIHdpZGdldCB3aXRoIElucHV0SFNWOgBBQk9VVCBUSElTIERFTU86AFVTRVIgR1VJREU6AFBST0dSQU1NRVIgR1VJREU6AElzTW91c2VEcmFnZ2luZyglZCk6AEdldE1vdXNlRHJhZ0RlbHRhKDApOgAnJXMnOgBJRDogMDEyMzQ1Njc4OQBpbnB1dCB1OABkcmFnIHU4AGlucHV0IHM4AGRyYWcgczgAR2V0VGV4RGF0YUFzQWxwaGE4AFU4AFM4AEFkZElucHV0Q2hhcmFjdGVyc1VURjgAcm93cyA+PSAwICYmIHJvd3MgPCAxMjgAc29ydF9vcmRlcl9jb3VudCA8IChpbnQpc2l6ZW9mKHNvcnRfb3JkZXJfbWFzaykgKiA4ADEyMzQ1NgAxMjMuNDU2AGlucHV0IHUxNgBkcmFnIHUxNgBpbnB1dCBzMTYAZHJhZyBzMTYAVTE2AFMxNgAwLi4yNTUAaW5wdXQgaW50NABzbGlkZXIgaW50NABkcmFnIGludDQASW5wdXRJbnQ0AFNsaWRlckludDQARHJhZ0ludDQASVRFTTogQ29sb3JFZGl0NABpbnB1dCBmbG9hdDQAc2xpZGVyIGZsb2F0NABkcmFnIGZsb2F0NABJbnB1dEZsb2F0NABTbGlkZXJGbG9hdDQAQ29sb3JDb252ZXJ0VTMyVG9GbG9hdDQARHJhZ0Zsb2F0NABDb2xvclBpY2tlcjQAR2V0U3R5bGVDb2xvclZlYzQASW1WZWM0AEFsdCtGNABpbnB1dCB1NjQAZHJhZyB1NjQAaW5wdXQgczY0AGRyYWcgczY0AFU2NABTNjQAa2V5IDwgNjQAY29sdW1ucyA+PSAwICYmIGNvbHVtbnMgPCA2NAAxMjM0AE15Q29sb3IjIzQAQnV0dG9uIyM0AGlucHV0IGludDMAc2xpZGVyIGludDMAZHJhZyBpbnQzAElucHV0SW50MwBTbGlkZXJJbnQzAERyYWdJbnQzAENvbG9yRWRpdDMAc2V0MwBpbnB1dCBmbG9hdDMAc2xpZGVyIGZsb2F0MwBkcmFnIGZsb2F0MwBJVEVNOiBJbnB1dEZsb2F0MwBTbGlkZXJGbG9hdDMARHJhZ0Zsb2F0MwBteWNvbHVtbnMzAGZsYWdzMwBDb2xvclBpY2tlcjMAdGFibGUzAE15Q29sb3IjIzMAQnV0dG9uIyMzAEl0ZW0jIzMARm9jdXMgb24gMwBpbnB1dCBpbnQyAHNsaWRlciBpbnQyAGRyYWcgaW50MgAjI2dyYWRpZW50MgBJbnB1dEludDIAU2xpZGVySW50MgBEcmFnSW50MgBzcGxpdDIAc2V0MgBpbnB1dCBmbG9hdDIAc2xpZGVyIGZsb2F0MgBkcmFnIGZsb2F0MgBJbnB1dEZsb2F0MgBTbGlkZXJGbG9hdDIARHJhZ0Zsb2F0MgBJbU1hdDIAdGFibGUyAERyYWdJbnRSYW5nZTIARHJhZ0Zsb2F0UmFuZ2UyAHRhYmxlX25lc3RlZDIASW1WZWMyAHRhYmxlX2NvbnRleHRfbWVudV8yAHRhYmxlX3BhZGRpbmdfMgBpbnB1dCB1MzIAZHJhZyB1MzIAaW5wdXQgczMyAGRyYWcgczMyAENvbG9yQ29udmVydEZsb2F0NFRvVTMyAFMzMgBtMjIAbTEyAFNhbWUgdGl0bGUgYXMgYW5vdGhlciB3aW5kb3cjIzIATXlDb2xvciMjMgBCdXR0b24jIzIAQ29uZmlndXJhdGlvbiMjMgBJdGVtIyMyAE5vZGUjIzIAVEVTVCMjMgBIT1AjIzIAY29sb3IgMgBGb2N1cyBvbiAyAFN0YWNrZWQgMgByb3dfYmdfdHlwZSA+PSAwICYmIHJvd19iZ190eXBlIDw9IDIAKihjb25zdCBJbVU2NCopcF9tYXggPD0gSU1fVTY0X01BWCAvIDIAKihjb25zdCBJbVM2NCopcF9taW4gPj0gSU1fUzY0X01JTiAvIDIgJiYgKihjb25zdCBJbVM2NCopcF9tYXggPD0gSU1fUzY0X01BWCAvIDIAKihjb25zdCBJbVUzMiopcF9tYXggPD0gSU1fVTMyX01BWCAvIDIAKihjb25zdCBJbVMzMiopcF9taW4gPj0gSU1fUzMyX01JTiAvIDIgJiYgKihjb25zdCBJbVMzMiopcF9tYXggPD0gSU1fUzMyX01BWCAvIDIAIyNncmFkaWVudDEAc3BsaXQxAHNldDEAZmxvYXQxAHRhYmxlMQB0YWJsZV9uZXN0ZWQxAFkxAFNwYWNlWDEAVjEAVTEAQjEAQTEAbTIxAG0xMQBvZmZzZXQgPj0gLTEAY29sdW1uX24gPT0gLTEAcGF5bG9hZC5EYXRhRnJhbWVDb3VudCAhPSAtMQBjb2x1bW5fd2l0aF9zbWFsbGVzdF9zb3J0X29yZGVyICE9IC0xAHRhYmxlLT5DdXJyZW50Q29sdW1uICE9IC0xAHRhYmxlLT5MZWZ0TW9zdFN0cmV0Y2hlZENvbHVtbiAhPSAtMSAmJiB0YWJsZS0+UmlnaHRNb3N0U3RyZXRjaGVkQ29sdW1uICE9IC0xAHJlb3JkZXJfZGlyID09IC0xIHx8IHJlb3JkZXJfZGlyID09ICsxAGRpciA9PSAtMSB8fCBkaXIgPT0gKzEAU2FtZSB0aXRsZSBhcyBhbm90aGVyIHdpbmRvdyMjMQBNeUNvbG9yIyMxAEJ1dHRvbiMjMQBJdGVtIyMxAE5vZGUjIzEASFNWIHNob3duIGFzIEhTViMjMQBURVNUIyMxAEhPUCMjMQBIU1Ygc2hvd24gYXMgUkdCIyMxAEJ1bGxldCBwb2ludCAxAGNvbG9yIDEAY29tYm8gMQBGb2N1cyBvbiAxAEIxIENlbGwgMQBBMSBDZWxsIDEAQjAgQ2VsbCAxAEEwIENlbGwgMQBTdGFja2VkIDEAZy5JdGVtRmxhZ3NTdGFjay5TaXplID4gMQB3aW5kb3ctPklEU3RhY2suU2l6ZSA+IDEAY29sdW1uc19jb3VudCA+PSAxAG5hdl9sYXllciA9PSAwIHx8IG5hdl9sYXllciA9PSAxAGcuTmF2TGF5ZXIgPT0gMCB8fCBnLk5hdkxheWVyID09IDEAaWR4IDw9IDEAcm93X2JnX3RhcmdldCA+PSAwICYmIHJvd19iZ190YXJnZXQgPD0gMQBjZWxsX2JnX3R5cGUgPj0gMCAmJiBjZWxsX2JnX3R5cGUgPD0gMQAwIDwgJS4xMGYgPCAxAGZsb2F0MABZMABTcGFjZVgwAFYwAFUwAEIwAEEwAERlZmF1bHQgZm9yIGNvbHVtbiA+MAA4MHg4MAAxLjgwADUweDUwAHg9MTUwAENsYW1wIGludGVnZXJzIHRvIDAuLjUwADUwMHg1MDAASGVpZ2h0IDQwMC01MDAAV2lkdGggNDAwLTUwMAB4PTMwMAA4MDB4MjAwADIwMHgyMDAAZHJhZyBpbnQgMC4uMTAwAEFsaWduIHRvIHJpZ2h0IGVkZ2UgbWludXMgMTAwAFdpZHRoID4gMTAwLCBIZWlnaHQgPiAxMDAATTowMDAATTowLjAwMAAwLjAwLi4xLjAwAERlZmF1bHQgZm9yIGNvbHVtbiAwAEIxIENlbGwgMABBMSBDZWxsIDAAQjAgQ2VsbCAwAEEwIENlbGwgMABjb2x1bW5faW5kZXggPiAwAGNvbHVtbi0+U29ydERpcmVjdGlvbnNBdmFpbENvdW50ID4gMABnLkN1cnJlbnRXaW5kb3dTdGFjay5TaXplID4gMABnLkJlZ2luUG9wdXBTdGFjay5TaXplID4gMABnLkdyb3VwU3RhY2suU2l6ZSA+IDAAdGFiX2Jhci0+TGFzdFRhYkl0ZW1JZHggPj0gMAB0YWJsZS0+UmlnaHRNb3N0RW5hYmxlZENvbHVtbiA+PSAwAGFwcGx5X25ld190ZXh0X2xlbmd0aCA+PSAwAGJ1ZiAhPSAwTCAmJiBidWZfc2l6ZSA+PSAwAHdpbmRvdy0+QmVnaW5Db3VudCA9PSAwAHdpbmRvdy0+RHJhd0xpc3QtPkNtZEJ1ZmZlci5TaXplID09IDEgJiYgd2luZG93LT5EcmF3TGlzdC0+Q21kQnVmZmVyWzBdLkVsZW1Db3VudCA9PSAwAHNwbGl0dGVyLT5fQ3VycmVudCA9PSAwAGNvbHVtbnMtPkN1cnJlbnQgPT0gMABpZCA9PSAwAHRhYl9iYXItPlJlb3JkZXJSZXF1ZXN0VGFiSWQgPT0gMAAoZmxhZ3MgJiBJbUd1aUhvdmVyZWRGbGFnc19BbGxvd1doZW5PdmVybGFwcGVkKSA9PSAwACh0YWJsZS0+RmxhZ3MgJiBJbUd1aVRhYmxlRmxhZ3NfU2Nyb2xsWCkgPT0gMAAoZmxhZ3MgJiAoSW1HdWlIb3ZlcmVkRmxhZ3NfUm9vdFdpbmRvdyB8IEltR3VpSG92ZXJlZEZsYWdzX0NoaWxkV2luZG93cykpID09IDAAbW92ZV9mbGFncyAhPSAwAHNvdXJjZV9pZCAhPSAwAHBheWxvYWQuU291cmNlSWQgIT0gMABjaGlsZF93aW5kb3ctPkNoaWxkSWQgIT0gMAAoZmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX05vVGl0bGVCYXIpICE9IDAAKHBvcHVwLldpbmRvdy0+RmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX1BvcHVwKSAhPSAwAFJlYWQgdGhlIEZBUSBhdCBodHRwOi8vd3d3LmRlYXJpbWd1aS5vcmcvZmFxLwBJbnN0cnVjdCBiYWNrZW5kIHRvIG5vdCBhbHRlciBtb3VzZSBjdXJzb3Igc2hhcGUgYW5kIHZpc2liaWxpdHkuAFNlY3Rpb25zIGJlbG93IGFyZSBkZW1vbnN0cmF0aW5nIG1hbnkgYXNwZWN0cyBvZiB0aGUgbGlicmFyeS4AVXNpbmcgVGFibGVOZXh0Um93KCkgKyBjYWxsaW5nIFRhYmxlTmV4dENvbHVtbigpIF9iZWZvcmVfIGVhY2ggY2VsbCwgbWFudWFsbHkuAFdoZW4gZHJhd2luZyBjaXJjbGUgcHJpbWl0aXZlcyB3aXRoICJudW1fc2VnbWVudHMgPT0gMCIgdGVzc2VsYXRpb24gd2lsbCBiZSBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkuAFdlIGRvbid0IHVzZSB0aGUgZHJhZyBhbmQgZHJvcCBhcGkgYXQgYWxsIGhlcmUhIEluc3RlYWQgd2UgcXVlcnkgd2hlbiB0aGUgaXRlbSBpcyBoZWxkIGJ1dCBub3QgaG92ZXJlZCwgYW5kIG9yZGVyIGl0ZW1zIGFjY29yZGluZ2x5LgBCeSBkZWZhdWx0LCByaWdodC1jbGlja2luZyBvdmVyIGEgVGFibGVIZWFkZXJzUm93KCkvVGFibGVIZWFkZXIoKSBsaW5lIHdpbGwgb3BlbiB0aGUgZGVmYXVsdCBjb250ZXh0LW1lbnUuClVzaW5nIEltR3VpVGFibGVGbGFnc19Db250ZXh0TWVudUluQm9keSB3ZSBhbHNvIGFsbG93IHJpZ2h0LWNsaWNraW5nIG92ZXIgY29sdW1ucyBib2R5LgBZb3UgY2FuIHBhc3MgYSAnbWluX3Jvd19oZWlnaHQnIHRvIFRhYmxlTmV4dFJvdygpLgoKUm93cyBhcmUgcGFkZGVkIHdpdGggJ3N0eWxlLkNlbGxQYWRkaW5nLnknIG9uIHRvcCBhbmQgYm90dG9tLCBzbyBlZmZlY3RpdmVseSB0aGUgbWluaW11bSByb3cgaGVpZ2h0IHdpbGwgYWx3YXlzIGJlID49ICdzdHlsZS5DZWxsUGFkZGluZy55ICogMi4wZicuCgpXZSBjYW5ub3QgaG9ub3IgYSBfbWF4aW11bV8gcm93IGhlaWdodCBhcyB0aGF0IHdvdWxkIHJlcXVpcmVzIGEgdW5pcXVlIGNsaXBwaW5nIHJlY3RhbmdsZSBwZXIgcm93LgBVc2UgY2hpbGQgd2luZG93cyB0byBiZWdpbiBpbnRvIGEgc2VsZi1jb250YWluZWQgaW5kZXBlbmRlbnQgc2Nyb2xsaW5nL2NsaXBwaW5nIHJlZ2lvbnMgd2l0aGluIGEgaG9zdCB3aW5kb3cuAERvdWJsZS1jbGljayBvbiB0aXRsZSBiYXIgdG8gY29sbGFwc2Ugd2luZG93LgBFc2NhcGUgdG8gZGVhY3RpdmF0ZSBhIHdpZGdldCwgY2xvc2UgcG9wdXAsIGV4aXQgY2hpbGQgd2luZG93LgBDVFJMK1RhYiB0byBzZWxlY3QgYSB3aW5kb3cuAEFsdCB0byBqdW1wIHRvIHRoZSBtZW51IGxheWVyIG9mIGEgd2luZG93LgBNb3VzZSBMZWZ0OiBkcmFnIHRvIGFkZCBsaW5lcywKTW91c2UgUmlnaHQ6IGRyYWcgdG8gc2Nyb2xsLCBjbGljayBmb3IgY29udGV4dCBtZW51LgBDbGljayBhbmQgZHJhZyBjb2x1bW4gaGVhZGVycyB0byByZW9yZGVyIGNvbHVtbnMuCgpSaWdodC1jbGljayBvbiBhIGhlYWRlciB0byBvcGVuIGEgY29udGV4dCBtZW51LgBJbiB0aGUgY29sb3IgbGlzdDoKTGVmdC1jbGljayBvbiBjb2xvciBzcXVhcmUgdG8gb3BlbiBjb2xvciBwaWNrZXIsClJpZ2h0LWNsaWNrIHRvIG9wZW4gZWRpdCBvcHRpb25zIG1lbnUuAENUUkwrQ2xpY2sgb24gYSBzbGlkZXIgb3IgZHJhZyBib3ggdG8gaW5wdXQgdmFsdWUgYXMgdGV4dC4AUHJpbnRpbmcgdW51c3VhbGx5IGxvbmcgYW1vdW50IG9mIHRleHQuAFlvdSBjYW4gYWxzbyBjYWxsIEltR3VpOjpMb2dUZXh0KCkgdG8gb3V0cHV0IGRpcmVjdGx5IHRvIHRoZSBsb2cgd2l0aG91dCBhIHZpc3VhbCBvdXRwdXQuAFVzaW5nIFRhYmxlU2V0dXBDb2x1bW4oKSB0byBzZXR1cCBleHBsaWNpdCB3aWR0aC4KClVubGVzcyBfTm9LZWVwQ29sdW1uc1Zpc2libGUgaXMgc2V0LCBmaXhlZCBjb2x1bW5zIHdpdGggc2V0IHdpZHRoIG1heSBzdGlsbCBiZSBzaHJ1bmsgZG93biBpZiB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2UgaW4gdGhlIGhvc3QuAEVTQ0FQRSB0byByZXZlcnQuAEFsaWdubWVudCBhcHBsaWVzIHdoZW4gYSBidXR0b24gaXMgbGFyZ2VyIHRoYW4gaXRzIHRleHQgY29udGVudC4AQWxpZ25tZW50IGFwcGxpZXMgd2hlbiBhIHNlbGVjdGFibGUgaXMgbGFyZ2VyIHRoYW4gaXRzIHRleHQgY29udGVudC4AV2hlbiBhIHBvcHVwIGlzIGFjdGl2ZSwgaXQgaW5oaWJpdHMgaW50ZXJhY3Rpbmcgd2l0aCB3aW5kb3dzIHRoYXQgYXJlIGJlaGluZCB0aGUgcG9wdXAuIENsaWNraW5nIG91dHNpZGUgdGhlIHBvcHVwIGNsb3NlcyBpdC4AWW91ciBhcHBsaWNhdGlvbiBjYW4gcmVuZGVyIGEgZGlmZmVyZW50IG1vdXNlIGN1cnNvciBiYXNlZCBvbiB3aGF0IEltR3VpOjpHZXRNb3VzZUN1cnNvcigpIHJldHVybnMuIElmIHNvZnR3YXJlIGN1cnNvciByZW5kZXJpbmcgKGlvLk1vdXNlRHJhd0N1cnNvcikgaXMgc2V0IEltR3VpIHdpbGwgZHJhdyB0aGUgcmlnaHQgY3Vyc29yIGZvciB5b3UsIG90aGVyd2lzZSB5b3VyIGJhY2tlbmQgbmVlZHMgdG8gaGFuZGxlIGl0LgBIZWxsbyBmcm9tIFN0YWNrZWQgVGhlIEZpcnN0ClVzaW5nIHN0eWxlLkNvbG9yc1tJbUd1aUNvbF9Nb2RhbFdpbmRvd0RpbUJnXSBiZWhpbmQgaXQuAFlvdSBjYW4gdXNlIEltR3VpOjpHZXRNb3VzZURyYWdEZWx0YSgwKSB0byBxdWVyeSBmb3IgdGhlIGRyYWdnZWQgYW1vdW50IG9uIGFueSB3aWRnZXQuAERpc2FibGUgQ1RSTCtDbGljayBvciBFbnRlciBrZXkgYWxsb3dpbmcgdG8gaW5wdXQgdGV4dCBkaXJlY3RseSBpbnRvIHRoZSB3aWRnZXQuAFJldHVybiB0byBpbnB1dCB0ZXh0IGludG8gYSB3aWRnZXQuAFNwYWNlIHRvIGFjdGl2YXRlIGEgd2lkZ2V0LgBZb3UgY2FuIGFwcGx5IGFyaXRobWV0aWMgb3BlcmF0b3JzICssKiwvIG9uIG51bWVyaWNhbCB2YWx1ZXMuCiAgZS5nLiBbIDEwMCBdLCBpbnB1dCAnKjInLCByZXN1bHQgYmVjb21lcyBbIDIwMCBdClVzZSArLSB0byBzdWJ0cmFjdC4AWW91IGNhbiBhcHBseSBhcml0aG1ldGljIG9wZXJhdG9ycyArLCosLyBvbiBudW1lcmljYWwgdmFsdWVzLgpVc2UgKy0gdG8gc3VidHJhY3QuAFVzZSBTZXRTY3JvbGxIZXJlWCgpIG9yIFNldFNjcm9sbEZyb21Qb3NYKCkgdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gaG9yaXpvbnRhbCBwb3NpdGlvbi4KCkJlY2F1c2UgdGhlIGNsaXBwaW5nIHJlY3RhbmdsZSBvZiBtb3N0IHdpbmRvdyBoaWRlcyBoYWxmIHdvcnRoIG9mIFdpbmRvd1BhZGRpbmcgb24gdGhlIGxlZnQvcmlnaHQsIHVzaW5nIFNldFNjcm9sbEZyb21Qb3NYKCsxKSB3aWxsIHVzdWFsbHkgcmVzdWx0IGluIGNsaXBwZWQgdGV4dCB3aGVyZWFzIHRoZSBlcXVpdmFsZW50IFNldFNjcm9sbEZyb21Qb3NZKCsxKSB3b3VsZG4ndC4AVGhlIEJhY2tncm91bmQgZHJhdyBsaXN0IHdpbGwgYmUgcmVuZGVyZWQgYmVsb3cgZXZlcnkgRGVhciBJbUd1aSB3aW5kb3dzLgBUaGUgRm9yZWdyb3VuZCBkcmF3IGxpc3Qgd2lsbCBiZSByZW5kZXJlZCBvdmVyIGV2ZXJ5IERlYXIgSW1HdWkgd2luZG93cy4AQ1RSTCtNb3VzZSBXaGVlbCB0byB6b29tIHdpbmRvdyBjb250ZW50cy4AVXNpbmcgX1Jlc2l6YWJsZSArIF9TaXppbmdGaXhlZEZpdCBmbGFncy4KRml4ZWQtd2lkdGggY29sdW1ucyBnZW5lcmFsbHkgbWFrZXMgbW9yZSBzZW5zZSBpZiB5b3Ugd2FudCB0byB1c2UgaG9yaXpvbnRhbCBzY3JvbGxpbmcuCgpEb3VibGUtY2xpY2sgYSBjb2x1bW4gYm9yZGVyIHRvIGF1dG8tZml0IHRoZSBjb2x1bW4gdG8gaXRzIGNvbnRlbnRzLgBUaGUgIkV4YW1wbGVzIiBtZW51IGFib3ZlIGxlYWRzIHRvIG1vcmUgZGVtbyBjb250ZW50cy4AVGhvc2UgYXJlIG9sZCBzZXR0aW5ncyBwcm92aWRlZCBmb3IgY29udmVuaWVuY2UuCkhvd2V2ZXIsIHRoZSBfY29ycmVjdF8gd2F5IG9mIHNjYWxpbmcgeW91ciBVSSBpcyBjdXJyZW50bHkgdG8gcmVsb2FkIHlvdXIgZm9udCBhdCB0aGUgZGVzaWduZWQgc2l6ZSwgcmVidWlsZCB0aGUgZm9udCBhdGxhcywgYW5kIGNhbGwgc3R5bGUuU2NhbGVBbGxTaXplcygpIG9uIGEgcmVmZXJlbmNlIEltR3VpU3R5bGUgc3RydWN0dXJlLgpVc2luZyB0aG9zZSBzZXR0aW5ncyBoZXJlIHdpbGwgZ2l2ZSB5b3UgcG9vciBxdWFsaXR5IHJlc3VsdHMuAEhlcmUgd2UgdG9nZ2xlIHRoZSBjYXNpbmcgb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBvbiBldmVyeSBlZGl0cyArIGNvdW50IGVkaXRzLgBDb2x1bW5zIGRlZmF1bHQgdG8gX1dpZHRoU3RyZXRjaCB3aXRoIHNhbWUgd2VpZ2h0cy4AQ3VycmVudGx5IGFsbCB0aGlzIGRvZXMgaXMgdG8gbGlmdCB0aGUgMC4uMSBsaW1pdHMgb24gZHJhZ2dpbmcgd2lkZ2V0cy4AVGhpcyBpcyB0ZXN0aW5nIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgdGhhdCBnZXRzIGFwcGxpZWQgb24gdGV4dCB0byBrZWVwIGl0IGFsaWduZWQgd2l0aCB3aWRnZXRzLiBMaW5lcyBvbmx5IGNvbXBvc2VkIG9mIHRleHQgb3IgInNtYWxsIiB3aWRnZXRzIHVzZSBsZXNzIHZlcnRpY2FsIHNwYWNlIHRoYW4gbGluZXMgd2l0aCBmcmFtZWQgd2lkZ2V0cy4AQnkgT21hciBDb3JudXQgYW5kIGFsbCBEZWFyIEltR3VpIGNvbnRyaWJ1dG9ycy4ASW5zdHJ1Y3QgbmF2aWdhdGlvbiB0byBtb3ZlIHRoZSBtb3VzZSBjdXJzb3IuIFNlZSBjb21tZW50IGZvciBJbUd1aUNvbmZpZ0ZsYWdzX05hdkVuYWJsZVNldE1vdXNlUG9zLgBSaWdodC1jbGljayBvbiB0aGUgaW5kaXZpZHVhbCBjb2xvciB3aWRnZXQgdG8gc2hvdyBvcHRpb25zLgBBbHNvIHNlZSBTdHlsZS0+UmVuZGVyaW5nIGZvciByZW5kZXJpbmcgb3B0aW9ucy4ARGlzYWJsZSBjbGlwcGluZyByZWN0YW5nbGUgZm9yIGV2ZXJ5IGluZGl2aWR1YWwgY29sdW1ucyAocmVkdWNlIGRyYXcgY29tbWFuZCBjb3VudCwgaXRlbXMgd2lsbCBiZSBhYmxlIHRvIG92ZXJmbG93IGludG8gb3RoZXIgY29sdW1ucykuIEdlbmVyYWxseSBpbmNvbXBhdGlibGUgd2l0aCBTY3JvbGxGcmVlemUgb3B0aW9ucy4AVGhpcyBzZWN0aW9uIGFsbG93cyB5b3UgdG8gaW50ZXJhY3QgYW5kIHNlZSB0aGUgZWZmZWN0IG9mIHZhcmlvdXMgc2l6aW5nIHBvbGljaWVzIGRlcGVuZGluZyBvbiB3aGV0aGVyIFNjcm9sbCBpcyBlbmFibGVkIGFuZCB0aGUgY29udGVudHMgb2YgeW91ciBjb2x1bW5zLgBIZXJlIHdlIGFjdGl2YXRlIFNjcm9sbFksIHdoaWNoIHdpbGwgY3JlYXRlIGEgY2hpbGQgd2luZG93IGNvbnRhaW5lciB0byBhbGxvdyBob3N0aW5nIHNjcm9sbGFibGUgY29udGVudHMuCgpXZSBhbHNvIGRlbW9uc3RyYXRlIHVzaW5nIEltR3VpTGlzdENsaXBwZXIgdG8gdmlydHVhbGl6ZSB0aGUgc3VibWlzc2lvbiBvZiBtYW55IGl0ZW1zLgBIb2xkIENUUkwgYW5kIGNsaWNrIHRvIHNlbGVjdCBtdWx0aXBsZSBpdGVtcy4AU2V0ICdpby5Db25maWdGbGFncyB8PSBOYXZFbmFibGVLZXlib2FyZCcgZm9yIGtleWJvYXJkIGNvbnRyb2xzLgBFbmFibGUga2V5Ym9hcmQgY29udHJvbHMuAFNldCAnaW8uQ29uZmlnRmxhZ3MgfD0gTmF2RW5hYmxlR2FtZXBhZCcgZm9yIGdhbWVwYWQgY29udHJvbHMuAEVuYWJsZSBnYW1lcGFkIGNvbnRyb2xzLiBSZXF1aXJlIGJhY2tlbmQgdG8gc2V0IGlvLkJhY2tlbmRGbGFncyB8PSBJbUd1aUJhY2tlbmRGbGFnc19IYXNHYW1lcGFkLgoKUmVhZCBpbnN0cnVjdGlvbnMgaW4gaW1ndWkuY3BwIGZvciBkZXRhaWxzLgBDSksgdGV4dCB3aWxsIG9ubHkgYXBwZWFycyBpZiB0aGUgZm9udCB3YXMgbG9hZGVkIHdpdGggdGhlIGFwcHJvcHJpYXRlIENKSyBjaGFyYWN0ZXIgcmFuZ2VzLiBDYWxsIGlvLkZvbnQtPkFkZEZvbnRGcm9tRmlsZVRURigpIG1hbnVhbGx5IHRvIGxvYWQgZXh0cmEgY2hhcmFjdGVyIHJhbmdlcy4gUmVhZCBkb2NzL0ZPTlRTLm1kIGZvciBkZXRhaWxzLgBVc2luZyB0aGUgX1Jlc2l6YWJsZSBmbGFnIGF1dG9tYXRpY2FsbHkgZW5hYmxlcyB0aGUgX0JvcmRlcnNJbm5lclYgZmxhZyBhcyB3ZWxsLCB0aGlzIGlzIHdoeSB0aGUgcmVzaXplIGJvcmRlcnMgYXJlIHN0aWxsIHNob3dpbmcgd2hlbiB1bmNoZWNraW5nIHRoaXMuAENvbHVtbnMgZGVmYXVsdCB0byBfV2lkdGhTdHJldGNoIHdpdGggd2VpZ2h0cyBwcm9wb3J0aW9uYWwgdG8gdGhlaXIgd2lkdGhzLgBZb3UgY2FuIGRyYWcgZnJvbSB0aGUgY29sb3Igc3F1YXJlcy4AUHJlc3NlZCAlZCB0aW1lcy4AVGVzdCBvZiBkaWZmZXJlbnQgd2lkZ2V0cyByZWFjdCBhbmQgaW1wYWN0IHRoZSB3b3JrIHJlY3RhbmdsZSBncm93aW5nIHdoZW4gaG9yaXpvbnRhbCBzY3JvbGxpbmcgaXMgZW5hYmxlZC4KClVzZSAnTWV0cmljcy0+VG9vbHMtPlNob3cgd2luZG93cyByZWN0YW5nbGVzJyB0byB2aXN1YWxpemUgcmVjdGFuZ2xlcy4AVGhpcyB0ZXh0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHdyYXAgb24gdGhlIGVkZ2Ugb2YgdGhlIHdpbmRvdy4gVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gZm9yIHRleHQgd3JhcHBpbmcgZm9sbG93cyBzaW1wbGUgcnVsZXMgc3VpdGFibGUgZm9yIEVuZ2xpc2ggYW5kIHBvc3NpYmx5IG90aGVyIGxhbmd1YWdlcy4AVXNlIFRBQi9TSElGVCtUQUIgdG8gY3ljbGUgdGhyb3VnaCBrZXlib2FyZCBlZGl0YWJsZSBmaWVsZHMuAFVzaW5nIHRoZSBmb3JtYXQgc3RyaW5nIHBhcmFtZXRlciB0byBkaXNwbGF5IGEgbmFtZSBpbnN0ZWFkIG9mIHRoZSB1bmRlcmx5aW5nIGludGVnZXIuAFNlZSBleGFtcGxlIGFwcGxpY2F0aW9ucyBpbiB0aGUgZXhhbXBsZXMvIGZvbGRlci4AV2l0aCB0aGUgSW1HdWlDb2xvckVkaXRGbGFnc19Ob0lucHV0cyBmbGFnIHlvdSBjYW4gaGlkZSBhbGwgdGhlIHNsaWRlci90ZXh0IGlucHV0cy4KV2l0aCB0aGUgSW1HdWlDb2xvckVkaXRGbGFnc19Ob0xhYmVsIGZsYWcgeW91IGNhbiBwYXNzIGEgbm9uLWVtcHR5IGxhYmVsIHdoaWNoIHdpbGwgb25seSBiZSB1c2VkIGZvciB0aGUgdG9vbHRpcCBhbmQgcGlja2VyIHBvcHVwLgBCZWdpbkdyb3VwKCkgYmFzaWNhbGx5IGxvY2tzIHRoZSBob3Jpem9udGFsIHBvc2l0aW9uIGZvciBuZXcgbGluZS4gRW5kR3JvdXAoKSBidW5kbGVzIHRoZSB3aG9sZSBncm91cCBzbyB0aGF0IHlvdSBjYW4gdXNlICJpdGVtIiBmdW5jdGlvbnMgc3VjaCBhcyBJc0l0ZW1Ib3ZlcmVkKCkvSXNJdGVtQWN0aXZlKCkgb3IgU2FtZUxpbmUoKSBldGMuIG9uIHRoZSB3aG9sZSBncm91cC4AU2VlIGNvbW1lbnRzIGluIGltZ3VpLmNwcC4AV2luZG93IHdpbGwgcmVzaXplIGV2ZXJ5LWZyYW1lIHRvIHRoZSBzaXplIG9mIGl0cyBjb250ZW50LgpOb3RlIHRoYXQgeW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gcXVlcnkgdGhlIHdpbmRvdyBzaXplIHRvCm91dHB1dCB5b3VyIGNvbnRlbnQgYmVjYXVzZSB0aGF0IHdvdWxkIGNyZWF0ZSBhIGZlZWRiYWNrIGxvb3AuAFVzaW5nIFRhYmxlTmV4dFJvdygpICsgY2FsbGluZyBUYWJsZVNldENvbHVtbkluZGV4KCkgX2JlZm9yZV8gZWFjaCBjZWxsLCBpbiBhIGxvb3AuAENUUkwrTGVmdC9SaWdodCB0byB3b3JkIGp1bXAuAEVudGVyICdIRUxQJyBmb3IgaGVscC4AQnkgZGVmYXVsdCwgY29sb3JzIGFyZSBnaXZlbiB0byBDb2xvckVkaXQgYW5kIENvbG9yUGlja2VyIGluIFJHQiwgYnV0IEltR3VpQ29sb3JFZGl0RmxhZ3NfSW5wdXRIU1ZhbGxvd3MgeW91IHRvIHN0b3JlIGNvbG9ycyBhcyBIU1YgYW5kIHBhc3MgdGhlbSB0byBDb2xvckVkaXQgYW5kIENvbG9yUGlja2VyIGFzIEhTVi4gVGhpcyBjb21lcyB3aXRoIHRoZWFkZGVkIGJlbmVmaXQgdGhhdCB5b3UgY2FuIG1hbmlwdWxhdGUgaHVlIHZhbHVlcyB3aXRoIHRoZSBwaWNrZXIgZXZlbiB3aGVuIHNhdHVyYXRpb24gb3IgdmFsdWUgYXJlIHplcm8uAENUUkwrWixDVFJMK1kgdG8gdW5kby9yZWRvLgBUaGUgbG9nZ2luZyBBUEkgcmVkaXJlY3RzIGFsbCB0ZXh0IG91dHB1dCBzbyB5b3UgY2FuIGVhc2lseSBjYXB0dXJlIHRoZSBjb250ZW50IG9mIGEgd2luZG93IG9yIGEgYmxvY2suIFRyZWUgbm9kZXMgY2FuIGJlIGF1dG9tYXRpY2FsbHkgZXhwYW5kZWQuClRyeSBvcGVuaW5nIGFueSBvZiB0aGUgY29udGVudHMgYmVsb3cgaW4gdGhpcyB3aW5kb3cgYW5kIHRoZW4gY2xpY2sgb25lIG9mIHRoZSAiTG9nIFRvIiBidXR0b24uAFVzZSBTZXRTY3JvbGxIZXJlWSgpIG9yIFNldFNjcm9sbEZyb21Qb3NZKCkgdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gdmVydGljYWwgcG9zaXRpb24uAE9ubHkgdXNpbmcgVGFibGVOZXh0Q29sdW1uKCksIHdoaWNoIHRlbmRzIHRvIGJlIGNvbnZlbmllbnQgZm9yIHRhYmxlcyB3aGVyZSBldmVyeSBjZWxscyBjb250YWlucyB0aGUgc2FtZSB0eXBlIG9mIGNvbnRlbnRzLgpUaGlzIGlzIGFsc28gbW9yZSBzaW1pbGFyIHRvIHRoZSBvbGQgTmV4dENvbHVtbigpIGZ1bmN0aW9uIG9mIHRoZSBDb2x1bW5zIEFQSSwgYW5kIHByb3ZpZGVkIHRvIGZhY2lsaXRhdGUgdGhlIENvbHVtbnMtPlRhYmxlcyBBUEkgdHJhbnNpdGlvbi4AVGhlIHNhbWUgY29udGVudHMgY2FuIGJlIGFjY2Vzc2VkIGluICdUb29scy0+U3R5bGUgRWRpdG9yJyBvciBieSBjYWxsaW5nIHRoZSBTaG93U3R5bGVFZGl0b3IoKSBmdW5jdGlvbi4ARGVhciBJbUd1aSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UsIHNlZSBMSUNFTlNFIGZvciBtb3JlIGluZm9ybWF0aW9uLgBUaGlzIGlzIGEgY3VzdG9tIHBvcHVwIGZvciB1bnVzZWQgc3BhY2UgYWZ0ZXIgdGhlIGxhc3QgY29sdW1uLgBUaGlzIGlzIGEgbW9yZSB0eXBpY2FsIGxvb2tpbmcgdHJlZSB3aXRoIHNlbGVjdGFibGUgbm9kZXMuCkNsaWNrIHRvIHNlbGVjdCwgQ1RSTCtDbGljayB0byB0b2dnbGUsIGNsaWNrIG9uIGFycm93cyBvciBkb3VibGUtY2xpY2sgdG8gb3Blbi4AU3BlY2lmeSBoZWlnaHQgb2YgdGhlIFNlbGVjdGFibGUgaXRlbS4AVGFyZ2V0IFJvd0JnMCB0byBvdmVycmlkZSB0aGUgYWx0ZXJuYXRpbmcgb2RkL2V2ZW4gY29sb3JzLApUYXJnZXQgUm93QmcxIHRvIGJsZW5kIHdpdGggdGhlbS4AV2hlbiBkaXNhYmxpbmcgYW50aS1hbGlhc2luZyBsaW5lcywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gZGlzYWJsZSBib3JkZXJzIGluIHlvdXIgc3R5bGUgYXMgd2VsbC4AVGhpcyBkZW1vbnN0cmF0ZSBlbWJlZGRpbmcgYSB0YWJsZSBpbnRvIGFub3RoZXIgdGFibGUgY2VsbC4AQ1RSTCtBIG9yIGRvdWJsZS1jbGljayB0byBzZWxlY3QgYWxsLgBJbiB0aGUgQWR2YW5jZWQgZGVtbyB3ZSBvdmVycmlkZSB0aGUgcG9saWN5IG9mIGVhY2ggY29sdW1uIHNvIHRob3NlIHRhYmxlLXdpZGUgc2V0dGluZ3MgaGF2ZSBsZXNzIGVmZmVjdCB0aGF0IHR5cGljYWwuAGNhbiBmaXQgd2l0aGluIGEgdGV4dCBibG9jay4AQWx3YXlzIGNsYW1wIHZhbHVlIHRvIG1pbi9tYXggYm91bmRzIChpZiBhbnkpIHdoZW4gaW5wdXQgbWFudWFsbHkgd2l0aCBDVFJMK0NsaWNrLgBIZXJlIHdlIGFwcGVuZCAiLi4iIGVhY2ggdGltZSBUYWIgaXMgcHJlc3NlZC4gU2VlICdFeGFtcGxlcz5Db25zb2xlJyBmb3IgYSBtb3JlIG1lYW5pbmdmdWwgZGVtb25zdHJhdGlvbiBvZiB1c2luZyB0aGlzIGNhbGxiYWNrLgBIZXJlIHdlIHJlcGxhY2UgYW5kIHNlbGVjdCB0ZXh0IGVhY2ggdGltZSBVcC9Eb3duIGFyZSBwcmVzc2VkLiBTZWUgJ0V4YW1wbGVzPkNvbnNvbGUnIGZvciBhIG1vcmUgbWVhbmluZ2Z1bCBkZW1vbnN0cmF0aW9uIG9mIHVzaW5nIHRoaXMgY2FsbGJhY2suAEVuYWJsZSByZXNpemluZyBvZiB3aW5kb3dzIGZyb20gdGhlaXIgZWRnZXMgYW5kIGZyb20gdGhlIGxvd2VyLWxlZnQgY29ybmVyLgpUaGlzIHJlcXVpcmVzIChpby5CYWNrZW5kRmxhZ3MgJiBJbUd1aUJhY2tlbmRGbGFnc19IYXNNb3VzZUN1cnNvcnMpIGJlY2F1c2UgaXQgbmVlZHMgbW91c2UgY3Vyc29yIGZlZWRiYWNrLgBEaXNhYmxlIGRpc3RyaWJ1dGluZyByZW1haW5kZXIgd2lkdGggdG8gc3RyZXRjaGVkIGNvbHVtbnMgKHdpZHRoIGFsbG9jYXRpb24gb24gYSAxMDAtd2lkZSB0YWJsZSB3aXRoIDMgY29sdW1uczogV2l0aG91dCB0aGlzIGZsYWc6IDMzLDMzLDM0LiBXaXRoIHRoaXMgZmxhZzogMzMsMzMsMzMpLiBXaXRoIGxhcmdlciBudW1iZXIgb2YgY29sdW1ucywgcmVzaXppbmcgd2lsbCBhcHBlYXIgdG8gYmUgbGVzcyBzbW9vdGguAERpc2FibGUgdGhlIGluZGVudGluZyBvZiB0cmVlIG5vZGVzIHNvIGRlbW8gdGFibGVzIGNhbiB1c2UgdGhlIGZ1bGwgd2luZG93IHdpZHRoLgBVc2luZyBUYWJsZVNldHVwQ29sdW1uKCkgdG8gc2V0dXAgZGVmYXVsdCB3aWR0aC4AQmUgbWluZGZ1bCB0aGF0IHVzaW5nIHJpZ2h0LWFsaWdubWVudCAoZS5nLiBzaXplLnggPSAtRkxUX01JTikgY3JlYXRlcyBhIGZlZWRiYWNrIGxvb3Agd2hlcmUgY29udGVudHMgd2lkdGggY2FuIGZlZWQgaW50byBhdXRvLWNvbHVtbiB3aWR0aCBjYW4gZmVlZCBpbnRvIGNvbnRlbnRzIHdpZHRoLgBDb2x1bW5zIGRlZmF1bHQgdG8gX1dpZHRoRml4ZWQgKGlmIHJlc2l6YWJsZSkgb3IgX1dpZHRoQXV0byAoaWYgbm90IHJlc2l6YWJsZSksIG1hdGNoaW5nIGNvbnRlbnRzIHdpZHRoLgBGaXhlZCB3aWR0aC4AV2lsbCBjYWxsIHRoZSBJTV9ERUJVR19CUkVBSygpIG1hY3JvIHRvIGJyZWFrIGluIGRlYnVnZ2VyLgpXYXJuaW5nOiBJZiB5b3UgZG9uJ3QgaGF2ZSBhIGRlYnVnZ2VyIGF0dGFjaGVkLCB0aGlzIHdpbGwgcHJvYmFibHkgY3Jhc2guAFVzaW5nIFRhYmxlU2V0dXBDb2x1bW4oKSB0byBhbHRlciByZXNpemluZyBwb2xpY3kgb24gYSBwZXItY29sdW1uIGJhc2lzLgoKV2hlbiBjb21iaW5pbmcgRml4ZWQgYW5kIFN0cmV0Y2ggY29sdW1ucywgZ2VuZXJhbGx5IHlvdSBvbmx5IHdhbnQgb25lLCBtYXliZSB0d28gdHJhaWxpbmcgY29sdW1ucyB0byB1c2UgX1dpZHRoU3RyZXRjaC4AVGhlIGxhenkgZG9nIGlzIGEgZ29vZCBkb2cuIFRoaXMgcGFyYWdyYXBoIHNob3VsZCBmaXQgd2l0aGluICUuMGYgcGl4ZWxzLiBUZXN0aW5nIGEgMSBjaGFyYWN0ZXIgd29yZC4gVGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4AVXNpbmcgSW1HdWlJbnB1dFRleHRGbGFnc19DYWxsYmFja1Jlc2l6ZSB0byB3aXJlIHlvdXIgY3VzdG9tIHN0cmluZyB0eXBlIHRvIElucHV0VGV4dCgpLgoKU2VlIG1pc2MvY3BwL2ltZ3VpX3N0ZGxpYi5oIGZvciBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGZvciBzdGQ6OnN0cmluZy4AUHJlc3MgRVNDIHRvIGFib3J0IHBpY2tpbmcuAFdlIG9mdGVuIHdhbnQgb3V0ZXIgcGFkZGluZyBhY3RpdmF0ZWQgd2hlbiBhbnkgdXNpbmcgZmVhdHVyZXMgd2hpY2ggbWFrZXMgdGhlIGVkZ2VzIG9mIGEgY29sdW1uIHZpc2libGU6CmUuZy46Ci0gQm9yZGVyT3V0ZXJWCi0gYW55IGZvcm0gb2Ygcm93IHNlbGVjdGlvbgpCZWNhdXNlIG9mIHRoaXMsIGFjdGl2YXRpbmcgQm9yZGVyT3V0ZXJWIHNldHMgdGhlIGRlZmF1bHQgdG8gUGFkT3V0ZXJYLiBVc2luZyBQYWRPdXRlclggb3IgTm9QYWRPdXRlclggeW91IGNhbiBvdmVycmlkZSB0aGUgZGVmYXVsdC4KCkFjdHVhbCBwYWRkaW5nIHZhbHVlcyBhcmUgdXNpbmcgc3R5bGUuQ2VsbFBhZGRpbmcuCgpJbiB0aGlzIGRlbW8gd2UgZG9uJ3Qgc2hvdyBob3Jpem9udGFsIGJvcmRlcnMgdG8gZW1waGFzaXMgaG93IHRoZXkgZG9uJ3QgYWZmZWN0IGRlZmF1bHQgaG9yaXpvbnRhbCBwYWRkaW5nLgBSZWFkIEZBUSBhbmQgZG9jcy9GT05UUy5tZCBmb3IgZGV0YWlscyBvbiBmb250IGxvYWRpbmcuAFRoaXMgaXMgYW5vdGhlciBjaGlsZCB3aW5kb3cgZm9yIHRlc3RpbmcgdGhlIF9DaGlsZFdpbmRvd3MgZmxhZy4AVGhpcyBpcyB3aW5kb3cgMS4KTXkgdGl0bGUgaXMgdGhlIHNhbWUgYXMgd2luZG93IDIsIGJ1dCBteSBpZGVudGlmaWVyIGlzIHVuaXF1ZS4AVGhpcyBpcyB3aW5kb3cgMi4KTXkgdGl0bGUgaXMgdGhlIHNhbWUgYXMgd2luZG93IDEsIGJ1dCBteSBpZGVudGlmaWVyIGlzIHVuaXF1ZS4AQ2xpY2sgYW5kIGRyYWcgdG8gZWRpdCB2YWx1ZS4KSG9sZCBTSElGVC9BTFQgZm9yIGZhc3Rlci9zbG93ZXIgZWRpdC4KRG91YmxlLWNsaWNrIG9yIENUUkwrY2xpY2sgdG8gaW5wdXQgdmFsdWUuAFNldHRpbmcgc3R5bGUuQ2VsbFBhZGRpbmcgdG8gKDAsMCkgb3IgYSBjdXN0b20gdmFsdWUuAEFzIHdpdGggZXZlcnkgd2lkZ2V0cyBpbiBkZWFyIGltZ3VpLCB3ZSBuZXZlciBtb2RpZnkgdmFsdWVzIHVubGVzcyB0aGVyZSBpcyBhIHVzZXIgaW50ZXJhY3Rpb24uCllvdSBjYW4gb3ZlcnJpZGUgdGhlIGNsYW1waW5nIGxpbWl0cyBieSB1c2luZyBDVFJMK0NsaWNrIHRvIGlucHV0IGEgdmFsdWUuAENUUkwrWC9DL1YgdG8gdXNlIGNsaXBib2FyZCBjdXQvY29weS9wYXN0ZS4AQXJyb3cga2V5cyB0byBuYXZpZ2F0ZS4AU2hvd2Nhc2UgdXNpbmcgUHVzaEl0ZW1XaWR0aCgpIGFuZCBob3cgaXQgaXMgcHJlc2VydmVkIG9uIGEgcGVyLWNvbHVtbiBiYXNpcy4KCk5vdGUgdGhhdCBvbiBhdXRvLXJlc2l6aW5nIG5vbi1yZXNpemFibGUgZml4ZWQgY29sdW1ucywgcXVlcnlpbmcgdGhlIGNvbnRlbnQgd2lkdGggZm9yIGUuZy4gcmlnaHQtYWxpZ25tZW50IGRvZXNuJ3QgbWFrZSBzZW5zZS4AU2hvd2Nhc2UgdXNpbmcgU3RyZXRjaCBjb2x1bW5zICsgU2Nyb2xsWCB0b2dldGhlcjogdGhpcyBpcyByYXRoZXIgdW51c3VhbCBhbmQgb25seSBtYWtlcyBzZW5zZSB3aGVuIHNwZWNpZnlpbmcgYW4gJ2lubmVyX3dpZHRoJyBmb3IgdGhlIHRhYmxlIQpXaXRob3V0IGFuIGV4cGxpY2l0IHZhbHVlLCBpbm5lcl93aWR0aCBpcyA9PSBvdXRlcl9zaXplLnggYW5kIHRoZXJlZm9yZSB1c2luZyBTdHJldGNoIGNvbHVtbnMgKyBTY3JvbGxYIHRvZ2V0aGVyIGRvZXNuJ3QgbWFrZSBzZW5zZS4AVXNlIGRlZmF1bHQgc2l6aW5nIHBvbGljeToKLSBJbUd1aVRhYmxlRmxhZ3NfU2l6aW5nRml4ZWRGaXQgaWYgU2Nyb2xsWCBpcyBvbiBvciBpZiBob3N0IHdpbmRvdyBoYXMgSW1HdWlXaW5kb3dGbGFnc19BbHdheXNBdXRvUmVzaXplLgotIEltR3VpVGFibGVGbGFnc19TaXppbmdTdHJldGNoU2FtZSBvdGhlcndpc2UuAFNhdmUvUmV2ZXJ0IGluIGxvY2FsIG5vbi1wZXJzaXN0ZW50IHN0b3JhZ2UuIERlZmF1bHQgQ29sb3JzIGRlZmluaXRpb24gYXJlIG5vdCBhZmZlY3RlZC4gVXNlICJFeHBvcnQiIGJlbG93IHRvIHNhdmUgdGhlbSBzb21ld2hlcmUuAEkgYW0gdGhlIGxhc3Qgb25lIGhlcmUuAEFuIGV4dHJhIGxpbmUgaGVyZS4AV2UgYXJlIGNvbG9yaXppbmcgY2VsbHMgdG8gQjEtPkMyIGhlcmUuAFRoZSBUZXh0RGlzYWJsZWQgY29sb3IgaXMgc3RvcmVkIGluIEltR3VpU3R5bGUuAEltR3VpVGFibGVGbGFnc19Sb3dCZyBhdXRvbWF0aWNhbGx5IHNldHMgUm93QmcwIHRvIGFsdGVybmF0aXZlIGNvbG9ycyBwdWxsZWQgZnJvbSB0aGUgU3R5bGUuAFRoaXMgd2luZG93IGhhcyBhIGNoYW5naW5nIHRpdGxlLgAlKnNIZWxsbywgc2FpbG9yISBNYWtpbmcgdGhpcyBsaW5lIGxvbmcgZW5vdWdoIGZvciB0aGUgZXhhbXBsZS4AVGhpcyB0ZXh0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHdyYXAgb24gdGhlIGVkZ2Ugb2YgdGhlIHdvcmsgcmVjdGFuZ2xlLgBTZXRDb2xvckVkaXRPcHRpb25zKCkgaXMgZGVzaWduZWQgdG8gYWxsb3cgeW91IHRvIHNldCBib290LXRpbWUgZGVmYXVsdC4KV2UgZG9uJ3QgaGF2ZSBQdXNoL1BvcCBmdW5jdGlvbnMgYmVjYXVzZSB5b3UgY2FuIGZvcmNlIG9wdGlvbnMgb24gYSBwZXItd2lkZ2V0IGJhc2lzIGlmIG5lZWRlZCxhbmQgdGhlIHVzZXIgY2FuIGNoYW5nZSBub24tZm9yY2VkIG9uZXMgd2l0aCB0aGUgb3B0aW9ucyBtZW51LgpXZSBkb24ndCBoYXZlIGEgZ2V0dGVyIHRvIGF2b2lkZW5jb3VyYWdpbmcgeW91IHRvIHBlcnNpc3RlbnRseSBzYXZlIHZhbHVlcyB0aGF0IGFyZW4ndCBmb3J3YXJkLWNvbXBhdGlibGUuAE1ha2Ugb3V0ZXIgaGVpZ2h0IHN0b3AgZXhhY3RseSBhdCBvdXRlcl9zaXplLnkgKHByZXZlbnQgYXV0by1leHRlbmRpbmcgdGFibGUgcGFzdCB0aGUgbGltaXQpLgoKT25seSBhdmFpbGFibGUgd2hlbiBTY3JvbGxYL1Njcm9sbFkgYXJlIGRpc2FibGVkLiBEYXRhIGJlbG93IHRoZSBsaW1pdCB3aWxsIGJlIGNsaXBwZWQgYW5kIG5vdCB2aXNpYmxlLgBDb2x1bW5zIGFyZSBhbGwgdGhlIHNhbWUgd2lkdGgsIG1hdGNoaW5nIHRoZSBtYXhpbXVtIGNvbnRlbnRzIHdpZHRoLgpJbXBsaWNpdGx5IGRpc2FibGUgSW1HdWlUYWJsZUZsYWdzX1Jlc2l6YWJsZSBhbmQgZW5hYmxlIEltR3VpVGFibGVGbGFnc19Ob0tlZXBDb2x1bW5zVmlzaWJsZS4ARXh0ZW5kIGhpdCBhcmVhIHRvIGFsbCBhdmFpbGFibGUgd2lkdGggaW5zdGVhZCBvZiBhbGxvd2luZyBtb3JlIGl0ZW1zIHRvIGJlIGxhaWQgb3V0IGFmdGVyIHRoZSBub2RlLgBVc2VyIGNhbiByaWdodC1jbGljayB0aGUgcGlja2VyIHRvIGNoYW5nZSBtb2RlLgBOQjogQ3Vyc29yICYgc2VsZWN0aW9uIGFyZSBwcmVzZXJ2ZWQgd2hlbiByZWZvY3VzaW5nIGxhc3QgdXNlZCBpdGVtIGluIGNvZGUuAE1vZGFsIHdpbmRvd3MgYXJlIGxpa2UgcG9wdXBzIGJ1dCB0aGUgdXNlciBjYW5ub3QgY2xvc2UgdGhlbSBieSBjbGlja2luZyBvdXRzaWRlLgBUaG9zZSBmbGFncyBhcmUgc2V0IGJ5IHRoZSBiYWNrZW5kcyAoaW1ndWlfaW1wbF94eHggZmlsZXMpIHRvIHNwZWNpZnkgdGhlaXIgY2FwYWJpbGl0aWVzLgpIZXJlIHdlIGV4cG9zZSB0aGVuIGFzIHJlYWQtb25seSBmaWVsZHMgdG8gYXZvaWQgYnJlYWtpbmcgaW50ZXJhY3Rpb25zIHdpdGggeW91ciBiYWNrZW5kLgBNYWtlIG91dGVyIHdpZHRoIGF1dG8tZml0IHRvIGNvbHVtbnMsIG92ZXJyaWRpbmcgb3V0ZXJfc2l6ZS54IHZhbHVlLgoKT25seSBhdmFpbGFibGUgd2hlbiBTY3JvbGxYL1Njcm9sbFkgYXJlIGRpc2FibGVkIGFuZCBTdHJldGNoIGNvbHVtbnMgYXJlIG5vdCB1c2VkLgBPbmx5IGF2YWlsYWJsZSBpZiBTY3JvbGxYIGlzIGRpc2FibGVkLgBOb3RlOiBzb21lIG1lbW9yeSBidWZmZXJzIGhhdmUgYmVlbiBjb21wYWN0ZWQvZnJlZWQuAE11bHRpcGxlIHRhYmxlcyB3aXRoIHRoZSBzYW1lIGlkZW50aWZpZXIgd2lsbCBzaGFyZSB0aGVpciBzZXR0aW5ncywgd2lkdGgsIHZpc2liaWxpdHksIG9yZGVyIGV0Yy4AVGhpcyBleGFtcGxlIGltcGxlbWVudHMgYSBjb25zb2xlIHdpdGggYmFzaWMgY29sb3JpbmcsIGNvbXBsZXRpb24gKFRBQiBrZXkpIGFuZCBoaXN0b3J5IChVcC9Eb3duIGtleXMpLiBBIG1vcmUgZWxhYm9yYXRlIGltcGxlbWVudGF0aW9uIG1heSB3YW50IHRvIHN0b3JlIGVudHJpZXMgYWxvbmcgd2l0aCBleHRyYSBkYXRhIHN1Y2ggYXMgdGltZXN0YW1wLCBlbWl0dGVyLCBldGMuAEkgYW0gYW4gb2RkIHRhYi4ATG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuAFRoaXMgZXhhbXBsZSBzaG93cyBob3cgeW91IG1heSBpbXBsZW1lbnQgYSBwcm9wZXJ0eSBlZGl0b3IgdXNpbmcgdHdvIGNvbHVtbnMuCkFsbCBvYmplY3RzL2ZpZWxkcyBkYXRhIGFyZSBkdW1taWVzIGhlcmUuClJlbWVtYmVyIHRoYXQgaW4gbWFueSBzaW1wbGUgY2FzZXMsIHlvdSBjYW4gdXNlIEltR3VpOjpTYW1lTGluZSh4eHgpIHRvIHBvc2l0aW9uCnlvdXIgY3Vyc29yIGhvcml6b250YWxseSBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBDb2x1bW5zKCkgQVBJLgBGaWxlIE1lbnUuLgBCYXNlbGluZSBvZiBidXR0b24gd2lsbCBsb29rIG1pc2FsaWduZWQgd2l0aCB0ZXh0Li4AU2VsZWN0Li4AQW5kIG5vdyBzb21lIHRleHR1cmVkIGJ1dHRvbnMuLgBTdGFja2VkIG1vZGFscy4uAFNvbWUgJXMgdGV4dCAlZCwlZApPdmVyIHR3byBsaW5lcy4uAENvcHkgYXMuLgBTYXZlIEFzLi4AQ29sdW1uICVkIG9yZGVyICVkICclcyc6IG9mZnNldCAlKy4yZiB0byAlKy4yZiVzCkVuYWJsZWQ6ICVkLCBWaXNpYmxlWC9ZOiAlZC8lZCwgUmVxdWVzdE91dHB1dDogJWQsIFNraXBJdGVtczogJWQsIERyYXdDaGFubmVsczogJWQsJWQKV2lkdGhHaXZlbjogJS4xZiwgUmVxdWVzdC9BdXRvOiAlLjFmLyUuMWYsIFN0cmV0Y2hXZWlnaHQ6ICUuM2YgKCUuMWYlJSkKTWluWDogJS4xZiwgTWF4WDogJS4xZiAoJSsuMWYpLCBDbGlwUmVjdDogJS4xZiB0byAlLjFmICgrJS4xZikKQ29udGVudFdpZHRoOiAlLjFmLCUuMWYsIEhlYWRlcnNVc2VkL0lkZWFsICUuMWYvJS4xZgpTb3J0OiAlZCVzLCBVc2VySUQ6IDB4JTA4WCwgRmxhZ3M6IDB4JTA0WDogJXMlcyVzLi4ASXRlbSBQaWNrZXIuLgBBZGQgYW5vdGhlciBtb2RhbC4uAERlbGV0ZS4uAFJlY3Vyc2UuLgBNb3JlLi4AVG9nZ2xlLi4ASXRlbSAlZC4uAGFub3RoZXIgb25lIG9mIHRob3NlIHRyZWUgbm9kZS4uLgBMaW5lICVkIENvbHVtbiAlZC4uLgBEZW1vbnN0cmF0ZSBtaXhpbmcgdGFibGUgY29udGV4dCBtZW51IChvdmVyIGhlYWRlciksIGl0ZW0gY29udGV4dCBidXR0b24gKG92ZXIgYnV0dG9uKSBhbmQgY3VzdG9tIHBlci1jb2x1bSBjb250ZXh0IG1lbnUgKG92ZXIgY29sdW1uIGJvZHkpLgBJZiBzY3JvbGxpbmcgaXMgZGlzYWJsZWQgKFNjcm9sbFggYW5kIFNjcm9sbFkgbm90IHNldCk6Ci0gVGhlIHRhYmxlIGlzIG91dHB1dCBkaXJlY3RseSBpbiB0aGUgcGFyZW50IHdpbmRvdy4KLSBPdXRlclNpemUueCA8IDAuMGYgd2lsbCByaWdodC1hbGlnbiB0aGUgdGFibGUuCi0gT3V0ZXJTaXplLnggPSAwLjBmIHdpbGwgbmFycm93IGZpdCB0aGUgdGFibGUgdW5sZXNzIHRoZXJlIGFyZSBhbnkgU3RyZXRjaCBjb2x1bW4uCi0gT3V0ZXJTaXplLnkgdGhlbiBiZWNvbWVzIHRoZSBtaW5pbXVtIHNpemUgZm9yIHRoZSB0YWJsZSwgd2hpY2ggd2lsbCBleHRlbmQgdmVydGljYWxseSBpZiB0aGVyZSBhcmUgbW9yZSByb3dzICh1bmxlc3MgTm9Ib3N0RXh0ZW5kWSBpcyBzZXQpLgBDbGljayBhbmQgZHJhZyBvbiBsb3dlciBjb3JuZXIgdG8gcmVzaXplIHdpbmRvdwooZG91YmxlLWNsaWNrIHRvIGF1dG8gZml0IHdpbmRvdyB0byBpdHMgY29udGVudHMpLgBEaXNhYmxlIHJvdW5kaW5nIHVuZGVybHlpbmcgdmFsdWUgdG8gbWF0Y2ggcHJlY2lzaW9uIG9mIHRoZSBmb3JtYXQgc3RyaW5nIChlLmcuICUuM2YgdmFsdWVzIGFyZSByb3VuZGVkIHRvIHRob3NlIDMgZGlnaXRzKS4AV2hlbiBTY3JvbGxYIGlzIGVuYWJsZWQsIHRoZSBkZWZhdWx0IHNpemluZyBwb2xpY3kgYmVjb21lcyBJbUd1aVRhYmxlRmxhZ3NfU2l6aW5nRml4ZWRGaXQsIGFzIGF1dG9tYXRpY2FsbHkgc3RyZXRjaGluZyBjb2x1bW5zIGRvZXNuJ3QgbWFrZSBtdWNoIHNlbnNlIHdpdGggaG9yaXpvbnRhbCBzY3JvbGxpbmcuCgpBbHNvIG5vdGUgdGhhdCBhcyBvZiB0aGUgY3VycmVudCB2ZXJzaW9uLCB5b3Ugd2lsbCBhbG1vc3QgYWx3YXlzIHdhbnQgdG8gZW5hYmxlIFNjcm9sbFkgYWxvbmcgd2l0aCBTY3JvbGxYLGJlY2F1c2UgdGhlIGNvbnRhaW5lciB3aW5kb3cgd29uJ3QgYXV0b21hdGljYWxseSBleHRlbmQgdmVydGljYWxseSB0byBmaXggY29udGVudHMgKHRoaXMgbWF5IGJlIGltcHJvdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucykuAEVuYWJsZSBsb2dhcml0aG1pYyBlZGl0aW5nIChtb3JlIHByZWNpc2lvbiBmb3Igc21hbGwgdmFsdWVzKS4AVVNFUjoKSG9sZCBTSElGVCBvciB1c2UgbW91c2UgdG8gc2VsZWN0IHRleHQuCkNUUkwrTGVmdC9SaWdodCB0byB3b3JkIGp1bXAuCkNUUkwrQSBvciBkb3VibGUtY2xpY2sgdG8gc2VsZWN0IGFsbC4KQ1RSTCtYLENUUkwrQyxDVFJMK1YgY2xpcGJvYXJkLgpDVFJMK1osQ1RSTCtZIHVuZG8vcmVkby4KRVNDQVBFIHRvIHJldmVydC4KClBST0dSQU1NRVI6CllvdSBjYW4gdXNlIHRoZSBJbUd1aUlucHV0VGV4dEZsYWdzX0NhbGxiYWNrUmVzaXplIGZhY2lsaXR5IGlmIHlvdSBuZWVkIHRvIHdpcmUgSW5wdXRUZXh0KCkgdG8gYSBkeW5hbWljIHN0cmluZyB0eXBlLiBTZWUgbWlzYy9jcHAvaW1ndWlfc3RkbGliLmggZm9yIGFuIGV4YW1wbGUgKHRoaXMgaXMgbm90IGRlbW9uc3RyYXRlZCBpbiBpbWd1aV9kZW1vLmNwcCkuAFRoZSAiVG9vbHMiIG1lbnUgYWJvdmUgZ2l2ZXMgYWNjZXNzIHRvOiBBYm91dCBCb3gsIFN0eWxlIEVkaXRvciwKYW5kIE1ldHJpY3MvRGVidWdnZXIgKGdlbmVyYWwgcHVycG9zZSBEZWFyIEltR3VpIGRlYnVnZ2luZyB0b29sKS4ARW5hYmxlIHR1cm5pbmcgRHJhZ1hYWCB3aWRnZXRzIGludG8gdGV4dCBpbnB1dCB3aXRoIGEgc2ltcGxlIG1vdXNlIGNsaWNrLXJlbGVhc2UgKHdpdGhvdXQgbW92aW5nKS4ARmFzdGVyIGxpbmVzIHVzaW5nIHRleHR1cmUgZGF0YS4gUmVxdWlyZSBiYWNrZW5kIHRvIHJlbmRlciB3aXRoIGJpbGluZWFyIGZpbHRlcmluZyAobm90IHBvaW50L25lYXJlc3QgZmlsdGVyaW5nKS4ASW5zdHJ1Y3QgRGVhciBJbUd1aSB0byByZW5kZXIgYSBtb3VzZSBjdXJzb3IgaXRzZWxmLiBOb3RlIHRoYXQgYSBtb3VzZSBjdXJzb3IgcmVuZGVyZWQgdmlhIHlvdXIgYXBwbGljYXRpb24gR1BVIHJlbmRlcmluZyBwYXRoIHdpbGwgZmVlbCBtb3JlIGxhZ2d5IHRoYW4gaGFyZHdhcmUgY3Vyc29yLCBidXQgd2lsbCBiZSBtb3JlIGluIHN5bmMgd2l0aCB5b3VyIG90aGVyIHZpc3VhbHMuCgpTb21lIGRlc2t0b3AgYXBwbGljYXRpb25zIG1heSB1c2UgYm90aCBraW5kcyBvZiBjdXJzb3JzIChlLmcuIGVuYWJsZSBzb2Z0d2FyZSBjdXJzb3Igb25seSB3aGVuIHJlc2l6aW5nL2RyYWdnaW5nIHNvbWV0aGluZykuAEFkanVzdCBpZiB5b3UgY2Fubm90IHNlZSB0aGUgZWRnZXMgb2YgeW91ciBzY3JlZW4gKGUuZy4gb24gYSBUViB3aGVyZSBzY2FsaW5nIGhhcyBub3QgYmVlbiBjb25maWd1cmVkKS4AV2hlbiBzb3J0aW5nIGlzIGVuYWJsZWQ6IGhvbGQgc2hpZnQgd2hlbiBjbGlja2luZyBoZWFkZXJzIHRvIHNvcnQgb24gbXVsdGlwbGUgY29sdW1uLiBUYWJsZUdldFNvcnRTcGVjcygpIG1heSByZXR1cm4gc3BlY3Mgd2hlcmUgKFNwZWNzQ291bnQgPiAxKS4AV2hlbiBzb3J0aW5nIGlzIGVuYWJsZWQ6IGFsbG93IG5vIHNvcnRpbmcsIGRpc2FibGUgZGVmYXVsdCBzb3J0aW5nLiBUYWJsZUdldFNvcnRTcGVjcygpIG1heSByZXR1cm4gc3BlY3Mgd2hlcmUgKFNwZWNzQ291bnQgPT0gMCkuAENvbG9yRWRpdCBkZWZhdWx0cyB0byBkaXNwbGF5aW5nIFJHQiBpbnB1dHMgaWYgeW91IGRvbid0IHNwZWNpZnkgYSBkaXNwbGF5IG1vZGUsIGJ1dCB0aGUgdXNlciBjYW4gY2hhbmdlIGl0IHdpdGggYSByaWdodC1jbGljay4KCkNvbG9yUGlja2VyIGRlZmF1bHRzIHRvIGRpc3BsYXlpbmcgUkdCK0hTVitIZXggaWYgeW91IGRvbid0IHNwZWNpZnkgYSBkaXNwbGF5IG1vZGUuCgpZb3UgY2FuIGNoYW5nZSB0aGUgZGVmYXVsdHMgdXNpbmcgU2V0Q29sb3JFZGl0T3B0aW9ucygpLgBIb3Jpem9udGFsIHNjcm9sbGluZyBmb3IgYSB3aW5kb3cgaXMgZW5hYmxlZCB2aWEgdGhlIEltR3VpV2luZG93RmxhZ3NfSG9yaXpvbnRhbFNjcm9sbGJhciBmbGFnLgoKWW91IG1heSB3YW50IHRvIGFsc28gZXhwbGljaXRseSBzcGVjaWZ5IGNvbnRlbnQgd2lkdGggYnkgdXNpbmcgU2V0TmV4dFdpbmRvd0NvbnRlbnRXaWR0aCgpIGJlZm9yZSBCZWdpbigpLgAtIExvYWQgYWRkaXRpb25hbCBmb250cyB3aXRoIGlvLkZvbnRzLT5BZGRGb250RnJvbUZpbGVUVEYoKS4KLSBUaGUgZm9udCBhdGxhcyBpcyBidWlsdCB3aGVuIGNhbGxpbmcgaW8uRm9udHMtPkdldFRleERhdGFBc1hYWFgoKSBvciBpby5Gb250cy0+QnVpbGQoKS4KLSBSZWFkIEZBUSBhbmQgZG9jcy9GT05UUy5tZCBmb3IgbW9yZSBkZXRhaWxzLgotIElmIHlvdSBuZWVkIHRvIGFkZC9yZW1vdmUgZm9udHMgYXQgcnVudGltZSAoZS5nLiBmb3IgRFBJIGNoYW5nZSksIGRvIGl0IGJlZm9yZSBjYWxsaW5nIE5ld0ZyYW1lKCkuAFRlc3RpbmcgaG93IHZhcmlvdXMgdHlwZXMgb2YgaXRlbXMgYXJlIGludGVyYWN0aW5nIHdpdGggdGhlIElzSXRlbVhYWCBmdW5jdGlvbnMuIE5vdGUgdGhhdCB0aGUgYm9vbCByZXR1cm4gdmFsdWUgb2YgbW9zdCBJbUd1aSBmdW5jdGlvbiBpcyBnZW5lcmFsbHkgZXF1aXZhbGVudCB0byBjYWxsaW5nIEltR3VpOjpJc0l0ZW1Ib3ZlcmVkKCkuAFlvdSBjYW4gaW5wdXQgdmFsdWUgdXNpbmcgdGhlIHNjaWVudGlmaWMgbm90YXRpb24sCiAgZS5nLiAiMWUrOCIgYmVjb21lcyAiMTAwMDAwMDAwIi4ALS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0AICB3LyBkZWZhdWx0IHRocmVzaG9sZDogJWQsACAgdy8gemVybyB0aHJlc2hvbGQ6ICVkLAAgIHcvIGxhcmdlIHRocmVzaG9sZDogJWQsACsAKlVua25vd24gaXRlbSoAICpJbmFjdGl2ZSoAY29tYm8gMyAoYXJyYXkpAENvbHVtbiAlMDJkOiBPZmZzZXROb3JtICUuM2YgKD0gJS4xZiBweCkAZy5BY3RpdmVJZCA9PSBjb2x1bW5zLT5JRCArIEltR3VpSUQoY29sdW1uX2luZGV4KQAoeCkAU2VsZWN0YWJsZSAoc3BhbiByb3cpADogRHJhd0NtZDogKyVkIChpbiBzYW1lIHdpbmRvdykAcGFyZW50X3dpbmRvdyAhPSAwTCB8fCAhKGZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19DaGlsZFdpbmRvdykAKGZsYWdzICYgKEltR3VpQ29tYm9GbGFnc19Ob0Fycm93QnV0dG9uIHwgSW1HdWlDb21ib0ZsYWdzX05vUHJldmlldykpICE9IChJbUd1aUNvbWJvRmxhZ3NfTm9BcnJvd0J1dHRvbiB8IEltR3VpQ29tYm9GbGFnc19Ob1ByZXZpZXcpAChkZW1vIG1lbnUpAGlucHV0IHRleHQgKHcvIGhpbnQpAHBhc3N3b3JkICh3LyBoaW50KQBwYXlsb2FkLT5EYXRhU2l6ZSA9PSBzaXplb2YoaW50KQBEaXNhYmxlIG91dGVyLW1vc3QgcGFkZGluZyAoZGVmYXVsdCBpZiBJbUd1aVRhYmxlRmxhZ3NfQm9yZGVyc091dGVyViBpcyBub3Qgc2V0KQBFbmFibGUgb3V0ZXItbW9zdCBwYWRkaW5nIChkZWZhdWx0IGlmIEltR3VpVGFibGVGbGFnc19Cb3JkZXJzT3V0ZXJWIGlzIHNldCkASGFsZiBvZiBhdmFpbGFibGUgd2lkdGguCih+IHJpZ2h0LWN1cnNvcl9wb3MpCih3b3JrcyB3aXRoaW4gYSBjb2x1bW4gc2V0KQBsaXN0Ym94CihzaW5nbGUgc2VsZWN0KQBCdXR0b24gKHcvIHJlcGVhdCkARGlzYWJsZSB2ZXJ0aWNhbCBib3JkZXJzIGluIGNvbHVtbnMgQm9keSB1bnRpbCBob3ZlcmVkIGZvciByZXNpemUgKGJvcmRlcnMgd2lsbCBhbHdheXMgYXBwZWFycyBpbiBIZWFkZXJzKQBVc2luZyBJbUd1aTo6UHVzaENsaXBSZWN0KCk6CldpbGwgYWx0ZXIgSW1HdWkgaGl0LXRlc3RpbmcgbG9naWMgKyBJbURyYXdMaXN0IHJlbmRlcmluZy4KKHVzZSB0aGlzIGlmIHlvdSB3YW50IHlvdXIgY2xpcHBpbmcgcmVjdGFuZ2xlIHRvIGFmZmVjdCBpbnRlcmFjdGlvbnMpAFNldHRpbmdzIDB4JTA4WCAoJWQgY29sdW1ucykAVXNpbmcgSW1EcmF3TGlzdDo6QWRkVGV4dCgpIHdpdGggYSBmaW5lIENsaXBSZWN0OgpXaWxsIGFsdGVyIG9ubHkgdGhpcyBzcGVjaWZpYyBJbURyYXdMaXN0OjpBZGRUZXh0KCkgcmVuZGVyaW5nLgoodGhpcyBpcyBvZnRlbiB1c2VkIGludGVybmFsbHkgdG8gYXZvaWQgYWx0ZXJpbmcgdGhlIGNsaXBwaW5nIHJlY3RhbmdsZSBhbmQgbWluaW1pemUgZHJhdyBjYWxscykAVXNpbmcgSW1EcmF3TGlzdDo6UHVzaENsaXBSZWN0KCk6CldpbGwgYWx0ZXIgSW1EcmF3TGlzdCByZW5kZXJpbmcgb25seS4KKHVzZSB0aGlzIGFzIGEgc2hvcnRjdXQgaWYgeW91IGFyZSBvbmx5IHVzaW5nIEltRHJhd0xpc3QgY2FsbHMpAEJ1bGxldCBwb2ludCAzICh0d28gY2FsbHMpAEF0bGFzIHRleHR1cmUgKCVkeCVkIHBpeGVscykARHJhZ0Ryb3A6ICVkLCBTb3VyY2VJZCA9IDB4JTA4WCwgUGF5bG9hZCAiJXMiICglZCBieXRlcykAJWQgdmVydGljZXMsICVkIGluZGljZXMgKCVkIHRyaWFuZ2xlcykAIChEZXMpAHJhbmdlIGludCAobm8gYm91bmRzKQBiJWQgKCUuMDJmIHNlY3MpACVkICgweCVYKSAoJS4wMmYgc2VjcykARm9udDogIiVzIgolLjJmIHB4LCAlZCBnbHlwaHMsICVkIGZpbGUocykAZGVhciBpbWd1aSBzYXlzIGhlbGxvLiAoJXMpAFUrJTA0WC4uVSslMDRYICglZCAlcykAd2luZG93LT5EQy5OYXZMYXllckFjdGl2ZU1hc2tOZXh0ICYgKDEgPDwgbGF5ZXIpAGNvbWJvIDIgKG9uZS1saW5lcikAcGFzc3dvcmQgKGNsZWFyKQAoTWFpbiBtZW51IGJhcikAKFBvcHVwKQA0ICh0YWIgc2tpcCkAMyAodGFiIHNraXApACAoYXV0bykASGlyYWdhbmE6IOOBi+OBjeOBj+OBkeOBkyAoa2FraWt1a2VrbykAS2FuamlzOiDml6XmnKzoqp4gKG5paG9uZ28pACFpc190YWJfYnV0dG9uIHx8ICEodGFiX2Jhci0+U2VsZWN0ZWRUYWJJZCA9PSB0YWItPklEICYmIGlzX3RhYl9idXR0b24pACFwX29wZW4gfHwgIShmbGFncyAmIEltR3VpVGFiSXRlbUZsYWdzX0J1dHRvbikAISh0YWItPkZsYWdzICYgSW1HdWlUYWJJdGVtRmxhZ3NfQnV0dG9uKQBTaW1wbGUgb3ZlcmxheQppbiB0aGUgY29ybmVyIG9mIHRoZSBzY3JlZW4uCihyaWdodC1jbGljayB0byBjaGFuZ2UgcG9zaXRpb24pAGNvbWJvIDQgKGZ1bmN0aW9uKQBpdGVtc190eXBlIChmaXJzdCBjb2x1bW4pACAoRnJvemVuKQAoVXNlIEltR3VpOjpTYW1lTGluZSgpIHRvIGtlZXAgYWRkaW5nIGl0ZW1zIHRvIHRoZSByaWdodCBvZiB0aGUgcHJlY2VkaW5nIGl0ZW0pAChudWxsKQAoQ2xpY2sgYW5kIGRyYWcgdG8gc2Nyb2xsKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0Rpc3BsYXlNYXNrKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0lucHV0TWFzaykASW1Jc1Bvd2VyT2ZUd28oZmxhZ3MgJiBJbUd1aUNvbG9yRWRpdEZsYWdzX19QaWNrZXJNYXNrKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0RhdGFUeXBlTWFzaykAVHJlZU5vZGUgKHcvIGRvdWJsZS1jbGljaykAc2xpZGVyIGZsb2F0IChsb2cpAEVtYmVkIGV2ZXJ5dGhpbmcgaW5zaWRlIGEgY2hpbGQgd2luZG93IChmb3IgYWRkaXRpb25hbCB0ZXN0aW5nKQBFbmFibGUgYmxpbmtpbmcgY3Vyc29yIChvcHRpb25hbCBhcyBzb21lIHVzZXJzIGNvbnNpZGVyIGl0IHRvIGJlIGRpc3RyYWN0aW5nKQAoZmxhZ3MgJiAoSW1HdWlUYWJJdGVtRmxhZ3NfTGVhZGluZyB8IEltR3VpVGFiSXRlbUZsYWdzX1RyYWlsaW5nKSkgIT0gKEltR3VpVGFiSXRlbUZsYWdzX0xlYWRpbmcgfCBJbUd1aVRhYkl0ZW1GbGFnc19UcmFpbGluZykATW91c2UgcG9zOiAoJWcsICVnKQBNb3VzZSBkZWx0YTogKCVnLCAlZykAY2FsbGJhY2tfZGF0YS5CdWZUZXh0TGVuID09IChpbnQpc3RybGVuKGNhbGxiYWNrX2RhdGEuQnVmKQBEcmFnRmxvYXQgKC1pbmYgLT4gK2luZikARHJhZ0Zsb2F0ICgwIC0+ICtpbmYpAERpc2FibGUgaW5uZXIgcGFkZGluZyBiZXR3ZWVuIGNvbHVtbnMgKGRvdWJsZSBpbm5lciBwYWRkaW5nIGlmIEJvcmRlcnNPdXRlclYgaXMgb24sIHNpbmdsZSBpbm5lciBwYWRkaW5nIGlmIEJvcmRlcnNPdXRlclYgaXMgb2ZmKQAoJS4zZmYsICUuM2ZmLCAlLjNmZiwgJS4zZmYpAFNldE5leHRJdGVtV2lkdGgvUHVzaEl0ZW1XaWR0aCgtR2V0Q29udGVudFJlZ2lvbkF2YWlsKCkueCAqIDAuNWYpAFNldE5leHRJdGVtV2lkdGgvUHVzaEl0ZW1XaWR0aChHZXRDb250ZW50UmVnaW9uQXZhaWwoKS54ICogMC41ZikAVVY6ICglLjNmLCUuM2YpLT4oJS4zZiwlLjNmKQAjJTAyWCUwMlglMDJYClI6ICVkLCBHOiAlZCwgQjogJWQKKCUuM2YsICUuM2YsICUuM2YpACMlMDJYJTAyWCUwMlglMDJYClI6JWQsIEc6JWQsIEI6JWQsIEE6JWQKKCUuM2YsICUuM2YsICUuM2YsICUuM2YpAFBvczogKCUuMmYsJS4yZiktPiglLjJmLCUuMmYpAE1heDogKCUuMmYsICUuMmYpAE1pbjogKCUuMmYsICUuMmYpACh3OiAlNS4xZikATmF2UmVjdFJlbFswXTogKCUuMWYsJS4xZikoJS4xZiwlLjFmKQBQb3M6ICglLjFmLCUuMWYpLCBTaXplOiAoJS4xZiwlLjFmKSwgQ29udGVudFNpemUgKCUuMWYsJS4xZikgSWRlYWwgKCUuMWYsJS4xZikASW5wdXQgJWQ6ICclcycsIE92ZXJzYW1wbGU6ICglZCwlZCksIFBpeGVsU25hcEg6ICVkLCBPZmZzZXQ6ICglLjFmLCUuMWYpAE1vdXNlIFBvc2l0aW9uOiAoJS4xZiwlLjFmKQBXaWR0aDogJS4xZiAoTWluWDogJS4xZiwgTWF4WDogJS4xZikAUmV0dXJuIHZhbHVlID0gJWQKSXNJdGVtRm9jdXNlZCgpID0gJWQKSXNJdGVtSG92ZXJlZCgpID0gJWQKSXNJdGVtSG92ZXJlZChfQWxsb3dXaGVuQmxvY2tlZEJ5UG9wdXApID0gJWQKSXNJdGVtSG92ZXJlZChfQWxsb3dXaGVuQmxvY2tlZEJ5QWN0aXZlSXRlbSkgPSAlZApJc0l0ZW1Ib3ZlcmVkKF9BbGxvd1doZW5PdmVybGFwcGVkKSA9ICVkCklzSXRlbUhvdmVyZWQoX1JlY3RPbmx5KSA9ICVkCklzSXRlbUFjdGl2ZSgpID0gJWQKSXNJdGVtRWRpdGVkKCkgPSAlZApJc0l0ZW1BY3RpdmF0ZWQoKSA9ICVkCklzSXRlbURlYWN0aXZhdGVkKCkgPSAlZApJc0l0ZW1EZWFjdGl2YXRlZEFmdGVyRWRpdCgpID0gJWQKSXNJdGVtVmlzaWJsZSgpID0gJWQKSXNJdGVtQ2xpY2tlZCgpID0gJWQKSXNJdGVtVG9nZ2xlZE9wZW4oKSA9ICVkCkdldEl0ZW1SZWN0TWluKCkgPSAoJS4xZiwgJS4xZikKR2V0SXRlbVJlY3RNYXgoKSA9ICglLjFmLCAlLjFmKQpHZXRJdGVtUmVjdFNpemUoKSA9ICglLjFmLCAlLjFmKQAgIHcvIGRlZmF1bHQgdGhyZXNob2xkOiAoJS4xZiwgJS4xZikAICB3LyB6ZXJvIHRocmVzaG9sZDogKCUuMWYsICUuMWYpAGlvLk1vdXNlRGVsdGE6ICglLjFmLCAlLjFmKQBEcmF3Q21kOiU1ZCB0cmlzLCBUZXggMHglcCwgQ2xpcFJlY3QgKCU0LjBmLCU0LjBmKS0oJTQuMGYsJTQuMGYpAFJlY3Qgb2YgY2hpbGQgd2luZG93IGlzOiAoJS4wZiwlLjBmKSAoJS4wZiwlLjBmKQA6IERyYXdDbWQ6ICslZCAoaW4gY2hpbGQgd2luZG93KSwgU2Nyb2xsOiAoJS5mLyUuZikgKCUuZi8lLmYpAGlubmVyX3dpZHRoICh3aGVuIFNjcm9sbFggYWN0aXZlKQBTbGlkZXJzIChyZXZlcnNlKQBZb3UgY2FuIHVzZSB0aGUgSW1HdWlJbnB1dFRleHRGbGFnc19DYWxsYmFja1Jlc2l6ZSBmYWNpbGl0eSBpZiB5b3UgbmVlZCB0byB3aXJlIElucHV0VGV4dE11bHRpbGluZSgpIHRvIGEgZHluYW1pYyBzdHJpbmcgdHlwZS4gU2VlIG1pc2MvY3BwL2ltZ3VpX3N0ZGxpYi5oIGZvciBhbiBleGFtcGxlLiAoVGhpcyBpcyBub3QgZGVtb25zdHJhdGVkIGluIGltZ3VpX2RlbW8uY3BwIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byBpbmNsdWRlIDxzdHJpbmc+IGluIGhlcmUpAFZhbHVlID0gJS4zZiAoPC0tIHJpZ2h0LWNsaWNrIGhlcmUpACEoZmxhZ3MgJiBJbUd1aUlucHV0VGV4dEZsYWdzX011bHRpbGluZSkARHJhZyB0byByZW9yZGVyIGl0ZW1zIChzaW1wbGUpACVkIGFjdGl2ZSB3aW5kb3dzICglZCB2aXNpYmxlKQBjb25kID09IDAgfHwgSW1Jc1Bvd2VyT2ZUd28oY29uZCkAKFVudGl0bGVkKQAoJWQsJWQsJWQsJWQpAEFjdGl2ZSBEcmF3TGlzdHMgKCVkKQBDb2x1bW5zIHNldHMgKCVkKQBUYWIgQmFycyAoJWQpAFBvcHVwcyAoJWQpAEdseXBocyAoJWQpAFRhYmxlcyAoJWQpAERlYXIgSW1HdWkgJXMgKCVkKQBTZXR0aW5ncyBoYW5kbGVyczogKCVkKQBDb2x1bW5zQ291bnQ6ICVkIChtYXggJWQpAEZpbHRlciAoaW5jLC1leGMpACAoQXNjKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29tYm9GbGFnc19IZWlnaHRNYXNrXykASW1Jc1Bvd2VyT2ZUd28oZmxhZ3MgJiBJbUd1aVRhYmxlQ29sdW1uRmxhZ3NfV2lkdGhNYXNrXykAJyVjJyAoMHglMDRYKQBFbGxpcHNpcyBjaGFyYWN0ZXI6ICclYycgKFUrJTA0WCkARmFsbGJhY2sgY2hhcmFjdGVyOiAnJWMnIChVKyUwNFgpACVkICgweCVYKQBBcHBsaWNhdGlvbiBhdmVyYWdlICUuM2YgbXMvZnJhbWUgKCUuMWYgRlBTKQBTZXROZXh0SXRlbVdpZHRoL1B1c2hJdGVtV2lkdGgoLUZMVF9NSU4pACg/KQAoSW4gZnJvbnQtdG8tYmFjayBvcmRlcjopADEzLjAuMCAoaHR0cHM6Ly9naXRodWIuY29tL2xsdm0vbGx2bS1wcm9qZWN0IDMxZTc1NTEyMTc0ZTFiZGFhMjQyZWU1YzdmMzBmZTU2ZTY4YzM3NDgpAGNoYW5uZWxfbm8gPCAoNCArIDY0ICogMikARHJhZ0Zsb2F0ICgtaW5mIC0+IDEpAFNsaWRlckZsb2F0ICgwIC0+IDEpAERyYWdGbG9hdCAoMCAtPiAxKQBTZXROZXh0SXRlbVdpZHRoL1B1c2hJdGVtV2lkdGgoLTEwMCkAU2V0TmV4dEl0ZW1XaWR0aC9QdXNoSXRlbVdpZHRoKDEwMCkAQ3VzdG9tOiBGaXhlZCBTdGVwcyAoMTAwKQBTbGlkZXJJbnQgKDAgLT4gMTAwKQBEcmFnSW50ICgwIC0+IDEwMCkAKGRhdGEgIT0gMEwgJiYgZGF0YV9zaXplID4gMCkgfHwgKGRhdGEgPT0gMEwgJiYgZGF0YV9zaXplID09IDApAChZb3UgY2FuIGFsc28gcmlnaHQtY2xpY2sgbWUgdG8gb3BlbiB0aGUgc2FtZSBwb3B1cCBhcyBhYm92ZS4pAE5vdGUgdGhhbiB0aGUgZGVmYXVsdCBlbWJlZGRlZCBmb250IGlzIE5PVCBtZWFudCB0byBiZSBzY2FsZWQuCgpGb250IGFyZSBjdXJyZW50bHkgcmVuZGVyZWQgaW50byBiaXRtYXBzIGF0IGEgZ2l2ZW4gc2l6ZSBhdCB0aGUgdGltZSBvZiBidWlsZGluZyB0aGUgYXRsYXMuIFlvdSBtYXkgb3ZlcnNhbXBsZSB0aGVtIHRvIGdldCBzb21lIGZsZXhpYmlsaXR5IHdpdGggc2NhbGluZy4gWW91IGNhbiBhbHNvIHJlbmRlciBhdCBtdWx0aXBsZSBzaXplcyBhbmQgc2VsZWN0IHdoaWNoIG9uZSB0byB1c2UgYXQgcnVudGltZS4KCihHbGltbWVyIG9mIGhvcGU6IHRoZSBhdGxhcyBzeXN0ZW0gd2lsbCBiZSByZXdyaXR0ZW4gaW4gdGhlIGZ1dHVyZSB0byBtYWtlIHNjYWxpbmcgbW9yZSBmbGV4aWJsZS4pAFF1ZXJ5aW5nIFN0YXR1cyAoRWRpdGVkL0FjdGl2ZS9Gb2N1c2VkL0hvdmVyZWQgZXRjLikARmxhZ3M6IDB4JTA4WCAoJXMlcyVzJXMlcyVzJXMlcyVzLi4pACEoKGZsYWdzICYgSW1HdWlJbnB1dFRleHRGbGFnc19DYWxsYmFja0NvbXBsZXRpb24pICYmIChmbGFncyAmIEltR3VpSW5wdXRUZXh0RmxhZ3NfQWxsb3dUYWJJbnB1dCkpAGNoYW5uZWwtPl9DbWRCdWZmZXIuU2l6ZSA9PSAxICYmIG1lcmdlX2NsaXBfcmVjdC5Db250YWlucyhJbVJlY3QoY2hhbm5lbC0+X0NtZEJ1ZmZlclswXS5DbGlwUmVjdCkpAEltSXNQb3dlck9mVHdvKGZsYWdzICYgKEltR3VpU2VwYXJhdG9yRmxhZ3NfSG9yaXpvbnRhbCB8IEltR3VpU2VwYXJhdG9yRmxhZ3NfVmVydGljYWwpKQAhKChmbGFncyAmIEltR3VpSW5wdXRUZXh0RmxhZ3NfQ2FsbGJhY2tIaXN0b3J5KSAmJiAoZmxhZ3MgJiBJbUd1aUlucHV0VGV4dEZsYWdzX011bHRpbGluZSkpAGNvdW50ID09ICgoaW50KShzaXplb2YoUG9zKSAvIHNpemVvZigqKFBvcykpKSkAdXNlcl9rZXlfaW5kZXggPj0gMCAmJiB1c2VyX2tleV9pbmRleCA8ICgoaW50KShzaXplb2YoZy5JTy5LZXlzRG93bikgLyBzaXplb2YoKihnLklPLktleXNEb3duKSkpKQBrZXlfaW5kZXggPj0gMCAmJiBrZXlfaW5kZXggPCAoKGludCkoc2l6ZW9mKGcuSU8uS2V5c0Rvd24pIC8gc2l6ZW9mKCooZy5JTy5LZXlzRG93bikpKSkAYnV0dG9uID49IDAgJiYgYnV0dG9uIDwgKChpbnQpKHNpemVvZihnLklPLk1vdXNlRG93bikgLyBzaXplb2YoKihnLklPLk1vdXNlRG93bikpKSkAZy5TZXR0aW5nc1dpbmRvd3MuZW1wdHkoKQBnLkxvZ0J1ZmZlci5lbXB0eSgpAHBhc3N3b3JkX2ZvbnQtPkdseXBocy5lbXB0eSgpICYmIHBhc3N3b3JkX2ZvbnQtPkluZGV4QWR2YW5jZVguZW1wdHkoKSAmJiBwYXNzd29yZF9mb250LT5JbmRleExvb2t1cC5lbXB0eSgpAFNob3cgVHJhaWxpbmcgVGFiSXRlbUJ1dHRvbigpAFNob3cgTGVhZGluZyBUYWJJdGVtQnV0dG9uKCkAU21hbGxCdXR0b24oKQBpdGVtX2ZsYWdzID09IGcuSXRlbUZsYWdzU3RhY2suYmFjaygpAHAgPj0gYmVnaW4oKSAmJiBwIDwgZW5kKCkAIWcuTmF2U2NvcmluZ1JlY3QuSXNJbnZlcnRlZCgpAGZvbnQgJiYgZm9udC0+SXNMb2FkZWQoKQBnLkZvbnQtPklzTG9hZGVkKCkAVGFibGUgMHglMDhYICglZCBjb2x1bW5zLCBpbiAnJXMnKQBGaWx0ZXIgKCJpbmNsLC1leGNsIikgKCJlcnJvciIpACggKQBOYXZXaW5kb3c6ICclcycASG92ZXJlZFJvb3RXaW5kb3c6ICclcycASG92ZXJlZFdpbmRvd1VuZGVyTW92aW5nV2luZG93OiAnJXMnAEhvdmVyZWRXaW5kb3c6ICclcycAQWN0aXZlSWRXaW5kb3c6ICclcycATmF2V2luZG93aW5nVGFyZ2V0OiAnJXMnAE91dGVyUmVjdDogUG9zOiAoJS4xZiwlLjFmKSBTaXplOiAoJS4xZiwlLjFmKSBTaXppbmc6ICclcycAbmFtZSAhPSAwTCAmJiBuYW1lWzBdICE9ICdcMCcAb3AgPT0gJysnIHx8IG9wID09ICctJwA3NSUAMjUlACUuMGYlJQAlZCUlAE1heDogJS4xZiAlJQBNaW46ICUuMWYgJSUAIyMjAExpbmUgIwBGaWx0ZXIgdXNhZ2U6CiAgIiIgICAgICAgICBkaXNwbGF5IGFsbCBsaW5lcwogICJ4eHgiICAgICAgZGlzcGxheSBsaW5lcyBjb250YWluaW5nICJ4eHgiCiAgInh4eCx5eXkiICBkaXNwbGF5IGxpbmVzIGNvbnRhaW5pbmcgInh4eCIgb3IgInl5eSIKICAiLXh4eCIgICAgIGhpZGUgbGluZXMgY29udGFpbmluZyAieHh4IgAoa2V5X21vZF9mbGFncyA9PSAwIHx8IGcuSU8uS2V5TW9kcyA9PSBrZXlfbW9kX2ZsYWdzKSAmJiAiTWlzbWF0Y2hpbmcgaW8uS2V5Q3RybC9pby5LZXlTaGlmdC9pby5LZXlBbHQvaW8uS2V5U3VwZXIgdnMgaW8uS2V5TW9kcyIAaW8uS2V5TW9kcyA9PSBHZXRNZXJnZWRLZXlNb2RGbGFncygpICYmICJNaXNtYXRjaGluZyBpby5LZXlDdHJsL2lvLktleVNoaWZ0L2lvLktleUFsdC9pby5LZXlTdXBlciB2cyBpby5LZXlNb2RzIgBEb2N1bWVudCAiJXMiAHN0cmxlbih0eXBlKSA8ICgoaW50KShzaXplb2YocGF5bG9hZC5EYXRhVHlwZSkgLyBzaXplb2YoKihwYXlsb2FkLkRhdGFUeXBlKSkpKSAmJiAiUGF5bG9hZCB0eXBlIGNhbiBiZSBhdCBtb3N0IDMyIGNoYXJhY3RlcnMgbG9uZyIAdGFibGUtPkNvbHVtbnNDb3VudCA9PSBjb2x1bW5zX2NvdW50ICYmICJCZWdpblRhYmxlKCk6IENhbm5vdCBjaGFuZ2UgY29sdW1ucyBjb3VudCBtaWQtZnJhbWUgd2hpbGUgcHJlc2VydmluZyBzYW1lIElEIgAoZy5DdXJyZW50V2luZG93U3RhY2suU2l6ZSA9PSAxKSAmJiAiTWlzbWF0Y2hlZCBCZWdpbi9CZWdpbkNoaWxkIHZzIEVuZC9FbmRDaGlsZCBjYWxsczogZGlkIHlvdSBjYWxsIEVuZC9FbmRDaGlsZCB0b28gbXVjaD8iAEl0ZW1zQ291bnQgPT0gLTEgJiYgIkZvcmdvdCB0byBjYWxsIEVuZCgpLCBvciB0byBTdGVwKCkgdW50aWwgZmFsc2U/IgAoZy5GcmFtZUNvdW50ID09IDAgfHwgZy5GcmFtZUNvdW50RW5kZWQgPT0gZy5GcmFtZUNvdW50KSAmJiAiRm9yZ290IHRvIGNhbGwgUmVuZGVyKCkgb3IgRW5kRnJhbWUoKSBhdCB0aGUgZW5kIG9mIHRoZSBwcmV2aW91cyBmcmFtZT8iAChnLkN1cnJlbnRXaW5kb3dTdGFjay5TaXplID09IDEpICYmICJNaXNtYXRjaGVkIEJlZ2luL0JlZ2luQ2hpbGQgdnMgRW5kL0VuZENoaWxkIGNhbGxzOiBkaWQgeW91IGZvcmdldCB0byBjYWxsIEVuZC9FbmRDaGlsZD8iACh3aW5kb3ctPkZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19DaGlsZFdpbmRvdykgJiYgIk1pc21hdGNoZWQgTGlzdEJveEhlYWRlci9MaXN0Qm94Rm9vdGVyIGNhbGxzLiBEaWQgeW91IHRlc3QgdGhlIHJldHVybiB2YWx1ZSBvZiBMaXN0Qm94SGVhZGVyKCk/IgBnLldpdGhpbkZyYW1lU2NvcGUgJiYgIkZvcmdvdCB0byBjYWxsIEltR3VpOjpOZXdGcmFtZSgpPyIAZy5EcmFnRHJvcFdpdGhpblNvdXJjZSAmJiAiTm90IGFmdGVyIGEgQmVnaW5EcmFnRHJvcFNvdXJjZSgpPyIAZy5JTy5Gb250cy0+Rm9udHMuU2l6ZSA+IDAgJiYgIkZvbnQgQXRsYXMgbm90IGJ1aWx0LiBEaWQgeW91IGNhbGwgaW8uRm9udHMtPkdldFRleERhdGFBc1JHQkEzMigpIC8gR2V0VGV4RGF0YUFzQWxwaGE4KCk/IgBnLklPLkZvbnRzLT5Gb250c1swXS0+SXNMb2FkZWQoKSAmJiAiRm9udCBBdGxhcyBub3QgYnVpbHQuIERpZCB5b3UgY2FsbCBpby5Gb250cy0+R2V0VGV4RGF0YUFzUkdCQTMyKCkgLyBHZXRUZXhEYXRhQXNBbHBoYTgoKT8iAEdJbUd1aSAhPSAwTCAmJiAiTm8gY3VycmVudCBjb250ZXh0LiBEaWQgeW91IGNhbGwgSW1HdWk6OkNyZWF0ZUNvbnRleHQoKSBhbmQgSW1HdWk6OlNldEN1cnJlbnRDb250ZXh0KCkgPyIAX0N1cnJlbnQgPT0gMCAmJiBfQ291bnQgPD0gMSAmJiAiTmVzdGVkIGNoYW5uZWwgc3BsaXR0aW5nIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1c2Ugc2VwYXJhdGUgaW5zdGFuY2VzIG9mIEltRHJhd0xpc3RTcGxpdHRlci4iAGcuSU8uS2V5TWFwW0ltR3VpS2V5X1NwYWNlXSAhPSAtMSAmJiAiSW1HdWlLZXlfU3BhY2UgaXMgbm90IG1hcHBlZCwgcmVxdWlyZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24uIgBpbml0X3dpZHRoX29yX3dlaWdodCA8PSAwLjBmICYmICJDYW4gb25seSBzcGVjaWZ5IHdpZHRoL3dlaWdodCBpZiBzaXppbmcgcG9saWN5IGlzIHNldCBleHBsaWNpdGVseSBpbiBlaXRoZXIgVGFibGUgb3IgQ29sdW1uLiIAMCAmJiAiQ2Fubm90IHVzZSBJc1BvcHVwT3BlbigpIHdpdGggYSBzdHJpbmcgaWQgYW5kIEltR3VpUG9wdXBGbGFnc19BbnlQb3B1cExldmVsLiIAZy5TdHlsZS5XaW5kb3dNaW5TaXplLnggPj0gMS4wZiAmJiBnLlN0eWxlLldpbmRvd01pblNpemUueSA+PSAxLjBmICYmICJJbnZhbGlkIHN0eWxlIHNldHRpbmcuIgAoZmxhZ3MgPT0gMSB8fCAoZmxhZ3MgJiBJbUd1aVNsaWRlckZsYWdzX0ludmFsaWRNYXNrXykgPT0gMCkgJiYgIkludmFsaWQgSW1HdWlTbGlkZXJGbGFncyBmbGFncyEgSGFzIHRoZSAnZmxvYXQgcG93ZXInIGFyZ3VtZW50IGJlZW4gbWlzdGFrZW5seSBjYXN0IHRvIGZsYWdzPyBDYWxsIGZ1bmN0aW9uIHdpdGggSW1HdWlTbGlkZXJGbGFnc19Mb2dhcml0aG1pYyBmbGFncyBpbnN0ZWFkLiIAKGZsYWdzID09IDEgfHwgKGZsYWdzICYgSW1HdWlTbGlkZXJGbGFnc19JbnZhbGlkTWFza18pID09IDApICYmICJJbnZhbGlkIEltR3VpU2xpZGVyRmxhZ3MgZmxhZyEgIEhhcyB0aGUgJ2Zsb2F0IHBvd2VyJyBhcmd1bWVudCBiZWVuIG1pc3Rha2VubHkgY2FzdCB0byBmbGFncz8gQ2FsbCBmdW5jdGlvbiB3aXRoIEltR3VpU2xpZGVyRmxhZ3NfTG9nYXJpdGhtaWMgZmxhZ3MgaW5zdGVhZC4iAGcuSU8uS2V5TWFwW25dID49IC0xICYmIGcuSU8uS2V5TWFwW25dIDwgKChpbnQpKHNpemVvZihnLklPLktleXNEb3duKSAvIHNpemVvZigqKGcuSU8uS2V5c0Rvd24pKSkpICYmICJpby5LZXlNYXBbXSBjb250YWlucyBhbiBvdXQgb2YgYm91bmQgdmFsdWUgKG5lZWQgdG8gYmUgMC4uNTEyLCBvciAtMSBmb3IgdW5tYXBwZWQga2V5KSIAKGZsYWdzICYgSW1HdWlUYWJsZUNvbHVtbkZsYWdzX1N0YXR1c01hc2tfKSA9PSAwICYmICJJbGxlZ2FsIHRvIHBhc3MgU3RhdHVzTWFzayB2YWx1ZXMgdG8gVGFibGVTZXR1cENvbHVtbigpIgBJdGVtc0hlaWdodCA+IDAuMGYgJiYgIlVuYWJsZSB0byBjYWxjdWxhdGUgaXRlbSBoZWlnaHQhIEZpcnN0IGl0ZW0gaGFzbid0IG1vdmVkIHRoZSBjdXJzb3IgdmVydGljYWxseSEiAHRhYmxlLT5Jc0xheW91dExvY2tlZCA9PSBmYWxzZSAmJiAiTmVlZCB0byBjYWxsIFRhYmxlU2V0dXBDb2x1bW4oKSBiZWZvcmUgZmlyc3Qgcm93ISIAdGFibGUtPklzTGF5b3V0TG9ja2VkID09IGZhbHNlICYmICJOZWVkIHRvIGNhbGwgY2FsbCBUYWJsZVNldHVwQ29sdW1uKCkgYmVmb3JlIGZpcnN0IHJvdyEiAHN6X3ZlcnQgPT0gc2l6ZW9mKEltRHJhd1ZlcnQpICYmICJNaXNtYXRjaGVkIHN0cnVjdCBsYXlvdXQhIgBzel9pZHggPT0gc2l6ZW9mKHVuc2lnbmVkIGludCkgJiYgIk1pc21hdGNoZWQgc3RydWN0IGxheW91dCEiAHN6X3N0eWxlID09IHNpemVvZihJbUd1aVN0eWxlKSAmJiAiTWlzbWF0Y2hlZCBzdHJ1Y3QgbGF5b3V0ISIAc3pfaW8gPT0gc2l6ZW9mKEltR3VpSU8pICYmICJNaXNtYXRjaGVkIHN0cnVjdCBsYXlvdXQhIgBzel92ZWM0ID09IHNpemVvZihJbVZlYzQpICYmICJNaXNtYXRjaGVkIHN0cnVjdCBsYXlvdXQhIgBzel92ZWMyID09IHNpemVvZihJbVZlYzIpICYmICJNaXNtYXRjaGVkIHN0cnVjdCBsYXlvdXQhIgAwICYmICJDYWxsZWQgUHVzaFN0eWxlVmFyKCkgZmxvYXQgdmFyaWFudCBidXQgdmFyaWFibGUgaXMgbm90IGEgZmxvYXQhIgAodGFibGUtPkRlY2xDb2x1bW5zQ291bnQgPCB0YWJsZS0+Q29sdW1uc0NvdW50KSAmJiAiQ2FsbGVkIFRhYmxlU2V0dXBDb2x1bW4oKSB0b28gbWFueSB0aW1lcyEiAChnLkN1cnJlbnRXaW5kb3dTdGFjay5TaXplID4gMSkgJiYgIkNhbGxpbmcgRW5kKCkgdG9vIG1hbnkgdGltZXMhIgBJbUd1aTo6R2V0Q3VycmVudENvbnRleHQoKSAhPSAwTCAmJiAiTWlzc2luZyBkZWFyIGltZ3VpIGNvbnRleHQuIFJlZmVyIHRvIGV4YW1wbGVzIGFwcCEiAChnLkdyb3VwU3RhY2suU2l6ZSA9PSAwKSAmJiAiTWlzc2luZyBFbmRHcm91cCBjYWxsISIAKG91dGVyX3dpbmRvdy0+REMuSXRlbVdpZHRoU3RhY2suU2l6ZSA+PSB0YWJsZS0+SG9zdEJhY2t1cEl0ZW1XaWR0aFN0YWNrU2l6ZSkgJiYgIlRvbyBtYW55IFBvcEl0ZW1XaWR0aCEiAFNpemVPZkJlZ2luUG9wdXBTdGFjayA9PSBnLkJlZ2luUG9wdXBTdGFjay5TaXplICYmICJCZWdpblBvcHVwL0VuZFBvcHVwIG9yIEJlZ2luTWVudS9FbmRNZW51IE1pc21hdGNoISIAU2l6ZU9mRm9udFN0YWNrID49IGcuRm9udFN0YWNrLlNpemUgJiYgIlB1c2hGb250L1BvcEZvbnQgTWlzbWF0Y2ghIgBTaXplT2ZDb2xvclN0YWNrID49IGcuQ29sb3JTdGFjay5TaXplICYmICJQdXNoU3R5bGVDb2xvci9Qb3BTdHlsZUNvbG9yIE1pc21hdGNoISIAU2l6ZU9mU3R5bGVWYXJTdGFjayA+PSBnLlN0eWxlVmFyU3RhY2suU2l6ZSAmJiAiUHVzaFN0eWxlVmFyL1BvcFN0eWxlVmFyIE1pc21hdGNoISIAU2l6ZU9mR3JvdXBTdGFjayA9PSBnLkdyb3VwU3RhY2suU2l6ZSAmJiAiQmVnaW5Hcm91cC9FbmRHcm91cCBNaXNtYXRjaCEiAFNpemVPZklEU3RhY2sgPT0gd2luZG93LT5JRFN0YWNrLlNpemUgJiYgIlB1c2hJRC9Qb3BJRCBvciBUcmVlTm9kZS9UcmVlUG9wIE1pc21hdGNoISIAU2l6ZU9mRm9jdXNTY29wZVN0YWNrID09IGcuRm9jdXNTY29wZVN0YWNrLlNpemUgJiYgIlB1c2hGb2N1c1Njb3BlL1BvcEZvY3VzU2NvcGUgTWlzbWF0Y2ghIgBnLlN0eWxlLkFscGhhID49IDAuMGYgJiYgZy5TdHlsZS5BbHBoYSA8PSAxLjBmICYmICJJbnZhbGlkIHN0eWxlIHNldHRpbmchIgBnLlN0eWxlLkNpcmNsZVNlZ21lbnRNYXhFcnJvciA+IDAuMGYgJiYgIkludmFsaWQgc3R5bGUgc2V0dGluZyEiAGcuU3R5bGUuQ3VydmVUZXNzZWxsYXRpb25Ub2wgPiAwLjBmICYmICJJbnZhbGlkIHN0eWxlIHNldHRpbmchIgBzdHJjbXAodmVyc2lvbiwgIjEuODAiKSA9PSAwICYmICJNaXNtYXRjaGVkIHZlcnNpb24gc3RyaW5nISIAdGFibGUgIT0gMEwgJiYgIk9ubHkgY2FsbCBFbmRUYWJsZSgpIGlmIEJlZ2luVGFibGUoKSByZXR1cm5zIHRydWUhIgBnLklPLkRpc3BsYXlTaXplLnggPj0gMC4wZiAmJiBnLklPLkRpc3BsYXlTaXplLnkgPj0gMC4wZiAmJiAiSW52YWxpZCBEaXNwbGF5U2l6ZSB2YWx1ZSEiAChnLklPLkRlbHRhVGltZSA+IDAuMGYgfHwgZy5GcmFtZUNvdW50ID09IDApICYmICJOZWVkIGEgcG9zaXRpdmUgRGVsdGFUaW1lISIAY29sdW1uc19jb3VudCA+IDAgJiYgY29sdW1uc19jb3VudCA8PSA2NCAmJiAiT25seSAxLi42NCBjb2x1bW5zIGFsbG93ZWQhIgAoaW5uZXJfd2luZG93LT5JRFN0YWNrLmJhY2soKSA9PSB0YWJsZS0+SUQgKyB0YWJsZS0+SW5zdGFuY2VDdXJyZW50KSAmJiAiTWlzbWF0Y2hpbmcgUHVzaElEL1BvcElEISIAMCAmJiAiQ2FsbGVkIFB1c2hTdHlsZVZhcigpIEltVmVjMiB2YXJpYW50IGJ1dCB2YXJpYWJsZSBpcyBub3QgYSBJbVZlYzIhIgAodGFiX2JhciAhPSAwTCkgJiYgIk1pc21hdGNoZWQgQmVnaW5UYWJCYXIoKS9FbmRUYWJCYXIoKSEiACh0YWJfYmFyKSAmJiAiTmVlZHMgdG8gYmUgY2FsbGVkIGJldHdlZW4gQmVnaW5UYWJCYXIoKSBhbmQgRW5kVGFiQmFyKCkhIgAodGFiX2JhciAhPSAwTCkgJiYgIk5lZWRzIHRvIGJlIGNhbGxlZCBiZXR3ZWVuIEJlZ2luVGFiQmFyKCkgYW5kIEVuZFRhYkJhcigpISIAdGFibGUgIT0gMEwgJiYgIk5lZWQgdG8gY2FsbCBUYWJsZUhlYWRlcnNSb3coKSBhZnRlciBCZWdpblRhYmxlKCkhIgB0YWJsZSAhPSAwTCAmJiAiTmVlZCB0byBjYWxsIFRhYmxlSGVhZGVyKCkgYWZ0ZXIgQmVnaW5UYWJsZSgpISIAdGFibGUgIT0gMEwgJiYgIk5lZWQgdG8gY2FsbCBUYWJsZVNldHVwQ29sdW1uKCkgYWZ0ZXIgQmVnaW5UYWJsZSgpISIAKGcuV2l0aGluRW5kQ2hpbGQpICYmICJNdXN0IGNhbGwgRW5kQ2hpbGQoKSBhbmQgbm90IEVuZCgpISIAQmVsb3cgd2UgYXJlIGRpc3BsYXlpbmcgdGhlIGZvbnQgdGV4dHVyZSAod2hpY2ggaXMgdGhlIG9ubHkgdGV4dHVyZSB3ZSBoYXZlIGFjY2VzcyB0byBpbiB0aGlzIGRlbW8pLiBVc2UgdGhlICdJbVRleHR1cmVJRCcgdHlwZSBhcyBzdG9yYWdlIHRvIHBhc3MgcG9pbnRlcnMgb3IgaWRlbnRpZmllciB0byB5b3VyIG93biB0ZXh0dXJlIGRhdGEuIEhvdmVyIHRoZSB0ZXh0dXJlIGZvciBhIHpvb21lZCB2aWV3IQBDbGljayB0byBicmVhayBpbiBkZWJ1Z2dlciEAUHJlc3NlZCBVcCEASGVsbG8hAFByZXNzZWQgRG93biEAQmVsb3cgd2UgYXJlIHRlc3RpbmcgYWRkaW5nIG1lbnUgaXRlbXMgdG8gYSByZWd1bGFyIHdpbmRvdy4gSXQncyByYXRoZXIgdW51c3VhbCBidXQgc2hvdWxkIHdvcmshAFdlbGNvbWUgdG8gRGVhciBJbUd1aSEAU2VlIHRoZSBTaG93RGVtb1dpbmRvdygpIGNvZGUgaW4gaW1ndWlfZGVtby5jcHAuIDwtIHlvdSBhcmUgaGVyZSEAZGlzcGxheSB2ZXJ5IGltcG9ydGFudCBtZXNzYWdlIGhlcmUhAExpbmUgMSBoZWxsbwpMaW5lIDIgY2xpcCBtZSEAVGhhbmtzIGZvciBjbGlja2luZyBtZSEASGVsbG8gZnJvbSBTdGFja2VkIFRoZSBTZWNvbmQhAEhlbGxvLCB3b3JsZCEAV2FybmluZzogb3duaW5nIFdpbmRvdyBpcyBpbmFjdGl2ZS4gVGhpcyBEcmF3TGlzdCBpcyBub3QgYmVpbmcgcmVuZGVyZWQhAFRoaXMgaXMgdGhlICVzIHRhYiEAQ29sdW1ucygpIGlzIGFuIG9sZCBBUEkhIFByZWZlciB1c2luZyB0aGUgbW9yZSBmbGV4aWJsZSBhbmQgcG93ZXJmdWwgQmVnaW5UYWJsZSgpIEFQSSEATVkgQ1VTVE9NIENPTE9SIFBJQ0tFUiBXSVRIIEFOIEFNQVpJTkcgUEFMRVRURSEAQ2hpbGRNZW51IABOb1NhdmVkU2V0dGluZ3MgAFBvcHVwIABUb29sdGlwIABNb2RhbCAAV2lkdGggAFdpZHRoU3RyZXRjaCAATm9SZXNpemUgAENoaWxkIABXaWR0aEZpeGVkIABBTFQgAFNISUZUIABTVVBFUiAAQ1RSTCAATG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIAAjIAAgICAgIABUT0RPOiBGb250RGF0YSAlenUgJXp1CgAlM2Q6ICVzCgBUT0RPOiAlcwoALSAlcwoAIyAlcwoASW1DYWxsYmFja0Z1bmM6ICVwCgAlaSBUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nCgBSZWZTY2FsZT0lZwoAQ29sbGFwc2VkPSVkCgBQb3M9JWQsJWQKAFNpemU9JWQsJWQKAElzV2luZG93Rm9jdXNlZCgpID0gJWQKSXNXaW5kb3dGb2N1c2VkKF9DaGlsZFdpbmRvd3MpID0gJWQKSXNXaW5kb3dGb2N1c2VkKF9DaGlsZFdpbmRvd3N8X1Jvb3RXaW5kb3cpID0gJWQKSXNXaW5kb3dGb2N1c2VkKF9Sb290V2luZG93KSA9ICVkCklzV2luZG93Rm9jdXNlZChfQW55V2luZG93KSA9ICVkCgBJc1dpbmRvd0hvdmVyZWQoKSA9ICVkCklzV2luZG93SG92ZXJlZChfQWxsb3dXaGVuQmxvY2tlZEJ5UG9wdXApID0gJWQKSXNXaW5kb3dIb3ZlcmVkKF9BbGxvd1doZW5CbG9ja2VkQnlBY3RpdmVJdGVtKSA9ICVkCklzV2luZG93SG92ZXJlZChfQ2hpbGRXaW5kb3dzKSA9ICVkCklzV2luZG93SG92ZXJlZChfQ2hpbGRXaW5kb3dzfF9Sb290V2luZG93KSA9ICVkCklzV2luZG93SG92ZXJlZChfQ2hpbGRXaW5kb3dzfF9BbGxvd1doZW5CbG9ja2VkQnlQb3B1cCkgPSAlZApJc1dpbmRvd0hvdmVyZWQoX1Jvb3RXaW5kb3cpID0gJWQKSXNXaW5kb3dIb3ZlcmVkKF9BbnlXaW5kb3cpID0gJWQKAApgYGAKAFslc11bJXNdCgBbJXNdWzB4JTA4WCwlZF0KACVzICUwNGQ6IHBvcyAoJTguMmYsJTguMmYpLCB1diAoJS42ZiwlLjZmKSwgY29sICUwOFgKAEltVmVjNCogY29sb3JzID0gSW1HdWk6OkdldFN0eWxlKCkuQ29sb3JzOwoAY29sb3JzW0ltR3VpQ29sXyVzXSUqcz0gSW1WZWM0KCUuMmZmLCAlLjJmZiwgJS4yZmYsICUuMmZmKTsKAFdoaWxlIGlucHV0aW5nIHRleHQ6CgBQb3NzaWJsZSBtYXRjaGVzOgoAUmVmZXIgdG8gdGhlICJDb21ibyIgc2VjdGlvbiBiZWxvdyBmb3IgYW4gZXhwbGFuYXRpb24gb2YgdGhlIGZ1bGwgQmVnaW5Db21iby9FbmRDb21ibyBBUEksIGFuZCBkZW1vbnN0cmF0aW9uIG9mIHZhcmlvdXMgZmxhZ3MuCgBEaXNwbGF5IGFsbCBjaGFyYWN0ZXJzIGFzICcqJy4KRGlzYWJsZSBjbGlwYm9hcmQgY3V0IGFuZCBjb3B5LgpEaXNhYmxlIGxvZ2dpbmcuCgBDbGljayBvbiB0aGUgY29sb3Igc3F1YXJlIHRvIG9wZW4gYSBjb2xvciBwaWNrZXIuCkNsaWNrIGFuZCBob2xkIHRvIHVzZSBkcmFnIGFuZCBkcm9wLgpSaWdodC1jbGljayBvbiB0aGUgY29sb3Igc3F1YXJlIHRvIHNob3cgb3B0aW9ucy4KQ1RSTCtjbGljayBvbiBpbmRpdmlkdWFsIGNvbXBvbmVudCB0byBpbnB1dCB2YWx1ZS4KAENsaWNrIG9uIHRoZSBjb2xvciBzcXVhcmUgdG8gb3BlbiBhIGNvbG9yIHBpY2tlci4KQ1RSTCtjbGljayBvbiBpbmRpdmlk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ICAgICAgICAgLVhYWC5YWFgtICBYLi4uWCAgLSAgICAgICAgIFguLi5YICAgICAgICAgLVguLi4uWCAgICAgICAgICAgLSAgICAgICAgICAgWC4uLi5YLSAgICBYLi5YICAgICAgICAgWCAgICAgICAgICAgLSAgWC5YICAtIFguLi4uLlggLSAgICAgICAgWC4uLi4uWCAgICAgICAgLVguLi5YICAgICAgICAgICAgLSAgICAgICAgICAgIFguLi5YLSAgICBYLi5YICAgICAgICAgWFggICAgICAgICAgLSAgWC5YICAtWC4uLi4uLi5YLSAgICAgICBYLi4uLi4uLlggICAgICAgLVguLlguWCAgICAgICAgICAgLSAgICAgICAgICAgWC5YLi5YLSAgICBYLi5YICAgICAgICAgWC5YICAgICAgICAgLSAgWC5YICAtWFhYWC5YWFhYLSAgICAgICBYWFhYLlhYWFggICAgICAgLVguWCBYLlggICAgICAgICAgLSAgICAgICAgICBYLlggWC5YLSAgICBYLi5YWFggICAgICAgWC4uWCAgICAgICAgLSAgWC5YICAtICAgWC5YICAgLSAgICAgICAgICBYLlggICAgICAgICAgLVhYICAgWC5YICAgICAgICAgLSAgICAgICAgIFguWCAgIFhYLSAgICBYLi5YLi5YWFggICAgWC4uLlggICAgICAgLSAgWC5YICAtICAgWC5YICAgLSAgICBYWCAgICBYLlggICAgWFggICAgLSAgICAgIFguWCAgICAgICAgLSAgICAgICAgWC5YICAgICAgLSAgICBYLi5YLi5YLi5YWCAgWC4uLi5YICAgICAgLSAgWC5YICAtICAgWC5YICAgLSAgIFguWCAgICBYLlggICAgWC5YICAgLSAgICAgICBYLlggICAgICAgLSAgICAgICBYLlggICAgICAgLSAgICBYLi5YLi5YLi5YLlggWC4uLi4uWCAgICAgLSAgWC5YICAtICAgWC5YICAgLSAgWC4uWCAgICBYLlggICAgWC4uWCAgLSAgICAgICAgWC5YICAgICAgLSAgICAgIFguWCAgICAgICAgLVhYWCBYLi5YLi5YLi5YLi5YWC4uLi4uLlggICAgLSAgWC5YICAtICAgWC5YICAgLSBYLi4uWFhYWFhYLlhYWFhYWC4uLlggLSAgICAgICAgIFguWCAgIFhYLVhYICAgWC5YICAgICAgICAgLVguLlhYLi4uLi4uLi5YLi5YWC4uLi4uLi5YICAgLSAgWC5YICAtICAgWC5YICAgLVguLi4uLi4uLi4uLi4uLi4uLi4uLi5YLSAgICAgICAgICBYLlggWC5YLVguWCBYLlggICAgICAgICAgLVguLi5YLi4uLi4uLi4uLi5YWC4uLi4uLi4uWCAgLSAgWC5YICAtICAgWC5YICAgLSBYLi4uWFhYWFhYLlhYWFhYWC4uLlggLSAgICAgICAgICAgWC5YLi5YLVguLlguWCAgICAgICAgICAgLSBYLi4uLi4uLi4uLi4uLi5YWC4uLi4uLi4uLlggLVhYWC5YWFgtICAgWC5YICAgLSAgWC4uWCAgICBYLlggICAgWC4uWCAgLSAgICAgICAgICAgIFguLi5YLVguLi5YICAgICAgICAgICAgLSAgWC4uLi4uLi4uLi4uLi5YWC4uLi4uLi4uLi5YLVguLi4uLlgtICAgWC5YICAgLSAgIFguWCAgICBYLlggICAgWC5YICAgLSAgICAgICAgICAgWC4uLi5YLVguLi4uWCAgICAgICAgICAgLSAgWC4uLi4uLi4uLi4uLi5YWC4uLi4uLlhYWFhYLVhYWFhYWFgtICAgWC5YICAgLSAgICBYWCAgICBYLlggICAgWFggICAgLSAgICAgICAgICBYLi4uLi5YLVguLi4uLlggICAgICAgICAgLSAgIFguLi4uLi4uLi4uLi5YWC4uLlguLlggICAgLS0tLS0tLS0tICAgWC5YICAgLSAgICAgICAgICBYLlggICAgICAgICAgLSAgICAgICAgICBYWFhYWFhYLVhYWFhYWFggICAgICAgICAgLSAgIFguLi4uLi4uLi4uLlggWC4uWCBYLi5YICAgLSAgICAgICAtWFhYWC5YWFhYLSAgICAgICBYWFhYLlhYWFggICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgICBYLi4uLi4uLi4uLlggWC5YICBYLi5YICAgLSAgICAgICAtWC4uLi4uLi5YLSAgICAgICBYLi4uLi4uLlggICAgICAgLSAgICBYWCAgICAgICAgICAgWFggICAgLSAgICAgICAgICAgLSAgICBYLi4uLi4uLi4uLlggWFggICAgWC4uWCAgLSAgICAgICAtIFguLi4uLlggLSAgICAgICAgWC4uLi4uWCAgICAgICAgLSAgIFguWCAgICAgICAgICAgWC5YICAgLSAgICAgICAgICAgLSAgICAgWC4uLi4uLi4uWCAgICAgICAgWC4uWCAgICAgICAgICAtICBYLi4uWCAgLSAgICAgICAgIFguLi5YICAgICAgICAgLSAgWC4uWCAgICAgICAgICAgWC4uWCAgLSAgICAgICAgICAgLSAgICAgWC4uLi4uLi4uWCAgICAgICAgIFhYICAgICAgICAgICAtICAgWC5YICAgLSAgICAgICAgICBYLlggICAgICAgICAgLSBYLi4uWFhYWFhYWFhYWFhYWC4uLlggLSAgICAgICAgICAgLSAgICAgWFhYWFhYWFhYWCAgLS0tLS0tLS0tLS0tICAgICAgICAtICAgIFggICAgLSAgICAgICAgICAgWCAgICAgICAgICAgLVguLi4uLi4uLi4uLi4uLi4uLi4uLi5YLSAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBYLi4uWFhYWFhYWFhYWFhYWC4uLlggLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSAgWC4uWCAgICAgICAgICAgWC4uWCAgLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSAgIFguWCAgICAgICAgICAgWC5YICAgLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSAgICBYWCAgICAgICAgICAgWFggICAgLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAa5AAAGSPAACGjgAAS44AABeNAADajAAA0YwAAK6MAAC8iwAAmosAAJKLAAAAAAAAL2UAADFJAABzNAAAzjQAAL9qAACAggAAdgQAALxIAAAxPAAAP24AALVqAAB9BAAANj8AAAAAAAAAAAAAAAAAAGuQAABkjwAAho4AAEuOAAAXjQAA2owAANGMAACujAAAv4sAAJqLAACViwAAQooAACaKAAB7iQAAYWFhYQBiYmJiAGNjY2MAZGRkZABlZWVlAAAAAAAAAAAAAAAAAAAAACduAADDFQAA9AQAAEE/AABTaW4AU2F3AABBdXRvL0N1cnJlbnQATm9uZQBSR0IgT25seQBIU1YgT25seQBIZXggT25seQAAQXV0by9DdXJyZW50AEh1ZSBiYXIgKyBTViByZWN0AEh1ZSB3aGVlbCArIFNWIHRyaWFuZ2xlAAAAHBEAAC8/AAAp9gAAHQgAAMkfAABzEAAAqx8AAPWZAABwmAAAUkQAAHtvAABB/QAA5DwAACwIAAAAAAAAAAAAAL9qAACAggAAdgQAALxIAABrkAAAZI8AAIaOAABLjgAAAAAAP83MTD7NzEw/mpkZPwAAgD4AAAAAAAAAAAAAAABNOgAALBIBAK40AAAoEgEA8UMAAAAAAAAAAAAAAAAAAMccAAAsEgEArjQAACgSAQBVHAAAAAAAAAAAAAAAAAAApEQAAAtIAACpRgAAA0gAALtKAABTaG93IHdpZHRoAFNob3J0IFRleHQATG9uZyBUZXh0AEJ1dHRvbgBGaWxsIEJ1dHRvbgBJbnB1dFRleHQAAE5vbmUAUmVkAEdyYWRpZW50AABSb3dCZzAAUm93QmcxAABOb25lAEJsdWUAAADMFQAAVzYAAP////8BAAAAAwAAAGh/AABXNgAA/////wQAAAACAAAAfywAAFc2AAD/////BgAAAAMAAADySAAA72oAAAAEAAD//////////5kOAADkagAAeOABAP//////////jQ4AAORqAABA9QYA//////////+STQAA+2oAAHgZAwD//////////4pNAAD7agAA+BkDAP//////////n00AAPtqAAD4GgMA//////////8AAAAAAAAAAAAAAACAggAAv2oAAHYEAAA2PwAARxoAAH0EAAAxPAAAvEgAAD9uAAC1agAAiAQA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ANF0ngBXnb0qgHBSD///PicKAAAAZAAAAOgDAAAQJwAAoIYBAEBCDwCAlpgAAOH1BRgAAAA1AAAAcQAAAGv////O+///kr///wAAAAAAAAAA/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNMAAAAAIIMBACIEAAAjBAAAJAQAAFN0OWV4Y2VwdGlvbgAAAABMhgEAEIMBAAAAAABMgwEAsQMAACUEAAAmBAAAU3QxMWxvZ2ljX2Vycm9yAHSGAQA8gwEAIIMBAAAAAACAgwEAsQMAACcEAAAmBAAAU3QxMmxlbmd0aF9lcnJvcgAAAAB0hgEAbIMBAEyDAQBTdDl0eXBlX2luZm8AAAAATIYBAIyDAQBOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQAAAAB0hgEApIMBAJyDAQBOMTBfX2N4eGFiaXYxMTdfX2NsYXNzX3R5cGVfaW5mb0UAAAB0hgEA1IMBAMiDAQBOMTBfX2N4eGFiaXYxMTdfX3BiYXNlX3R5cGVfaW5mb0UAAAB0hgEABIQBAMiDAQBOMTBfX2N4eGFiaXYxMTlfX3BvaW50ZXJfdHlwZV9p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';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmMemory = Module['asm']['memory'];
    assert(wasmMemory, "memory not found in wasm exports");
    // This assertion doesn't hold when emscripten is run in --post-link
    // mode.
    // TODO(sbc): Read INITIAL_MEMORY out of the wasm file in post-link mode.
    //assert(wasmMemory.buffer.byteLength === 16777216);
    updateGlobalBufferAndViews(wasmMemory.buffer);

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      var result = WebAssembly.instantiate(binary, info);
      return result;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync().catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + 16) + 16;
    }

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }
  function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - 16;
  
      this.set_type = function(type) {
        HEAP32[(((this.ptr)+(4))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAP32[(((this.ptr)+(4))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAP32[(((this.ptr)+(8))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAP32[(((this.ptr)+(8))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[((this.ptr)>>2)] = refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(12))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(12))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(13))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(13))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s NO_DISABLE_EXCEPTION_CATCHING or -s EXCEPTION_CATCHING_ALLOWED=[..] to catch.";
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var SYSCALLS = {mappings:{},buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
  }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes = undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var awaitingDependencies = {};
  
  var registeredTypes = {};
  
  var typeDependencies = {};
  
  var char_0 = 48;
  
  var char_9 = 57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var BindingError = undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  var InternalError = undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  var finalizationGroup = false;
  
  function detachFinalizer(handle) {}
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  var delayFunction = undefined;
  
  var deletionQueue = [];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  var registeredPointers = {};
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  /** @constructor */
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances = {};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module["dynCall_" + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args)
    }
  function getDynCaller(sig, ptr) {
      assert(sig.includes('j'), 'getDynCaller should only be called with i64 sigs')
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError = undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Insert empty slot for context type (argTypes[1]).
              argTypes.splice(1, 0, null);
              classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
              return [];
          });
          return [];
      });
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for (var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
  
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (methodName.startsWith("@@")) {
              methodName = Symbol[methodName.substring(2)];
          }
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }
  function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = embind__requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  var emval_free_list = [];
  
  var emval_handle_array = [{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
      switch (value) {
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.includes('unsigned'));
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }

  function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          var type = types[i];
          args[i] = type['readValueFromPointer'](argv);
          argv += type['argPackAdvance'];
      }
  
      var rv = handle.apply(undefined, args);
      return __emval_register(rv);
    }

  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }
  
  var emval_symbols = {};
  function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  var emval_methodCallers = [];
  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  function __emval_get_property(handle, key) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      return __emval_register(handle[key]);
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function __emval_new_array() {
      return __emval_register([]);
    }

  function __emval_new_cstring(v) {
      return __emval_register(getStringOrSymbol(v));
    }

  function __emval_new_object() {
      return __emval_register({});
    }

  function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

  function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }

  function __emval_strictly_equals(first, second) {
      first = requireHandle(first);
      second = requireHandle(second);
      return first === second;
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function __emval_typeof(handle) {
      handle = requireHandle(handle);
      return __emval_register(typeof handle);
    }

  function _abort() {
      abort();
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        err('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3. Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      // In CAN_ADDRESS_2GB mode, stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate full 4GB Wasm memories, the size will wrap
      // back to 0 bytes in Wasm side for any code that deals with heap sizes, which would require special casing all heap size related code to treat
      // 0 specially.
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  function _fd_close(fd) {
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    }

  function _fd_read(fd, iov, iovcnt, pnum) {
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
  }

  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)] = num
      return 0;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__assert_fail": ___assert_fail,
  "__cxa_allocate_exception": ___cxa_allocate_exception,
  "__cxa_atexit": ___cxa_atexit,
  "__cxa_throw": ___cxa_throw,
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_class_property": __embind_register_class_property,
  "_embind_register_constant": __embind_register_constant,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "_emval_as": __emval_as,
  "_emval_call": __emval_call,
  "_emval_call_void_method": __emval_call_void_method,
  "_emval_decref": __emval_decref,
  "_emval_get_method_caller": __emval_get_method_caller,
  "_emval_get_property": __emval_get_property,
  "_emval_incref": __emval_incref,
  "_emval_new_array": __emval_new_array,
  "_emval_new_cstring": __emval_new_cstring,
  "_emval_new_object": __emval_new_object,
  "_emval_run_destructors": __emval_run_destructors,
  "_emval_set_property": __emval_set_property,
  "_emval_strictly_equals": __emval_strictly_equals,
  "_emval_take_value": __emval_take_value,
  "_emval_typeof": __emval_typeof,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "setTempRet0": _setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() { abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() { abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() { abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignMemory")) Module["alignMemory"] = function() { abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() { abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but keepRuntimeAlive() is set (counter=' + runtimeKeepaliveCounter + ') due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)';
      readyPromiseReject(msg);
      err(msg);
    }
  } else {
    exitRuntime();
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();







  return Module.ready
}
);
})();
if (true)
  module.exports = Module;
else {}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,